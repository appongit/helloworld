<?php


/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates createtemplate
 * and open the template in the editor. hasPipeDrive signeddocuments
 */ 

namespace App\Http\Controllers;
use Illuminate\Http\Request;
use SoapClient;
use Input;
use Auth;
use File;
use Config;
use Response;
use Carbon\Carbon;
use App\Http\Controllers\userController;
use App\Http\Controllers\sendcontractController;
use App\Http\Controllers\usertemplateController;
use App\Http\Controllers\homeController;
use App\Http\Controllers\overviewController;
use App\Http\Controllers\superofficeController;
use App\Http\Controllers\billingController;
use App\Http\Controllers\paymentController;
use App\Models\Offerdocs;
use App\Models\Oauthclients;
use App\Models\Template;
use App\Models\Offerattachment;
use App\Models\Signwithweb;
use App\Models\Offersent;
use App\Models\Offersent_data;
use App\Models\Offersentdetails;
use App\Models\Usertemplatephoto;
use App\Models\Pdftemplate;
use App\Models\recipient;
use App\Models\Zapier;
use App\Models\Usertemplate;
use App\Models\Paymentorders;
use App\Models\Paymentplans;
use App\Models\Userplans;
use App\Models\Apps;
use App\Models\Preadded;
use App\Models\Templateproducttable as Tableintemplate;
use App\Models\Templateproductitem as Tableitemsintemplate;

use App\Helpers\Utility;
use App\Helpers\mymailer;
use App\Models\Userssettings as settings;
use App\Http\Controllers\offerController as offer;
use Imagine\Image\Box as Box;
use App\User;
use App\Models\Userinfo;
use App\Models\Smslogs;
use DB;
use Imagine;
use Session;
use Imagine\Image\ImageInterface as ImageInterface;
use App\Helpers\Oauthclient;
use App\Helpers\Tcrypt;
use App\Http\Controllers\archiveController;
use App\Models\Documentfields as Docfields;
use App\Models\Documentfieldsoptions as Docfieldsoptions;
use App\Models\Organizations;
use App\Models\Apiaccesslogs;
use App\Models\Recipient_fields_roles;
use App\Helpers\Conversionapi;
use App\Models\Usersrolesub;
use App\Models\Usersgroups;
use App\Helpers\Tcpdf;
use Illuminate\Routing\Route;
use App\Helpers\Gridmailer;
use App\Helpers\phpmailersix;
use App\Helpers\PDFMerger;
use App\Models\ProductLibrary;
use App\Models\Loginattempts;
use App\Models\TemplateLogs;
use App\Models\RecipientsGroups;
use Illuminate\Support\Facades\Redirect;
class apiv3Controller extends Controller {
    
    private $allowed_types = array('jpg','jpeg','gif','png','ico','pdf','csv','txt','docx','xlsx','zip');
    private $is_Secure = true;
    private $checkFunctionName = '';
    private $apiCallLimitExceedMessage = '';
    public function __construct(Request $request) {
        include_once(app_path()."/Helpers/GoogleInterface.php");
        include_once(app_path()."/Helpers/PDFMerger.php");
        
        $action = '';
        $this->checkFunctionName = $action;
        $this->apiCallLimitExceedMessage = 'Limit exceed, cannot make API call more than #hitCuntNo in an hour';
        $data = Input::all();
        if(!isset($data['access_token']) || $data['access_token'] == '') {
            return Response::json(['status'=>'error','result' => 'access_token is missing']);
        } else {
            $accessToken = $data['access_token'];
            $utility = new Utility();
            $userId = $utility->getUserIdByAuthToken($accessToken);
            $parentId = $utility->getParent($userId);

            if($userId != $parentId) {
                $getSubUserData = User::where('id', $userId)->select('is_active')->first();
                if($getSubUserData['is_active'] != 1) {
                    echo json_encode(['status'=>'error','result' => 'Your account is temporary disabled contact support']);
                    die;
                }
            }

            $getUserData = User::where('id', $parentId)->select('is_active')->first();
            if($getUserData['is_active'] != 1) {
                echo json_encode(['status'=>'error','result' => 'Your account is temporary disabled contact support']);
                die;
            }
        }
        //setMajorDB();
    }
    /**
     * load recipient view
     * @return type view
     */
    private function isSecure (){
        // try to load the user
        if (
            ( ! empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off')
            || ( ! empty($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO'] == 'https')
            || ( ! empty($_SERVER['HTTP_X_FORWARDED_SSL']) && $_SERVER['HTTP_X_FORWARDED_SSL'] == 'on')
            || (isset($_SERVER['SERVER_PORT']) && $_SERVER['SERVER_PORT'] == 443)
            || (isset($_SERVER['HTTP_X_FORWARDED_PORT']) && $_SERVER['HTTP_X_FORWARDED_PORT'] == 443)
            || (isset($_SERVER['REQUEST_SCHEME']) && $_SERVER['REQUEST_SCHEME'] == 'https')
        ) {
            $this->is_Secure = true;
        }else {
            echo json_encode(['status' => 'error', 'result' => 'Request should be https']);
            exit;
            throw new \Exception('Request should be https');
        }
    }
    /* public function getIndex(){
        //return view('recipient.viewrecipient');
    } */

    public function postSend()
    {
        
        $data = Input::all();
        $utility = new Utility();
        if(isset($data['access_token'])){
                $access_token = $data['access_token'];
        }else{
                return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
        $user_id = $utility->getUserIdByAuthToken($access_token);
        $parent_id = $utility->getParent($user_id);
        $userSettings = $utility->getUserSettings($parent_id);
        $getApiHitCount = Userinfo::where('user_id', $parent_id)->select('hit_count')->first();
        $addupdateapiaccesslogs = $utility->addupdateapiaccesslogs($user_id, 'postSend v3', $data, $getApiHitCount['hit_count']);
        if($addupdateapiaccesslogs == 'exceed') {
            $this->apiCallLimitExceedMessage = str_replace('#hitCuntNo', $getApiHitCount['hit_count'], $this->apiCallLimitExceedMessage);
            return Response::json(['status' => 'error', 'result' => $this->apiCallLimitExceedMessage]);
        }

        if(isset($data['recipients']) && $data['recipients'] != '') {
            if($this->is_JSON($data['recipients'])) {
                $recipients = json_decode($data['recipients'],true);
                $recsList = array();//recipients list for offer sent table
                foreach ($recipients as $reckey => $recVal) {
                    $sentRec = array();
                    //Recipients Information Validations START
                    if(!isset($recVal['name']) || $recVal['name'] == ''){
                        return Response::json(['status'=>'error','result' => 'Invalid or missing Recipient name']);
                    }else if(!isset($recVal['email']) || !filter_var($recVal['email'], FILTER_VALIDATE_EMAIL)){
                        return Response::json(['status'=>'error','result' => 'Invalid or missing Recipient email']);
                    }
                    //Recipients Information Validations END

                    //Authentication Validations START
                    else if(isset($recVal['authentication']) && $recVal['authentication'] == 3 && $userSettings->sign_bankid != 1){
                        return Response::json(['status'=>'error','result' => 'BankID feature is not enabled on your account, Contact Simplesign support for BankID activation']);
                    }else if(isset($recVal['authentication']) && $recVal['authentication'] == 3 && $userSettings->sign_bankid == 1){
                        if(isset($recVal['personal_no']) && $recVal['personal_no'] != "" && strlen($recVal['personal_no']) != 12){
                            return Response::json(['status'=>'error','result' =>'personal_no must be 12 digits']);
                        }
                    }
                    //Authentication Validations END

                    //Validation when invitation_type is 2, for email and sms START
                    if(isset($recVal['invitation_type']) && $recVal['invitation_type'] == 2) {
                        if(!isset($recVal['mobile']) || empty($recVal['mobile'])){
                            return Response::json(['status'=>'error','result' =>'mobile is mandatory for recipient '.$recVal['name'].' in order to send invitation sms']);   
                        }
                    }
                    //Validation when invitation_type is 2, for email and sms END

                    //Validation when confirmation is 2, for email and sms START
                    if(isset($recVal['confirmation']) &&$recVal['confirmation'] == 2) {
                        if(!isset($recVal['mobile']) || empty($recVal['mobile'])){
                            return Response::json(['status'=>'error','result' =>'mobile is mandatory for recipient '.$recVal['name'].' in order to send confirmation sms']);   
                        }
                    }
                    //Validation when confirmation is 2, for email and sms END


                    $sentRec['email'] = $recVal['email'];
                    $sentRec['full_name'] = $recVal['name'];
                    array_push($recsList, $sentRec);
                }//Foreach End
            }else{
                return Response::json(['status'=>'error','result' => 'Recipient information is invalid format, JSON is required']);
            }
        }else{
            return Response::json(['status'=>'error','result' => 'Recipient information is missing']);
        }

        if(isset($data['invitation_url']) && $data['invitation_url']==1){
                $signing_url = 1;
        }else{
               $signing_url = 0;
        }

        if($utility->checkAdminStripe($user_id)) {
            return Response::json(['status' => 'error', 'result' => 'Account is locked make payment in order to continue using Simplesign']);
        }

        //PDF Attachment Functionality START
        $attachmentArray = array();
        $attachment_mandatory = 0;
        $attachment_file = $attachment_name = '';
        
        if( isset($data['attachment']) && !empty($data['attachment']) ){
            $attachment_file = $data['attachment'];
            if ($attachment_file->guessExtension() != 'pdf'){
               return Response::json(['status'=>'error','result' => 'invalid attachment file type, only pdf file is acceptable']);
            }
            $attachment_name = $attachment_file->getClientoriginalName();
            if( isset($data['attachment_name']) && !empty($data['attachment_name']) ){
                $attachment_name = $data['attachment_name'];
            }
            if( isset($data['attachment_mandatory']) && !empty($data['attachment_mandatory']) && $data['attachment_mandatory'] == 1){
                $attachment_mandatory = 1;
            }
            $attachmentArray[1]['name']   = $attachment_name;
            $attachmentArray[1]['is_mandatory'] = $attachment_mandatory;
            $attachmentArray[1]['created_date'] = date("Y-m-d H:i:s");
        }
        //PDF Attachment Functionality END


        // getting info and manipulating about super user starting
        $parent_id = $utility->getParent($user_id);
        $reg_no = $company_name = $user_details = $tracking_id = "";
        if($utility->isSuperuser($user_id)) {
            $company_name = (isset($data["sender_company"]) && !empty($data["sender_company"]) ? $data["sender_company"] : "");
            if((isset($data["sender_company"]) && !empty($data["sender_company"])) && (!isset($data["sender_reg_no"]) && empty($data["sender_reg_no"]))) {
                return Response::json(["status" => "error", "result" => "After given sender_company name sender_reg_no is mandatory"]);
            } elseif((isset($data["sender_reg_no"]) && !empty($data["sender_reg_no"])) && (!isset($data["sender_company"]) && empty($data["sender_company"]))) {
                return Response::json(["status" => "error", "result" => "After given sender_reg_no sender_company is mandatory"]);
            } elseif(isset($data["sender_reg_no"]) && !empty($data["sender_reg_no"])) {
                $userdata = $utility->getParentDetails($user_id);
                $userArrar = array();
                $userArrar['first_name'] = $userdata->full_name;
                $userArrar['last_name'] = $userdata->second_name;
                $userArrar['email'] = $userdata->email;
                $userArrar['company'] = (isset($company_name) && !empty($company_name) ? $company_name : $userdata->company);
                $reg_no = $data["sender_reg_no"];
                $userArrar['reg_no'] = $reg_no;
                $userArrar['address'] = (isset($data["sender_address"]) && !empty($data["sender_address"]) ? $data["sender_address"] : $userdata->address);
                $userArrar['telephone'] = (isset($data["sender_telephone"]) && !empty($data["sender_telephone"]) ? $data["sender_telephone"] : $userdata->telephone);
                $userArrar['post_code'] = (isset($data["sender_post_code"]) && !empty($data["sender_post_code"]) ? $data["sender_post_code"] : $userdata->post_code);
                $userArrar['city'] = (isset($data["sender_city"]) && !empty($data["sender_city"]) ? $data["sender_city"] : $userdata->city);
                $user_details = json_encode($userArrar);
            } else {
                $gettingFromUserInfo = Userinfo::where("user_id", $parent_id)->select("reg_no")->first();
                $reg_no = $gettingFromUserInfo["reg_no"];
            }
        }

        if(isset($data["tracking_id"]) && !empty($data["tracking_id"])) {
            if(strlen($data["tracking_id"]) < 6 || strlen($data["tracking_id"]) > 6) {
                return Response::json(["status" => "error", "result" => "tracking_id must be 6 digits"]);
            } else {
                $tracking_id = $data["tracking_id"];
            }
        }
        // getting info and manipulating about super user ending

        //Condition if sender_email Available(for sub users)
        if(isset($data['sender_email']) && $data['sender_email'] != ''){
                $sender_email = Tcrypt::encrypter($data['sender_email']);
                $checkSubuser = User::where('email','=',$sender_email)->where('parent_id','=',$user_id)->select('id')->first();
                if($checkSubuser['id']){
                    $user_id = $checkSubuser['id'];
                }
        }

        if(!empty($user_id) && $user_id > 0){
                if(!isset($data['file']) || empty($data['file'])){
                        return Response::json(['status'=>'error','result' =>'File is missing']);
                }else{
                        $file = $data['file'];
                        //$filename = substr($file->getClientoriginalName(),0,-4);
                        //adding code for other files type support starting
                        $fileTypes = array('docx','doc','xls','xlsx','csv','ppt','pptx','pdf');
                        if(!in_array(strtolower($file->getClientOriginalExtension()), $fileTypes)) {
                            return Response::json(['status'=>'error','result' => 'Invalid document file type, only document files are acceptable']);
                        }
                        $file_original_name = $file->getClientoriginalName();
                        $file_ext = strtolower($file->getClientOriginalExtension());
                        $filename = pathinfo($file_original_name, PATHINFO_FILENAME);
                        //adding code for other files type support ending
                }

                if(isset($data['visible_name'])){
                        $visible_name = $data['visible_name'];
                        $document_name = $filename;
                }else{
                        $visible_name = $filename;
                        $document_name = $filename;
                }
                $lang = '';
                if(isset($data['language_id'])){
                        $lang = $data['language_id'];
                } else {
                    $language = Userinfo::where('user_id', '=', $user_id)->select('language')->first();
                    $lang = $language['language'];
                }
                if(isset($data['due_date'])){
                        $duedate = $data['due_date'];
                }else{
                        // Year - Month - Date
                        $duedate = '0000-00-00';
                }
                if(isset($data['reminder_date'])){
                        $remdate = $data['reminder_date'];
                }else{
                        // Year - Month - Date
                        $remdate = '0000-00-00';
                }
                $invitation_message = $confirmation_message = $invitation_sms_message = $confirmation_sms_message = '';
                if(isset($data['invitation_message'])){
                        $invitation_message = $data['invitation_message'];
                }
                if(isset($data["invitation_sms"]) && $data["invitation_sms"] != "") {
                    $invitation_sms_message = $data["invitation_sms"];
                }
                if(isset($data['confirmation_message'])){
                        $confirmation_message = $data['confirmation_message'];
                }
                if(isset($data["confirmation_sms"]) && $data["confirmation_sms"] != "") {
                    $confirmation_sms_message = $data["confirmation_sms"];
                }
                
                //save vimeo and youtube url
                if(isset($data['video_url']) && !empty($data['video_url'])){
                        if(preg_match("@^(?:https://(?:www\\.)?youtube.com/)(watch\\?v=|v/)([a-zA-Z0-9_]*)@", $data['video_url'], $match)){
                            $offerArray['video_link'] = $data['video_url'];
                        }else if(preg_match("/(https?:\/\/)?(www\.)?(player\.)?vimeo\.com\/([a-z]*\/)*([0-9]{6,11})[?]?.*/", $data['video_url'], $output_array)){
                            $offerArray['video_link'] = $data['video_url'];
                        }else{
                            return Response::json(['status'=>'error','result' =>'Invalid video url']);
                        }     
                }else if(isset($data['video']) && !empty($data['video'])){
                    $video_file =  $data['video'];
                    if($video_file->getSize() > 10485760){
                        return Response::json(['status'=>'error','result' =>'File size is greator than 10mb']);
                    }else if($video_file->getMimeType() != "video/mp4"){
                        return Response::json(['status'=>'error','result' =>'File type must be mp4']);
                    }
                    $title = $video_file->getClientoriginalName();
                    $videoname  = uniqid().'_'.$title;
                    $destination = public_path().'/uploads/user_videos';
                    $link = asset('/').'/uploads/user_videos/'.$videoname;
                    $video_file->move($destination, $videoname );
                    $offerArray['video_link'] = '/uploads/user_videos/'.$videoname;
                }
                

                $sentcontract = new sendcontractController();
                $offerSentId = $sentcontract->addOffersent($user_id,$duedate,$lang,$document_name,$remdate,$content='',$visible_name,$invitation_message,$confirmation_message,$retargeting_code='',$attachments='');

                //Updating Recipients Column in Offer Sent Table
                $offerData1['recipients'] = json_encode($recsList);

                //reg no is adding if super user is available starting
                //$offerData1['reg_no'] = $reg_no;
                $offerData1['tracking_id'] = $tracking_id;
                $offerData1['invitation_sms_message'] = $invitation_sms_message;
                $offerData1['confirmation_sms_message'] = $confirmation_sms_message;
                if(isset($user_details) && !empty($user_details)) {
                    $offerData1['user_details'] = $user_details;
                }
                //reg no is adding if super user is available ending

                //PDF Attachment Functionality START
                if($attachment_file != ''){
                    $path  = $offerSentId.'_pdf_'.  uniqid().'.pdf';
                    $destination = public_path().'/uploads/contractattachments';
                    $attachment_file->move($destination, $path );

                    $filePath = $destination.'/'.$path;
                    //Uploading to Google Cloud Server
                    uploadToGCS($filePath,$user_id.'/offerdata',$path,env('simplesignoffersBucket'));

                    //Deleing uploaded file from local ftp xternal
                    if(file_exists($filePath)){unlink($filePath);}

                    $attachmentArray[1]['path']   = $path;//filename
                    $offerData1['attachments'] = json_encode($attachmentArray);
                }
                //PDF Attachment Functionality END
                if(isset($data['external_doc_id'])) {
                    $offerData1['external_doc_id'] = $data['external_doc_id'];
                }

                $offerWhere1['id'] = $offerSentId;
                $utility->updateItem("offer_sent",$offerWhere1,$offerData1);

                $uniqid = uniqid();
                $file_name = $file_original_name;
                //$file_name = $file->getClientoriginalName();
                $name  = 'pdftemplate_'.$uniqid.'.pdf';
                $name_new  = 'pdftemplate_'.$uniqid.'.'.$file_ext;
                $destination = public_path().'/uploads/contractpdf';

                $Allowed_ext = array('docx', 'doc', 'xls', 'xlsx', 'csv', 'ppt', 'pptx');
                if(in_array($file_ext, $Allowed_ext)) {
                    $file->move($destination, $name_new);
                    $file_path = $destination.'/'.$name_new;
                    $Conversionapi = new Conversionapi();
                    try {
                        $Conversionapi->convert($file_path, $destination.'/'.$name);
                    } catch (\Exception $e) {
                        if(file_exists($file_path)){unlink($file_path);}
                        return Response::json(['status'=>'error','result' =>'Unable to load this file']);
                    }
                    if(file_exists($file_path)){unlink($file_path);}
                } else {
                    $file->move($destination, $name);
                }

                $returnArray = $sentcontract->createPdfContract($offerSentId,$destination,$name,$file_name,$access_token,$pdfcontent='',$pageLength='','isapi');
                /*Add content in orignal offer table*/
                $whereSent['id']= $offerSentId;
                $offerContent = $utility->getItem("offer_sent",$whereSent,array('content'));
                if(!empty($offerContent)){
                    $original_offer['sender_id'] = $user_id;
                    $original_offer['offer_sent_id'] = $offerSentId;
                    $original_offer['content'] = $offerContent->content;
                    $utility->addItem("original_offer",$original_offer);
                }
                $pages = $returnArray['pages'];
                $status = $this->sendcontract($offerSentId,$data,$user_id,$visible_name,$invitation_message,$lang,$signing_url);
                if($status)
                {
                        //Video upload 
                        if(isset($data['video_title']) && !empty($data['video_title'])){
                            $offerArray['video_title'] = $data['video_title'];
                        }
                        
                        $offerArray['offer_status'] = 0;
                        $offerArray['total_pages'] = $pages+1;
                        $offerArray['content'] = $offerContent->content;
                        $utility->updateItem("offer_sent",$whereSent,$offerArray);

                        if(isset($data['invitation_url']) && $data['invitation_url']==1) {
                            $res=str_replace('\/', '/', json_encode(['status'=>'success','result' =>'Invitation URL successfully generated','Invitation URL' => $status]));
                            return $res;
                        }
                        return Response::json(['status'=>'success','result' =>'contract sent successfully','sent_id' => $offerSentId]);
                }
                 else if($status==0){
                         return Response::json(['status'=>'success','result' =>'Your are not paid user, Please upgrade your account for send contract']);
                 }
            }else{
                    return Response::json(['status'=>'error','result' =>'invalid access_token']);
            }
    }
    
    public function postSendsympadocument() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');
        ini_set('max_execution_time', 800);
        $iframeURL = $signing_url = 0;

        $invitation_message = $confirmation_message = $invitation_sms_message = $confirmation_sms_message = $access_token = '';

        //checking recipients variable and other validation starting
        $partiesName = [];
        if(isset($data['sympa_data']) && !empty($data['sympa_data'])) {
            if($this->is_JSON($data['sympa_data'])) {
                $recipientsData = json_decode($data['sympa_data'], true);
                $recsList = [];
                if(!empty($recipientsData)) {
                    if(isset($recipientsData['IntegrationId']) && $recipientsData['IntegrationId'] != '') {
                        $access_token = $recipientsData['IntegrationId'];
                    } else {
                        return Response::json(['status'=>'error','result' => 'IntegrationId is missing']);
                    }
                    if(isset($recipientsData['Signers']) && !empty($recipientsData['Signers'])) {
                        if(!is_array($recipientsData['Signers'])) {
                            return Response::json(['status' => 'error', 'result' => 'signers should be array']);
                        } else {
                            $signersData = $recipientsData['Signers'];
                            foreach($signersData as $signersDataKey => $signersDataValue) {
                                $sentRec = [];
                                if(!isset($signersDataValue['Name']) || $signersDataValue['Name'] == '') {
                                    return Response::json(['status'=>'error','result' => 'Invalid or missing recipient name']);
                                } elseif(!isset($signersDataValue['Email']) || $signersDataValue['Email'] == '' || !filter_var($signersDataValue['Email'], FILTER_VALIDATE_EMAIL)) {
                                    return Response::json(['status'=>'error','result' => 'Invalid or missing recipient email']);
                                }
                                $sentRec['full_name'] = $signersDataValue['Name'];
                                $sentRec['email'] = $signersDataValue['Email'];
                                $partiesName[] = $signersDataValue['Name'];
                                array_push($recsList, $sentRec);
                            }
                        }
                    } else {
                        return Response::json(['status'=>'error','result' => 'Signers information should not be empty']);
                    }
                    
                    if(!isset($recipientsData['Document']['Name']) || empty($recipientsData['Document']['Name'])) {
                        return Response::json(['status'=>'error','result' => 'File name is missing']);
                    } if(!isset($recipientsData['Document']['Base64Contents']) || empty($recipientsData['Document']['Base64Contents'])) {
                        return Response::json(['status'=>'error','result' => 'Base64Contents is missing']);
                    }
                } else {
                    return Response::json(['status'=>'error','result' => 'Recipient information should not be empty']);
                }
            } else {
                return Response::json(['status'=>'error','result' => 'Recipient information is invalid format, JSON is required']);
            }
        } else {
            return Response::json(['status'=>'error','result' => 'Recipient information is missing']);
        }
        //checking recipients variable and other validation ending

        //getting user id, parent id and user settings from user_setting table starting
        $user_id = $utility->getUserIdByAuthToken($access_token);
        $parent_id = $utility->getParent($user_id);
        $getApiHitCount = Userinfo::where('user_id', $parent_id)->select('hit_count')->first();
        $addupdateapiaccesslogs = $utility->addupdateapiaccesslogs($user_id, 'postSendsympadocument v3', $data, $getApiHitCount['hit_count']);
        if($addupdateapiaccesslogs == 'exceed') {
            $this->apiCallLimitExceedMessage = str_replace('#hitCuntNo', $getApiHitCount['hit_count'], $this->apiCallLimitExceedMessage);
            return Response::json(['status' => 'error', 'result' => $this->apiCallLimitExceedMessage]);
        }

        //API addon permission start
        //checking user account is not locked due to payment starting
        if(!$utility->isSuperuser($user_id)) {

            if($utility->checkAdminStripe($user_id)) {
                return Response::json(['status' => 'error', 'result' => 'Account is locked make payment in order to continue using Simplesign']);
            }
            if($utility->checkAccountLocked($user_id) == 1){
                return Response::json(['status' => 'error', 'result' => 'Account is locked make payment in order to continue using Simplesign']);
            }
            //checking user account is not locked due to payment ending

            $permissons = DB::table('users_login')->join('user_setting','users_login.id','=','user_setting.user_id')->where('users_login.id',$parent_id)->select('users_login.payment_version', 'user_setting.new_addon_obj', 'users_login.expire_trail_date', 'users_login.is_paid')->first();
            //changes for demo accountt asher
            $user_plan = DB::table('user_plans')->where('user_id',$parent_id)->first();
            $user_plan_id = 0;
            if(!empty($user_plan) && $user_plan->plan_id == 18){
                $user_plan_id = 18;
            }

            if($permissons) {
                $is_enable_addon = json_decode($permissons->new_addon_obj);
                if($permissons->payment_version == 2) {
                    if($permissons->is_paid == 0 && strtotime(date('Y-m-d')) >= strtotime($permissons->expire_trail_date) && $user_plan_id !=18) {
                        return Response::json(['status' => 'error', 'Result' => 'Your account has been expired']);
                    }
                    if(isset($is_enable_addon->api_addon) && $is_enable_addon->api_addon == 1) {
                        // do nothing
                    } else {
                        return Response::json(['status'=>'error','result' => 'You have to enable API addon']);
                    }
                }
            }
        }
        //API addon permission end

        $userSettings = $utility->getUserSettings($parent_id);
        //getting user id, parent id and user settings from user_setting table ending
        if(!$utility->checkusersignatures($user_id, $recsList) && !$utility->isSuperuser($user_id)) {
            return Response::json(['status' => 'error', 'result' => 'user doesn\'t have enough signatures(s)']);
        }

        $contractChatAddonPermission = settings::where('user_id', $parent_id)->pluck('contract_chat_addon_permission');
        if(isset($data['document_chat']) && $data['document_chat'] == 1 && $contractChatAddonPermission != 1) {
            return Response::json(['status' => 'error', 'result' => 'Document chat feature is not enabled in your account, Contact Simplesign support for document chat activation']);
        }
        
        //checking document fields keys and it's values starting
        if(isset($data['documentfields'])) {
            if(!empty($data['documentfields']) && $this->is_JSON($data['documentfields'])) {
                $documentFields = json_decode($data['documentfields'], true);
                foreach($documentFields as $docKey => $docValue) {
                    if(!is_array($docValue['document_fields'])) {
                        return Response::json(['status' => 'error', 'result' => 'document_fields should be array']);
                    } else {
                        if(!isset($docValue['document_fields']) || empty($docValue['document_fields'])) {
                            return Response::json(['status' => 'error', 'result' => 'Document information is missing']);
                        } elseif(isset($docValue['document_fields']) && !empty($docValue['document_fields'])) {
                            foreach($docValue['document_fields'] as $docFldKey => $docFldValue) {
                                if(!isset($docFldKey) || $docFldKey == '') {
                                    return Response::json(['status' => 'error', 'result' => 'document_fields key is missing']);
                                } if(!isset($docFldValue) || $docFldValue == '') {
                                    return Response::json(['status' => 'error', 'result' => 'document_fields value is missing']);
                                }
                            }
                        }
                    }
                }//loop ends here
            } else {
                return Response::json(['status'=>'error','result' => 'Document information is invalid format, JSON is required']);
            }
        }
        //checking document fields keys and it's values ending

        //getting invitation url for showing document link in response instead of an email starting
        if(isset($data['invitation_url']) && $data['invitation_url'] == 1) {
            $signing_url = 1;
        } else {
            $signing_url = 0;
        }
        //getting invitation url for showing document link in response instead of an email ending

        //show iframe URL instead of sending emails starting
        if(isset($data['iframe_url']) && $data['iframe_url'] != 0) {
            $iframeURL = $data['iframe_url'];
        }
        //show iframe URL instead of sending emails ending

        //PDF Attachment Functionality START
        $attachmentArray = array();
        $attachment_mandatory = 0;
        $attachment_file = $attachment_name = '';

        if(isset($data['attachment']) && !empty($data['attachment'])) {
            $attachment_file = $data['attachment'];
            $fileTypes = array('jpg','jpeg','gif','png','pdf','doc','docx','xls','xlsx','zip','csv','txt');
            if(!in_array(strtolower($attachment_file->getClientOriginalExtension()), $fileTypes)) {
                return Response::json(['status'=>'error','result' => 'Invalid attachment file type, only document files are acceptable']);
            }
            $attachment_name = $attachment_file->getClientoriginalName();
            if(isset($data['attachment_name']) && !empty($data['attachment_name'])) {
                $attachment_name = $data['attachment_name'];
            }
            if(isset($data['attachment_mandatory']) && !empty($data['attachment_mandatory']) && $data['attachment_mandatory'] == 1) {
                $attachment_mandatory = 1;
            }
            $attachmentArray[1]['name'] = $attachment_name;
            $attachmentArray[1]['is_mandatory'] = $attachment_mandatory;
            $attachmentArray[1]['created_date'] = date("Y-m-d H:i:s");
        }
        //PDF Attachment Functionality END

        //getting info and manipulating about super user starting
        $parent_id = $utility->getParent($user_id);
        $reg_no = $company_name = $user_details = $tracking_id = "";
        if($utility->isSuperuser($user_id)) {
            $company_name = (isset($data["sender_company"]) && !empty($data["sender_company"]) ? $data["sender_company"] : "");
            if((isset($data["sender_company"]) && !empty($data["sender_company"])) && (!isset($data["sender_reg_no"]) && empty($data["sender_reg_no"]))) {
                return Response::json(["status" => "error", "result" => "After given sender_company name sender_reg_no is mandatory"]);
            } elseif((isset($data["sender_reg_no"]) && !empty($data["sender_reg_no"])) && (!isset($data["sender_company"]) && empty($data["sender_company"]))) {
                return Response::json(["status" => "error", "result" => "After given sender_reg_no sender_company is mandatory"]);
            } elseif(isset($data["sender_reg_no"]) && !empty($data["sender_reg_no"])) {
                $userdata = $utility->getParentDetails($user_id);
                $userArrar = array();
                $userArrar['first_name'] = $userdata->full_name;
                $userArrar['last_name'] = $userdata->second_name;
                $userArrar['email'] = $userdata->email;
                
                $userArrar['company'] = (isset($company_name) && !empty($company_name) ? $company_name : $userdata->company);
                $reg_no = $data["sender_reg_no"];
                $userArrar['reg_no'] = $reg_no;
                $userArrar['address'] = (isset($data["sender_address"]) && !empty($data["sender_address"]) ? $data["sender_address"] : $userdata->address);
                $userArrar['telephone'] = (isset($data["sender_telephone"]) && !empty($data["sender_telephone"]) ? $data["sender_telephone"] : $userdata->telephone);
                $userArrar['post_code'] = (isset($data["sender_post_code"]) && !empty($data["sender_post_code"]) ? $data["sender_post_code"] : $userdata->post_code);
                $userArrar['city'] = (isset($data["sender_city"]) && !empty($data["sender_city"]) ? $data["sender_city"] : $userdata->city);
                $user_details = json_encode($userArrar);
            } else {
                $gettingFromUserInfo = Userinfo::where("user_id", $parent_id)->select("reg_no")->first();
                $reg_no = $gettingFromUserInfo["reg_no"];
            }
        }

        if(isset($data["tracking_id"]) && !empty($data["tracking_id"])) {
            if(strlen($data["tracking_id"]) < 6 || strlen($data["tracking_id"]) > 6) {
                return Response::json(["status" => "error", "result" => "tracking_id must be 6 digits"]);
            } else {
                $tracking_id = $data["tracking_id"];
            }
        }
        //getting info and manipulating about super user ending

        //Condition if sender_email Available(for sub users)
        if(isset($data['sender_email']) && $data['sender_email'] != '') {
            $sender_email = Tcrypt::encrypter($data['sender_email']);
            $checkSubuser = User::where('email','=',$sender_email)->where('parent_id','=',$user_id)->select('id')->first();
            if($checkSubuser['id']) {
                $user_id = $checkSubuser['id'];
            }
        }

        $getRecipientsData = json_decode($data['sympa_data'], true);
        if(!empty($user_id) && $user_id > 0) {
            //filename only file name
            //filedata base 64
            if(isset($getRecipientsData['Document']['Name']) && isset($getRecipientsData['Document']['Base64Contents'])) {
                $filename = $getRecipientsData['Document']['Name'];
                if(empty($getRecipientsData['Document']['Name']) ) {
                    return Response::json(['status'=>'error','result' =>'File is name']);
                }
                if(empty($getRecipientsData['Document']['Base64Contents']) ) {
                    return Response::json(['status'=>'error','result' =>'File is file data']);
                }
            } elseif(!isset($data['file']) || empty($data['file'])) {
                return Response::json(['status'=>'error','result' =>'File is missing']);
            } elseif(gettype($data['file']) != 'object') {
                return Response::json(['status' => 'error', 'result' => 'Unable to access provided document, please check your code and try again']);
            } else {
                $file = $data['file'];
                //adding condition starting
                $fileTypes = array('docx','doc','xls','xlsx','csv','ppt','pptx','pdf');
                if(!in_array(strtolower($file->getClientOriginalExtension()), $fileTypes)) {
                    return Response::json(['status'=>'error','result' => 'Invalid document file type, only document files are acceptable']);
                }
                //adding condition ending
                
                $file_original_name = $file->getClientoriginalName();
                $file_ext = strtolower($file->getClientOriginalExtension());
                $filename = pathinfo($file_original_name, PATHINFO_FILENAME);
            }

            if(isset($data['visible_name']) && $data['visible_name'] != '') {
                $visible_name = $data['visible_name'];
                $document_name = $filename;
            } else {
                $visible_name = $filename;
                $document_name = $filename;
            }
            if(isset($data['language_id']) && $data['language_id'] != '') {
                $lang = $data['language_id'];
            } else {
                $language = Userinfo::where('user_id', '=', $user_id)->select('language')->first();
                $lang = $language['language'];
            }

            $dueDays = '';
            $userTimeZone = $utility->getUsertimezone($user_id);
            if(isset($data['due_days']) && $data['due_days'] != '') {
                $dueDays = $data['due_days'];
                if($dueDays > 0) {
                    $dueDays = date('Y-m-d', strtotime(date('Y-m-d'). " + $dueDays days"));
                } else {
                    $dueDays = date('Y-m-d');
                }
                $dueDays = $utility->changeTimeZone($dueDays.' 23:50:00', 'Y-m-d', $userTimeZone, 'UTC');
            } else {
                $dueDays = '0000-00-00 00:00:00';
            }

            $reminderDays = '';
            if(isset($data['reminder_days']) && $data['reminder_days'] != '') {
                $reminderDays = $data['reminder_days'];
                if($reminderDays > 0) {
                    $reminderDays = date('Y-m-d', strtotime(date('Y-m-d'). " + $reminderDays days"));
                } else {
                    $reminderDays = date('Y-m-d');
                }
                $reminderDays = $utility->changeTimeZone($reminderDays.' 08:50:00', 'Y-m-d H:i:s', $userTimeZone, 'UTC');
            } else {
                $reminderDays = '0000-00-00 00:00:00';
            }

            if(isset($data['invitation_message']) && $data['invitation_message'] != '') {
                $invitation_message = $data['invitation_message'];
            }
            if(isset($data["invitation_sms"]) && $data["invitation_sms"] != "") {
                $invitation_sms_message = $data["invitation_sms"];
            }
            if(isset($data['confirmation_message']) && $data['confirmation_message'] != '') {
                $confirmation_message = $data['confirmation_message'];
            }
            if(isset($data["confirmation_sms"]) && $data["confirmation_sms"] != "") {
                $confirmation_sms_message = $data["confirmation_sms"];
            }

            //save vimeo and youtube url
            if(isset($data['video_url']) && !empty($data['video_url'])) {
                if(preg_match("@^(?:https://(?:www\\.)?youtube.com/)(watch\\?v=|v/)([a-zA-Z0-9_]*)@", $data['video_url'], $match)) {
                    $offerArray['video_link'] = $data['video_url'];
                } elseif(preg_match("/(https?:\/\/)?(www\.)?(player\.)?vimeo\.com\/([a-z]*\/)*([0-9]{6,11})[?]?.*/", $data['video_url'], $output_array)) {
                    $offerArray['video_link'] = $data['video_url'];
                } else {
                    return Response::json(['status'=>'error','result' =>'Invalid video url']);
                }
            } elseif(isset($data['video']) && !empty($data['video'])) {
                $video_file =  $data['video'];
                if($video_file->getSize() > 10485760) {
                    return Response::json(['status'=>'error','result' =>'File size is greator than 10mb']);
                } elseif($video_file->getMimeType() != "video/mp4") {
                    return Response::json(['status'=>'error','result' =>'File type must be mp4']);
                }
                $title = $video_file->getClientoriginalName();
                $videoname = uniqid().'_'.$title;
                $destination = public_path().'/uploads/user_videos';
                $link = asset('/').'/uploads/user_videos/'.$videoname;
                $video_file->move($destination, $videoname );
                $offerArray['video_link'] = '/uploads/user_videos/'.$videoname;
            }

            $sentcontract = new sendcontractController();
            $offerSentId = $sentcontract->addOffersent($user_id,$dueDays,$lang,$document_name,$reminderDays,$content='',$visible_name,$invitation_message,$confirmation_message,$retargeting_code='',$attachments='');

            if($iframeURL != 0) {
                Offersent::where('id', $offerSentId)->where('sender_id', $user_id)->update(['is_draft' => 1]);
            }
            $documentChat = 0;
            if(isset($data['document_chat']) && $data['document_chat'] == 1) {
                $documentChat = 1;
            }
            Offersent::where('id', $offerSentId)->update(['contract_chat' => $documentChat]);

            //Updating Recipients Column in Offer Sent Table
            $offerData1['recipients'] = json_encode($recsList);

            //reg no is adding if super user is available starting
            //$offerData1['reg_no'] = $reg_no;

            $offerData1['tracking_id'] = $tracking_id;
            $offerData1['invitation_sms_message'] = $invitation_sms_message;
            $offerData1['confirmation_sms_message'] = $confirmation_sms_message;
            if(isset($user_details) && !empty($user_details)) {
                $offerData1['user_details'] = $user_details;
            }
            //reg no is adding if super user is available ending

            //PDF Attachment Functionality START
            if($attachment_file != '') {
                $path  = $offerSentId.'_'.uniqid().'.'.$attachment_file->getClientOriginalExtension();
                $destination = public_path().'/uploads/contractattachments';
                $attachment_file->move($destination, $path);

                $filePath = $destination.'/'.$path;
                //Uploading to Google Cloud Server
                uploadToGCS($filePath,$user_id.'/offerdata',$path,env('simplesignoffersBucket'));

                //Deleing uploaded file from local ftp
                if(file_exists($filePath)) {
                    unlink($filePath);
                }
                $attachmentArray[1]['path']   = $path;//filename
                $offerData1['attachments'] = json_encode($attachmentArray);
            }

            //PDF Attachment Functionality END
            if(isset($data['external_doc_id'])) {
                $offerData1['external_doc_id'] = $data['external_doc_id'];
            }
            if(isset($getRecipientsData['Document']['Name']) && isset($getRecipientsData['Document']['Base64Contents'])) {
                $encoded_string = $getRecipientsData['Document']['Base64Contents'];
                $decoded_file = base64_decode($encoded_string); // decode the file
                $uniqid       = uniqid();  
                $mime_type    = finfo_buffer(finfo_open(), $decoded_file, FILEINFO_MIME_TYPE); // extract mime type
                $file_ext     = $this->mime2ext($mime_type); // extract extension from mime type
                $file_name    = $getRecipientsData['Document']['Name'].'.'.$file_ext;
                $fileTypes    = array('docx','doc','xls','xlsx','csv','ppt','pptx','pdf');
                if(!in_array(strtolower($file_ext), $fileTypes)) {
                    return Response::json(['status'=>'error','result' => 'Invalid document file type, only document files are acceptable']);
                }
                $name = 'pdftemplate_'.$uniqid.'.pdf';
                $name_new = 'pdftemplate_'.$uniqid.'.'.$file_ext;
                $destination = public_path().'/uploads/contractpdf';
                $destination2 = public_path().'/uploads/contractpdf/'.$name_new;
            } else {
                $uniqid = uniqid();
                $file_name = $file_original_name;
                $name = 'pdftemplate_'.$uniqid.'.pdf';
                $name_new = 'pdftemplate_'.$uniqid.'_2.'.$file_ext;
                $destination = public_path().'/uploads/contractpdf';
            }
            $Allowed_Ext = array('docx','doc','xls','xlsx','csv','ppt','pptx');
            if(in_array($file_ext,$Allowed_Ext)) {
                if(isset($getRecipientsData['Document']['Name']) && isset($getRecipientsData['Document']['Base64Contents'])) {
                    try {
                        file_put_contents($destination2, $decoded_file);
                        header('Content-Type: application/json');
                    } catch (Exception $e) {
                        header('Content-Type: application/json');
                        return Response::json(['status'=>'error','result' =>json_encode($e->getMessage())]);
                    }
                } else {
                    $file->move($destination, $name_new);
                }
                
                $file_path = $destination.'/'.$name_new;
                $Conversionapi = new Conversionapi();
                try {
                    $Conversionapi->convert($file_path, $destination.'/'.$name);
                } catch (\Exception $e) {
                    if(file_exists($file_path)){unlink($file_path);}
                    return Response::json(['status'=>'error','result' =>'Unable to load this file']);
                }
                if(file_exists($file_path)){unlink($file_path);}
            } else {
                if(isset($getRecipientsData['Document']['Name']) && isset($getRecipientsData['Document']['Base64Contents'])) {
                    try {
                        file_put_contents($destination2, $decoded_file); // save
                        header('Content-Type: application/json');
                    } catch (Exception $e) {
                        header('Content-Type: application/json');
                        return Response::json(['status'=>'error','result' =>json_encode($e->getMessage())]);
                    }
                } else {
                    $file->move($destination, $name_new);
                    $image_file = $destination.'/'.$name_new;
                    $image_file_new = $destination.'/'.$name;
                    exec( "gs -dSAFER -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dNOPAUSE -dQUIET -dBATCH -sOutputFile=".$image_file_new." ".$image_file.""); 
                    if(file_exists($image_file)){unlink($image_file);}
                }
            }

            $returnArray = $this->createPdfContract($offerSentId,$destination,$name,$file_name,$access_token,$pdfcontent='',$pageLength='','isapi',1,$data);
            
            $templateFlag = false;
            $editorVersion = 'longpage';
            if(isset($data['template_id']) && $data['template_id'] != '') {
                $userTemplate = new usertemplateController();
                $getTemplateContent = $userTemplate->getTemplateByTemplateID($data['template_id'], $user_id);
                if(!empty($getTemplateContent->content)) {
                    $html = new \Htmldom($getTemplateContent->content);
                    $templateFlag = true;
                    $editorVersion = (isset($getTemplateContent->editor_version) && $getTemplateContent->editor_version != '' ? $getTemplateContent->editor_version : '');
                    if(isset($getTemplateContent->editor_version) && $getTemplateContent->editor_version == 'longpage') {
                        foreach($html->find('.template_container') as $getTemplateContentKey => $getTemplateContentValue) {
                            foreach($returnArray['responsePDFImages'] as $responsePDFImagesKey => $responsePDFImagesValue) {
                                if($getTemplateContentValue->find('.sortableContainerContentBox', $responsePDFImagesKey)) {
                                    $getTemplateContentValue->find('.sortableContainerContentBox', $responsePDFImagesKey)->find('.summernote', 0)->setAttribute('class', 'autopdfheightclass');
                                    $assignValue = '
                                        <div class="pdfbg" style="background-image: url('.$responsePDFImagesValue.')"></div>
                                        <div class="fieldElementRes box-target content_box_divInner" child="0" style="position: relative !important; border-color: transparent;">
                                            '.$getTemplateContentValue->find('.sortableContainerContentBox', $responsePDFImagesKey)->find('.fieldElementRes', 0)->innertext.'
                                        </div>';
                                    $getTemplateContentValue->find('.sortableContainerContentBox', $responsePDFImagesKey)->innertext = $assignValue;
                                } else {
                                    $getTemplateContentValue->innertext .= '
                                    <div class="sortableContainerContentBox content_box_div contentSort marginbottom140">
                                        <div class="pdfbg" style="background-image: url('.$responsePDFImagesValue.')"></div>
                                        <div class="fieldElementRes box-target content_box_divInner" child="0" style="position: relative !important; border-color: transparent;">
                                            <div class="box-inner-container ui-droppable" style="min-height: inherit;width:100%; top:0;left:0;outline: none;" contenteditable="false">
                                                <div class="summernote content_box_div_new autopdfheightclass" style="display: block;"></div>
                                            </div>
                                        </div>
                                    </div>';
                                }
                            }
                        }
                    } else {
                        foreach($html->find('.template_container') as $getTemplateContentKey => $getTemplateContentValue) {
                            if(isset($returnArray['responsePDFImages'][$getTemplateContentKey])) {
                                $getTemplateContentValue->setAttribute('style', "background-position: 50% 0%; background-repeat: no-repeat; width: 100%; height: 100%; background-size: 100% !important; background-image: url('".$returnArray['responsePDFImages'][$getTemplateContentKey]."') !important; display: block; padding: 70px;");
                            }
                        }
                    }
                    $offerData1['content'] = Tcrypt::encrypter($html);
                }
            }

            /*Add content in orignal offer table*/
            $offerWhere1['id'] = $offerSentId;
            $utility->updateItem("offer_sent",$offerWhere1,$offerData1);

            $whereSent['id'] = $offerSentId;
            $offerContent = $utility->getItem("offer_sent",$whereSent,array('content'));
            if(!empty($offerContent)) {
                $original_offer['sender_id'] = $user_id;
                $original_offer['offer_sent_id'] = $offerSentId;
                $original_offer['content'] = $offerContent->content;
                $utility->addItem("original_offer",$original_offer);
            }

            $pages = $returnArray['pages'];
            $status = $this->sendcontractnewtest($offerSentId, $data, $user_id, $visible_name, $invitation_message, $lang, $signing_url, '', '', $templateFlag, $iframeURL);

            if($status) {
                //Video upload
                if(isset($data['video_title']) && !empty($data['video_title'])) {
                    $offerArray['video_title'] = $data['video_title'];
                }

                if($iframeURL == 1) {
                    $offerArray['offer_status'] = 7;
                } else {
                    $offerArray['offer_status'] = 0;
                }

                $offerArray['total_pages'] = $pages+1;
                $offerArray['editor_version'] = $editorVersion;
                //$offerArray['content'] = $offerContent->content;
                $utility->updateItem("offer_sent",$whereSent,$offerArray);
                $totalRemainingSugnature = $utility->checkSignatures($parent_id);

                $APIResponse = [];
                if(isset($data['invitation_url']) && $data['invitation_url'] == 1) {
                    $APIResponse = ['status' => 'success', 'result' => 'Invitation URL successfully generated', 'parties name' => $partiesName, 'Invitation URL' => $status, 'sent_id' => $offerSentId, 'document_id' => $offerSentId, 'signature_credit_lefts' => ($totalRemainingSugnature['monthly_signature']+$totalRemainingSugnature['extra_signature'])];
                } elseif($iframeURL == 1) {
                    $getOwnerEmailAddress = User::where('id', $user_id)->select('email')->first();
                    $iframeUrl = asset('/')."api/v3/request/external?email=".trim($getOwnerEmailAddress['email'])."&access_token=".$access_token."&document_id=".$offerSentId."&send_document=1";
                    $APIResponse = ['status' => 'success', 'result' => ['iframeUrl' => $iframeUrl, 'document_id' => $offerSentId, 'signature_credit_lefts' => ($totalRemainingSugnature['monthly_signature']+$totalRemainingSugnature['extra_signature'])]];
                } else {
                    $APIResponse = ['status' => 'success', 'result' => 'document sent successfully', 'sent_id' => $offerSentId, 'document_id' => $offerSentId, 'signature_credit_lefts' => ($totalRemainingSugnature['monthly_signature']+$totalRemainingSugnature['extra_signature'])];
                }
                return response()->json($APIResponse, 200, ['Content-Type' => 'application/json; charset=UTF-8'], JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
            } elseif($status == 0) {
                return Response::json(['status'=>'success','result' =>'You are not paid user, Please upgrade your account for send document']);
            }
        } else {
            return Response::json(['status'=>'error','result' =>'Invalid access_token']);
        }
    }
    
     public function _convert($content) {
    if(!mb_check_encoding($content, 'UTF-8')
        OR !($content === mb_convert_encoding(mb_convert_encoding($content, 'UTF-32', 'UTF-8' ), 'UTF-8', 'UTF-32'))) {

        $content = mb_convert_encoding($content, 'UTF-8');

        if (mb_check_encoding($content, 'UTF-8')) {
            // log('Converted to UTF-8');
        } else {
            // log('Could not converted to UTF-8');
        }
    }
    return $content;
    }
  
    public function postSenddocumentformultiple(Request $request) {
        $data = Input::all();
        $multiple_files = [];
        
        $utility = new Utility();
        $domain_name = asset('/');
        ini_set('max_execution_time', 800);
        ini_set('memory_limit','-1');

        //access token validation starting
        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
        //access token validation ending

        //getting user id, parent id and user settings from user_setting table starting
        $user_id = $utility->getUserIdByAuthToken($access_token);
        $parent_id = $utility->getParent($user_id);
        $getApiHitCount = Userinfo::where('user_id', $parent_id)->select('hit_count')->first();
        $addupdateapiaccesslogs = $utility->addupdateapiaccesslogs($user_id, 'postSenddocumentformultiple v3', $data, $getApiHitCount['hit_count']);
        if($addupdateapiaccesslogs == 'exceed') {
            $this->apiCallLimitExceedMessage = str_replace('#hitCuntNo', $getApiHitCount['hit_count'], $this->apiCallLimitExceedMessage);
            return Response::json(['status' => 'error', 'result' => $this->apiCallLimitExceedMessage]);
        }

        /*
            API addon permission
        */
        //checking user account is not locked due to payment starting
        if(!$utility->isSuperuser($user_id)) {

            if($utility->checkAdminStripe($user_id)) {
                return Response::json(['status' => 'error', 'result' => 'Account is locked make payment in order to continue using Simplesign']);
            }
            //Cofigurewebhook
            if($utility->checkAccountLocked($user_id) == 1){
                return Response::json(['status' => 'error', 'result' => 'Account is locked make payment in order to continue using Simplesign']);
            }
            //checking user account is not locked due to payment ending

            $permissons = DB::table('users_login')->join('user_setting','users_login.id','=','user_setting.user_id')->where('users_login.id',$parent_id)->select('users_login.payment_version', 'user_setting.new_addon_obj', 'users_login.expire_trail_date', 'users_login.is_paid')->first();
            
            //changes for demo accountt asher
            $user_plan = DB::table('user_plans')->where('user_id',$parent_id)->first();
            $user_plan_id = $iframeURL = 0;
            if(!empty($user_plan) && $user_plan->plan_id == 18){
                $user_plan_id = 18;
            }

            if($permissons) {
                $is_enable_addon = json_decode($permissons->new_addon_obj);
                if($permissons->payment_version == 2) {
                    if($permissons->is_paid == 0 && strtotime(date('Y-m-d')) >= strtotime($permissons->expire_trail_date) && $user_plan_id !=18) {
                        return Response::json(['status' => 'error', 'Result' => 'Your account has been expired']);
                    }
                    if(isset($is_enable_addon->api_addon) && $is_enable_addon->api_addon == 1) {
                        // do nothing
                    } else {
                        return Response::json(['status'=>'error','result' => 'You have to enable API addon']);
                    }
                }
            }
        }
        /*
            API addon permission end
        */
        $userSettings = $utility->getUserSettings($parent_id);
        //getting user id, parent id and user settings from user_setting table ending

        //checking recipients variable and other validation starting
        $partiesName = [];
        if(isset($data['recipients']) && $data['recipients'] != '') {
            if($this->is_JSON($data['recipients'])) {
                $recipients = json_decode($data['recipients'],true);
                $recsList = $mainArray = array();//recipients list for offer sent table
                if(!empty($recipients)) {
                    foreach($recipients as $reckey => $recVal) {
                        if(!isset($recVal['people_fields']) || !is_array($recVal['people_fields'])) {
                            return Response::json(['status' => 'error', 'result' => 'people_fields should be array']);
                        } else {
                            if(!isset($recVal['people_fields']) || empty($recVal['people_fields'])) {
                                return Response::json(['status' => 'error', 'result' => 'People information is missing']);
                            } elseif(isset($recVal['people_fields']) && !empty($recVal['people_fields'])) {
                                $sentRec = array();
                                $newAddonObj = (isset($userSettings['new_addon_obj']) && !empty($userSettings['new_addon_obj']) ? json_decode($userSettings['new_addon_obj'], true) : []);
                                $viewerPartyAddonPermission = (!empty($newAddonObj) && isset($newAddonObj['viewerparty_addon_permission']) && $newAddonObj['viewerparty_addon_permission'] == 1 ? $newAddonObj['viewerparty_addon_permission'] : 0);
                                //Recipients basic information validations like name and email starting
                                if(!isset($recVal['people_fields']['name']) || $recVal['people_fields']['name'] == '') {
                                    return Response::json(['status'=>'error','result' => 'Invalid or missing Recipient name']);
                                } elseif(!isset($recVal['people_fields']['email']) || !filter_var($recVal['people_fields']['email'], FILTER_VALIDATE_EMAIL)) {
                                    return Response::json(['status'=>'error','result' => 'Invalid or missing Recipient email']);
                                }
                                //Recipients basic information validations like name and email starting

                                //Roles of recipient validation starting
                                elseif(!isset($recVal['details']['recipient_role']) || $recVal['details']['recipient_role'] == '') {
                                    return Response::json(['status'=>'error','result' => 'Invalid or missing recipient_role in details']);
                                } /* elseif(isset($recVal['details']['recipient_role']) && $recVal['details']['recipient_role'] != '') {
                                    $tabComponents = Recipient_fields_roles::where('userid', $user_id)->where('tab_components', $recVal['details']['recipient_role'])->count();
                                    if(!$tabComponents) {
                                        return Response::json(['status'=>'error','result' => $recVal['details']['recipient_role'].' recipient_role doesn\'t exists in this account.']);
                                    }
                                } */
                                //Roles of recipient validation ending

                                //Authentication validations starting
                                elseif(isset($recVal['details']['authentication']) && ($recVal['details']['authentication'] == 'bankID' || $recVal['details']['authentication'] == 'BankID' || $recVal['details']['authentication'] == 'Bank ID'  || $recVal['details']['authentication'] == 'bank ID') && $userSettings->sign_bankid != 1) {
                                    return Response::json(['status'=>'error','result' => 'BankID feature is not enabled in your account, Contact Simplesign support for BankID activation']);
                                } elseif(isset($recVal['details']['authentication']) && ($recVal['details']['authentication'] == 'bankID' || $recVal['details']['authentication'] == 'BankID') && $userSettings->sign_bankid == 1) {
                                    if(isset($recVal['people_fields']['personal_no']) && !empty($recVal['people_fields']['personal_no']) && strlen($recVal['people_fields']['personal_no']) != 12) {
                                        return Response::json(['status'=>'error','result' =>'personal_no must be 12 digits']);
                                    }
                                } elseif(isset($recVal['details']['authentication']) && ($recVal['details']['authentication'] == 'Attest' || $recVal['details']['authentication'] == 'At test' || $recVal['details']['authentication'] == 'attest'  || $recVal['details']['authentication'] == 'at test') && $userSettings->review_party_addon_permission != 1) {
                                    return Response::json(['status'=>'error','result' => 'Attest feature is not enabled in your account, Contact Simplesign support for Attest activation']);
                                } elseif(isset($recVal['details']['authentication']) && ($recVal['details']['authentication'] == 'ViewOnly' || $recVal['details']['authentication'] == 'View Only' || $recVal['details']['authentication'] == 'viewonly'  || $recVal['details']['authentication'] == 'view only') && $viewerPartyAddonPermission != 1) {
                                    return Response::json(['status'=>'error','result' => 'View only feature is not enabled in your account, Contact Simplesign support for view only activation']);
                                }
                                //Authentication validations ending

                                //Validation when invitation_type is 2, for email and sms, need mobile no starting
                                if(isset($recVal['details']['invitation_type']) && ($recVal['details']['invitation_type'] == 'email and sms' || $recVal['details']['invitation_type'] == 'Email And SMS' || $recVal['details']['invitation_type'] == 'email & sms' || $recVal['details']['invitation_type'] == 'Email & SMS')) {
                                    if(!isset($recVal['people_fields']['mobile']) || empty($recVal['people_fields']['mobile'])) {
                                        return Response::json(['status'=>'error','result' =>'mobile is mandatory for recipient '.$recVal['people_fields']['name'].' in order to send invitation sms']);
                                    }
                                }
                                //Validation when invitation_type is 2, for email and sms, need mobile no ending

                                //Validation when confirmation is 2, for email and sms, need mobile no starting
                                if(isset($recVal['details']['confirmation']) && ($recVal['details']['confirmation'] == 'email and sms' || $recVal['details']['confirmation'] == 'Email And SMS' || $recVal['details']['confirmation'] == 'email & sms' || $recVal['details']['confirmation'] == 'Email & SMS')) {
                                    if(!isset($recVal['people_fields']['mobile']) || empty($recVal['people_fields']['mobile'])) {
                                        return Response::json(['status'=>'error','result' =>'mobile is mandatory for recipient '.$recVal['people_fields']['name'].' in order to send confirmation sms']);
                                    }
                                }
                                //Validation when confirmation is 2, for email and sms, need mobile no ending

                                $sentRec['full_name'] = $recVal['people_fields']['name'];
                                $sentRec['email'] = $recVal['people_fields']['email'];
                                $partiesName[] = $recVal['people_fields']['name'];
                                array_push($recsList, $sentRec);
                            }
                        }
                    } //Foreach End
                } else {
                    return Response::json(['status'=>'error','result' => 'Recipient information should not be empty']);
                }
            } else {
                return Response::json(['status'=>'error','result' => 'Recipient information is invalid format, JSON is required']);
            }
        } else {
            return Response::json(['status'=>'error','result' => 'Recipient information is missing']);
        }
        //checking recipients variable and other validation ending

        if(!$utility->checkusersignatures($user_id, $recsList) && !$utility->isSuperuser($user_id)) {
            return Response::json(['status' => 'error', 'result' => 'user doesn\'t have enough signatures(s)']);
        }

        $contractChatAddonPermission = settings::where('user_id', $parent_id)->pluck('contract_chat_addon_permission');
        if(isset($data['document_chat']) && $data['document_chat'] == 1 && $contractChatAddonPermission != 1) {
            return Response::json(['status' => 'error', 'result' => 'Document chat feature is not enabled in your account, Contact Simplesign support for document chat activation']);
        }
        
        //checking document fields keys and it's values starting
        if(isset($data['documentfields'])) {
            if(!empty($data['documentfields']) && $this->is_JSON($data['documentfields'])) {
                $documentFields = json_decode($data['documentfields'], true);
                foreach($documentFields as $docKey => $docValue) {
                    if(!is_array($docValue['document_fields'])) {
                        return Response::json(['status' => 'error', 'result' => 'document_fields should be array']);
                    } else {
                        if(!isset($docValue['document_fields']) || empty($docValue['document_fields'])) {
                            return Response::json(['status' => 'error', 'result' => 'Document information is missing']);
                        } elseif(isset($docValue['document_fields']) && !empty($docValue['document_fields'])) {
                            foreach($docValue['document_fields'] as $docFldKey => $docFldValue) {
                                if(!isset($docFldKey) || $docFldKey == '') {
                                    return Response::json(['status' => 'error', 'result' => 'document_fields key is missing']);
                                } if(!isset($docFldValue) || $docFldValue == '') {
                                    return Response::json(['status' => 'error', 'result' => 'document_fields value is missing']);
                                }
                            }
                        }
                    }
                }//loop ends here
            } else {
                return Response::json(['status'=>'error','result' => 'Document information is invalid format, JSON is required']);
            }
        }
        //checking document fields keys and it's values ending

        //getting invitation url for showing document link in response instead of an email starting
        if(isset($data['invitation_url']) && $data['invitation_url'] == 1) {
            $signing_url = 1;
        } else {
            $signing_url = 0;
        }
        //getting invitation url for showing document link in response instead of an email ending

        //show iframe URL instead of sending emails starting
        if(isset($data['iframe_url']) && $data['iframe_url'] != 0) {
            $iframeURL = $data['iframe_url'];
        }
        //show iframe URL instead of sending emails ending

        //PDF Attachment Functionality START
        $attachmentArray = $newAttachmentArray = array();
        $attachment_mandatory = 0;
        $attachment_file = $attachment_name = $attachment_files = $attachment_names = $fileNameEx = '';
        if(isset($data['attachment']) && !empty($data['attachment'])) {
            $attachment_file = $data['attachment'];
            $fileTypes = array('jpg','jpeg','gif','png','pdf','doc','docx','xls','xlsx','zip','csv','txt');
            if(!in_array(strtolower($attachment_file->getClientOriginalExtension()), $fileTypes)) {
                return Response::json(['status'=>'error','result' => 'Invalid attachment file type, only document files are acceptable']);
            }
            $attachment_name = $attachment_file->getClientoriginalName();
            if(isset($data['attachment_name']) && !empty($data['attachment_name'])) {
                $attachment_name = $data['attachment_name'];
            }
            if(isset($data['attachment_mandatory']) && !empty($data['attachment_mandatory']) && $data['attachment_mandatory'] == 1) {
                $attachment_mandatory = 1;
            }
            $attachmentArray[1]['name'] = $attachment_name;
            $attachmentArray[1]['is_mandatory'] = $attachment_mandatory;
            $attachmentArray[1]['created_date'] = date("Y-m-d H:i:s");
        }
        //PDF Attachment Functionality END

        //getting info and manipulating about super user starting
        $parent_id = $utility->getParent($user_id);
        $reg_no = $company_name = $user_details = $tracking_id = "";
        if($utility->isSuperuser($user_id)) {
            $company_name = (isset($data["sender_company"]) && !empty($data["sender_company"]) ? $data["sender_company"] : "");
            if((isset($data["sender_company"]) && !empty($data["sender_company"])) && (!isset($data["sender_reg_no"]) && empty($data["sender_reg_no"]))) {
                return Response::json(["status" => "error", "result" => "After given sender_company name sender_reg_no is mandatory"]);
            } elseif((isset($data["sender_reg_no"]) && !empty($data["sender_reg_no"])) && (!isset($data["sender_company"]) && empty($data["sender_company"]))) {
                return Response::json(["status" => "error", "result" => "After given sender_reg_no sender_company is mandatory"]);
            } elseif(isset($data["sender_reg_no"]) && !empty($data["sender_reg_no"])) {
                $userdata = $utility->getParentDetails($user_id);
                $userArrar = array();
                $userArrar['first_name'] = $userdata->full_name;
                $userArrar['last_name'] = $userdata->second_name;
                $userArrar['email'] = $userdata->email;
                
                $userArrar['company'] = (isset($company_name) && !empty($company_name) ? $company_name : $userdata->company);
                $reg_no = $data["sender_reg_no"];
                $userArrar['reg_no'] = $reg_no;
                $userArrar['address'] = (isset($data["sender_address"]) && !empty($data["sender_address"]) ? $data["sender_address"] : $userdata->address);
                $userArrar['telephone'] = (isset($data["sender_telephone"]) && !empty($data["sender_telephone"]) ? $data["sender_telephone"] : $userdata->telephone);
                $userArrar['post_code'] = (isset($data["sender_post_code"]) && !empty($data["sender_post_code"]) ? $data["sender_post_code"] : $userdata->post_code);
                $userArrar['city'] = (isset($data["sender_city"]) && !empty($data["sender_city"]) ? $data["sender_city"] : $userdata->city);
                $user_details = json_encode($userArrar);
            } else {
                $gettingFromUserInfo = Userinfo::where("user_id", $parent_id)->select("reg_no")->first();
                $reg_no = $gettingFromUserInfo["reg_no"];
            }
        }

        if(isset($data["tracking_id"]) && !empty($data["tracking_id"])) {
            if(strlen($data["tracking_id"]) < 6 || strlen($data["tracking_id"]) > 6) {
                return Response::json(["status" => "error", "result" => "tracking_id must be 6 digits"]);
            } else {
                $tracking_id = $data["tracking_id"];
            }
        }
        //getting info and manipulating about super user ending

        //Condition if sender_email Available(for sub users)
        if(isset($data['sender_email']) && $data['sender_email'] != '') {
            $sender_email = Tcrypt::encrypter($data['sender_email']);
            $checkSubuser = User::where('email','=',$sender_email)->where('parent_id','=',$user_id)->select('id')->first();
            if($checkSubuser['id']) {
                $user_id = $checkSubuser['id'];
            }
        }

        if(!empty($user_id) && $user_id > 0) {

            if(isset($data['filename']) && isset($data['filedata'])){
                $filename = $data['filename'];
                if(empty($data['filename']) ) {
                return Response::json(['status'=>'error','result' =>'File is name']);
                }
                if(empty($data['filedata']) ) {
                return Response::json(['status'=>'error','result' =>'File is file data']);
                }
            }else if($request->hasfile('files')){
                $fileTypes = array('docx','doc','xls','xlsx','csv','ppt','pptx','pdf');
                foreach($request->file('files') as $key => $file){
                    echo $file->getClientOriginalName()."|";
                    if(!in_array(strtolower($file->getClientOriginalExtension()), $fileTypes)) {
                        return Response::json(['status'=>'error','result' => 'Invalid document file type, only document files are acceptable']);
                    }
                    if($key == 0){
                        $file_original_name = $file->getClientoriginalName();
                        $file_ext = strtolower($file->getClientOriginalExtension());
                        setlocale(LC_ALL,'en_US.UTF-8');
                        $filename = pathinfo($file_original_name, PATHINFO_FILENAME);
                    }
                }
            } elseif(!isset($data['file']) || empty($data['file'])) {
                return Response::json(['status'=>'error','result' =>'File is missing']);
            } elseif(gettype($data['file']) != 'object') {
                return Response::json(['status' => 'error', 'result' => 'Unable to access provided document, please check your code and try again']);
            }else{
                $file = $data['file'];
                //adding condition starting
                $fileTypes = array('docx','doc','xls','xlsx','csv','ppt','pptx','pdf');
                if(!in_array(strtolower($file->getClientOriginalExtension()), $fileTypes)) {
                    return Response::json(['status'=>'error','result' => 'Invalid document file type, only document files are acceptable']);
                }
                //adding condition ending
                $file_original_name = $file->getClientoriginalName();
                $file_ext = strtolower($file->getClientOriginalExtension());
                setlocale(LC_ALL,'en_US.UTF-8');
                $filename = pathinfo($file_original_name, PATHINFO_FILENAME);
            }

            if(isset($data['visible_name']) && $data['visible_name'] != '') {
                $visible_name = $data['visible_name'];
                $document_name = $filename;
            } else {
                $visible_name = $filename;
                $document_name = $filename;
            }
            echo $document_name;exit('exit');
            if(isset($data['language_id']) && $data['language_id'] != '') {
                $lang = $data['language_id'];
            } else {
                $language = Userinfo::where('user_id', '=', $user_id)->select('language')->first();
                $lang = $language['language'];
            }

            $dueDays = '';
            $userTimeZone = $utility->getUsertimezone($user_id);
            if(isset($data['due_days']) && $data['due_days'] != '') {
                $dueDays = $data['due_days'];
                if($dueDays > 0) {
                    $dueDays = date('Y-m-d', strtotime(date('Y-m-d'). " + $dueDays days"));
                } else {
                    $dueDays = date('Y-m-d');
                }
                $dueDays = $utility->changeTimeZone($dueDays.' 23:50:00', 'Y-m-d', $userTimeZone, 'UTC');
            } else {
                $dueDays = '0000-00-00 00:00:00';
            }

            $reminderDays = '';
            if(isset($data['reminder_days']) && $data['reminder_days'] != '') {
                $reminderDays = $data['reminder_days'];
                if($reminderDays > 0) {
                    $reminderDays = date('Y-m-d', strtotime(date('Y-m-d'). " + $reminderDays days"));
                } else {
                    $reminderDays = date('Y-m-d');
                }
                $reminderDays = $utility->changeTimeZone($reminderDays.' 08:50:00', 'Y-m-d H:i:s', $userTimeZone, 'UTC');
            } else {
                $reminderDays = '0000-00-00 00:00:00';
            }

            $invitation_message = $confirmation_message = $invitation_sms_message = $confirmation_sms_message = '';
            if(isset($data['invitation_message']) && $data['invitation_message'] != '') {
                $invitation_message = $data['invitation_message'];
            }
            if(isset($data["invitation_sms"]) && $data["invitation_sms"] != "") {
                $invitation_sms_message = $data["invitation_sms"];
            }
            if(isset($data['confirmation_message']) && $data['confirmation_message'] != '') {
                $confirmation_message = $data['confirmation_message'];
            }
            if(isset($data["confirmation_sms"]) && $data["confirmation_sms"] != "") {
                $confirmation_sms_message = $data["confirmation_sms"];
            }

            //save vimeo and youtube url
            if(isset($data['video_url']) && !empty($data['video_url'])) {
                if(preg_match("@^(?:https://(?:www\\.)?youtube.com/)(watch\\?v=|v/)([a-zA-Z0-9_]*)@", $data['video_url'], $match)) {
                    $offerArray['video_link'] = $data['video_url'];
                } elseif(preg_match("/(https?:\/\/)?(www\.)?(player\.)?vimeo\.com\/([a-z]*\/)*([0-9]{6,11})[?]?.*/", $data['video_url'], $output_array)) {
                    $offerArray['video_link'] = $data['video_url'];
                } else {
                    return Response::json(['status'=>'error','result' =>'Invalid video url']);
                }
            } elseif(isset($data['video']) && !empty($data['video'])) {
                $video_file =  $data['video'];
                if($video_file->getSize() > 10485760) {
                    return Response::json(['status'=>'error','result' =>'File size is greator than 10mb']);
                } elseif($video_file->getMimeType() != "video/mp4") {
                    return Response::json(['status'=>'error','result' =>'File type must be mp4']);
                }
                $title = $video_file->getClientoriginalName();
                $videoname = uniqid().'_'.$title;
                $destination = public_path().'/uploads/user_videos';
                $link = asset('/').'/uploads/user_videos/'.$videoname;
                $video_file->move($destination, $videoname );
                $offerArray['video_link'] = '/uploads/user_videos/'.$videoname;
            }

            $sentcontract = new sendcontractController();
            $offerSentId = $sentcontract->addOffersent($user_id,$dueDays,$lang,$document_name,$reminderDays,$content='',$visible_name,$invitation_message,$confirmation_message,$retargeting_code='',$attachments='');

            $AttachmentNum = 1;
            if($attachment_file == '' && isset($data['attachment'.$AttachmentNum.'_file']) && !empty($data['attachment'.$AttachmentNum.'_file'])) {
                while(isset($data['attachment'.$AttachmentNum.'_file'])) {
                    $attachment_files = $data['attachment'.$AttachmentNum.'_file'];
                    $fileTypes = array('jpg','jpeg','gif','png','pdf','doc','docx','xls','xlsx','zip','csv','txt');
                    if(!in_array(strtolower($attachment_files->getClientOriginalExtension()), $fileTypes)) {
                        return Response::json(['status'=>'error','result' => 'Invalid attachment file type, only document files are acceptable']);
                    }
                    $attachment_names = $attachment_files->getClientoriginalName();
                    if(isset($data['attachment'.$AttachmentNum.'_name']) && !empty($data['attachment'.$AttachmentNum.'_name'])) {
                        $attachment_names = $data['attachment'.$AttachmentNum.'_name'];
                    }
                    if(isset($data['attachment'.$AttachmentNum.'_mandatory']) && !empty($data['attachment'.$AttachmentNum.'_mandatory']) && $data['attachment'.$AttachmentNum.'_mandatory'] == 1) {
                        $attachment_mandatory = 1;
                    }

                    if($attachment_files->getClientOriginalExtension() == 'pdf' || $attachment_files->getClientOriginalExtension() == 'doc' || $attachment_files->getClientOriginalExtension() == 'docx' || $attachment_files->getClientOriginalExtension() == 'xls' || $attachment_files->getClientOriginalExtension() == 'xlsx'|| $attachment_files->getClientOriginalExtension() == 'zip') {
                        $fileNameEx = $attachment_files->getClientOriginalExtension();
                    } else {
                        $fileNameEx = 'image';
                    }

                    $path  = $offerSentId.'_'.$fileNameEx.'_'.uniqid().'.'.$attachment_files->getClientOriginalExtension();

                    $newAttachmentArray[$AttachmentNum]['name'] = $attachment_names;
                    $newAttachmentArray[$AttachmentNum]['size'] = $this->formatSizeUnits($attachment_files->getSize());
                    $newAttachmentArray[$AttachmentNum]['type'] = $attachment_files->getClientOriginalExtension();
                    $newAttachmentArray[$AttachmentNum]['path'] = $path;
                    $newAttachmentArray[$AttachmentNum]['user_id'] = $user_id;
                    $newAttachmentArray[$AttachmentNum]['is_mandatory'] = $attachment_mandatory;
                    $newAttachmentArray[$AttachmentNum]['created_date'] = date("Y-m-d H:i:s");

                    $destination = public_path().'/uploads/contractattachments';
                    $attachment_files->move($destination, $path);

                    $filePath = $destination.'/'.$path;
                    //Uploading to Google Cloud Server
                    uploadToGCS($filePath, $user_id.'/offerdata', $path, env('simplesignoffersBucket'));

                    //Deleing uploaded file from local ftp
                    if(file_exists($filePath)) {
                        unlink($filePath);
                    }
                    $AttachmentNum++;
                }
            }

            if($iframeURL != 0) {
                Offersent::where('id', $offerSentId)->where('sender_id', $user_id)->update(['is_draft' => 1]);
            }
            $documentChat = 0;
            if(isset($data['document_chat']) && $data['document_chat'] == 1) {
                $documentChat = 1;
            }
            Offersent::where('id', $offerSentId)->update(['contract_chat' => $documentChat]);

            //Updating Recipients Column in Offer Sent Table
            $offerData1['recipients'] = json_encode($recsList);

            //reg no is adding if super user is available starting
            //$offerData1['reg_no'] = $reg_no;
            $offerData1['tracking_id'] = $tracking_id;
            $offerData1['invitation_sms_message'] = $invitation_sms_message;
            $offerData1['confirmation_sms_message'] = $confirmation_sms_message;
            if(isset($user_details) && !empty($user_details)) {
                $offerData1['user_details'] = $user_details;
            }
            //reg no is adding if super user is available ending

            //new multiple PDF Attachment Functionality starting
            if(!empty($newAttachmentArray)) {
                //$path  = $offerSentId.'_'.uniqid().'.'.$attachment_file->getClientOriginalExtension();
                //$attachmentArray[1]['path']   = $path;//filename
                $offerData1['attachments'] = json_encode($newAttachmentArray);
            }
            //new multiple PDF Attachment Functionality ending
            //previous code is working for old user which are already using it
            if($attachment_file != '') {
                $path  = $offerSentId.'_'.uniqid().'.'.$attachment_file->getClientOriginalExtension();
                $destination = public_path().'/uploads/contractattachments';
                $attachment_file->move($destination, $path);

                $filePath = $destination.'/'.$path;
                //Uploading to Google Cloud Server
                uploadToGCS($filePath,$user_id.'/offerdata',$path,env('simplesignoffersBucket'));

                //Deleing uploaded file from local ftp
                if(file_exists($filePath)) {
                    unlink($filePath);
                }
                $attachmentArray[1]['path']   = $path;//filename
                $offerData1['attachments'] = json_encode($attachmentArray);
            }

            //PDF Attachment Functionality END
            if(isset($data['external_doc_id'])) {
                $offerData1['external_doc_id'] = $data['external_doc_id'];
            }

            if(isset($data['filename']) && isset($data['filedata'])){

            $encoded_string = $data['filedata'];
            $decoded_file = base64_decode($encoded_string); // decode the file
            $uniqid       = uniqid();  
            $mime_type    = finfo_buffer(finfo_open(), $decoded_file, FILEINFO_MIME_TYPE); // extract mime type
            $file_ext     = $this->mime2ext($mime_type); // extract extension from mime type
            
            $file_name    = $data['filename'].'.'.$file_ext;
            $fileTypes    = array('docx','doc','xls','xlsx','csv','ppt','pptx','pdf');
            if(!in_array(strtolower($file_ext), $fileTypes)) {
            return Response::json(['status'=>'error','result' => 'Invalid document file type, only document files are acceptable']);
            }
            $name = 'pdftemplate_'.$uniqid.'.pdf';
            $name_new = 'pdftemplate_'.$uniqid.'.'.$file_ext;
            $destination = public_path().'/uploads/contractpdf'; 
            $destination2 = public_path().'/uploads/contractpdf/'.$name_new; 
            }else{

            $uniqid = uniqid();
            $file_name = $file_original_name;
            $name = 'pdftemplate_'.$uniqid.'.pdf';
            $name_new = 'pdftemplate_'.$uniqid.'_2.'.$file_ext;
            $destination = public_path().'/uploads/contractpdf'; 
            }
            $Allowed_Ext = array('docx','doc','xls','xlsx','csv','ppt','pptx');
            if(in_array($file_ext,$Allowed_Ext)) {
                
                if(isset($data['filename']) && isset($data['filedata'])){
                try {
                    file_put_contents($destination2, $decoded_file); // save

                    header('Content-Type: application/json');
                } catch (Exception $e) {
                    header('Content-Type: application/json');
                    return Response::json(['status'=>'error','result' =>json_encode($e->getMessage())]);
                }
                }else{
                $file->move($destination, $name_new); 

                }
                
                $file_path = $destination.'/'.$name_new;
                $Conversionapi = new Conversionapi();
                try{
                    $Conversionapi->convert($file_path, $destination.'/'.$name);
                }catch (\Exception $e) {
                    if(file_exists($file_path)){unlink($file_path);}
                    return Response::json(['status'=>'error','result' =>'Unable to load this file']);
                }
                if(file_exists($file_path)){unlink($file_path);}
            } else {
                if(isset($data['filename']) && isset($data['filedata'])){
                try {

                    file_put_contents($destination2, $decoded_file); // save
                    header('Content-Type: application/json');
                } catch (Exception $e) {
                    header('Content-Type: application/json');
                    return Response::json(['status'=>'error','result' =>json_encode($e->getMessage())]);
                }
                }else{
                $file->move($destination, $name_new); 
                $image_file = $destination.'/'.$name_new;
                $image_file_new = $destination.'/'.$name;
                exec( "gs -dSAFER -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dNOPAUSE -dQUIET -dBATCH -sOutputFile=".$image_file_new." ".$image_file.""); 
                if(file_exists($image_file)){unlink($image_file);}
                
                }
            }

            $returnArray = $this->createPdfContract($offerSentId,$destination,$name,$file_name,$access_token,$pdfcontent='',$pageLength='','isapi',1,$data);

            $templateFlag = false;
            $editorVersion = 'longpage';
            if(isset($data['template_id']) && $data['template_id'] != '') {
                $userTemplate = new usertemplateController();
                $getTemplateContent = $userTemplate->getTemplateByTemplateID($data['template_id'], $user_id);
                if(!empty($getTemplateContent->content)) {
                    $html = new \Htmldom($getTemplateContent->content);
                    $templateFlag = true;
                    $editorVersion = (isset($getTemplateContent->editor_version) && $getTemplateContent->editor_version != '' ? $getTemplateContent->editor_version : '');
                    if(isset($getTemplateContent->editor_version) && $getTemplateContent->editor_version == 'longpage') {
                        foreach($html->find('.template_container') as $getTemplateContentKey => $getTemplateContentValue) {
                            foreach($returnArray['responsePDFImages'] as $responsePDFImagesKey => $responsePDFImagesValue) {
                                if($getTemplateContentValue->find('.sortableContainerContentBox', $responsePDFImagesKey)) {
                                    $getTemplateContentValue->find('.sortableContainerContentBox', $responsePDFImagesKey)->find('.summernote', 0)->setAttribute('class', 'autopdfheightclass');
                                    $assignValue = '
                                        <div class="pdfbg" style="background-image: url('.$responsePDFImagesValue.')"></div>
                                        <div class="fieldElementRes box-target content_box_divInner" child="0" style="position: relative !important; border-color: transparent;">
                                            '.$getTemplateContentValue->find('.sortableContainerContentBox', $responsePDFImagesKey)->find('.fieldElementRes', 0)->innertext.'
                                        </div>';
                                    $getTemplateContentValue->find('.sortableContainerContentBox', $responsePDFImagesKey)->innertext = $assignValue;
                                } else {
                                    $getTemplateContentValue->innertext .= '
                                    <div class="sortableContainerContentBox content_box_div contentSort marginbottom140">
                                        <div class="pdfbg" style="background-image: url('.$responsePDFImagesValue.')"></div>
                                        <div class="fieldElementRes box-target content_box_divInner" child="0" style="position: relative !important; border-color: transparent;">
                                            <div class="box-inner-container ui-droppable" style="min-height: inherit;width:100%; top:0;left:0;outline: none;" contenteditable="false">
                                                <div class="summernote content_box_div_new autopdfheightclass" style="display: block;"></div>
                                            </div>
                                        </div>
                                    </div>';
                                }
                            }
                        }
                    } else {
                        foreach($html->find('.template_container') as $getTemplateContentKey => $getTemplateContentValue) {
                            if(isset($returnArray['responsePDFImages'][$getTemplateContentKey])) {
                                $getTemplateContentValue->setAttribute('style', "background-position: 50% 0%; background-repeat: no-repeat; width: 100%; height: 100%; background-size: 100% !important; background-image: url('".$returnArray['responsePDFImages'][$getTemplateContentKey]."') !important; display: block; padding: 70px;");
                            }
                        }
                    }
                    $offerData1['content'] = Tcrypt::encrypter($html);
                }
            }

            /*Add content in orignal offer table*/
            $offerWhere1['id'] = $offerSentId;
            $utility->updateItem("offer_sent",$offerWhere1,$offerData1);

            $whereSent['id'] = $offerSentId;
            $offerContent = $utility->getItem("offer_sent",$whereSent,array('content'));
            if(!empty($offerContent)) {
                $original_offer['sender_id'] = $user_id;
                $original_offer['offer_sent_id'] = $offerSentId;
                $original_offer['content'] = $offerContent->content;
                $utility->addItem("original_offer",$original_offer);
            }

            $pages = $returnArray['pages'];
            $status = $this->sendcontractnew($offerSentId, $data, $user_id, $visible_name, $invitation_message, $lang, $signing_url, '', '', $templateFlag, $iframeURL);

            if($status) {
                //Video upload
                if(isset($data['video_title']) && !empty($data['video_title'])) {
                    $offerArray['video_title'] = $data['video_title'];
                }

                if($iframeURL == 1) {
                    $offerArray['offer_status'] = 7;
                } else {
                    $offerArray['offer_status'] = 0;
                }
                $offerArray['total_pages'] = $pages+1;
                $offerArray['editor_version'] = $editorVersion;
                //$offerArray['content'] = $offerContent->content;
                $utility->updateItem("offer_sent",$whereSent,$offerArray);
                $totalRemainingSugnature = $utility->checkSignatures($parent_id);
                $getDetailsData = Offersentdetails::where('offer_sent_id', $offerSentId)->where('is_sender', 0)->select('offer_status', 'user_details')->get();
                $bounceEmails = $APIResponse = [];
                if($getDetailsData) {
                    foreach($getDetailsData as $getDetailsDataKey => $getDetailsDataValue) {
                        $offerStatus = $getDetailsDataValue['offer_status'];
                        $recipientUserDetailsDecode = json_decode(Tcrypt::decrypter($getDetailsDataValue['user_details']), true);
                        if($offerStatus == 6) {
                            $bounceEmails[] = $recipientUserDetailsDecode['email'];
                        }
                    }
                }
                
                if(isset($data['invitation_url']) && $data['invitation_url'] == 1) {
                    $APIResponse = ['status' => 'success', 'result' => 'Invitation URL successfully generated', 'parties name' => $partiesName, 'Invitation URL' => $status, 'sent_id' => $offerSentId, 'document_id' => $offerSentId, 'signature_credit_lefts' => ($totalRemainingSugnature['monthly_signature']+$totalRemainingSugnature['extra_signature'])];
                } elseif($iframeURL == 1) {
                    $getOwnerEmailAddress = User::where('id', $user_id)->select('email')->first();
                    $iframeUrl = asset('/')."api/v3/request/external?email=".trim($getOwnerEmailAddress['email'])."&access_token=".$access_token."&document_id=".$offerSentId."&send_document=1";
                    $APIResponse = ['status' => 'success', 'result' => ['iframeUrl' => $iframeUrl, 'document_id' => $offerSentId, 'signature_credit_lefts' => ($totalRemainingSugnature['monthly_signature']+$totalRemainingSugnature['extra_signature'])]];
                } else {
                    $APIResponse = ['status' => 'success', 'result' => 'document sent successfully', 'sent_id' => $offerSentId, 'document_id' => $offerSentId, 'signature_credit_lefts' => ($totalRemainingSugnature['monthly_signature']+$totalRemainingSugnature['extra_signature'])];
                }
                return response()->json($APIResponse, 200, ['Content-Type' => 'application/json; charset=UTF-8'], JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
            } elseif($status == 0) {
                return Response::json(['status'=>'success','result' =>'You are not paid user, Please upgrade your account for send document']);
            }
        } else {
            return Response::json(['status'=>'error','result' =>'Invalid access_token']);
        }
    }

    public function postSenddocument() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');
        ini_set('max_execution_time', 800);
        ini_set('memory_limit','-1');
        //print_rj($data, 1);

        //access token validation starting
        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
        //access token validation ending

        //getting user id, parent id and user settings from user_setting table starting
        $user_id = $utility->getUserIdByAuthToken($access_token);
        $parent_id = $utility->getParent($user_id);
        $getApiHitCount = Userinfo::where('user_id', $parent_id)->select('hit_count')->first();
        $addupdateapiaccesslogs = $utility->addupdateapiaccesslogs($user_id, 'postSenddocument v3', $data, $getApiHitCount['hit_count']);
        if($addupdateapiaccesslogs == 'exceed') {
            $this->apiCallLimitExceedMessage = str_replace('#hitCuntNo', $getApiHitCount['hit_count'], $this->apiCallLimitExceedMessage);
            return Response::json(['status' => 'error', 'result' => $this->apiCallLimitExceedMessage]);
        }

        /*
            API addon permission
        */
        //checking user account is not locked due to payment starting
        if(!$utility->isSuperuser($user_id)) {

            if($utility->checkAdminStripe($user_id)) {
                return Response::json(['status' => 'error', 'result' => 'Account is locked make payment in order to continue using Simplesign']);
            }
            //Cofigurewebhook
            if($utility->checkAccountLocked($user_id) == 1){
                return Response::json(['status' => 'error', 'result' => 'Account is locked make payment in order to continue using Simplesign']);
            }
            //checking user account is not locked due to payment ending

            $permissons = DB::table('users_login')->join('user_setting','users_login.id','=','user_setting.user_id')->where('users_login.id',$parent_id)->select('users_login.payment_version', 'user_setting.new_addon_obj', 'users_login.expire_trail_date', 'users_login.is_paid')->first();
            
            //changes for demo accountt asher
            $user_plan = DB::table('user_plans')->where('user_id',$parent_id)->first();
            $user_plan_id = $iframeURL = 0;
            if(!empty($user_plan) && $user_plan->plan_id == 18){
                $user_plan_id = 18;
            }

            if($permissons) {
                $is_enable_addon = json_decode($permissons->new_addon_obj);
                if($permissons->payment_version == 2) {
                    if($permissons->is_paid == 0 && strtotime(date('Y-m-d')) >= strtotime($permissons->expire_trail_date) && $user_plan_id !=18) {
                        return Response::json(['status' => 'error', 'Result' => 'Your account has been expired']);
                    }
                    if(isset($is_enable_addon->api_addon) && $is_enable_addon->api_addon == 1) {
                        // do nothing
                    } else {
                        return Response::json(['status'=>'error','result' => 'You have to enable API addon']);
                    }
                }
            }
        }
        /*
            API addon permission end
        */
        $userSettings = $utility->getUserSettings($parent_id);
        $newAddonObj = (isset($userSettings['new_addon_obj']) && !empty($userSettings['new_addon_obj']) ? json_decode($userSettings['new_addon_obj'], true) : []);
        //print_rj($userSettings['video_attachment_addon_permission']);
        //print_rj($userSettings, 1);
        //print_rj($newAddonObj, 1);
        $viewerPartyAddonPermission = (!empty($newAddonObj) && isset($newAddonObj['viewerparty_addon_permission']) && $newAddonObj['viewerparty_addon_permission'] == 1 ? $newAddonObj['viewerparty_addon_permission'] : 0);
        $finlandBankIdAddonPermission = (!empty($newAddonObj) && isset($newAddonObj['finlandbankid_addon_permission']) && $newAddonObj['finlandbankid_addon_permission'] == 1 ? $newAddonObj['finlandbankid_addon_permission'] : 0);
        $danishBankIdAddonPermission = (!empty($newAddonObj) && isset($newAddonObj['danishbankid_addon_permission']) && $newAddonObj['danishbankid_addon_permission'] == 1 ? $newAddonObj['danishbankid_addon_permission'] : 0);
        $norwegianBankIdAddonPermission = (!empty($newAddonObj) && isset($newAddonObj['norwegianbankid_addon_permission']) && $newAddonObj['norwegianbankid_addon_permission'] == 1 ? $newAddonObj['norwegianbankid_addon_permission'] : 0);
        $templateRedirectAddonPermission = (!empty($newAddonObj) && isset($newAddonObj['template_redirect_addon_permission']) && $newAddonObj['template_redirect_addon_permission'] == 1 ? $newAddonObj['template_redirect_addon_permission'] : 0);
        $contractChatAddonPermission = (isset($userSettings['contract_chat_addon_permission']) && $userSettings['contract_chat_addon_permission'] == 1 ? $userSettings['contract_chat_addon_permission'] : 0);
        $forwardSignatureAddonPermission = (isset($userSettings['fwd_signature_addon_permission']) && $userSettings['fwd_signature_addon_permission'] == 1 ? $userSettings['fwd_signature_addon_permission'] : 0);
        $swedishBankID = (isset($userSettings['sign_bankid']) && $userSettings['sign_bankid'] == 1 ? $userSettings['sign_bankid'] : 0);
        $reviewPartyAddonPermission = (isset($userSettings['review_party_addon_permission']) && $userSettings['review_party_addon_permission'] == 1 ? $userSettings['review_party_addon_permission'] : 0);
        //$attachmentsAddonPermission = (isset($userSettings['attachments_addon_permission']) && $userSettings['attachments_addon_permission'] == 1 ? $userSettings['attachments_addon_permission'] : 0);
        $documentFieldsAddonPermission = (isset($userSettings['document_fields']) && $userSettings['document_fields'] == 1 ? $userSettings['document_fields'] : 0);
        $contractTypeAddon = (!empty($newAddonObj) && isset($newAddonObj['contractType_addon']) && $newAddonObj['contractType_addon'] == 1 ? $newAddonObj['contractType_addon'] : 0);
        $securityAddonPermission = (isset($userSettings['security_addon_permission']) && $userSettings['security_addon_permission'] == 1 ? $userSettings['security_addon_permission'] : 0);
        $videoAttachmentAddonPermission = (isset($userSettings['video_attachment_addon_permission']) && $userSettings['video_attachment_addon_permission'] == 1 ? $userSettings['video_attachment_addon_permission'] : 0);
        //getting user id, parent id and user settings from user_setting table ending

        //document key starting
        $checkMobileNoForPinViaSMS = $checkPersonalNoForBankID = false;
        if(isset($data['document_key']) && !empty($data['document_key'])) {
            if($securityAddonPermission != 1) {
                return Response::json(['status' => 'error', 'result' => 'Document key feature is not enabled in your account, Contact Simplesign support for Document key activation']);
            }
            if($this->is_JSON($data['document_key'])) {
                $documentKey = json_decode($data['document_key'], true);
                if(isset($documentKey['type'])) {
                    $documentKeyArray = ['password', 'pinviasms', 'bankid'];
                    if(!in_array(strtolower($documentKey['type']), $documentKeyArray)) {
                        return Response::json(['status' => 'error', 'result' => 'Type must be password, pinviasms or bankid']);
                    } if(isset($documentKey['type']) && $documentKey['type'] == 'password' && !isset($documentKey['set_password'])) {
                        return Response::json(['status' => 'error', 'result' => 'set_password is required']);
                    } if($documentKey['type'] == 'pinviasms') {
                        $checkMobileNoForPinViaSMS = true;
                    } if($documentKey['type'] == 'bankid') {
                        $checkPersonalNoForBankID = true;
                    }
                } else {
                    return Response::json(['status' => 'error', 'result' => 'Type is required']);
                }
            } else {
                return Response::json(['status'=>'error','result' => 'Document key is invalid format, JSON is required']);
            }
        }
        //document key ending

        if((isset($data['video_url']) && !empty($data['video_url']) || isset($data['video']) && !empty($data['video'])) && $videoAttachmentAddonPermission != 1) {
            return Response::json(['status' => 'error', 'result' => 'Video Attachment feature is not enabled in your account, Contact Simplesign support for Video Attachment activation']);
        }

        //checking recipients variable and other validation starting
        $partiesName = [];
        if(isset($data['recipients']) && $data['recipients'] != '') {
            if($this->is_JSON($data['recipients'])) {
                $recipients = json_decode($data['recipients'],true);
                $recsList = $mainArray = array();//recipients list for offer sent table
                if(!empty($recipients)) {
                    foreach($recipients as $reckey => $recVal) {
                        if(!isset($recVal['people_fields']) || !is_array($recVal['people_fields'])) {
                            return Response::json(['status' => 'error', 'result' => 'people_fields should be array']);
                        } else {
                            if(!isset($recVal['people_fields']) || empty($recVal['people_fields'])) {
                                return Response::json(['status' => 'error', 'result' => 'People information is missing']);
                            } elseif(isset($recVal['people_fields']) && !empty($recVal['people_fields'])) {
                                $sentRec = array();
                                //Recipients basic information validations like name and email starting
                                if(!isset($recVal['people_fields']['name']) || $recVal['people_fields']['name'] == '') {
                                    return Response::json(['status'=>'error','result' => 'Invalid or missing Recipient name']);
                                } elseif(!isset($recVal['people_fields']['email']) || !filter_var($recVal['people_fields']['email'], FILTER_VALIDATE_EMAIL)) {
                                    return Response::json(['status'=>'error','result' => 'Invalid or missing Recipient email']);
                                }
                                //Recipients basic information validations like name and email starting

                                //Roles of recipient validation starting
                                elseif(!isset($recVal['details']['recipient_role']) || $recVal['details']['recipient_role'] == '') {
                                    return Response::json(['status'=>'error','result' => 'Invalid or missing recipient_role in details']);
                                } /* elseif(isset($recVal['details']['recipient_role']) && $recVal['details']['recipient_role'] != '') {
                                    $tabComponents = Recipient_fields_roles::where('userid', $user_id)->where('tab_components', $recVal['details']['recipient_role'])->count();
                                    if(!$tabComponents) {
                                        return Response::json(['status'=>'error','result' => $recVal['details']['recipient_role'].' recipient_role doesn\'t exists in this account.']);
                                    }
                                } */
                                //Roles of recipient validation ending
                                
                                //Authentication validations starting
                                elseif(isset($recVal['details']['authentication']) && ($recVal['details']['authentication'] == 'bankID' || $recVal['details']['authentication'] == 'BankID' || $recVal['details']['authentication'] == 'Bank ID'  || $recVal['details']['authentication'] == 'bank ID') && $swedishBankID != 1) {
                                    return Response::json(['status'=>'error','result' => 'BankID feature is not enabled in your account, Contact Simplesign support for BankID activation']);
                                } elseif(isset($recVal['details']['authentication']) && ($recVal['details']['authentication'] == 'bankID' || $recVal['details']['authentication'] == 'BankID') && $swedishBankID == 1) {
                                    if(isset($recVal['people_fields']['personal_no']) && !empty($recVal['people_fields']['personal_no']) && strlen($recVal['people_fields']['personal_no']) != 12) {
                                        return Response::json(['status'=>'error','result' =>'personal_no must be 12 digits']);
                                    }
                                } elseif(isset($recVal['details']['authentication']) && ($recVal['details']['authentication'] == 'FinnishBankID' || $recVal['details']['authentication'] == 'Finnish BankID' || $recVal['details']['authentication'] == 'FINNISHBANKID'  || $recVal['details']['authentication'] == 'finnish bankid' || $recVal['details']['authentication'] == 'finnishbankid') && $finlandBankIdAddonPermission != 1) {
                                    return Response::json(['status'=>'error','result' => 'Finnish BankID feature is not enabled in your account, Contact Simplesign support for Finnish BankID activation']);
                                } elseif(isset($recVal['details']['authentication']) && ($recVal['details']['authentication'] == 'FinnishBankID' || $recVal['details']['authentication'] == 'Finnish BankID' || $recVal['details']['authentication'] == 'FINNISHBANKID'  || $recVal['details']['authentication'] == 'finnish bankid' || $recVal['details']['authentication'] == 'finnishbankid') && $finlandBankIdAddonPermission == 1) {
                                    if(isset($recVal['people_fields']['personal_no']) && !empty($recVal['people_fields']['personal_no']) && strlen($recVal['people_fields']['personal_no']) != 12) {
                                        return Response::json(['status'=>'error','result' =>'personal_no must be 12 digits']);
                                    }
                                } elseif(isset($recVal['details']['authentication']) && ($recVal['details']['authentication'] == 'DanishBankID' || $recVal['details']['authentication'] == 'Danish BankID' || $recVal['details']['authentication'] == 'DANISHBANKID'  || $recVal['details']['authentication'] == 'danish bankid' || $recVal['details']['authentication'] == 'danishbankid') && $danishBankIdAddonPermission != 1) {
                                    return Response::json(['status'=>'error','result' => 'Danish BankID feature is not enabled in your account, Contact Simplesign support for Danish BankID activation']);
                                } elseif(isset($recVal['details']['authentication']) && ($recVal['details']['authentication'] == 'DanishBankID' || $recVal['details']['authentication'] == 'Danish BankID' || $recVal['details']['authentication'] == 'DANISHBANKID'  || $recVal['details']['authentication'] == 'danish bankid' || $recVal['details']['authentication'] == 'danishbankid') && $danishBankIdAddonPermission == 1) {
                                    if(isset($recVal['people_fields']['personal_no']) && !empty($recVal['people_fields']['personal_no']) && strlen($recVal['people_fields']['personal_no']) != 12) {
                                        return Response::json(['status'=>'error','result' =>'personal_no must be 12 digits']);
                                    }
                                } elseif(isset($recVal['details']['authentication']) && ($recVal['details']['authentication'] == 'NorwegianBankID' || $recVal['details']['authentication'] == 'Norwegian BankID' || $recVal['details']['authentication'] == 'NORWEGIANBANKID'  || $recVal['details']['authentication'] == 'norwegian bankid' || $recVal['details']['authentication'] == 'norwegianbankid') && $norwegianBankIdAddonPermission != 1) {
                                    return Response::json(['status'=>'error','result' => 'Norwegian BankID feature is not enabled in your account, Contact Simplesign support for Norwegian BankID activation']);
                                } elseif(isset($recVal['details']['authentication']) && ($recVal['details']['authentication'] == 'NorwegianBankID' || $recVal['details']['authentication'] == 'Norwegian BankID' || $recVal['details']['authentication'] == 'NORWEGIANBANKID'  || $recVal['details']['authentication'] == 'norwegian bankid' || $recVal['details']['authentication'] == 'norwegianbankid') && $norwegianBankIdAddonPermission == 1) {
                                    if(isset($recVal['people_fields']['personal_no']) && !empty($recVal['people_fields']['personal_no']) && strlen($recVal['people_fields']['personal_no']) != 12) {
                                        return Response::json(['status'=>'error','result' =>'personal_no must be 12 digits']);
                                    }
                                } elseif(isset($recVal['details']['authentication']) && ($recVal['details']['authentication'] == 'Attest' || $recVal['details']['authentication'] == 'At test' || $recVal['details']['authentication'] == 'attest'  || $recVal['details']['authentication'] == 'at test') && $reviewPartyAddonPermission != 1) {
                                    return Response::json(['status'=>'error','result' => 'Attest feature is not enabled in your account, Contact Simplesign support for Attest activation']);
                                } elseif(isset($recVal['details']['authentication']) && ($recVal['details']['authentication'] == 'ViewOnly' || $recVal['details']['authentication'] == 'View Only' || $recVal['details']['authentication'] == 'viewonly'  || $recVal['details']['authentication'] == 'view only') && $viewerPartyAddonPermission != 1) {
                                    return Response::json(['status'=>'error','result' => 'View only feature is not enabled in your account, Contact Simplesign support for view only activation']);
                                }
                                //Authentication validations ending

                                //Validation when invitation_type is 2, for email and sms, need mobile no starting
                                if(isset($recVal['details']['invitation_type']) && ($recVal['details']['invitation_type'] == 'email and sms' || $recVal['details']['invitation_type'] == 'Email And SMS' || $recVal['details']['invitation_type'] == 'email & sms' || $recVal['details']['invitation_type'] == 'Email & SMS')) {
                                    if(!isset($recVal['people_fields']['mobile']) || empty($recVal['people_fields']['mobile'])) {
                                        return Response::json(['status'=>'error','result' =>'mobile is mandatory for recipient '.$recVal['people_fields']['name'].' in order to send invitation sms']);
                                    }
                                }
                                //Validation when invitation_type is 2, for email and sms, need mobile no ending

                                //Validation when confirmation is 2, for email and sms, need mobile no starting
                                if(isset($recVal['details']['confirmation']) && ($recVal['details']['confirmation'] == 'email and sms' || $recVal['details']['confirmation'] == 'Email And SMS' || $recVal['details']['confirmation'] == 'email & sms' || $recVal['details']['confirmation'] == 'Email & SMS')) {
                                    if(!isset($recVal['people_fields']['mobile']) || empty($recVal['people_fields']['mobile'])) {
                                        return Response::json(['status'=>'error','result' =>'mobile is mandatory for recipient '.$recVal['people_fields']['name'].' in order to send confirmation sms']);
                                    }
                                }
                                //Validation when confirmation is 2, for email and sms, need mobile no ending

                                //Validation when document key is set, for pinviasms, need mobile no starting
                                if($checkMobileNoForPinViaSMS && (!isset($recVal['people_fields']['mobile']) || empty($recVal['people_fields']['mobile']))) {
                                    return Response::json(['status'=>'error','result' =>'mobile is mandatory for recipient '.$recVal['people_fields']['name'].' in order to set document key for pinviasms']);
                                }
                                //Validation when document key is set, for pinviasms, need mobile no ending

                                //Validation when document key is set, for pinviasms, need mobile no starting
                                if($checkPersonalNoForBankID && (!isset($recVal['people_fields']['personal_no']) || empty($recVal['people_fields']['personal_no']))) {
                                    return Response::json(['status'=>'error','result' =>'personal_no is mandatory for recipient '.$recVal['people_fields']['name'].' in order to set document key for bankid']);
                                }
                                //Validation when document key is set, for pinviasms, need mobile no ending

                                $sentRec['full_name'] = $recVal['people_fields']['name'];
                                $sentRec['email'] = $recVal['people_fields']['email'];
                                $partiesName[] = $recVal['people_fields']['name'];
                                array_push($recsList, $sentRec);
                            }
                        }
                    } //Foreach End
                } else {
                    return Response::json(['status'=>'error','result' => 'Recipient information should not be empty']);
                }
            } else {
                return Response::json(['status'=>'error','result' => 'Recipient information is invalid format, JSON is required']);
            }
        } else {
            return Response::json(['status'=>'error','result' => 'Recipient information is missing']);
        }
        //checking recipients variable and other validation ending

        if(!$utility->checkusersignatures($user_id, $recsList) && !$utility->isSuperuser($user_id)) {
            return Response::json(['status' => 'error', 'result' => 'user doesn\'t have enough signatures(s)']);
        }

        if(isset($data['document_chat']) && $data['document_chat'] == 1 && $contractChatAddonPermission != 1) {
            return Response::json(['status' => 'error', 'result' => 'Document chat feature is not enabled in your account, Contact Simplesign support for document chat activation']);
        }
        
        if(isset($data['transfer_signature_role']) && $data['transfer_signature_role'] == 1 && $forwardSignatureAddonPermission != 1) {
            return Response::json(['status' => 'error', 'result' => 'Transfer Signature Role feature is not enabled in your account, Contact Simplesign support for transfer signature role activation']);
        }

        if(isset($data['redirect_url']) && $data['redirect_url'] != '') {
            if($templateRedirectAddonPermission != 1) {
                return Response::json(['status' => 'error', 'result' => 'Template redirect feature is not enabled in your account, Contact Simplesign support for Template redirect activation']);
            } if(filter_var($data['redirect_url'], FILTER_VALIDATE_URL) === FALSE) {
                return Response::json(['status' => 'error', 'result' => 'Invalid URL']);
            }
        }
        if(isset($data['document_type']) && !empty($data['document_type'])) {
            if($contractTypeAddon != 1) {
                return Response::json(['status' => 'error', 'result' => 'Document type feature is not enabled in your account, Contact Simplesign support for document type activation']);
            }
        }
        //template_redirect_addon_permission
        
        //checking document fields keys and it's values starting
        if(isset($data['documentfields'])) {
            if($documentFieldsAddonPermission != 1) {
                return Response::json(['status' => 'error', 'result' => 'Document Fields feature is not enabled in your account, Contact Simplesign support for Document Fields activation']);
            }
            if(!empty($data['documentfields']) && $this->is_JSON($data['documentfields'])) {
                $documentFields = json_decode($data['documentfields'], true);
                foreach($documentFields as $docKey => $docValue) {
                    if(!is_array($docValue['document_fields'])) {
                        return Response::json(['status' => 'error', 'result' => 'document_fields should be array']);
                    } else {
                        if(!isset($docValue['document_fields']) || empty($docValue['document_fields'])) {
                            return Response::json(['status' => 'error', 'result' => 'Document information is missing']);
                        } elseif(isset($docValue['document_fields']) && !empty($docValue['document_fields'])) {
                            foreach($docValue['document_fields'] as $docFldKey => $docFldValue) {
                                if(!isset($docFldKey) || $docFldKey == '') {
                                    return Response::json(['status' => 'error', 'result' => 'document_fields key is missing']);
                                } if(!isset($docFldValue) || $docFldValue == '') {
                                    return Response::json(['status' => 'error', 'result' => 'document_fields value is missing']);
                                }
                            }
                        }
                    }
                }//loop ends here
            } else {
                return Response::json(['status'=>'error','result' => 'Document information is invalid format, JSON is required']);
            }
        }
        //checking document fields keys and it's values ending

        if(isset($data['attachment']) && !empty($data['attachment']) && $userSettings['attachments_addon_permission'] != 1) {
            return Response::json(['status'=>'error','result' => 'Attachment feature is not enabled in your account, Contact Simplesign support for Attachment activation']);
        } if(isset($data['attachment1_file']) && !empty($data['attachment1_file']) && $userSettings['attachments_addon_permission'] != 1) {
            return Response::json(['status'=>'error','result' => 'Attachments feature is not enabled in your account, Contact Simplesign support for Attachments activation']);
        }

        //getting invitation url for showing document link in response instead of an email starting
        if(isset($data['invitation_url']) && $data['invitation_url'] == 1) {
            $signing_url = 1;
        } else {
            $signing_url = 0;
        }
        //getting invitation url for showing document link in response instead of an email ending

        //show iframe URL instead of sending emails starting
        if(isset($data['iframe_url']) && $data['iframe_url'] != 0) {
            $iframeURL = $data['iframe_url'];
        }
        //show iframe URL instead of sending emails ending

        //PDF Attachment Functionality START
        $attachmentArray = $newAttachmentArray = array();
        $attachment_mandatory = 0;
        $attachment_file = $attachment_name = $attachment_files = $attachment_names = $fileNameEx = '';
        if(isset($data['attachment']) && !empty($data['attachment'])) {
            $attachment_file = $data['attachment'];
            $fileTypes = array('JPG','JPEG','GIF','PNG','jpg','jpeg','gif','png','pdf','doc','docx','xls','xlsx','zip','csv','txt');
            if(!in_array(strtolower($attachment_file->getClientOriginalExtension()), $fileTypes)) {
                return Response::json(['status'=>'error','result' => 'Invalid attachment file type, only document files are acceptable']);
            }
            $attachment_name = $attachment_file->getClientoriginalName();
            if(isset($data['attachment_name']) && !empty($data['attachment_name'])) {
                $attachment_name = $data['attachment_name'];
            }
            if(isset($data['attachment_mandatory']) && !empty($data['attachment_mandatory']) && $data['attachment_mandatory'] == 1) {
                $attachment_mandatory = 1;
            }
            $attachmentArray[1]['name'] = $attachment_name;
            $attachmentArray[1]['is_mandatory'] = $attachment_mandatory;
            $attachmentArray[1]['user_id'] = $user_id;
            $attachmentArray[1]['created_date'] = date("Y-m-d H:i:s");
        }
        //PDF Attachment Functionality END

        //getting info and manipulating about super user starting
        $parent_id = $utility->getParent($user_id);
        $reg_no = $company_name = $user_details = $tracking_id = "";
        if($utility->isSuperuser($user_id)) {
            $company_name = (isset($data["sender_company"]) && !empty($data["sender_company"]) ? $data["sender_company"] : "");
            if((isset($data["sender_company"]) && !empty($data["sender_company"])) && (!isset($data["sender_reg_no"]) && empty($data["sender_reg_no"]))) {
                return Response::json(["status" => "error", "result" => "After given sender_company name sender_reg_no is mandatory"]);
            } elseif((isset($data["sender_reg_no"]) && !empty($data["sender_reg_no"])) && (!isset($data["sender_company"]) && empty($data["sender_company"]))) {
                return Response::json(["status" => "error", "result" => "After given sender_reg_no sender_company is mandatory"]);
            } elseif(isset($data["sender_reg_no"]) && !empty($data["sender_reg_no"])) {
                $userdata = $utility->getParentDetails($user_id);
                $userArrar = array();
                $userArrar['first_name'] = $userdata->full_name;
                $userArrar['last_name'] = $userdata->second_name;
                $userArrar['email'] = $userdata->email;
                
                $userArrar['company'] = (isset($company_name) && !empty($company_name) ? $company_name : $userdata->company);
                $reg_no = $data["sender_reg_no"];
                $userArrar['reg_no'] = $reg_no;
                $userArrar['address'] = (isset($data["sender_address"]) && !empty($data["sender_address"]) ? $data["sender_address"] : $userdata->address);
                $userArrar['telephone'] = (isset($data["sender_telephone"]) && !empty($data["sender_telephone"]) ? $data["sender_telephone"] : $userdata->telephone);
                $userArrar['post_code'] = (isset($data["sender_post_code"]) && !empty($data["sender_post_code"]) ? $data["sender_post_code"] : $userdata->post_code);
                $userArrar['city'] = (isset($data["sender_city"]) && !empty($data["sender_city"]) ? $data["sender_city"] : $userdata->city);
                $user_details = json_encode($userArrar);
            } else {
                $gettingFromUserInfo = Userinfo::where("user_id", $parent_id)->select("reg_no")->first();
                $reg_no = $gettingFromUserInfo["reg_no"];
            }
        }

        if(isset($data["tracking_id"]) && !empty($data["tracking_id"])) {
            if(strlen($data["tracking_id"]) < 6 || strlen($data["tracking_id"]) > 6) {
                return Response::json(["status" => "error", "result" => "tracking_id must be 6 digits"]);
            } else {
                $tracking_id = $data["tracking_id"];
            }
        }
        //getting info and manipulating about super user ending

        //Condition if sender_email Available(for sub users)
        if(isset($data['sender_email']) && $data['sender_email'] != '') {
            $sender_email = Tcrypt::encrypter($data['sender_email']);
            $checkSubuser = User::where('email','=',$sender_email)->where('parent_id','=',$user_id)->select('id')->first();
            if($checkSubuser['id']) {
                $user_id = $checkSubuser['id'];
            }
        }

        if(!empty($user_id) && $user_id > 0) {
            if(isset($data['filename']) && isset($data['filedata'])){
                $filename = $data['filename'];
                if(empty($data['filename']) ) {
                return Response::json(['status'=>'error','result' =>'File is name']);
                }
                if(empty($data['filedata']) ) {
                return Response::json(['status'=>'error','result' =>'File is file data']);
                } else {
                    if(base64_decode($data['filedata'], true)) {} else {
                        return Response::json(['status' => 'error', 'result' => 'Base64 code is not correct']);
                    }
                }
            } elseif(!isset($data['file']) || empty($data['file'])) {
                return Response::json(['status'=>'error','result' =>'File is missing']);
            } elseif(gettype($data['file']) != 'object') {
                return Response::json(['status' => 'error', 'result' => 'Unable to access provided document, please check your code and try again']);
            }else{
                $file = $data['file'];
                $fileTypes = array('docx','doc','xls','xlsx','csv','ppt','pptx','pdf');
                if(!in_array(strtolower($file->getClientOriginalExtension()), $fileTypes)) {
                    return Response::json(['status'=>'error','result' => 'Invalid document file type, only document files are acceptable']);
                }
                $file_original_name = $file->getClientoriginalName();
                $file_ext = strtolower($file->getClientOriginalExtension());
                setlocale(LC_ALL,'en_US.UTF-8');
                $filename = pathinfo($file_original_name, PATHINFO_FILENAME);
            }

            if(isset($data['visible_name']) && $data['visible_name'] != '') {
                $visible_name = $data['visible_name'];
                $document_name = $filename;
            } else {
                $visible_name = $filename;
                $document_name = $filename;
            }
            if(isset($data['language_id']) && $data['language_id'] != '') {
                $lang = $data['language_id'];
            } else {
                $language = Userinfo::where('user_id', '=', $user_id)->select('language')->first();
                $lang = $language['language'];
            }

            $dueDays = '';
            $userTimeZone = $utility->getUsertimezone($user_id);
            if(isset($data['due_days']) && $data['due_days'] != '') {
                $dueDays = $data['due_days'];
                if($dueDays > 0) {
                    $dueDays = date('Y-m-d', strtotime(date('Y-m-d'). " + $dueDays days"));
                } else {
                    $dueDays = date('Y-m-d');
                }
                $dueDays = $utility->changeTimeZone($dueDays.' 23:50:00', 'Y-m-d', $userTimeZone, 'UTC');
            } else {
                $dueDays = '0000-00-00 00:00:00';
            }

            $reminderDays = '';
            if(isset($data['reminder_days']) && $data['reminder_days'] != '') {
                $reminderDays = $data['reminder_days'];
                if($reminderDays > 0) {
                    $reminderDays = date('Y-m-d', strtotime(date('Y-m-d'). " + $reminderDays days"));
                } else {
                    $reminderDays = date('Y-m-d');
                }
                $reminderDays = $utility->changeTimeZone($reminderDays.' 08:50:00', 'Y-m-d H:i:s', $userTimeZone, 'UTC');
            } else {
                $reminderDays = '0000-00-00 00:00:00';
            }

            $invitation_message = $confirmation_message = $invitation_sms_message = $confirmation_sms_message = '';
            if(isset($data['invitation_message']) && $data['invitation_message'] != '') {
                $invitation_message = $data['invitation_message'];
            } else {
                $invitationMessageSettings = settings::where('user_id', $parent_id)->pluck('invitation_message_settings');
                if($invitationMessageSettings != '') {
                    $invitationMessageSettingsJson = json_decode($invitationMessageSettings, true);
                    if(isset($invitationMessageSettingsJson['status']) && $invitationMessageSettingsJson['status'] == 1) {
                        $invitation_message = $invitationMessageSettingsJson['invitation_message'];
                    }
                }
            }
            if(isset($data["invitation_sms"]) && $data["invitation_sms"] != "") {
                $invitation_sms_message = $data["invitation_sms"];
            }
            if(isset($data['confirmation_message']) && $data['confirmation_message'] != '') {
                $confirmation_message = $data['confirmation_message'];
            }
            if(isset($data["confirmation_sms"]) && $data["confirmation_sms"] != "") {
                $confirmation_sms_message = $data["confirmation_sms"];
            }

            //save vimeo and youtube url
            if(isset($data['video_url']) && !empty($data['video_url'])) {
                if(preg_match("@^(?:https://(?:www\\.)?youtube.com/)(watch\\?v=|v/)([a-zA-Z0-9_]*)@", $data['video_url'], $match)) {
                    $offerArray['video_link'] = $data['video_url'];
                } elseif(preg_match("/(https?:\/\/)?(www\.)?(player\.)?vimeo\.com\/([a-z]*\/)*([0-9]{6,11})[?]?.*/", $data['video_url'], $output_array)) {
                    $offerArray['video_link'] = $data['video_url'];
                } else {
                    return Response::json(['status'=>'error','result' =>'Invalid video url']);
                }
            } elseif(isset($data['video']) && !empty($data['video'])) {
                $video_file =  $data['video'];
                if(is_file($video_file)) {
                    if($video_file->getSize() > 10485760) {
                        return Response::json(['status'=>'error','result' =>'File size is greator than 10mb']);
                    } elseif($video_file->getMimeType() != "video/mp4") {
                        return Response::json(['status'=>'error','result' =>'File type must be mp4']);
                    }
                    $title = $video_file->getClientoriginalName();
                    $videoname = uniqid().'_'.$title;
                    $destination = public_path().'/uploads/user_videos';
                    $link = asset('/').'/uploads/user_videos/'.$videoname;
                    $video_file->move($destination, $videoname );
                    $offerArray['video_link'] = '/uploads/user_videos/'.$videoname;
                } else {
                    return Response::json(['status'=>'error','result' =>'File type must be mp4']);
                }
            }

            $sentcontract = new sendcontractController();
            $offerSentId = $sentcontract->addOffersent($user_id,$dueDays,$lang,$document_name,$reminderDays,$content='',$visible_name,$invitation_message,$confirmation_message,$retargeting_code='',$attachments='');

            $offerSentdataInsertion['sent_id'] = $offerSentId;
            if(isset($data['redirect_url']) && $data['redirect_url'] != '') {
                $templateURLRedirectData['template_redirect_url'] = $data['redirect_url'];
                $offerSentdataInsertion['contract_settings'] = json_encode($templateURLRedirectData);
            }
            //
            if(isset($data['document_type']) && !empty($data['document_type'])) {
                if($contractTypeAddon != 1) {
                    return Response::json(['status' => 'error', 'result' => 'Document type feature is not enabled in your account, Contact Simplesign support for document type activation']);
                } else {
                    $getArchiveDocumentTypesData = DB::table('archive_document_types')->where('user_id', $parent_id)->where('type_name', trim($data['document_type']))->select('id')->first();
                    if($getArchiveDocumentTypesData) {
                        $offerSentdataInsertion['contract_type_id'] = $getArchiveDocumentTypesData->id;
                    }
                }
            }
            $offersentdataInsertedId = Offersent_data::insertGetId($offerSentdataInsertion);

            $AttachmentNum = 1;
            if($attachment_file == '' && isset($data['attachment'.$AttachmentNum.'_file']) && !empty($data['attachment'.$AttachmentNum.'_file'])) {
                while(isset($data['attachment'.$AttachmentNum.'_file'])) {
                    $attachment_files = $data['attachment'.$AttachmentNum.'_file'];
                    $fileTypes = array('JPG','JPEG','GIF','PNG','jpg','jpeg','gif','png','pdf','doc','docx','xls','xlsx','zip','csv','txt');
                    if(!in_array(strtolower($attachment_files->getClientOriginalExtension()), $fileTypes)) {
                        return Response::json(['status'=>'error','result' => 'Invalid attachment file type, only document files are acceptable']);
                    }
                    $attachment_names = $attachment_files->getClientoriginalName();
                    if(isset($data['attachment'.$AttachmentNum.'_name']) && !empty($data['attachment'.$AttachmentNum.'_name'])) {
                        $attachment_names = $data['attachment'.$AttachmentNum.'_name'];
                    }
                    if(isset($data['attachment'.$AttachmentNum.'_mandatory']) && !empty($data['attachment'.$AttachmentNum.'_mandatory']) && $data['attachment'.$AttachmentNum.'_mandatory'] == 1) {
                        $attachment_mandatory = 1;
                    }

                    if($attachment_files->getClientOriginalExtension() == 'pdf' || $attachment_files->getClientOriginalExtension() == 'doc' || $attachment_files->getClientOriginalExtension() == 'docx' || $attachment_files->getClientOriginalExtension() == 'xls' || $attachment_files->getClientOriginalExtension() == 'xlsx'|| $attachment_files->getClientOriginalExtension() == 'zip') {
                        $fileNameEx = $attachment_files->getClientOriginalExtension();
                    } else {
                        $fileNameEx = 'image';
                    }

                    $path  = $offerSentId.'_'.$fileNameEx.'_'.uniqid().'.'.$attachment_files->getClientOriginalExtension();

                    $newAttachmentArray[$AttachmentNum]['name'] = $attachment_names;
                    $newAttachmentArray[$AttachmentNum]['size'] = $this->formatSizeUnits($attachment_files->getSize());
                    $newAttachmentArray[$AttachmentNum]['type'] = $attachment_files->getClientOriginalExtension();
                    $newAttachmentArray[$AttachmentNum]['path'] = $path;
                    $newAttachmentArray[$AttachmentNum]['user_id'] = $user_id;
                    $newAttachmentArray[$AttachmentNum]['is_mandatory'] = $attachment_mandatory;
                    $newAttachmentArray[$AttachmentNum]['created_date'] = date("Y-m-d H:i:s");

                    $destination = public_path().'/uploads/contractattachments';
                    $attachment_files->move($destination, $path);

                    $filePath = $destination.'/'.$path;
                    //Uploading to Google Cloud Server
                    uploadToGCS($filePath, $user_id.'/offerdata', $path, env('simplesignoffersBucket'));

                    //Deleing uploaded file from local ftp
                    if(file_exists($filePath)) {
                        unlink($filePath);
                    }
                    $AttachmentNum++;
                }
            }

            if($iframeURL != 0) {
                Offersent::where('id', $offerSentId)->where('sender_id', $user_id)->update(['is_draft' => 1]);
            }
            $documentChat = $transferSignatureRole = 0;
            if(isset($data['document_chat']) && $data['document_chat'] == 1) {
                $documentChat = 1;
            } if(isset($data['transfer_signature_role']) && $data['transfer_signature_role'] == 1) {
                $transferSignatureRole = 1;
            }
            Offersent::where('id', $offerSentId)->update(['contract_chat' => $documentChat, 'allow_forward' => $transferSignatureRole, 'editor_version' => 'longpage']);

            //Updating Recipients Column in Offer Sent Table
            $offerData1['recipients'] = json_encode($recsList);

            //reg no is adding if super user is available starting
            //$offerData1['reg_no'] = $reg_no;
            $offerData1['tracking_id'] = $tracking_id;
            $offerData1['invitation_sms_message'] = $invitation_sms_message;
            $offerData1['confirmation_sms_message'] = $confirmation_sms_message;
            if(isset($user_details) && !empty($user_details)) {
                $offerData1['user_details'] = $user_details;
            }
            //reg no is adding if super user is available ending

            //new multiple PDF Attachment Functionality starting
            if(!empty($newAttachmentArray)) {
                $offerData1['attachments'] = json_encode($newAttachmentArray);
            }
            //new multiple PDF Attachment Functionality ending
            //previous code is working for old user which are already using it
            if($attachment_file != '') {
                $path  = $offerSentId.'_'.uniqid().'.'.$attachment_file->getClientOriginalExtension();
                $destination = public_path().'/uploads/contractattachments';
                $attachment_file->move($destination, $path);

                $filePath = $destination.'/'.$path;
                //Uploading to Google Cloud Server
                uploadToGCS($filePath,$user_id.'/offerdata',$path,env('simplesignoffersBucket'));

                //Deleing uploaded file from local ftp
                if(file_exists($filePath)) {
                    unlink($filePath);
                }
                $attachmentArray[1]['path'] = $path;//filename
                $offerData1['attachments'] = json_encode($attachmentArray);
            }

            //PDF Attachment Functionality END
            if(isset($data['external_doc_id'])) {
                $offerData1['external_doc_id'] = $data['external_doc_id'];
            }

            if(isset($data['filename']) && isset($data['filedata'])){

            $encoded_string = $data['filedata'];
            $decoded_file = base64_decode($encoded_string); // decode the file
            $uniqid       = uniqid();  
            $mime_type    = finfo_buffer(finfo_open(), $decoded_file, FILEINFO_MIME_TYPE); // extract mime type
            $file_ext     = $this->mime2ext($mime_type); // extract extension from mime type
            
            $file_name    = $data['filename'].'.'.$file_ext;
            $fileTypes    = array('docx','doc','xls','xlsx','csv','ppt','pptx','pdf');
            if(!in_array(strtolower($file_ext), $fileTypes)) {
            return Response::json(['status'=>'error','result' => 'Invalid document file type, only document files are acceptable']);
            }
            $name = 'pdftemplate_'.$uniqid.'.pdf';
            $name_new = 'pdftemplate_'.$uniqid.'_2.'.$file_ext;
            $destination = public_path().'/uploads/contractpdf'; 
            $destination2 = public_path().'/uploads/contractpdf/'.$name_new; 
            }else{

            $uniqid = uniqid();
            $file_name = $file_original_name;
            $name = 'pdftemplate_'.$uniqid.'.pdf';
            $name_new = 'pdftemplate_'.$uniqid.'_2.'.$file_ext;
            $destination = public_path().'/uploads/contractpdf'; 
            }
            $Allowed_Ext = array('docx','doc','xls','xlsx','csv','ppt','pptx');
            if(in_array($file_ext,$Allowed_Ext)) {
                
                if(isset($data['filename']) && isset($data['filedata'])){
                try {
                    file_put_contents($destination2, $decoded_file); // save

                    header('Content-Type: application/json');
                } catch (Exception $e) {
                    header('Content-Type: application/json');
                    return Response::json(['status'=>'error','result' =>json_encode($e->getMessage())]);
                }
                }else{
                $file->move($destination, $name_new); 

                }
                
                $file_path = $destination.'/'.$name_new;
                $Conversionapi = new Conversionapi();
                try{
                    $Conversionapi->convert($file_path, $destination.'/'.$name);
                }catch (\Exception $e) {
                    if(file_exists($file_path)){unlink($file_path);}
                    return Response::json(['status'=>'error','result' =>'Unable to load this file']);
                }
                if(file_exists($file_path)){unlink($file_path);}
            } else {
                if(isset($data['filename']) && isset($data['filedata'])){
                try {
                    file_put_contents($destination2, $decoded_file); // save
                    header('Content-Type: application/json');
                    $image_file = $destination.'/'.$name_new;
                    $image_file_new = $destination.'/'.$name;
                    exec( "gs -dSAFER -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dNOPAUSE -dQUIET -dBATCH -sOutputFile=".$image_file_new." ".$image_file.""); 
                    if(file_exists($image_file)){unlink($image_file);}

                    
                } catch (Exception $e) {
                    header('Content-Type: application/json');
                    return Response::json(['status'=>'error','result' =>json_encode($e->getMessage())]);
                }
                }else{
                $file->move($destination, $name_new); 
                $image_file = $destination.'/'.$name_new;
                $image_file_new = $destination.'/'.$name;
                exec( "gs -dSAFER -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dNOPAUSE -dQUIET -dBATCH -sOutputFile=".$image_file_new." ".$image_file.""); 
                if(file_exists($image_file)){unlink($image_file);}
                
                }
            }

            //postSenddocument
            $editorVersion = 'longpage';
            $returnArray = $this->createPdfContract($offerSentId,$destination,$name,$file_name,$access_token,$pdfcontent='',$pageLength='','isapi',1,$data);
            //print_r($returnArray);
            //exit();
            $templateFlag = false;
            if(isset($data['template_id']) && $data['template_id'] != '') {
                $userTemplate = new usertemplateController();
                $getTemplateContent = $userTemplate->getTemplateByTemplateID($data['template_id'], $user_id);
                if(!empty($getTemplateContent->content)) {
                    $html = new \Htmldom($getTemplateContent->content);
                    $templateFlag = true;
                    $editorVersion = (isset($getTemplateContent->editor_version) && $getTemplateContent->editor_version != '' ? $getTemplateContent->editor_version : '');
                    if(isset($getTemplateContent->editor_version) && $getTemplateContent->editor_version == 'longpage') {
                        foreach($html->find('.template_container') as $getTemplateContentKey => $getTemplateContentValue) {
                            foreach($returnArray['responsePDFImages'] as $responsePDFImagesKey => $responsePDFImagesValue) {
                                if($getTemplateContentValue->find('.sortableContainerContentBox', $responsePDFImagesKey)) {
                                    $getTemplateContentValue->find('.sortableContainerContentBox', $responsePDFImagesKey)->find('.summernote', 0)->setAttribute('class', 'autopdfheightclass');
                                    $assignValue = '
                                        <div class="pdfbg" style="background-image: url('.$responsePDFImagesValue.')"></div>
                                        <div class="fieldElementRes box-target content_box_divInner" child="0" style="position: relative !important; border-color: transparent;">
                                            '.$getTemplateContentValue->find('.sortableContainerContentBox', $responsePDFImagesKey)->find('.fieldElementRes', 0)->innertext.'
                                        </div>';
                                    $getTemplateContentValue->find('.sortableContainerContentBox', $responsePDFImagesKey)->innertext = $assignValue;
                                } else {
                                    $getTemplateContentValue->innertext .= '
                                    <div class="sortableContainerContentBox content_box_div contentSort marginbottom140">
                                        <div class="pdfbg" style="background-image: url('.$responsePDFImagesValue.')"></div>
                                        <div class="fieldElementRes box-target content_box_divInner" child="0" style="position: relative !important; border-color: transparent;">
                                            <div class="box-inner-container ui-droppable" style="min-height: inherit;width:100%; top:0;left:0;outline: none;" contenteditable="false">
                                                <div class="summernote content_box_div_new autopdfheightclass" style="display: block;"></div>
                                            </div>
                                        </div>
                                    </div>';
                                }
                            }
                        }
                    } else {
                        foreach($html->find('.template_container') as $getTemplateContentKey => $getTemplateContentValue) {
                            if(isset($returnArray['responsePDFImages'][$getTemplateContentKey])) {
                                $getTemplateContentValue->setAttribute('style', "background-position: 50% 0%; background-repeat: no-repeat; width: 100%; height: 100%; background-size: 100% !important; background-image: url('".$returnArray['responsePDFImages'][$getTemplateContentKey]."') !important; display: block; padding: 70px;");
                            }
                        }
                    }
                    $offerData1['content'] = Tcrypt::encrypter($html);
                }
            }

            /*Add content in orignal offer table*/
            $offerWhere1['id'] = $offerSentId;
            $utility->updateItem("offer_sent",$offerWhere1,$offerData1);

            if(isset($offerData1['attachments']) && !empty($offerData1['attachments'])) {
                $sentcontract->getCreateoldattachpages($user_id,$offerData1['attachments'],"add",$offerSentId,$data['access_token']);
            }

            if(isset($newAttachmentArray) && !empty($newAttachmentArray)) {
                $sentcontract->getCreateoldattachpages($user_id,$offerData1['attachments'],"add",$offerSentId,$data['access_token']);
            }

            $whereSent['id'] = $offerSentId;
            $offerContent = $utility->getItem("offer_sent",$whereSent,array('content'));
            if(!empty($offerContent)) {
                $original_offer['sender_id'] = $user_id;
                $original_offer['offer_sent_id'] = $offerSentId;
                $original_offer['content'] = Tcrypt::decrypter($offerContent->content);
                $utility->addItem("original_offer",$original_offer);
            }

            $pages = $returnArray['pages'];
            $status = $this->sendcontractnew($offerSentId, $data, $user_id, $visible_name, $invitation_message, $lang, $signing_url, '', '', $templateFlag, $iframeURL);

            if($status) {
                //Video upload
                if(isset($data['video_title']) && !empty($data['video_title'])) {
                    $offerArray['video_title'] = $data['video_title'];
                }

                if($iframeURL == 1) {
                    $offerArray['offer_status'] = 7;
                } else {
                    $offerArray['offer_status'] = 0;
                }
                $offerArray['total_pages'] = $pages+1;
                $offerArray['editor_version'] = $editorVersion;
                //$offerArray['content'] = $offerContent->content;
                $utility->updateItem("offer_sent",$whereSent,$offerArray);
                $totalRemainingSugnature = $utility->checkSignatures($parent_id);
                $getDetailsData = Offersentdetails::where('offer_sent_id', $offerSentId)->where('is_sender', 0)->select('offer_status', 'user_details')->get();
                $bounceEmails = $APIResponse = [];
                if($getDetailsData) {
                    foreach($getDetailsData as $getDetailsDataKey => $getDetailsDataValue) {
                        $offerStatus = $getDetailsDataValue['offer_status'];
                        $recipientUserDetailsDecode = json_decode(Tcrypt::decrypter($getDetailsDataValue['user_details']), true);
                        if($offerStatus == 6) {
                            $bounceEmails[] = $recipientUserDetailsDecode['email'];
                        }
                    }
                }
                
                if(isset($data['invitation_url']) && $data['invitation_url'] == 1) {
                    $APIResponse = ['status' => 'success', 'result' => 'Invitation URL successfully generated', 'parties name' => $partiesName, 'Invitation URL' => $status, 'sent_id' => $offerSentId, 'document_id' => $offerSentId, 'signature_credit_lefts' => ($totalRemainingSugnature['monthly_signature']+$totalRemainingSugnature['extra_signature'])];
                } elseif($iframeURL == 1) {
                    $getOwnerEmailAddress = User::where('id', $user_id)->select('email')->first();
                    $iframeUrl = asset('/')."api/v3/request/external?email=".trim($getOwnerEmailAddress['email'])."&access_token=".$access_token."&document_id=".$offerSentId."&send_document=1";
                    $APIResponse = ['status' => 'success', 'result' => ['iframeUrl' => $iframeUrl, 'document_id' => $offerSentId, 'signature_credit_lefts' => ($totalRemainingSugnature['monthly_signature']+$totalRemainingSugnature['extra_signature'])]];
                } else {
                    $APIResponse = ['status' => 'success', 'result' => 'document sent successfully', 'sent_id' => $offerSentId, 'document_id' => $offerSentId, 'signature_credit_lefts' => ($totalRemainingSugnature['monthly_signature']+$totalRemainingSugnature['extra_signature'])];
                }
                return response()->json($APIResponse, 200, ['Content-Type' => 'application/json; charset=UTF-8'], JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
            } elseif($status == 0) {
                return Response::json(['status'=>'success','result' =>'You are not paid user, Please upgrade your account for send document']);
            }
        } else {
            return Response::json(['status'=>'error','result' =>'Invalid access_token']);
        }
    }

    public function postSenddocumentnewfunction() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');
        ini_set('max_execution_time', 800);

        //access token validation starting
        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
        //access token validation ending

        //getting user id, parent id and user settings from user_setting table starting
        $user_id = $utility->getUserIdByAuthToken($access_token);
        $parent_id = $utility->getParent($user_id);
        $userSettings = $utility->getUserSettings($parent_id);
        //getting user id, parent id and user settings from user_setting table ending

        //checking user account is not locked due to payment starting
        if($utility->checkAdminStripe($user_id)) {
            return Response::json(['status' => 'error', 'result' => 'Account is locked make payment in order to continue using Simplesign']);
        }
        //checking user account is not locked due to payment ending

        //checking recipients variable and other validation starting 
        $partiesName = [];
        if(isset($data['recipients']) && $data['recipients'] != '') {
            if($this->is_JSON($data['recipients'])) {
                $recipients = json_decode($data['recipients'], true);
                $recsList = $mainArray = array();
                if(!empty($recipients)) {
                    foreach($recipients as $recipientsKey => $recipientsValue) {
                        if(!is_array($recipientsValue['people_fields'])) {
                            return Response::json(['status' => 'error', 'result' => 'people_fields should be array']);
                        } else {
                            if(!isset($recipientsValue['people_fields']) || empty($recipientsValue['people_fields'])) {
                                return Response::json(['status' => 'error', 'result' => 'People information is missing']);
                            } elseif(isset($recipientsValue['people_fields']) && !empty($recipientsValue['people_fields'])) {
                                $sentRec = array();
                                $newAddonObj = (isset($userSettings['new_addon_obj']) && !empty($userSettings['new_addon_obj']) ? json_decode($userSettings['new_addon_obj'], true) : []);
                                $viewerPartyAddonPermission = (!empty($newAddonObj) && isset($newAddonObj['viewerparty_addon_permission']) && $newAddonObj['viewerparty_addon_permission'] == 1 ? $newAddonObj['viewerparty_addon_permission'] : 0);
                                //Recipients basic information validations like first_name, last_name and email starting
                                if(!isset($recipientsValue['people_fields']['first_name']) || $recipientsValue['people_fields']['first_name'] == '') {
                                    return Response::json(['status'=>'error','result' => 'Invalid or missing recipient first_name']);
                                } elseif(isset($recipientsValue['people_fields']['last_name']) && $recipientsValue['people_fields']['last_name'] != '') {
                                    //
                                } elseif(!isset($recipientsValue['people_fields']['email']) || !filter_var($recipientsValue['people_fields']['email'], FILTER_VALIDATE_EMAIL)) {
                                    return Response::json(['status'=>'error','result' => 'Invalid or missing recipient email']);
                                }
                                //Recipients basic information validations like first_name, last_name and email ending

                                //Roles of recipient validation starting
                                elseif(!isset($recipientsValue['details']['recipient_role']) || $recipientsValue['details']['recipient_role'] == '') {
                                    return Response::json(['status'=>'error','result' => 'Invalid or missing recipient_role in details']);
                                } elseif(isset($recipientsValue['details']['recipient_role']) && $recipientsValue['details']['recipient_role'] != '') {
                                    $tabComponents = Recipient_fields_roles::where('userid', $user_id)->where('tab_components', $recipientsValue['details']['recipient_role'])->count();
                                    if(!$tabComponents) {
                                        return Response::json(['status'=>'error','result' => $recipientsValue['details']['recipient_role'].' recipient_role doesn\'t exists in this account.']);
                                    }
                                }
                                //Roles of recipient validation ending

                                //Authentication validations starting
                                elseif(isset($recipientsValue['details']['authentication']) && ($recipientsValue['details']['authentication'] == 'bankID' || $recipientsValue['details']['authentication'] == 'BankID' || $recipientsValue['details']['authentication'] == 'Bank ID'  || $recipientsValue['details']['authentication'] == 'bank ID') && $userSettings->sign_bankid != 1) {
                                    return Response::json(['status'=>'error','result' => 'BankID feature is not enabled in your account, Contact Simplesign support for BankID activation']);
                                } elseif(isset($recipientsValue['details']['authentication']) && ($recipientsValue['details']['authentication'] == 'bankID' || $recipientsValue['details']['authentication'] == 'BankID') && $userSettings->sign_bankid == 1) {
                                    if(isset($recipientsValue['people_fields']['personal_no']) && !empty($recipientsValue['people_fields']['personal_no']) && strlen($recipientsValue['people_fields']['personal_no']) != 12) {
                                        return Response::json(['status'=>'error','result' =>'personal_no must be 12 digits']);
                                    }
                                } elseif(isset($recipientsValue['details']['authentication']) && ($recipientsValue['details']['authentication'] == 'Attest' || $recipientsValue['details']['authentication'] == 'At test' || $recipientsValue['details']['authentication'] == 'attest'  || $recipientsValue['details']['authentication'] == 'at test') && $userSettings->review_party_addon_permission != 1) {
                                    return Response::json(['status'=>'error','result' => 'Attest feature is not enabled in your account, Contact Simplesign support for Attest activation']);
                                } elseif(isset($recipientsValue['details']['authentication']) && ($recipientsValue['details']['authentication'] == 'ViewOnly' || $recipientsValue['details']['authentication'] == 'View Only' || $recipientsValue['details']['authentication'] == 'viewonly'  || $recipientsValue['details']['authentication'] == 'view only') && $viewerPartyAddonPermission != 1) {
                                    return Response::json(['status'=>'error','result' => 'View only feature is not enabled in your account, Contact Simplesign support for view only activation']);
                                }
                                //Authentication validations ending

                                //Validation when invitation_type is 2, for email and sms, need mobile no starting
                                if(isset($recipientsValue['details']['invitation_type']) && ($recipientsValue['details']['invitation_type'] == 'email and sms' || $recipientsValue['details']['invitation_type'] == 'Email And SMS' || $recipientsValue['details']['invitation_type'] == 'email & sms' || $recipientsValue['details']['invitation_type'] == 'Email & SMS')) {
                                    if(!isset($recipientsValue['people_fields']['mobile']) || empty($recipientsValue['people_fields']['mobile'])) {
                                        return Response::json(['status'=>'error','result' =>'mobile is mandatory for recipient '.$recipientsValue['people_fields']['first_name'].' in order to send invitation sms']);
                                    }
                                }
                                //Validation when invitation_type is 2, for email and sms, need mobile no ending

                                //Validation when confirmation is 2, for email and sms, need mobile no starting
                                if(isset($recipientsValue['details']['confirmation']) && ($recipientsValue['details']['confirmation'] == 'email and sms' || $recipientsValue['details']['confirmation'] == 'Email And SMS' || $recipientsValue['details']['confirmation'] == 'email & sms' || $recipientsValue['details']['confirmation'] == 'Email & SMS')) {
                                    if(!isset($recipientsValue['people_fields']['mobile']) || empty($recipientsValue['people_fields']['mobile'])) {
                                        return Response::json(['status'=>'error','result' =>'mobile is mandatory for recipient '.$recipientsValue['people_fields']['first_name'].' in order to send confirmation sms']);
                                    }
                                }
                                //Validation when confirmation is 2, for email and sms, need mobile no ending

                                //checking non standard custom fields of recipient starting
                                $tabFields = Recipient_fields_roles::where('userid', $user_id)->where('tab_components', $recipientsValue['details']['recipient_role'])->where('offer_doc_id', 0)->select('tab_fields')->first();
                                $personRecipientKeys = array('first_name', 'last_name', 'email', 'personal_no', 'mobile', 'address', 'city', 'zipcode');
                                foreach($recipientsValue['people_fields'] as $peopleFieldsKey => $peopleFieldsValue) {
                                    if(!in_array($peopleFieldsKey, $personRecipientKeys)) {
                                        if(!empty($tabFields['tab_fields'])) {
                                            $tabFieldsJsonDecode = json_decode($tabFields['tab_fields'], true);
                                            if(!empty($tabFieldsJsonDecode['recinfo_fields']['custom_fields'])) {
                                                $recinfoFieldsJsonDecode = json_decode($tabFieldsJsonDecode['recinfo_fields']['custom_fields'], true);
                                                if(!array_key_exists($peopleFieldsKey, $recinfoFieldsJsonDecode)) {
                                                    return Response::json(['status'=>'error','result' =>$peopleFieldsKey.' field doesn\'t exists for this user in person fields']);
                                                } elseif(array_key_exists($peopleFieldsKey, $recinfoFieldsJsonDecode) && $recinfoFieldsJsonDecode[$peopleFieldsKey] != 1) {
                                                    return Response::json(['status'=>'error','result' =>$peopleFieldsKey.' field is off for this user in person fields']);
                                                }
                                            }
                                        }
                                    }
                                }
                                //checking non standard custom fields of recipient ending

                                //checking non standard custom fields of organization starting
                                if(isset($recipientsValue['organization_fields'])) {
                                    $personOrganizationKeys = array('name', 'org_no', 'phone', 'address', 'city', 'zipcode');
                                    foreach($recipientsValue['organization_fields'] as $organizationFieldsKey => $organizationFieldsValue) {
                                        if(!in_array($organizationFieldsKey, $personOrganizationKeys)) {
                                            if(!empty($tabFields['tab_fields'])) {
                                                $tabFieldsJsonDecode = json_decode($tabFields['tab_fields'], true);
                                                if(!empty($tabFieldsJsonDecode['orginfo_fields']['custom_fields'])) {
                                                    $orginfoFieldsJsonDecode = json_decode($tabFieldsJsonDecode['orginfo_fields']['custom_fields'], true);
                                                    if(!array_key_exists($organizationFieldsKey, $orginfoFieldsJsonDecode)) {
                                                        return Response::json(['status'=>'error','result' =>$organizationFieldsKey.' field doesn\'t exists for this user in organization fields']);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                //checking non standard custom fields of organization ending

                                $sentRec['full_name'] = $recipientsValue['people_fields']['first_name'];
                                $sentRec['email'] = $recipientsValue['people_fields']['email'];
                                $partiesName[] = $recipientsValue['people_fields']['first_name'];
                                array_push($recsList, $sentRec);
                            }
                        }
                    } //Foreach End
                } else {
                    return Response::json(['status'=>'error','result' => 'Recipient information should not be empty']);
                }
            } else {
                return Response::json(['status'=>'error','result' => 'Recipient information is invalid format, JSON is required']);
            }
        } else {
            return Response::json(['status'=>'error','result' => 'Recipient information is missing']);
        }
        //checking recipients variable and other validation ending

        //checking document fields keys and it's values starting
        if(isset($data['documentfields'])) {
            if(!empty($data['documentfields']) && $this->is_JSON($data['documentfields'])) {
                $documentFields = json_decode($data['documentfields'], true);
                foreach($documentFields as $documentFieldsKey => $documentFieldsValue) {
                    if(!is_array($documentFieldsValue['document_fields'])) {
                        return Response::json(['status' => 'error', 'result' => 'document_fields should be array']);
                    } else {
                        if(!isset($documentFieldsValue['document_fields']) || empty($documentFieldsValue['document_fields'])) {
                            return Response::json(['status' => 'error', 'result' => 'Document information is missing']);
                        } elseif(isset($documentFieldsValue['document_fields']) && !empty($documentFieldsValue['document_fields'])) {
                            //Docfields
                            foreach($documentFieldsValue['document_fields'] as $docFldKey => $docFldValue) {
                                if(!isset($docFldKey) || $docFldKey == '') {
                                    return Response::json(['status' => 'error', 'result' => 'document_fields key is missing']);
                                } if(!isset($docFldValue) || $docFldValue == '') {
                                    return Response::json(['status' => 'error', 'result' => 'document_fields value is missing']);
                                }
                            }
                        }
                    }
                }//loop ends here
            } else {
                return Response::json(['status'=>'error','result' => 'Document fields information is invalid format, JSON is required']);
            }
        }
        //checking document fields keys and it's values ending

        //getting invitation url for showing document link in response instead of an email starting
        if(isset($data['invitation_url']) && $data['invitation_url'] == 1) {
            $signing_url = 1;
        } else {
            $signing_url = 0;
        }
        //getting invitation url for showing document link in response instead of an email ending

        //PDF Attachment Functionality START
        $attachmentArray = array();
        $attachment_mandatory = 0;
        $attachment_file = $attachment_name = '';

        if(isset($data['attachment']) && !empty($data['attachment'])) {
            $attachment_file = $data['attachment'];
            $fileTypes = array('jpg','jpeg','gif','png','pdf','doc','docx','xls','xlsx','zip','csv','txt');
            if(!in_array(strtolower($attachment_file->getClientOriginalExtension()), $fileTypes)) {
                return Response::json(['status'=>'error','result' => 'Invalid attachment file type, only document files are acceptable']);
            }
            $attachment_name = $attachment_file->getClientoriginalName();
            if(isset($data['attachment_name']) && !empty($data['attachment_name'])) {
                $attachment_name = $data['attachment_name'];
            }
            if(isset($data['attachment_mandatory']) && !empty($data['attachment_mandatory']) && $data['attachment_mandatory'] == 1) {
                $attachment_mandatory = 1;
            }
            $attachmentArray[1]['name'] = $attachment_name;
            $attachmentArray[1]['is_mandatory'] = $attachment_mandatory;
            $attachmentArray[1]['created_date'] = date("Y-m-d H:i:s");
        }
        //PDF Attachment Functionality END

        //getting info and manipulating about super user starting
        $parent_id = $utility->getParent($user_id);
        $reg_no = $company_name = $user_details = $tracking_id = "";
        if($utility->isSuperuser($user_id)) {
            $company_name = (isset($data["sender_company"]) && !empty($data["sender_company"]) ? $data["sender_company"] : "");
            if((isset($data["sender_company"]) && !empty($data["sender_company"])) && (!isset($data["sender_reg_no"]) && empty($data["sender_reg_no"]))) {
                return Response::json(["status" => "error", "result" => "After given sender_company name sender_reg_no is mandatory"]);
            } elseif((isset($data["sender_reg_no"]) && !empty($data["sender_reg_no"])) && (!isset($data["sender_company"]) && empty($data["sender_company"]))) {
                return Response::json(["status" => "error", "result" => "After given sender_reg_no sender_company is mandatory"]);
            } elseif(isset($data["sender_reg_no"]) && !empty($data["sender_reg_no"])) {
                $userdata = $utility->getParentDetails($user_id);
                $userArrar = array();
                $userArrar['first_name'] = $userdata->full_name;
                $userArrar['last_name'] = $userdata->second_name;
                $userArrar['email'] = $userdata->email;
                $userArrar['company'] = (isset($company_name) && !empty($company_name) ? $company_name : $userdata->company);
                $reg_no = $data["sender_reg_no"];
                $userArrar['reg_no'] = $reg_no;
                $userArrar['address'] = (isset($data["sender_address"]) && !empty($data["sender_address"]) ? $data["sender_address"] : $userdata->address);
                $userArrar['telephone'] = (isset($data["sender_telephone"]) && !empty($data["sender_telephone"]) ? $data["sender_telephone"] : $userdata->telephone);
                $userArrar['post_code'] = (isset($data["sender_post_code"]) && !empty($data["sender_post_code"]) ? $data["sender_post_code"] : $userdata->post_code);
                $userArrar['city'] = (isset($data["sender_city"]) && !empty($data["sender_city"]) ? $data["sender_city"] : $userdata->city);
                $user_details = json_encode($userArrar);
            } else {
                $gettingFromUserInfo = Userinfo::where("user_id", $parent_id)->select("reg_no")->first();
                $reg_no = $gettingFromUserInfo["reg_no"];
            }
        }

        if(isset($data["tracking_id"]) && !empty($data["tracking_id"])) {
            if(strlen($data["tracking_id"]) < 6 || strlen($data["tracking_id"]) > 6) {
                return Response::json(["status" => "error", "result" => "tracking_id must be 6 digits"]);
            } else {
                $tracking_id = $data["tracking_id"];
            }
        }
        //getting info and manipulating about super user ending

        //Condition if sender_email Available(for sub users)
        if(isset($data['sender_email']) && $data['sender_email'] != '') {
            $sender_email = Tcrypt::encrypter($data['sender_email']);
            $checkSubuser = User::where('email','=',$sender_email)->where('parent_id','=',$user_id)->select('id')->first();
            if($checkSubuser['id']) {
                $user_id = $checkSubuser['id'];
            }
        }

        if(!empty($user_id) && $user_id > 0) {
            if(!isset($data['file']) || empty($data['file'])) {
                return Response::json(['status'=>'error','result' =>'File is missing']);
            } else {
                $file = $data['file'];
                //adding condition starting
                $fileTypes = array('docx','doc','xls','xlsx','csv','ppt','pptx','pdf');
                if(!in_array(strtolower($file->getClientOriginalExtension()), $fileTypes)) {
                    return Response::json(['status'=>'error','result' => 'Invalid document file type, only document files are acceptable']);
                }
                //adding condition ending
                
                $file_original_name = $file->getClientoriginalName();
                $file_ext = strtolower($file->getClientOriginalExtension());
                $filename = pathinfo($file_original_name, PATHINFO_FILENAME);
            }

            if(isset($data['visible_name']) && $data['visible_name'] != '') {
                $visible_name = $data['visible_name'];
                $document_name = $filename;
            } else {
                $visible_name = $filename;
                $document_name = $filename;
            }
            $lang = '';
            if(isset($data['language_id']) && $data['language_id'] != '') {
                $lang = $data['language_id'];
            } else {
                $language = Userinfo::where('user_id', '=', $user_id)->select('language')->first();
                $lang = $language['language'];
            }

            $dueDays = '';
            $userTimeZone = $utility->getUsertimezone($user_id);
            if(isset($data['due_days']) && $data['due_days'] != '') {
                $dueDays = $data['due_days'];
                if($dueDays > 0) {
                    $dueDays = date('Y-m-d', strtotime(date('Y-m-d'). " + $dueDays days"));
                } else {
                    $dueDays = date('Y-m-d');
                }
                $dueDays = $utility->changeTimeZone($dueDays.' 23:50:00', 'Y-m-d', $userTimeZone, 'UTC');
            } else {
                $dueDays = '0000-00-00 00:00:00';
            }

            $reminderDays = '';
            if(isset($data['reminder_days']) && $data['reminder_days'] != '') {
                $reminderDays = $data['reminder_days'];
                if($reminderDays > 0) {
                    $reminderDays = date('Y-m-d', strtotime(date('Y-m-d'). " + $reminderDays days"));
                } else {
                    $reminderDays = date('Y-m-d');
                }
                $reminderDays = $utility->changeTimeZone($reminderDays.' 08:50:00', 'Y-m-d H:i:s', $userTimeZone, 'UTC');
            } else {
                $reminderDays = '0000-00-00 00:00:00';
            }

            $invitation_message = $confirmation_message = $invitation_sms_message = $confirmation_sms_message = '';
            if(isset($data['invitation_message']) && $data['invitation_message'] != '') {
                $invitation_message = $data['invitation_message'];
            }
            if(isset($data["invitation_sms"]) && $data["invitation_sms"] != "") {
                $invitation_sms_message = $data["invitation_sms"];
            }
            if(isset($data['confirmation_message']) && $data['confirmation_message'] != '') {
                $confirmation_message = $data['confirmation_message'];
            }
            if(isset($data["confirmation_sms"]) && $data["confirmation_sms"] != "") {
                $confirmation_sms_message = $data["confirmation_sms"];
            }

            //save vimeo and youtube url
            if(isset($data['video_url']) && !empty($data['video_url'])) {
                if(preg_match("@^(?:https://(?:www\\.)?youtube.com/)(watch\\?v=|v/)([a-zA-Z0-9_]*)@", $data['video_url'], $match)) {
                    $offerArray['video_link'] = $data['video_url'];
                } elseif(preg_match("/(https?:\/\/)?(www\.)?(player\.)?vimeo\.com\/([a-z]*\/)*([0-9]{6,11})[?]?.*/", $data['video_url'], $output_array)) {
                    $offerArray['video_link'] = $data['video_url'];
                } else {
                    return Response::json(['status'=>'error','result' =>'Invalid video url']);
                }
            } elseif(isset($data['video']) && !empty($data['video'])) {
                $video_file =  $data['video'];
                if($video_file->getSize() > 10485760) {
                    return Response::json(['status'=>'error','result' =>'File size is greator than 10mb']);
                } elseif($video_file->getMimeType() != "video/mp4") {
                    return Response::json(['status'=>'error','result' =>'File type must be mp4']);
                }
                $title = $video_file->getClientoriginalName();
                $videoname = uniqid().'_'.$title;
                $destination = public_path().'/uploads/user_videos';
                $link = asset('/').'/uploads/user_videos/'.$videoname;
                $video_file->move($destination, $videoname );
                $offerArray['video_link'] = '/uploads/user_videos/'.$videoname;
            }

            $offerSentId = $this->addOffersentapi($user_id,$dueDays,$lang,$document_name,$reminderDays,$content='',$visible_name,$invitation_message,$confirmation_message,$retargeting_code='',$attachments='');

            //Updating Recipients Column in Offer Sent Table
            $offerData1['recipients'] = json_encode($recsList);

            //reg no is adding if super user is available starting
            //$offerData1['reg_no'] = $reg_no;
            $offerData1['tracking_id'] = $tracking_id;
            $offerData1['invitation_sms_message'] = $invitation_sms_message;
            $offerData1['confirmation_sms_message'] = $confirmation_sms_message;
            if(isset($user_details) && !empty($user_details)) {
                $offerData1['user_details'] = $user_details;
            }
            //reg no is adding if super user is available ending

            //PDF Attachment Functionality START
            if($attachment_file != '') {
                $path  = $offerSentId.'_'.uniqid().'.'.$attachment_file->getClientOriginalExtension();
                $destination = public_path().'/uploads/contractattachments';
                $attachment_file->move($destination, $path);

                $filePath = $destination.'/'.$path;
                //Uploading to Google Cloud Server
                uploadToGCS($filePath,$user_id.'/offerdata',$path,env('simplesignoffersBucket'));

                //Deleing uploaded file from local ftp
                if(file_exists($filePath)) {
                    unlink($filePath);
                }
                $attachmentArray[1]['path']   = $path;//filename
                $offerData1['attachments'] = json_encode($attachmentArray);
            }

            //PDF Attachment Functionality END
            if(isset($data['external_doc_id'])) {
                $offerData1['external_doc_id'] = $data['external_doc_id'];
            }

            $offerWhere1['id'] = $offerSentId;
            $utility->updateItem("offer_sent",$offerWhere1,$offerData1);
            $uniqid = uniqid();
            $file_name = $file_original_name;
            $name = 'pdftemplate_'.$uniqid.'.pdf';
            $name_new = 'pdftemplate_'.$uniqid.'.'.$file_ext;
            $destination = public_path().'/uploads/contractpdf';
            
            $Allowed_Ext = array('docx','doc','xls','xlsx','csv','ppt','pptx');
            if(in_array($file_ext,$Allowed_Ext)){
                $file->move($destination, $name_new);
                $file_path = $destination.'/'.$name_new;
                $Conversionapi = new Conversionapi();
                try{
                    $Conversionapi->convert($file_path, $destination.'/'.$name);
                }catch (\Exception $e) {
                    if(file_exists($file_path)){unlink($file_path);} 
                    return Response::json(['status'=>'error','result' =>'Unable to load this file']);
                }
                if(file_exists($file_path)){unlink($file_path);} 
            }else{
                $file->move($destination, $name);
            }

            $returnArray = $this->createPdfContract($offerSentId,$destination,$name,$file_name,$access_token,$pdfcontent='',$pageLength='','isapi');

            /*Add content in orignal offer table*/
            $whereSent['id'] = $offerSentId;
            $offerContent = $utility->getItem("offer_sent",$whereSent,array('content'));
            if(!empty($offerContent)) {
                $original_offer['sender_id'] = $user_id;
                $original_offer['offer_sent_id'] = $offerSentId;
                $original_offer['content'] = $offerContent->content;
                $utility->addItem("original_offer",$original_offer);
            }

            $pages = $returnArray['pages'];
            $status = $this->senddocumenttemplateapi($offerSentId,$data,$user_id,$visible_name,$invitation_message,$lang,$signing_url);

            if($status) {
                //Video upload
                if(isset($data['video_title']) && !empty($data['video_title'])) {
                    $offerArray['video_title'] = $data['video_title'];
                }

                $offerArray['offer_status'] = 0;
                $offerArray['total_pages'] = $pages+1;
                $offerArray['content'] = $offerContent->content;
                $utility->updateItem("offer_sent",$whereSent,$offerArray);
                if(isset($data['invitation_url']) && $data['invitation_url'] == 1) {
                    $res = str_replace('\/', '/', json_encode(['status'=>'success','result' =>'Invitation URL successfully generated', 'parties name' => $partiesName, 'Invitation URL' => $status, 'document_id'=>$offerSentId]));
                    return $res;
                }

                return Response::json(['status'=>'success','result' =>'document sent successfully', 'document_id' => $offerSentId]);
            } elseif($status == 0) {
                return Response::json(['status'=>'success','result' =>'Your are not paid user, Please upgrade your account for send document']);
            }
        } else {
            return Response::json(['status'=>'error','result' =>'Invalid access_token']);
        }
    }

    /**
     * Send contract with saved templates
     * @return type
     */
    public function postSendwithtemplate()
    {
        $data = Input::all();
        $utility = new Utility();
        if(isset($data['access_token'])){
                $access_token = $data['access_token'];
        }else{
                return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
        if(!isset($data['template_id']) || empty($data['template_id'])){
            return Response::json(['status'=>'error','result' =>'template_id is missing']);
        }else{
            $template_id = $data['template_id'];
        }
        
        $user_id = $utility->getUserIdByAuthToken($access_token);
        // getting info and manipulating about super user starting
        $parent_id = $utility->getParent($user_id);
        $userSettings = $utility->getUserSettings($parent_id);
        $getApiHitCount = Userinfo::where('user_id', $parent_id)->select('hit_count')->first();
        $addupdateapiaccesslogs = $utility->addupdateapiaccesslogs($user_id, 'postSendwithtemplate v3', $data, $getApiHitCount['hit_count']);
        if($addupdateapiaccesslogs == 'exceed') {
            $this->apiCallLimitExceedMessage = str_replace('#hitCuntNo', $getApiHitCount['hit_count'], $this->apiCallLimitExceedMessage);
            return Response::json(['status' => 'error', 'result' => $this->apiCallLimitExceedMessage]);
        }
        if($utility->checkAdminStripe($user_id)) {
            return Response::json(['status' => 'error', 'result' => 'Account is locked make payment in order to continue Simplesign']);
        }

        if(isset($data['recipients']) && $data['recipients'] != ''){
            if($this->is_JSON($data['recipients'])){
                $recipients = json_decode($data['recipients'],true);
                $recsList = array();//recipients list for offer sent table
                foreach ($recipients as $reckey => $recVal) {
                    $sentRec = array();
                    //Recipients Information Validations START
                    if(!isset($recVal['name']) || $recVal['name'] == ''){
                        return Response::json(['status'=>'error','result' => 'Invalid or missing Recipient name']);
                    }else if(!isset($recVal['email']) || !filter_var($recVal['email'], FILTER_VALIDATE_EMAIL)){
                        return Response::json(['status'=>'error','result' => 'Invalid or missing Recipient email']);
                    }
                    //Recipients Information Validations END

                    //Authentication Validations START
                    else if(isset($recVal['authentication']) && $recVal['authentication'] == 3 && $userSettings['sign_bankid'] != 1){
                        return Response::json(['status'=>'error','result' => 'BankID feature is not enabled on your account, Contact Simplesign support for BankID activation']);
                    }else if(isset($recVal['authentication']) && $recVal['authentication'] == 3 && $userSettings['sign_bankid'] == 1){
                        if(isset($recVal['personal_no']) && !empty($recVal['personal_no']) && strlen($recVal['personal_no']) != 12){
                            return Response::json(['status'=>'error','result' =>'personal_no must be 12 digits']);
                        }
                    }
                    //Authentication Validations END

                    //Validation when invitation_type is 2, for email and sms START
                    if(isset($recVal['invitation_type']) && $recVal['invitation_type'] == 2){
                        if(!isset($recVal['mobile']) || empty($recVal['mobile'])){
                            return Response::json(['status'=>'error','result' =>'mobile is mandatory for recipient '.$recVal['name'].' in order to send invitation sms']);   
                        }
                    }
                    //Validation when invitation_type is 2, for email and sms END

                    //Validation when confirmation is 2, for email and sms START
                    if(isset($recVal['confirmation']) &&$recVal['confirmation'] == 2){
                        if(!isset($recVal['mobile']) || empty($recVal['mobile'])){
                            return Response::json(['status'=>'error','result' =>'mobile is mandatory for recipient '.$recVal['name'].' in order to send confirmation sms']);   
                        }
                    }
                    //Validation when confirmation is 2, for email and sms END


                    $sentRec['email'] = $recVal['email'];
                    $sentRec['full_name'] = $recVal['name'];
                    array_push($recsList, $sentRec);
                }//Foreach End
            }else{
                return Response::json(['status'=>'error','result' => 'Recipient information is missing']);
            }
        }else{
            return Response::json(['status'=>'error','result' => 'Recipient information is missing']);
        }

        

        /*Checking for Template belongs to this user or Parent (RJ) START*/
        $checkTemplate = Offerdocs::where('id',$template_id)->where('user_id', $user_id)->where('is_shareable',0)
                                    ->orWhere(function ($query) use($parent_id,$template_id){
                                        $query->where('id',$template_id)
                                        ->where('user_id', $parent_id)->where('is_shareable',1);
                                    })->count();
        if(!$checkTemplate){
            return Response::json(['status'=>'error','result' =>'Template not found']);
        }
        /*Checking for Template belongs to this user or Parent (RJ) END*/

        $reg_no = $company_name = $user_details = $tracking_id = "";
        if($utility->isSuperuser($user_id)) {
            $company_name = (isset($data["sender_company"]) && !empty($data["sender_company"]) ? $data["sender_company"] : "");
            if((isset($data["sender_company"]) && !empty($data["sender_company"])) && (!isset($data["sender_reg_no"]) && empty($data["sender_reg_no"]))) {
                return Response::json(["status" => "error", "result" => "After given sender_company name sender_reg_no is mandatory"]);
            } elseif((isset($data["sender_reg_no"]) && !empty($data["sender_reg_no"])) && (!isset($data["sender_company"]) && empty($data["sender_company"]))) {
                return Response::json(["status" => "error", "result" => "After given sender_reg_no sender_company is mandatory"]);
            } elseif(isset($data["sender_reg_no"]) && !empty($data["sender_reg_no"])) {
                $userdata = $utility->getParentDetails($user_id);
                $userArrar = array();
                $userArrar['first_name'] = $userdata->full_name;
                $userArrar['last_name'] = $userdata->second_name;
                $userArrar['email'] = $userdata->email;
                $userArrar['company'] = (isset($company_name) && !empty($company_name) ? $company_name : $userdata->company);
                $reg_no = $data["sender_reg_no"];
                $userArrar['reg_no'] = $reg_no;
                $userArrar['address'] = (isset($data["sender_address"]) && !empty($data["sender_address"]) ? $data["sender_address"] : $userdata->address);
                $userArrar['telephone'] = (isset($data["sender_telephone"]) && !empty($data["sender_telephone"]) ? $data["sender_telephone"] : $userdata->telephone);
                $userArrar['post_code'] = (isset($data["sender_post_code"]) && !empty($data["sender_post_code"]) ? $data["sender_post_code"] : $userdata->post_code);
                $userArrar['city'] = (isset($data["sender_city"]) && !empty($data["sender_city"]) ? $data["sender_city"] : $userdata->city);
                $user_details = json_encode($userArrar);
            } else {
                $gettingFromUserInfo = Userinfo::where("user_id", $parent_id)->select("reg_no")->first();
                $reg_no = $gettingFromUserInfo["reg_no"];
            }
        }

        if(isset($data["tracking_id"]) && !empty($data["tracking_id"])) {
            if(strlen($data["tracking_id"]) < 6 || strlen($data["tracking_id"]) > 6) {
                return Response::json(["status" => "error", "result" => "tracking_id must be 6 digits"]);
            } else {
                $tracking_id = $data["tracking_id"];
            }
        }
        // getting info and manipulating about super user ending
    
        
        
        //Condition if sender_email Available(for sub users)
        if(isset($data['sender_email']) && $data['sender_email'] != ''){
                $sender_email = Tcrypt::encrypter($data['sender_email']);
                $checkSubuser = User::where('email','=',$sender_email)->where('parent_id','=',$user_id)->select('id')->first();
                if($checkSubuser['id']){
                    $user_id = $checkSubuser['id'];
                }
        }
        $sentcontract = new sendcontractController();
        $contract = $sentcontract->getTemplateByTemplateID($template_id);

        if($contract == '0'){
            return Response::json(['status'=>'error','result' => 'template not found']);
        }
        if(isset($data['visible_name'])){
            $visible_name = $data['visible_name'];
            $contract_name = $data['visible_name'];
        }else{
            $visible_name = $contract->visible_name;
            $contract_name = $contract->name;
        }
        
        if(isset($data['language_id'])){
            $lang = $data['language_id'];
        }else{
            $language = Userinfo::where('user_id', '=', $user_id)->select('language')->first();
            $lang = ($contract->recipient_language == '' ? $language['language'] : $contract->recipient_language);
        }
        
        if(isset($data['due_date'])){
            $duedate = $data['due_date'];
        }else{
            $duedate = $contract->due_date;
        }
        
        if(isset($data['reminder_date'])){
            $remdate = $data['reminder_date'];
        }else{
            $remdate = $contract->reminder_date;
        }
        
        
        if(isset($data['invitation_message'])){
            $invitation_message = $data['invitation_message'];
        }else{
            $invitation_message = $contract->invitation_message; 
        }

        if(!isset($data["invitation_sms"]) || $data["invitation_sms"] == "") {
            $data["invitation_sms"] = $contract->invitation_sms_message;
        }
        
        if(isset($data['confirmation_message'])){
            $confirmation_message = $data['confirmation_message'];
        }else{
            $confirmation_message = $contract->confirmation_message;  
        }

        if(!isset($data["confirmation_sms"]) || $data["confirmation_sms"] == "") {
            $data["confirmation_sms"] = $contract->confirmation_sms_message;
        }
        
        //save vimeo and youtube url
        if(isset($data['video_url']) && !empty($data['video_url'])){
                if(preg_match("@^(?:https://(?:www\\.)?youtube.com/)(watch\\?v=|v/)([a-zA-Z0-9_]*)@", $data['video_url'], $match)){
                    $offerArray['video_link'] = $data['video_url'];
                }else if(preg_match("/(https?:\/\/)?(www\.)?(player\.)?vimeo\.com\/([a-z]*\/)*([0-9]{6,11})[?]?.*/", $data['video_url'], $output_array)){
                    $offerArray['video_link'] = $data['video_url'];
                }else{
                    return Response::json(['status'=>'error','result' =>'Invalid video url']);
                }     
        }else if(isset($data['video']) && !empty($data['video'])){
            $video_file =  $data['video'];
            if($video_file->getSize() > 10485760){
                return Response::json(['status'=>'error','result' =>'File size is greator than 10mb']);
            }else if($video_file->getMimeType() != "video/mp4"){
                return Response::json(['status'=>'error','result' =>'File type must be mp4']);
            }
            $title = $video_file->getClientoriginalName();
            $videoname  = uniqid().'_'.$title;
            $destination = public_path().'/uploads/user_videos';
            $link = asset('/').'/uploads/user_videos/'.$videoname;
            $video_file->move($destination, $videoname );
            $offerArray['video_link'] = '/uploads/user_videos/'.$videoname;
        }


        $attachments = $contract->attachments;
        $contract->content = $contract->content;
        $offerSentId = $sentcontract->addOffersent($user_id,$duedate,$lang,$contract_name,$remdate,$contract->content,$visible_name,$invitation_message,$confirmation_message,$retargeting_code='',$attachments,$template_id);

        //Updating Recipients Column in Offer Sent Table
        $offerData1['recipients'] = json_encode($recsList);
        $offerData1['invitation_sms_message'] = $data["invitation_sms"];
        $offerData1['confirmation_sms_message'] = $data["confirmation_sms"];
        $offerWhere1['id'] = $offerSentId;

        //$offerData1['reg_no'] = $reg_no;
        $offerData1['tracking_id'] = $tracking_id;
        if(isset($user_details) && !empty($user_details)) {
            $offerData1['user_details'] = $user_details;
        }

        //Condition for Link Template
        if(isset($contract->remember_settings) && $contract->remember_settings != ''){
            $remSettingArr = json_decode($contract->remember_settings,true);
            if(isset($remSettingArr['link_template']) && isset($remSettingArr['link_template']['select_link_template']) && $remSettingArr['link_template']['select_link_template'] == 1){
                if(isset($remSettingArr['link_template']['template_id']) && $remSettingArr['link_template']['template_id'] != ''){
                    $offerData1['link_template'] = json_encode($remSettingArr['link_template']);
                }
            }
        }

        $utility->updateItem("offer_sent",$offerWhere1,$offerData1);

        /*Add content in orignal offer table*/
        $original_offer['sender_id'] = $user_id;
        $original_offer['offer_sent_id'] = $offerSentId;
        $original_offer['content'] = $contract->content;
        $utility->addItem("original_offer",$original_offer);

        $status = $this->sendcontract($offerSentId,$data,$user_id,$visible_name,$invitation_message,$lang);
        if($status){
            //Video upload 
            if(isset($data['video_title']) && !empty($data['video_title'])){
                $offerArray['video_title'] = $data['video_title'];
            }
            $whereSent['id']= $offerSentId;
            $offerArray['offer_status'] = 0;
            $utility->updateItem("offer_sent",$whereSent,$offerArray);
            return Response::json(['status'=>'success','result' =>'contract sent successfully','contract_id' => $offerSentId]);
        }else if($status==0){
            return Response::json(['status'=>'success','result' =>'Your are not paid user, Please upgrade your account for send contract']);
        }
        
    }

    public function postSendtemplate() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');
        $template_id = $iframeURL = 0;
        ini_set('max_execution_time', 800);
        ini_set('memory_limit','-1');

        //validation for access_token and template_id starting
        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        }
        $user_id = $utility->getUserIdByAuthToken($access_token);
        $parent_id = $utility->getParent($user_id);
        $getApiHitCount = Userinfo::where('user_id', $parent_id)->select('hit_count')->first();
        $addupdateapiaccesslogs = $utility->addupdateapiaccesslogs($user_id, 'postSendtemplate v3', $data, $getApiHitCount['hit_count']);
        if($addupdateapiaccesslogs == 'exceed') {
            $this->apiCallLimitExceedMessage = str_replace('#hitCuntNo', $getApiHitCount['hit_count'], $this->apiCallLimitExceedMessage);
            return Response::json(['status' => 'error', 'result' => $this->apiCallLimitExceedMessage]);
        }
        /*
            API addon permission
        */
        if(!$utility->isSuperuser($user_id)) {
            $permissons = DB::table('users_login')->join('user_setting','users_login.id','=','user_setting.user_id')->where('users_login.id', $parent_id)->select('users_login.payment_version', 'user_setting.new_addon_obj')->first();
            if(isset($data['payment_widget']) && $data['payment_widget'] == 1) {
            } else {
                if($permissons) {
                    $is_enable_addon = json_decode($permissons->new_addon_obj);
                    if($permissons->payment_version == 2) {
                        if(isset($is_enable_addon->api_addon) && $is_enable_addon->api_addon == 1) {
                            // do nothing
                        }else{
                            return Response::json(['status'=>'error','result' => 'You have to enable API addon']);
                        }
                    }
                }
            }
            if($utility->checkAccountLocked($user_id) == 1){
                return Response::json(['status' => 'error', 'result' => 'Account is locked make payment in order to continue using Simplesign']);
            }
            if($utility->checkAdminStripe($user_id)) {
                return Response::json(['status' => 'error', 'result' => 'Account is locked make payment in order to continue using Simplesign']);
            }
        }
        /*
            API addon permission end
        */
        //contract_id, document_id, template_id
        if(isset($data['contract_id']) && $data['contract_id'] != '') {
            $template_id = $data['contract_id'];
            $data['template_id'] = $template_id;
        }  elseif(isset($data['template_id']) && !empty($data['template_id'])) {
            $data['template_id'] = $data['template_id'];
            $template_id = $data['template_id'];
        }  elseif(isset($data['document_id']) && !empty($data['document_id'])) {
            $data['template_id'] = $data['document_id'];
            $template_id = $data['document_id'];
        } if(!isset($data['template_id']) || $data['template_id'] == '') {
            return Response::json(['status' => 'error', 'result' => 'template_id is missing']);
        }
        //validation for access_token and template_id ending
        $userSettings = $utility->getUserSettings($parent_id);
        $newAddonObj = (isset($userSettings['new_addon_obj']) && !empty($userSettings['new_addon_obj']) ? json_decode($userSettings['new_addon_obj'], true) : []);
        //checking persmissions of add-ons
        $viewerPartyAddonPermission = (!empty($newAddonObj) && isset($newAddonObj['viewerparty_addon_permission']) && $newAddonObj['viewerparty_addon_permission'] == 1 ? $newAddonObj['viewerparty_addon_permission'] : 0);
        $finlandBankIdAddonPermission = (!empty($newAddonObj) && isset($newAddonObj['finlandbankid_addon_permission']) && $newAddonObj['finlandbankid_addon_permission'] == 1 ? $newAddonObj['finlandbankid_addon_permission'] : 0);
        $danishBankIdAddonPermission = (!empty($newAddonObj) && isset($newAddonObj['danishbankid_addon_permission']) && $newAddonObj['danishbankid_addon_permission'] == 1 ? $newAddonObj['danishbankid_addon_permission'] : 0);
        $norwegianBankIdAddonPermission = (!empty($newAddonObj) && isset($newAddonObj['norwegianbankid_addon_permission']) && $newAddonObj['norwegianbankid_addon_permission'] == 1 ? $newAddonObj['norwegianbankid_addon_permission'] : 0);
        $templateRedirectAddonPermission = (!empty($newAddonObj) && isset($newAddonObj['template_redirect_addon_permission']) && $newAddonObj['template_redirect_addon_permission'] == 1 ? $newAddonObj['template_redirect_addon_permission'] : 0);
        $contractChatAddonPermission = (isset($userSettings['contract_chat_addon_permission']) && $userSettings['contract_chat_addon_permission'] == 1 ? $userSettings['contract_chat_addon_permission'] : 0);
        $forwardSignatureAddonPermission = (isset($userSettings['fwd_signature_addon_permission']) && $userSettings['fwd_signature_addon_permission'] == 1 ? $userSettings['fwd_signature_addon_permission'] : 0);
        $swedishBankID = (isset($userSettings['sign_bankid']) && $userSettings['sign_bankid'] == 1 ? $userSettings['sign_bankid'] : 0);
        $reviewPartyAddonPermission = (isset($userSettings['review_party_addon_permission']) && $userSettings['review_party_addon_permission'] == 1 ? $userSettings['review_party_addon_permission'] : 0);
        $attachmentsAddonPermission = (isset($userSettings['attachments_addon_permission']) && $userSettings['attachments_addon_permission'] == 1 ? $userSettings['attachments_addon_permission'] : 0);
        $documentFieldsAddonPermission = (isset($userSettings['document_fields']) && $userSettings['document_fields'] == 1 ? $userSettings['document_fields'] : 0);
        //$securityAddonPermission = (isset($userSettings['security_addon_permission']) && $userSettings['security_addon_permission'] == 1 ? $userSettings['security_addon_permission'] : 0);

        //This is postSendtemplate function
        $partiesName = [];
        if(isset($data['recipients']) && $data['recipients'] != '') {
            if($this->is_JSON($data['recipients'])) {
                $recipients = json_decode($data['recipients'], true);
                $recsList = $mainArray = array();//recipients list for offer sent table
                if(!empty($recipients)) {
                    foreach($recipients as $recKey => $recValue) {
                        //new code starting
                        if(!isset($recValue['people_fields']) || !is_array($recValue['people_fields'])) {
                            return Response::json(['status' => 'error', 'result' => 'people_fields should be array']);
                        } else {
                            if(!isset($recValue['people_fields']) || empty($recValue['people_fields'])) {
                                return Response::json(['status' => 'error', 'result' => 'People information is missing']);
                            } elseif(isset($recValue['people_fields']) && !empty($recValue['people_fields'])) {
                                $sentRec = array();
                                //Recipients basic information validations like first_name, last_name and email starting
                                if(!isset($recValue['people_fields']['name']) || $recValue['people_fields']['name'] == '') {
                                    return Response::json(['status'=>'error','result' => 'Invalid or missing Recipient name']);
                                } elseif(!isset($recValue['people_fields']['email']) || !filter_var($recValue['people_fields']['email'], FILTER_VALIDATE_EMAIL)) {
                                    return Response::json(['status'=>'error','result' => 'Invalid or missing recipient email']);
                                }
                                //Recipients basic information validations like first_name, last_name and email ending

                                //Roles of recipient validation starting
                                elseif(!isset($recValue['details']['recipient_role']) || $recValue['details']['recipient_role'] == '') {
                                    return Response::json(['status'=>'error','result' => 'Invalid or missing recipient_role in details']);
                                } /* elseif(isset($recValue['details']['recipient_role']) && $recValue['details']['recipient_role'] != '') {
                                    $tabComponents = Recipient_fields_roles::where('userid', $parent_id)->where('tab_components', $recValue['details']['recipient_role'])->count();
                                    if(!$tabComponents) {
                                        return Response::json(['status'=>'error','result' => $recValue['details']['recipient_role'].' recipient_role doesn\'t exists in this account.']);
                                    }
                                } */
                                //Roles of recipient validation ending

                                //Authentication validations starting
                                elseif(isset($recValue['details']['authentication']) && ($recValue['details']['authentication'] == 'bankID' || $recValue['details']['authentication'] == 'BankID') && $swedishBankID != 1) {
                                    return Response::json(['status'=>'error','result' => 'BankID feature is not enabled on your account, Contact Simplesign support for BankID activation']);
                                } elseif(isset($recValue['details']['authentication']) && ($recValue['details']['authentication'] == 'bankID' || $recValue['details']['authentication'] == 'BankID') && $swedishBankID == 1) {
                                    if(isset($recValue['people_fields']['personal_no']) && !empty($recValue['people_fields']['personal_no']) && strlen($recValue['people_fields']['personal_no']) != 12) {
                                        return Response::json(['status'=>'error','result' =>'personal_no must be 12 digits']);
                                    }
                                } elseif(isset($recValue['details']['authentication']) && ($recValue['details']['authentication'] == 'FinnishBankID' || $recValue['details']['authentication'] == 'Finnish BankID' || $recValue['details']['authentication'] == 'FINNISHBANKID'  || $recValue['details']['authentication'] == 'finnish bankid' || $recValue['details']['authentication'] == 'finnishbankid') && $finlandBankIdAddonPermission != 1) {
                                    return Response::json(['status'=>'error','result' => 'Finnish BankID feature is not enabled in your account, Contact Simplesign support for Finnish BankID activation']);
                                } elseif(isset($recValue['details']['authentication']) && ($recValue['details']['authentication'] == 'FinnishBankID' || $recValue['details']['authentication'] == 'Finnish BankID' || $recValue['details']['authentication'] == 'FINNISHBANKID'  || $recValue['details']['authentication'] == 'finnish bankid' || $recValue['details']['authentication'] == 'finnishbankid') && $finlandBankIdAddonPermission == 1) {
                                    if(isset($recValue['people_fields']['personal_no']) && !empty($recValue['people_fields']['personal_no']) && strlen($recValue['people_fields']['personal_no']) != 12) {
                                        return Response::json(['status'=>'error','result' =>'personal_no must be 12 digits']);
                                    }
                                } elseif(isset($recValue['details']['authentication']) && ($recValue['details']['authentication'] == 'DanishBankID' || $recValue['details']['authentication'] == 'Danish BankID' || $recValue['details']['authentication'] == 'DANISHBANKID'  || $recValue['details']['authentication'] == 'danish bankid' || $recValue['details']['authentication'] == 'danishbankid') && $danishBankIdAddonPermission != 1) {
                                    return Response::json(['status'=>'error','result' => 'Danish BankID feature is not enabled in your account, Contact Simplesign support for Danish BankID activation']);
                                } elseif(isset($recValue['details']['authentication']) && ($recValue['details']['authentication'] == 'DanishBankID' || $recValue['details']['authentication'] == 'Danish BankID' || $recValue['details']['authentication'] == 'DANISHBANKID'  || $recValue['details']['authentication'] == 'danish bankid' || $recValue['details']['authentication'] == 'danishbankid') && $danishBankIdAddonPermission == 1) {
                                    if(isset($recValue['people_fields']['personal_no']) && !empty($recValue['people_fields']['personal_no']) && strlen($recValue['people_fields']['personal_no']) != 12) {
                                        return Response::json(['status'=>'error','result' =>'personal_no must be 12 digits']);
                                    }
                                } elseif(isset($recValue['details']['authentication']) && ($recValue['details']['authentication'] == 'NorwegianBankID' || $recValue['details']['authentication'] == 'Norwegian BankID' || $recValue['details']['authentication'] == 'NORWEGIANBANKID'  || $recValue['details']['authentication'] == 'norwegian bankid' || $recValue['details']['authentication'] == 'norwegianbankid') && $norwegianBankIdAddonPermission != 1) {
                                    return Response::json(['status'=>'error','result' => 'Norwegian BankID feature is not enabled in your account, Contact Simplesign support for Norwegian BankID activation']);
                                } elseif(isset($recValue['details']['authentication']) && ($recValue['details']['authentication'] == 'NorwegianBankID' || $recValue['details']['authentication'] == 'Norwegian BankID' || $recValue['details']['authentication'] == 'NORWEGIANBANKID'  || $recValue['details']['authentication'] == 'norwegian bankid' || $recValue['details']['authentication'] == 'norwegianbankid') && $norwegianBankIdAddonPermission == 1) {
                                    if(isset($recValue['people_fields']['personal_no']) && !empty($recValue['people_fields']['personal_no']) && strlen($recValue['people_fields']['personal_no']) != 12) {
                                        return Response::json(['status'=>'error','result' =>'personal_no must be 12 digits']);
                                    }
                                } elseif(isset($recValue['details']['authentication']) && ($recValue['details']['authentication'] == 'Attest' || $recValue['details']['authentication'] == 'At test' || $recValue['details']['authentication'] == 'attest'  || $recValue['details']['authentication'] == 'at test') && $reviewPartyAddonPermission != 1) {
                                    return Response::json(['status'=>'error','result' => 'Attest feature is not enabled in your account, Contact Simplesign support for Attest activation']);
                                } elseif(isset($recValue['details']['authentication']) && ($recValue['details']['authentication'] == 'ViewOnly' || $recValue['details']['authentication'] == 'View Only' || $recValue['details']['authentication'] == 'viewonly'  || $recValue['details']['authentication'] == 'view only') && $viewerPartyAddonPermission != 1) {
                                    return Response::json(['status'=>'error','result' => 'View only feature is not enabled in your account, Contact Simplesign support for view only activation']);
                                }
                                //Authentication validations ending

                                //Validation when invitation_type is 2, for email and sms, need mobile no starting
                                if(isset($recValue['details']['invitation_type']) && ($recValue['details']['invitation_type'] == 'email and sms' || $recValue['details']['invitation_type'] == 'Email And SMS' || $recValue['details']['invitation_type'] == 'email & sms' || $recValue['details']['invitation_type'] == 'Email & SMS')) {
                                    if(!isset($recValue['people_fields']['mobile']) || empty($recValue['people_fields']['mobile'])) {
                                        return Response::json(['status'=>'error','result' =>'mobile is mandatory for recipient '.$recValue['people_fields']['name'].' in order to send invitation sms']);
                                    }
                                }
                                //Validation when invitation_type is 2, for email and sms, need mobile no ending

                                //Validation when confirmation is 2, for email and sms, need mobile no starting
                                if(isset($recValue['details']['confirmation']) && ($recValue['details']['confirmation'] == 'email and sms' || $recValue['details']['confirmation'] == 'Email And SMS' || $recValue['details']['confirmation'] == 'email & sms' || $recValue['details']['confirmation'] == 'Email & SMS')) {
                                    if(!isset($recValue['people_fields']['mobile']) || empty($recValue['people_fields']['mobile'])) {
                                        return Response::json(['status'=>'error','result' =>'mobile is mandatory for recipient '.$recValue['people_fields']['name'].' in order to send confirmation sms']);
                                    }
                                }
                                //Validation when confirmation is 2, for email and sms, need mobile no ending

                                //checking non standard custom fields of recipient starting
                                $recipientFieldsRoles = new Recipient_fields_roles();
                                if($template_id != 0) {
                                    $recipientFieldsRoles = $recipientFieldsRoles->where('offer_doc_id', $template_id);
                                } else {
                                    $recipientFieldsRoles = $recipientFieldsRoles->where('offer_doc_id', 0);
                                }
                                $tabFields = $recipientFieldsRoles->where('userid', $user_id)->where('tab_components', $recValue['details']['recipient_role'])->select('tab_fields')->first();
                                $personRecipientKeys = array('name', 'email', 'personal_no', 'mobile', 'address', 'city', 'zipcode');
                                foreach($recValue['people_fields'] as $peopleFieldsKey => $peopleFieldsValue) {
                                    if(!in_array($peopleFieldsKey, $personRecipientKeys)) {
                                        if(!empty($tabFields['tab_fields'])) {
                                            $tabFieldsJsonDecode = json_decode($tabFields['tab_fields'], true);
                                            if(!empty($tabFieldsJsonDecode['recinfo_fields']['custom_fields'])) {
                                                $recinfoFieldsJsonDecode = json_decode($tabFieldsJsonDecode['recinfo_fields']['custom_fields'], true);
                                                if(!array_key_exists($peopleFieldsKey, $recinfoFieldsJsonDecode)) {
                                                    return Response::json(['status'=>'error','result' =>$peopleFieldsKey.' field doesn\'t exists for this user in person fields']);
                                                } elseif(array_key_exists($peopleFieldsKey, $recinfoFieldsJsonDecode) && $recinfoFieldsJsonDecode[$peopleFieldsKey] != 1) {
                                                    return Response::json(['status'=>'error','result' => $peopleFieldsKey.' field is off for this user in person fields']);
                                                }
                                            }
                                        }
                                    }
                                }
                                //checking non standard custom fields of recipient ending

                                //checking non standard custom fields of organization starting
                                if(isset($recValue['organization_fields']) && !empty($recValue['organization_fields'])) {
                                    $personOrganizationKeys = array('name', 'org_no', 'phone', 'address', 'city', 'zipcode');
                                    foreach($recValue['organization_fields'] as $organizationFieldsKey => $organizationFieldsValue) {
                                        if(!in_array($organizationFieldsKey, $personOrganizationKeys)) {
                                            if(!empty($tabFields['tab_fields'])) {
                                                $tabFieldsJsonDecode = json_decode($tabFields['tab_fields'], true);
                                                if(!empty($tabFieldsJsonDecode['orginfo_fields']['custom_fields'])) {
                                                    $orginfoFieldsJsonDecode = json_decode($tabFieldsJsonDecode['orginfo_fields']['custom_fields'], true);
                                                    if(!array_key_exists($organizationFieldsKey, $orginfoFieldsJsonDecode)) {
                                                        return Response::json(['status'=>'error','result' => $organizationFieldsKey.' field doesn\'t exists for this user in organization fields']);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                //checking non standard custom fields of organization ending

                                $sentRec['full_name'] = $recValue['people_fields']['name'];
                                $sentRec['email'] = $recValue['people_fields']['email'];
                                $partiesName[] = $recValue['people_fields']['name'];
                                array_push($recsList, $sentRec);
                            }
                        }
                        //new code ending
                    } //Foreach End
                } else {
                    return Response::json(['status'=>'error','result' => 'Recipient information should not be empty']);
                }
            } else {
                return Response::json(['status'=>'error','result' => 'Recipient information is invalid format, JSON is required']);
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Recipient information is missing']);
        }

        if(isset($data['document_chat']) && $data['document_chat'] == 1 && $contractChatAddonPermission != 1) {
            return Response::json(['status' => 'error', 'result' => 'Document chat feature is not enabled in your account, Contact Simplesign support for document chat activation']);
        }

        if(!$utility->checkusersignatures($user_id, $recsList) && !$utility->isSuperuser($user_id)) {
            return Response::json(['status' => 'error', 'result' => 'user doesn\'t have enough signatures(s)']);
        }

        if(isset($data['transfer_signature_role']) && $data['transfer_signature_role'] == 1 && $forwardSignatureAddonPermission != 1) {
            return Response::json(['status' => 'error', 'result' => 'Transfer Signature Role feature is not enabled in your account, Contact Simplesign support for transfer signature role activation']);
        }

        //$newAddonObjForTemplateRedirect = (isset($userSettings['new_addon_obj']) && !empty($userSettings['new_addon_obj']) ? json_decode($userSettings['new_addon_obj'], true) : []);
        //$templateRedirectAddonPermission = (!empty($newAddonObj) && isset($newAddonObj['template_redirect_addon_permission']) && $newAddonObj['template_redirect_addon_permission'] == 1 ? $newAddonObj['template_redirect_addon_permission'] : 0);
        if(isset($data['redirect_url']) && $data['redirect_url'] != '') {
            if($templateRedirectAddonPermission != 1) {
                return Response::json(['status' => 'error', 'result' => 'Template redirect feature is not enabled in your account, Contact Simplesign support for Template redirect activation']);
            } if(filter_var($data['redirect_url'], FILTER_VALIDATE_URL) === FALSE) {
                return Response::json(['status' => 'error', 'result' => 'Invalid URL']);
            }
        }

        if(isset($data['documentfields'])) {
            if($documentFieldsAddonPermission != 1) {
                return Response::json(['status' => 'error', 'result' => 'Document Fields feature is not enabled in your account, Contact Simplesign support for Document Fields activation']);
            }
            if(!empty($data['documentfields']) && $this->is_JSON($data['documentfields'])) {
                $documentFields = json_decode($data['documentfields'], true);
                foreach($documentFields as $docKey => $docValue) {
                    if(!is_array($docValue['document_fields'])) {
                        return Response::json(['status' => 'error', 'result' => 'document_fields should be array']);
                    } else {
                        if(!isset($docValue['document_fields']) || empty($docValue['document_fields'])) {
                            return Response::json(['status' => 'error', 'result' => 'Document information is missing']);
                        } elseif(isset($docValue['document_fields']) && !empty($docValue['document_fields'])) {
                            foreach($docValue['document_fields'] as $docFldKey => $docFldValue) {
                                if(!isset($docFldKey) || trim($docFldKey) == '') {
                                    return Response::json(['status' => 'error', 'result' => 'document_fields key is missing']);
                                } if(!isset($docFldValue) || trim($docFldValue) == '') {
                                    return Response::json(['status' => 'error', 'result' => 'document_fields value is missing']);
                                }
                            }
                        }
                    }
                }//loop ends here
            } else {
                return Response::json(['status'=>'error','result' => 'Document information is invalid format, JSON is required']);
            }
        }

        //getting invitation url for showing document link in response instead of an email starting
        if(isset($data['invitation_url']) && $data['invitation_url'] == 1) {
            $signing_url = 1;
        } else {
            $signing_url = 0;
        }
        //getting invitation url for showing document link in response instead of an email ending

        //show iframe URL instead of sending emails starting
        if(isset($data['iframe_url']) && $data['iframe_url'] != 0) {
            $iframeURL = $data['iframe_url'];
        }
        //show iframe URL instead of sending emails ending

        //Checking for Template belongs to this user or Parent Starting
        $getAllTemplates = $this->checkUserTemplates($user_id, $template_id);
        if(!$getAllTemplates) {
            return Response::json(['status'=>'error','result' =>'Template not found']);
        }
        //print_rj($getAllTemplates, 1);

        $editorVersion = Offerdocs::where('id', $template_id)->pluck('editor_version');
        $checkTemplateAccess = $this->checkTemplateAccess($user_id, $parent_id);
        if($checkTemplateAccess != null && $checkTemplateAccess == 0 && $editorVersion != '') {
            return Response::json(['status' => 'error', 'result' => 'Template access is restricted']);
        }
        //Checking for Template belongs to this user or Parent Ending

        //Checking for Template belongs to this user or Parent (RJ) START
        /* $checkTemplate = Offerdocs::where('id', $template_id)->where('user_id', $user_id)->where('is_shareable', 0)
        ->orWhere(function ($query) use($parent_id,$template_id) {
            $query->where('id', $template_id)->where('user_id', $parent_id)->where('is_shareable', 1);
        })->count();
        //adding comment for checking bugs murge for beta
        if(!$checkTemplate) {
            return Response::json(['status'=>'error','result' =>'Template not found']);
        } */
        //Checking for Template belongs to this user or Parent (RJ) END

        $reg_no = $company_name = $user_details = $tracking_id = "";
        if($utility->isSuperuser($user_id)) {
            $company_name = (isset($data["sender_company"]) && !empty($data["sender_company"]) ? $data["sender_company"] : "");
            if((isset($data["sender_company"]) && !empty($data["sender_company"])) && (!isset($data["sender_reg_no"]) && empty($data["sender_reg_no"]))) {
                return Response::json(["status" => "error", "result" => "After given sender_company name sender_reg_no is mandatory"]);
            } elseif((isset($data["sender_reg_no"]) && !empty($data["sender_reg_no"])) && (!isset($data["sender_company"]) && empty($data["sender_company"]))) {
                return Response::json(["status" => "error", "result" => "After given sender_reg_no sender_company is mandatory"]);
            } elseif(isset($data["sender_reg_no"]) && !empty($data["sender_reg_no"])) {
                $userdata = $utility->getParentDetails($user_id);
                $userArrar = array();
                $userArrar['first_name'] = $userdata->full_name;
                $userArrar['last_name'] = $userdata->second_name;
                $userArrar['email'] = $userdata->email;
                $userArrar['company'] = (isset($company_name) && !empty($company_name) ? $company_name : $userdata->company);
                $reg_no = $data["sender_reg_no"];
                $userArrar['reg_no'] = $reg_no;
                $userArrar['address'] = (isset($data["sender_address"]) && !empty($data["sender_address"]) ? $data["sender_address"] : $userdata->address);
                $userArrar['telephone'] = (isset($data["sender_telephone"]) && !empty($data["sender_telephone"]) ? $data["sender_telephone"] : $userdata->telephone);
                $userArrar['post_code'] = (isset($data["sender_post_code"]) && !empty($data["sender_post_code"]) ? $data["sender_post_code"] : $userdata->post_code);
                $userArrar['city'] = (isset($data["sender_city"]) && !empty($data["sender_city"]) ? $data["sender_city"] : $userdata->city);
                $user_details = json_encode($userArrar);
            } else {
                $gettingFromUserInfo = Userinfo::where("user_id", $parent_id)->select("reg_no")->first();
                $reg_no = $gettingFromUserInfo["reg_no"];
            }
        }

        if(isset($data["tracking_id"]) && !empty($data["tracking_id"])) {
            if(strlen($data["tracking_id"]) < 6 || strlen($data["tracking_id"]) > 6) {
                return Response::json(["status" => "error", "result" => "tracking_id must be 6 digits"]);
            } else {
                $tracking_id = $data["tracking_id"];
            }
        }
        //getting info and manipulating about super user ending

        //Condition if sender_email Available(for sub users)
        if(isset($data['sender_email']) && $data['sender_email'] != '') {
            $sender_email = Tcrypt::encrypter($data['sender_email']);
            $checkSubuser = User::where('email', $sender_email)->where('parent_id', $user_id)->select('id')->first();
            if($checkSubuser['id']) {
                $user_id = $checkSubuser['id'];
            }
        }

        $sentcontract = new sendcontractController();
        $contract = $sentcontract->getTemplateByTemplateID($template_id);

        //request attachment validation starting
        $requestAttachments = (isset($contract->request_attachment) ? $contract->request_attachment : '');
        $requestAttachmentsJsonDecode = (isset($requestAttachments) && $requestAttachments != '' ? json_decode($requestAttachments, true) : []);
        if(!empty($requestAttachmentsJsonDecode)) {
            $AttachmentNum = $requestAttachmentIndex = 0;
            for($reqAttachInd = 1; $reqAttachInd <= 25; $reqAttachInd++) {
                $AttachmentNum++;
                if(isset($requestAttachmentsJsonDecode[$requestAttachmentIndex]['recipient_id']) && ($requestAttachmentsJsonDecode[$requestAttachmentIndex]['recipient_id'] == 'Me' || $requestAttachmentsJsonDecode[$requestAttachmentIndex]['recipient_id'] == 'all')) {
                    if(isset($data['request'.$AttachmentNum.'_attachment'])) {
                        $attachment_files = $data['request'.$AttachmentNum.'_attachment'];
                        if(!empty($attachment_files)) {
                            $fileTypes = array('pdf', 'PDF', 'jpg', 'JPG', 'jpeg', 'JPEG', 'doc', 'DOC', 'docx', 'DOCX', 'xls', 'XLS', 'xlsx', 'XLSX', 'png', 'PNG');
                            if(!in_array(strtolower($attachment_files->getClientOriginalExtension()), $fileTypes)) {
                                return Response::json(['status'=>'error','result' => 'Invalid attachment file type, only document files are acceptable']);
                            }
                        }
                    }
                }
                $requestAttachmentIndex++;
            }
        }
        //request attachment validation ending

        if($contract == '0') {
            return Response::json(['status'=>'error','result' => 'template not found']);
        }
        if(isset($data['visible_name']) && $data['visible_name'] != '') {
            $visible_name = $data['visible_name'];
            $contract_name = $data['visible_name'];
        } else {
            $visible_name = $contract->visible_name;
            $contract_name = $contract->name;
        }
        if(isset($data['language_id']) && $data['language_id'] != '') {
            $lang = $data['language_id'];
        } else {
            $language = Userinfo::where('user_id', '=', $user_id)->select('language')->first();
            $lang = ($contract->recipient_language == '' ? $language['language'] : $contract->recipient_language);
        }
        $dueDays = '';
        $userTimeZone = $utility->getUsertimezone($user_id);
        if(isset($data['due_days']) && $data['due_days'] != '') {
            $dueDays = $data['due_days'];
            if($dueDays > 0) {
                $dueDays = date('Y-m-d', strtotime(date('Y-m-d'). " + $dueDays days"));
            } else {
                $dueDays = date('Y-m-d');
            }
            $dueDays = $utility->changeTimeZone($dueDays.' 23:50:00', 'Y-m-d', $userTimeZone, 'UTC');
        } else {
            $dueDays = '0000-00-00 00:00:00';
        }

        $reminderDays = '';
        if(isset($data['reminder_days']) && $data['reminder_days'] != '') {
            $reminderDays = $data['reminder_days'];
            if($reminderDays > 0) {
                $reminderDays = date('Y-m-d', strtotime(date('Y-m-d'). " + $reminderDays days"));
            } else {
                $reminderDays = date('Y-m-d');
            }
            $reminderDays = $utility->changeTimeZone($reminderDays.' 08:50:00', 'Y-m-d H:i:s', $userTimeZone, 'UTC');
        } else {
            $reminderDays = '0000-00-00 00:00:00';
        }

        if(isset($data['invitation_message']) && $data['invitation_message'] != '') {
            $invitation_message = $data['invitation_message'];
        } else {
            $invitation_message = $contract->invitation_message;
        }
        if(!isset($data["invitation_sms"]) || $data["invitation_sms"] == "") {
            $data["invitation_sms"] = $contract->invitation_sms_message;
        }
        if(isset($data['confirmation_message']) && $data['confirmation_message'] != '') {
            $confirmation_message = $data['confirmation_message'];
        } else {
            $confirmation_message = $contract->confirmation_message;
        }
        if(!isset($data["confirmation_sms"]) || $data["confirmation_sms"] == "") {
            $data["confirmation_sms"] = $contract->confirmation_sms_message;
        }

        //save vimeo and youtube url
        if(isset($data['video_url']) && !empty($data['video_url'])) {
            if(preg_match("@^(?:https://(?:www\\.)?youtube.com/)(watch\\?v=|v/)([a-zA-Z0-9_]*)@", $data['video_url'], $match)) {
                $offerArray['video_link'] = $data['video_url'];
            } elseif(preg_match("/(https?:\/\/)?(www\.)?(player\.)?vimeo\.com\/([a-z]*\/)*([0-9]{6,11})[?]?.*/", $data['video_url'], $output_array)) {
                $offerArray['video_link'] = $data['video_url'];
            } else {
                return Response::json(['status'=>'error','result' =>'Invalid video url']);
            }
        } elseif(isset($data['video']) && !empty($data['video'])) {
            $video_file = $data['video'];
            if($video_file->getSize() > 10485760) {
                return Response::json(['status'=>'error','result' =>'File size is greator than 10mb']);
            } elseif($video_file->getMimeType() != "video/mp4") {
                return Response::json(['status'=>'error','result' =>'File type must be mp4']);
            }
            $title = $video_file->getClientoriginalName();
            $videoname = uniqid().'_'.$title;
            $destination = public_path().'/uploads/user_videos';
            $link = asset('/').'/uploads/user_videos/'.$videoname;
            $video_file->move($destination, $videoname);
            $offerArray['video_link'] = '/uploads/user_videos/'.$videoname;
        }

        $attachments = $contract->attachments;
        $fromWhere = '';
        if(isset($data['payment_widget']) && $data['payment_widget'] == 1) {
            $fromWhere = "<input type='hidden' class='payment_widget' name='payment_widget' id='payment_widget' value='1' apiname='sendtemplate' apiversion='v3'>";
        }
        $contract->content = $contract->content . "<input type='hidden' class='isfromapi' name='isfromapi' value='1' apiname='sendtemplate' apiversion='v3'> $fromWhere";
        //checking file is coming from end user side starting
        if(!empty(Input::file())) {
            if($attachmentsAddonPermission != 1) {
                return Response::json(['status' => 'error', 'result' => 'Attachments feature is not enabled in your account, Contact Simplesign support for Attachments activation']);
            }
            $attachmentObject = Input::file();
            $requestAttachmentFileTypes = array('pdf', 'PDF', 'jpg', 'JPG', 'jpeg', 'JPEG', 'doc', 'DOC', 'docx', 'DOCX', 'xls', 'XLS', 'xlsx', 'XLSX', 'png', 'PNG');
            $addAttachmentFileTypes = array('JPG','JPEG','GIF','PNG','jpg','jpeg','gif','png','pdf','doc','docx','xls','xlsx','zip','csv','txt');
            foreach($attachmentObject as $attachmentObjectKey => $attachmentObjectValue) {
                $attachmentNameOnly = str_replace('attachment_', '', $attachmentObjectKey);
                $arrayNameSearchKey = '';
                if(!in_array(strtolower($attachmentObjectValue->getClientOriginalExtension()), $requestAttachmentFileTypes)) {
                    return Response::json(['status'=>'error','result' => 'Invalid attachment file type, only document files are acceptable']);
                }
                if(!empty($requestAttachmentsJsonDecode)) {
                    $arrayNameSearchKey = array_search($attachmentNameOnly, array_column($requestAttachmentsJsonDecode, 'name'));
                }
                if(isset($requestAttachmentsJsonDecode[$arrayNameSearchKey]['recipient_id']) && isset($requestAttachmentsJsonDecode[$arrayNameSearchKey]['name']) && $requestAttachmentsJsonDecode[$arrayNameSearchKey]['name'] == $attachmentNameOnly && ($requestAttachmentsJsonDecode[$arrayNameSearchKey]['recipient_id'] == 'Me' || $requestAttachmentsJsonDecode[$arrayNameSearchKey]['recipient_id'] == 'all')) {
                    unset($requestAttachmentsJsonDecode[$arrayNameSearchKey]['is_uploaded']);
                    unset($requestAttachmentsJsonDecode[$arrayNameSearchKey]['path']);
                    unset($requestAttachmentsJsonDecode[$arrayNameSearchKey]['returnpath']);
                    unset($requestAttachmentsJsonDecode[$arrayNameSearchKey]['filename']);
                    unset($requestAttachmentsJsonDecode[$arrayNameSearchKey]['created_date']);
                    unset($requestAttachmentsJsonDecode[$arrayNameSearchKey]['recname']);
                }
            }
            $requestAttachments = json_encode($requestAttachmentsJsonDecode);
        }
        //checking file is coming from end user side starting
        //inserting data in offer sent table
        $offerSentId = $this->addOffersentapi($user_id,$dueDays,$lang,$contract_name,$reminderDays,$contract->content,$visible_name,$invitation_message,$confirmation_message,$retargeting_code='',$attachments,$template_id,$requestAttachments);

        $getOfferDocsData = Offerdocs::where('id', $template_id)->select('contract_type_id', 'request_attachment')->first();
        $recipientIdAllMainArray = [];
        if($getOfferDocsData['request_attachment'] != '') {
            $offerDocsRequestAttachment = json_decode($getOfferDocsData['request_attachment'], true);
            if(!empty($offerDocsRequestAttachment)) {
                foreach($offerDocsRequestAttachment as $offerDocsRequestAttachmentKey => $offerDocsRequestAttachmentValue) {
                    if(isset($offerDocsRequestAttachmentValue['recipient_id']) && $offerDocsRequestAttachmentValue['recipient_id'] == 'all') {
                        $offerDocsRequestAttachment[$offerDocsRequestAttachmentKey]['uniqueid'] = $offerDocsRequestAttachment[$offerDocsRequestAttachmentKey]['content_id'];
                        //content id key doesn't insert into offer sent data table in attachment object that's why unset it
                        unset($offerDocsRequestAttachment[$offerDocsRequestAttachmentKey]['content_id']);
                        array_push($recipientIdAllMainArray, $offerDocsRequestAttachment[$offerDocsRequestAttachmentKey]);
                    }
                }
            }
        }

        if($getOfferDocsData['contract_type_id']) {
            $offerSentdataInsertion['contract_type_id'] = $getOfferDocsData['contract_type_id'];
        }
        if(!empty($recipientIdAllMainArray)) {
            $offerSentdataInsertion['attach_obj_anyone'] = json_encode($recipientIdAllMainArray);
        }

        //$offerSentdataInsertion['sent_id'] = $offerSentId;
        if(isset($data['redirect_url']) && $data['redirect_url'] != '') {
            $templateURLRedirectData['template_redirect_url'] = $data['redirect_url'];
            $offerSentdataInsertion['contract_settings'] = json_encode($templateURLRedirectData);
        } else {
            $templateRedirectURL = Offerdocs::where('id', $template_id)->pluck('template_redirect_url');
            if($templateRedirectURL != '') {
                $templateRedirectURLJsonDecode = json_decode($templateRedirectURL, true);
                if(isset($templateRedirectURLJsonDecode['url']) && $templateRedirectURLJsonDecode['url'] != '') {
                    $templateURLRedirectData['template_redirect_url'] = $templateRedirectURLJsonDecode['url'];
                    $offerSentdataInsertion['contract_settings'] = json_encode($templateURLRedirectData);
                }
            }
        }
        $checkOfferSentData = Offersent_data::where('sent_id', $offerSentId)->count();
        if($checkOfferSentData) {
            Offersent_data::where('sent_id', $offerSentId)->update($offerSentdataInsertion);
        } else {
            $offerSentdataInsertion['sent_id'] = $offerSentId;
            $offersentdataInsertedId = Offersent_data::insertGetId($offerSentdataInsertion);
        }
        
        //this is for this type of attachment_foranyone
        if(!empty(Input::file())) {
            $AttachmentNum = 1;
            $newAttachmentArray = [];
            $attachmentObject = Input::file();
            $usertemplateControllerObj = new usertemplateController();
            $html = new \Htmldom($contract->content);
            $senderFullName = Userinfo::where('user_id', $user_id)->pluck('full_name');
            $requestAttachmentFileTypes = array('pdf', 'PDF', 'jpg', 'JPG', 'jpeg', 'JPEG', 'doc', 'DOC', 'docx', 'DOCX', 'xls', 'XLS', 'xlsx', 'XLSX', 'png', 'PNG');
            $addAttachmentFileTypes = array('JPG','JPEG','GIF','PNG','jpg','jpeg','gif','png','pdf','doc','docx','xls','xlsx','zip','csv','txt');
            foreach($attachmentObject as $attachmentObjectKey => $attachmentObjectValue) {
                //replacing attachment_ from name which is coming from input
                $attachmentNameOnly = str_replace('attachment_', '', $attachmentObjectKey);
                $arrayNameSearchKey = '';
                if(!in_array(strtolower($attachmentObjectValue->getClientOriginalExtension()), $requestAttachmentFileTypes)) {
                    return Response::json(['status'=>'error','result' => 'Invalid attachment file type, only document files are acceptable']);
                }
                if(!empty($requestAttachmentsJsonDecode)) {
                    $arrayNameSearchKey = array_search($attachmentNameOnly, array_column($requestAttachmentsJsonDecode, 'name'));
                }
                if(isset($requestAttachmentsJsonDecode[$arrayNameSearchKey]['recipient_id']) && isset($requestAttachmentsJsonDecode[$arrayNameSearchKey]['name']) && $requestAttachmentsJsonDecode[$arrayNameSearchKey]['name'] == $attachmentNameOnly && ($requestAttachmentsJsonDecode[$arrayNameSearchKey]['recipient_id'] == 'Me' || $requestAttachmentsJsonDecode[$arrayNameSearchKey]['recipient_id'] == 'all')) {
                    //$getPathResponse = $usertemplateControllerObj->postUploadpdftemplatefromcontent(['access_token' => $data['access_token'], 'offerid' => $template_id, 'file' => $attachmentObjectValue, 'unique_id' => $requestAttachmentsJsonDecode[$arrayNameSearchKey]['content_id'], 'offerSentID' => $offerSentId]);
                    $getPathResponse = $usertemplateControllerObj->postUploadpdftemplatefromcontent(['access_token' => $data['access_token'], 'file' => $attachmentObjectValue, 'unique_id' => $requestAttachmentsJsonDecode[$arrayNameSearchKey]['content_id'], 'offerSentID' => $offerSentId, 'from' => 'api']);
                    if($getPathResponse->getContent() != '') {
                        $pathContent = json_decode($getPathResponse->getContent(), true);
                        if(!empty($pathContent['Result'])) {
                            $senderAndAllContentBoxHTML = '';
                            /* $mandatory = $attachmentObjectKey.'_mandatory';
                            $inDocument = $attachmentObjectKey.'_indocument';
                            $multipleUpload = $attachmentObjectKey.'_multiupload';
                            if(isset($data[$mandatory]) && !empty($data[$mandatory]) && $data[$mandatory] == 1) {
                                $requestAttachmentsJsonDecode[$arrayNameSearchKey]['ismandatory'] = 1;
                            } if(isset($data[$inDocument]) && !empty($data[$inDocument]) && $data[$inDocument] == 1) {
                                $requestAttachmentsJsonDecode[$arrayNameSearchKey]['in_document'] = 1;
                            } if(isset($data[$multipleUpload]) && !empty($data[$multipleUpload]) && $data[$multipleUpload] == 1) {
                                $requestAttachmentsJsonDecode[$arrayNameSearchKey]['multiple_upload'] = 1;
                            } */
                            foreach($html->find('.requestattachmentcontentbox') as $requestAttachmentContentBoxKey => $requestAttachmentContentBoxValue) {
                                if($requestAttachmentContentBoxValue->attachuniqueid == $requestAttachmentsJsonDecode[$arrayNameSearchKey]['content_id']) {
                                    $requestAttachmentContentBoxValue->setAttribute('fromapi', '1');
                                    $requestAttachmentContentBoxValue->find('.attachmentBoxLoader', 0)->setAttribute('style', 'display: none;');
                                    $attachmentTitleDescriptionTable = $requestAttachmentContentBoxValue->find('.attachmentTitleDescriptionTable', 0)->getAttribute('class');
                                    $requestAttachmentContentBoxValue->find('.attachmentTitleDescriptionTable', 0)->setAttribute('class', str_replace('attach_border_dash', 'attach_border_solid', $attachmentTitleDescriptionTable));
                                    $requestAttachmentContentBoxValue->find('.uploadedattachNameTr', 0)->setAttribute('style', 'display: table-row;');
                                    $requestAttachmentContentBoxValue->find('.attachmentUploadTr', 0)->setAttribute('style', 'display: none;');
                                    foreach($pathContent['Result'] as $ResultKey => $ResultValue) {
                                        $senderAndAllContentBoxHTML .= '<div class="sortableContainerContentBox content_box_div requestattachmentcontentboxpdf marginbottomAttachmentMinus70 contentSort marginbottom140" fromapi="1" attachuniqueidpdf="'.$requestAttachmentsJsonDecode[$arrayNameSearchKey]['content_id'].'_pdf" style="display:none;">
                                            <div class="pdfbg" style="background-image: url('.$ResultValue.')"></div>
                                            <div class="pdfUploadloaderContainer">
                                                <div class="loader vertical-align-middle loader-circle signingPageLoader" type="default"></div>
                                            </div>
                                            <div class="highlightSortContentBox">
                                                <i class="fa fa-bars" aria-hidden="true"></i>
                                                <p>Text</p>
                                            </div>
                                            <div class="fieldElementRes box-target content_box_divInner" child="0" style="position: relative !important; border-color: transparent;">
                                                <div class="box-inner-container ui-droppable" style="min-height: inherit;width:100%; top:0;left:0;outline: none;" contenteditable="false">
                                                    <div class="summernote-new box-inner-container contentBoxAttachmentSummernote content_box_div_new autopdfheightclass ui-droppable" contenteditable="false"></div>
                                                </div>
                                            </div>
                                        </div>';
                                    }
                                    $requestAttachmentContentBoxValue->innertext = $requestAttachmentContentBoxValue->innertext . $senderAndAllContentBoxHTML;
                                }
                            }
                        }
                    }
                } else {
                    if(!in_array(strtolower($attachmentObjectValue->getClientOriginalExtension()), $addAttachmentFileTypes)) {
                        return Response::json(['status'=>'error','result' => 'Invalid attachment file type, only document files are acceptable']);
                    }

                    $attachmentNames = $attachmentObjectValue->getClientoriginalName();

                    $attachmentMandatory = 0;
                    $mandatory = $attachmentObjectKey.'_mandatory';
                    if(isset($data[$mandatory]) && !empty($data[$mandatory]) && $data[$mandatory] == 1) {
                        $attachmentMandatory = 1;
                    }

                    if($attachmentObjectValue->getClientOriginalExtension() == 'pdf' || $attachmentObjectValue->getClientOriginalExtension() == 'doc' || $attachmentObjectValue->getClientOriginalExtension() == 'docx' || $attachmentObjectValue->getClientOriginalExtension() == 'xls' || $attachmentObjectValue->getClientOriginalExtension() == 'xlsx'|| $attachmentObjectValue->getClientOriginalExtension() == 'zip') {
                        $fileNameEx = $attachmentObjectValue->getClientOriginalExtension();
                    } else {
                        $fileNameEx = 'image';
                    }

                    $path  = $offerSentId.'_'.$fileNameEx.'_'.uniqid().'.'.$attachmentObjectValue->getClientOriginalExtension();

                    $newAttachmentArray[$AttachmentNum]['name'] = $attachmentNames;
                    $newAttachmentArray[$AttachmentNum]['size'] = $this->formatSizeUnits($attachmentObjectValue->getSize());
                    $newAttachmentArray[$AttachmentNum]['type'] = $attachmentObjectValue->getClientOriginalExtension();
                    $newAttachmentArray[$AttachmentNum]['path'] = $path;
                    $newAttachmentArray[$AttachmentNum]['user_id'] = $user_id;
                    $newAttachmentArray[$AttachmentNum]['is_mandatory'] = $attachmentMandatory;
                    $newAttachmentArray[$AttachmentNum]['created_date'] = date("Y-m-d H:i:s");

                    $destination = public_path().'/uploads/contractattachments';
                    $attachmentObjectValue->move($destination, $path);

                    $filePath = $destination.'/'.$path;
                    //Uploading to Google Cloud Server
                    uploadToGCS($filePath, $user_id.'/offerdata', $path, env('simplesignoffersBucket'));

                    //Deleing uploaded file from local ftp
                    if(file_exists($filePath)) {
                        unlink($filePath);
                    }
                    $AttachmentNum++;
                }
            }
            $offerSentDataAttachment = [];
            if(!empty($newAttachmentArray)) {
                $offerSentDataAttachment['attachments'] = json_encode($newAttachmentArray);
            } /* if(!empty($requestAttachmentsJsonDecode)) {
                $offerSentDataAttachment['request_attachment'] = json_encode($requestAttachmentsJsonDecode);
            } */
            $offerSentDataAttachment['content'] = Tcrypt::encrypter($html);
            
            Offersent::where('id', $offerSentId)->update($offerSentDataAttachment);
            if(isset($newAttachmentArray) && !empty($newAttachmentArray)) {
                $sentcontract->getCreateoldattachpages($user_id,$offerSentDataAttachment['attachments'],"add",$offerSentId,$data['access_token']);
            }
            //saving data for original_offer to have attachments starting
            if($html != '') {
                $contract->content = $html;
            }
            //saving data for original_offer to have attachments ending
        }
        
        //public function addOffersentapi
        //request attachment code starting
        //this is for request_0_attachment
        if(!empty($requestAttachmentsJsonDecode)) {
            $AttachmentNum = $requestAttachmentIndex = 0;
            $newAttachmentArray = [];
            $senderFullName = Userinfo::where('user_id', $user_id)->pluck('full_name');
            $usertemplateControllerObj = new usertemplateController();
            $html = new \Htmldom($contract->content);
            for($reqAttachInd = 1; $reqAttachInd <= 25; $reqAttachInd++) {
                $AttachmentNum++;
                if(isset($requestAttachmentsJsonDecode[$requestAttachmentIndex]['recipient_id']) && ($requestAttachmentsJsonDecode[$requestAttachmentIndex]['recipient_id'] == 'Me' || $requestAttachmentsJsonDecode[$requestAttachmentIndex]['recipient_id'] == 'all')) {
                    if(isset($data['request'.$AttachmentNum.'_attachment']) && !empty($data['request'.$AttachmentNum.'_attachment'])) {
                        $attachment_files = $data['request'.$AttachmentNum.'_attachment'];
                        if(!empty($attachment_files)) {
                            //$getPathResponse = $usertemplateControllerObj->postUploadpdftemplatefromcontent(['access_token' => $data['access_token'], 'offerid' => $template_id, 'file' => $attachment_files, 'unique_id' => $requestAttachmentsJsonDecode[$requestAttachmentIndex]['content_id']]);
                            $getPathResponse = $usertemplateControllerObj->postUploadpdftemplatefromcontent(['access_token' => $data['access_token'], 'file' => $attachment_files, 'unique_id' => $requestAttachmentsJsonDecode[$requestAttachmentIndex]['content_id'], 'offerSentID' => $offerSentId]);
                            if($getPathResponse->getContent() != '') {
                                $pathContent = json_decode($getPathResponse->getContent(), true);
                                if(!empty($pathContent['Result'])) {
                                    $senderContentBoxHTML = '';
                                    if(isset($data['request'.$AttachmentNum.'_mandatory']) && $data['request'.$AttachmentNum.'_mandatory'] != '' && $data['request'.$AttachmentNum.'_mandatory'] == 1) {
                                        $requestAttachmentsJsonDecode[$requestAttachmentIndex]['ismandatory'] = 1;
                                    } elseif(isset($data['request'.$AttachmentNum.'_mandatory']) && $data['request'.$AttachmentNum.'_mandatory'] != '' && $data['request'.$AttachmentNum.'_mandatory'] == 0) {
                                        $requestAttachmentsJsonDecode[$requestAttachmentIndex]['ismandatory'] = 0;
                                    } if(isset($data['request'.$AttachmentNum.'_multiupload']) && $data['request'.$AttachmentNum.'_multiupload'] != '' && $data['request'.$AttachmentNum.'_multiupload'] == 1) {
                                        $requestAttachmentsJsonDecode[$requestAttachmentIndex]['multiple_upload'] = 1;
                                    } elseif(isset($data['request'.$AttachmentNum.'_multiupload']) && $data['request'.$AttachmentNum.'_multiupload'] != '' && $data['request'.$AttachmentNum.'_multiupload'] == 0) {
                                        $requestAttachmentsJsonDecode[$requestAttachmentIndex]['multiple_upload'] = 0;
                                    } if(isset($data['request'.$AttachmentNum.'_include_exclude']) && $data['request'.$AttachmentNum.'_include_exclude'] != '' && $data['request'.$AttachmentNum.'_include_exclude'] == 1) {
                                        $requestAttachmentsJsonDecode[$requestAttachmentIndex]['in_document'] = 1;
                                    } elseif(isset($data['request'.$AttachmentNum.'_include_exclude']) && $data['request'.$AttachmentNum.'_include_exclude'] != '' && $data['request'.$AttachmentNum.'_include_exclude'] == 0) {
                                        $requestAttachmentsJsonDecode[$requestAttachmentIndex]['in_document'] = 0;
                                    }
                                    foreach($html->find('.requestattachmentcontentbox') as $requestAttachmentContentBoxKey => $requestAttachmentContentBoxValue) {
                                        if($requestAttachmentContentBoxValue->attachuniqueid == $requestAttachmentsJsonDecode[$requestAttachmentIndex]['content_id']) {
                                            /* if(isset($data['request'.$AttachmentNum.'_mandatory']) && $data['request'.$AttachmentNum.'_mandatory'] != '' && $requestAttachmentsJsonDecode[$requestAttachmentIndex]['recipient_id'] == 'all') {
                                                $requestAttachmentContentBoxValue->setAttribute('class', $requestAttachmentContentBoxValue->getAttribute('class') . ' contentMandatory');
                                            } */
                                            $requestAttachmentContentBoxValue->find('.attachmentBoxLoader', 0)->setAttribute('style', 'display: none;');
                                            $attachmentTitleDescriptionTable = $requestAttachmentContentBoxValue->find('.attachmentTitleDescriptionTable', 0)->getAttribute('class');
                                            $requestAttachmentContentBoxValue->find('.attachmentTitleDescriptionTable', 0)->setAttribute('class', str_replace('attach_border_dash', 'attach_border_solid', $attachmentTitleDescriptionTable));
                                            $requestAttachmentContentBoxValue->find('.uploadedattachNameTr', 0)->setAttribute('style', 'display: table-row;');
                                            $requestAttachmentContentBoxValue->find('.attachmentUploadTr', 0)->setAttribute('style', 'display: none;');
                                            foreach($pathContent['Result'] as $ResultKey => $ResultValue) {
                                                $senderContentBoxHTML .= '<div class="sortableContainerContentBox content_box_div requestattachmentcontentboxpdf marginbottomAttachmentMinus70 contentSort marginbottom140" attachuniqueidpdf="'.$requestAttachmentsJsonDecode[$requestAttachmentIndex]['content_id'].'_pdf" style="display:none;">
                                                    <div class="pdfbg" style="background-image: url('.$ResultValue.')"></div>
                                                    <div class="pdfUploadloaderContainer">
                                                        <div class="loader vertical-align-middle loader-circle signingPageLoader" type="default"></div>
                                                    </div>
                                                    <div class="highlightSortContentBox">
                                                        <i class="fa fa-bars" aria-hidden="true"></i>
                                                        <p>Text</p>
                                                    </div>
                                                    <div class="fieldElementRes box-target content_box_divInner" child="0" style="position: relative !important; border-color: transparent;">
                                                        <div class="box-inner-container ui-droppable" style="min-height: inherit;width:100%; top:0;left:0;outline: none;" contenteditable="false">
                                                            <div class="summernote-new box-inner-container contentBoxAttachmentSummernote content_box_div_new autopdfheightclass ui-droppable" contenteditable="false"></div>
                                                        </div>
                                                    </div>
                                                </div>';
                                            }
                                            $requestAttachmentContentBoxValue->innertext = $requestAttachmentContentBoxValue->innertext . $senderContentBoxHTML;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                $requestAttachmentIndex++;
            }
            if(isset($senderContentBoxHTML) && $senderContentBoxHTML != '') {
                //Offersent::where('id', $offerSentId)->update(['content' => Tcrypt::encrypter($html), 'request_attachment' => json_encode($requestAttachmentsJsonDecode)]);
                Offersent::where('id', $offerSentId)->update(['content' => Tcrypt::encrypter($html)]);
            }
            //saving data for original_offer to have attachments starting
            if($html != '') {
                $contract->content = $html;
            }
            //saving data for original_offer to have attachments ending
        }
        //request attachment code ending

        //comment code here of offersent_data starting
        /* $getOfferDocsData = Offerdocs::where('id', $template_id)->select('contract_type_id')->first();
        if($getOfferDocsData['contract_type_id']) {
            $offerSentdataInsertion['contract_type_id'] = $getOfferDocsData['contract_type_id'];
        }

        //$offerSentdataInsertion['sent_id'] = $offerSentId;
        if(isset($data['redirect_url']) && $data['redirect_url'] != '') {
            $templateURLRedirectData['template_redirect_url'] = $data['redirect_url'];
            $offerSentdataInsertion['contract_settings'] = json_encode($templateURLRedirectData);
        } else {
            $templateRedirectURL = Offerdocs::where('id', $template_id)->pluck('template_redirect_url');
            if($templateRedirectURL != '') {
                $templateRedirectURLJsonDecode = json_decode($templateRedirectURL, true);
                if(isset($templateRedirectURLJsonDecode['url']) && $templateRedirectURLJsonDecode['url'] != '') {
                    $templateURLRedirectData['template_redirect_url'] = $templateRedirectURLJsonDecode['url'];
                    $offerSentdataInsertion['contract_settings'] = json_encode($templateURLRedirectData);
                }
            }
        }
        $checkOfferSentData = Offersent_data::where('sent_id', $offerSentId)->count();
        if($checkOfferSentData) {
            Offersent_data::where('sent_id', $offerSentId)->update($offerSentdataInsertion);
        } else {
            $offerSentdataInsertion['sent_id'] = $offerSentId;
            $offersentdataInsertedId = Offersent_data::insertGetId($offerSentdataInsertion);
        } */
        //comment code here of offersent_data ending
        //request attachment in offer sent data table starting
        /* $getRequestAttachmentForOfferSentData = Offersent::where('id', $offerSentId)->pluck('request_attachment');
        if($getRequestAttachmentForOfferSentData) {
            if (isset($getRequestAttachmentForOfferSentData) && $getRequestAttachmentForOfferSentData != "" && $getRequestAttachmentForOfferSentData != "[]") {
                $sentcontract->saveobjtoanyoneattach($getRequestAttachmentForOfferSentData, $offerSentId);
            }
        } */
        //request attachment in offer sent data table ending

        if($iframeURL != 0) {
            Offersent::where('id', $offerSentId)->where('sender_id', $user_id)->update(['is_draft' => 1]);
        }

        $documentChat = $transferSignatureRole = 0;
        if(isset($data['document_chat']) && $data['document_chat'] == 1) {
            $documentChat = 1;
        } if(isset($data['transfer_signature_role']) && $data['transfer_signature_role'] == 1) {
            $transferSignatureRole = 1;
        }
        Offersent::where('id', $offerSentId)->update(['contract_chat' => $documentChat, 'allow_forward' => $transferSignatureRole]);

        //Updating Recipients Column in Offer Sent Table
        //comment this line because template was created by parent and was sending by sub user so remove the where clause of user_id
        //$offerDocsData = Offerdocs::where('id', $template_id)->where('user_id', $user_id)->select('editor_version')->first();
        $offerDocsData = Offerdocs::where('id', $template_id)->select('editor_version')->first();
        $offerData1['recipients'] = json_encode($recsList);
        $offerData1['invitation_sms_message'] = $data["invitation_sms"];
        $offerData1['confirmation_sms_message'] = $data["confirmation_sms"];
        $offerData1['editor_version'] = $offerDocsData["editor_version"];
        $offerWhere1['id'] = $offerSentId;

        //reg no is adding if super user is available starting
        //$offerData1['reg_no'] = $reg_no;
        $offerData1['tracking_id'] = $tracking_id;
        if(isset($user_details) && !empty($user_details)) {
            $offerData1['user_details'] = $user_details;
        }
        //reg no is adding if super user is available ending
        
        //Condition for Link Template
        if(isset($contract->remember_settings) && $contract->remember_settings != '') {
            $remSettingArr = json_decode($contract->remember_settings,true);
            if(isset($remSettingArr['link_template']) && isset($remSettingArr['link_template']['select_link_template']) && $remSettingArr['link_template']['select_link_template'] == 1) {
                if(isset($remSettingArr['link_template']['template_id']) && $remSettingArr['link_template']['template_id'] != '') {
                    $offerData1['link_template'] = json_encode($remSettingArr['link_template']);
                }
            }
        }

        $utility->updateItem("offer_sent",$offerWhere1, $offerData1);

        /*Add content in orignal offer table*/
        $original_offer['sender_id'] = $user_id;
        $original_offer['offer_sent_id'] = $offerSentId;
        $original_offer['content'] = $contract->content;
        $utility->addItem("original_offer", $original_offer);

        //setRecipientsInContentNew
        $status = $this->sendcontracttemplate($offerSentId,$data,$user_id,$visible_name,$invitation_message,$lang,$signing_url,$iframeURL);

        if($status) {
            //Video upload
            if(isset($data['video_title']) && !empty($data['video_title'])) {
                $offerArray['video_title'] = $data['video_title'];
            }
            $whereSent['id'] = $offerSentId;
            if($iframeURL == 1) {
                $offerArray['offer_status'] = 7;
            } else {
                $offerArray['offer_status'] = 0;
            }
            $utility->updateItem("offer_sent", $whereSent, $offerArray);
            $totalRemainingSugnature = $utility->checkSignatures($parent_id);
            $getDetailsData = Offersentdetails::where('offer_sent_id', $offerSentId)->where('is_sender', 0)->select('offer_status', 'user_details')->get();
            $bounceEmails = $APIResponse = [];
            if($getDetailsData) {
                foreach($getDetailsData as $getDetailsDataKey => $getDetailsDataValue) {
                    $offerStatus = $getDetailsDataValue['offer_status'];
                    $recipientUserDetailsDecode = json_decode(Tcrypt::decrypter($getDetailsDataValue['user_details']), true);
                    if($offerStatus == 6) {
                        $bounceEmails[] = $recipientUserDetailsDecode['email'];
                    }
                }
            }
            
            if(isset($data['invitation_url']) && $data['invitation_url'] == 1) {
                if(isset($data['payment_widget']) && $data['payment_widget'] == 1) {
                    return ['status' => $status, 'document_id' => $offerSentId];
                } else {
                    $APIResponse = ['status' => 'success', 'result' => 'Invitation URL successfully generated', 'parties name' => $partiesName, 'Invitation URL' => $status, 'document_id' => $offerSentId, 'signature_credit_lefts' => ($totalRemainingSugnature['monthly_signature']+$totalRemainingSugnature['extra_signature'])];
                }
            } elseif($iframeURL == 1) {
                $getOwnerEmailAddress = User::where('id', $user_id)->select('email')->first();
                $iframeUrl = asset('/')."api/v3/request/external?email=".trim($getOwnerEmailAddress['email'])."&access_token=".$access_token."&document_id=".$offerSentId."&send_document=1";
                $APIResponse = ['status' => 'success', 'result' => ['iframeUrl' => $iframeUrl, 'document_id' => $offerSentId, 'signature_credit_lefts' => ($totalRemainingSugnature['monthly_signature']+$totalRemainingSugnature['extra_signature'])]];
            } else {
                $APIResponse = ['status' => 'success', 'result' => 'document sent successfully', 'document_id' => $offerSentId, 'signature_credit_lefts' => ($totalRemainingSugnature['monthly_signature']+$totalRemainingSugnature['extra_signature'])];
            }
            return response()->json($APIResponse, 200, ['Content-Type' => 'application/json; charset=UTF-8'], JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
        } elseif($status==0) {
            return Response::json(['status'=>'success','result' =>'You are not paid user, Please upgrade your account for send document']);
        }
    }

    public function postSendtemplatenewfunction() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');
            
        //access token validation starting
        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        }
        //access token validation ending

        //document_id validation starting
        $template_id = 0;
        if(isset($data['document_id']) && $data['document_id'] != '') {
            $template_id = $data['document_id'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'document_id is missing']);
        }
        //document_id validation ending

        //getting user id, parent id and user settings from user_setting table starting
        $user_id = $utility->getUserIdByAuthToken($access_token);
        $parent_id = $utility->getParent($user_id);
        $userSettings = $utility->getUserSettings($parent_id);
        //getting user id, parent id and user settings from user_setting table ending

        //checking user account is not locked due to payment starting
        if($utility->checkAdminStripe($user_id)) {
            return Response::json(['status' => 'error', 'result' => 'Account is locked make payment in order to continue using Simplesign']);
        }
        //checking user account is not locked due to payment ending

        //checking recipients variable and other validation starting
        $partiesName = [];
        if(isset($data['recipients']) && $data['recipients'] != '') {
            if($this->is_JSON($data['recipients'])) {
                $recipients = json_decode($data['recipients'], true);
                $recsList = $mainArray = array();
                if(!empty($recipients)) {
                    foreach($recipients as $recipientsKey => $recipientsValue) {
                        if(!is_array($recipientsValue['people_fields'])) {
                            return Response::json(['status' => 'error', 'result' => 'people_fields should be array']);
                        } else {
                            if(!isset($recipientsValue['people_fields']) || empty($recipientsValue['people_fields'])) {
                                return Response::json(['status' => 'error', 'result' => 'People information is missing']);
                            } elseif(isset($recipientsValue['people_fields']) && !empty($recipientsValue['people_fields'])) {
                                $sentRec = array();
                                $newAddonObj = (isset($userSettings['new_addon_obj']) && !empty($userSettings['new_addon_obj']) ? json_decode($userSettings['new_addon_obj'], true) : []);
                                $viewerPartyAddonPermission = (!empty($newAddonObj) && isset($newAddonObj['viewerparty_addon_permission']) && $newAddonObj['viewerparty_addon_permission'] == 1 ? $newAddonObj['viewerparty_addon_permission'] : 0);
                                //Recipients basic information validations like first_name, last_name and email starting
                                if(!isset($recipientsValue['people_fields']['first_name']) || $recipientsValue['people_fields']['first_name'] == '') {
                                    return Response::json(['status'=>'error','result' => 'Invalid or missing recipient first_name']);
                                } elseif(isset($recipientsValue['people_fields']['last_name']) && $recipientsValue['people_fields']['last_name'] != '') {
                                    //
                                } elseif(!isset($recipientsValue['people_fields']['email']) || !filter_var($recipientsValue['people_fields']['email'], FILTER_VALIDATE_EMAIL)) {
                                    return Response::json(['status'=>'error','result' => 'Invalid or missing recipient email']);
                                }
                                //Recipients basic information validations like first_name, last_name and email ending

                                //Roles of recipient validation starting
                                elseif(!isset($recipientsValue['details']['recipient_role']) || $recipientsValue['details']['recipient_role'] == '') {
                                    return Response::json(['status'=>'error','result' => 'Invalid or missing recipient_role in details']);
                                } elseif(isset($recipientsValue['details']['recipient_role']) && $recipientsValue['details']['recipient_role'] != '') {
                                    $tabComponents = Recipient_fields_roles::where('userid', $user_id)->where('tab_components', $recipientsValue['details']['recipient_role'])->count();
                                    if(!$tabComponents) {
                                        return Response::json(['status'=>'error','result' => $recipientsValue['details']['recipient_role'].' recipient_role doesn\'t exists in this account.']);
                                    }
                                }
                                //Roles of recipient validation ending

                                //Authentication validations starting
                                elseif(isset($recipientsValue['details']['authentication']) && ($recipientsValue['details']['authentication'] == 'bankID' || $recipientsValue['details']['authentication'] == 'BankID' || $recipientsValue['details']['authentication'] == 'Bank ID'  || $recipientsValue['details']['authentication'] == 'bank ID') && $userSettings->sign_bankid != 1) {
                                    return Response::json(['status'=>'error','result' => 'BankID feature is not enabled in your account, Contact Simplesign support for BankID activation']);
                                } elseif(isset($recipientsValue['details']['authentication']) && ($recipientsValue['details']['authentication'] == 'bankID' || $recipientsValue['details']['authentication'] == 'BankID') && $userSettings->sign_bankid == 1) {
                                    if(isset($recipientsValue['people_fields']['personal_no']) && !empty($recipientsValue['people_fields']['personal_no']) && strlen($recipientsValue['people_fields']['personal_no']) != 12) {
                                        return Response::json(['status'=>'error','result' =>'personal_no must be 12 digits']);
                                    }
                                } elseif(isset($recipientsValue['details']['authentication']) && ($recipientsValue['details']['authentication'] == 'Attest' || $recipientsValue['details']['authentication'] == 'At test' || $recipientsValue['details']['authentication'] == 'attest'  || $recipientsValue['details']['authentication'] == 'at test') && $userSettings->review_party_addon_permission != 1) {
                                    return Response::json(['status'=>'error','result' => 'Attest feature is not enabled in your account, Contact Simplesign support for Attest activation']);
                                } elseif(isset($recipientsValue['details']['authentication']) && ($recipientsValue['details']['authentication'] == 'ViewOnly' || $recipientsValue['details']['authentication'] == 'View Only' || $recipientsValue['details']['authentication'] == 'viewonly'  || $recipientsValue['details']['authentication'] == 'view only') && $viewerPartyAddonPermission != 1) {
                                    return Response::json(['status'=>'error','result' => 'View only feature is not enabled in your account, Contact Simplesign support for view only activation']);
                                }
                                //Authentication validations ending

                                //Validation when invitation_type is 2, for email and sms, need mobile no starting
                                if(isset($recipientsValue['details']['invitation_type']) && ($recipientsValue['details']['invitation_type'] == 'email and sms' || $recipientsValue['details']['invitation_type'] == 'Email And SMS' || $recipientsValue['details']['invitation_type'] == 'email & sms' || $recipientsValue['details']['invitation_type'] == 'Email & SMS')) {
                                    if(!isset($recipientsValue['people_fields']['mobile']) || empty($recipientsValue['people_fields']['mobile'])) {
                                        return Response::json(['status'=>'error','result' =>'mobile is mandatory for recipient '.$recipientsValue['people_fields']['first_name'].' in order to send invitation sms']);
                                    }
                                }
                                //Validation when invitation_type is 2, for email and sms, need mobile no ending

                                //Validation when confirmation is 2, for email and sms, need mobile no starting
                                if(isset($recipientsValue['details']['confirmation']) && ($recipientsValue['details']['confirmation'] == 'email and sms' || $recipientsValue['details']['confirmation'] == 'Email And SMS' || $recipientsValue['details']['confirmation'] == 'email & sms' || $recipientsValue['details']['confirmation'] == 'Email & SMS')) {
                                    if(!isset($recipientsValue['people_fields']['mobile']) || empty($recipientsValue['people_fields']['mobile'])) {
                                        return Response::json(['status'=>'error','result' =>'mobile is mandatory for recipient '.$recipientsValue['people_fields']['first_name'].' in order to send confirmation sms']);
                                    }
                                }
                                //Validation when confirmation is 2, for email and sms, need mobile no ending

                                $checkSpecificIsOnOrOff = Recipient_fields_roles::where('specific_recipient_fields_status', 1)->where('offer_doc_id', $template_id)->where('tab_status', '!=', 0)->count();
                                $recipientFieldsRoles = new Recipient_fields_roles();
                                if($checkSpecificIsOnOrOff) {
                                    $recipientFieldsRoles = $recipientFieldsRoles->where('offer_doc_id', $template_id)->where('specific_recipient_fields_status', 1);
                                } else {
                                    $recipientFieldsRoles = $recipientFieldsRoles->where('offer_doc_id', 0);
                                }
                                $tabFields = $recipientFieldsRoles->where('userid', $user_id)->where('tab_components', $recipientsValue['details']['recipient_role'])->select('id', 'specific_recipient_fields_status', 'tab_fields', 'offer_doc_id', 'tab_components')->first();
                                if(!empty($tabFields['tab_fields'])) {
                                    $tabFieldsDecode = json_decode($tabFields['tab_fields'], true);
                                    //checking recipient fields starting
                                    foreach($tabFieldsDecode['recinfo_fields'] as $recFieldsKey => $recFieldsValue) {
                                        if($recFieldsKey == 'custom_fields' && !empty($recFieldsValue)) {
                                            $customFields = json_decode($recFieldsValue, true);
                                            foreach($customFields as $customFieldsKey => $customFieldsValue) {
                                                if(isset($recipientsValue['people_fields'][$customFieldsKey])) {
                                                    if(isset($customFields[str_replace(' ', '', $customFieldsKey).'mandatory']) && $customFields[str_replace(' ', '', $customFieldsKey).'mandatory'] == 1 && $recipientsValue['people_fields'][$customFieldsKey] == '') {
                                                        return Response::json(['status' => 'error', 'result' => $customFieldsKey.' field is mandatory for '.$recipientsValue['people_fields']['first_name'].' '.(isset($recipientsValue['people_fields']['last_name']) && $recipientsValue['people_fields']['last_name'] != '' ? $recipientsValue['people_fields']['last_name'] : '').' user in recipient fields']);
                                                    } elseif(isset($recipientsValue['people_fields'][$customFieldsKey]) && $customFieldsValue != 1) {
                                                        return Response::json(['status' => 'error', 'result' => $customFieldsKey.' field is off for '.$recipientsValue['people_fields']['first_name'].' '.(isset($recipientsValue['people_fields']['last_name']) && $recipientsValue['people_fields']['last_name'] != '' ? $recipientsValue['people_fields']['last_name'] : '').' user in recipient fields']);
                                                    }
                                                }
                                            }
                                        } else {
                                            if(isset($data['is_ext_send']) && $data['is_ext_send'] == 1) {
                                                if(isset($recipientsValue['people_fields']['mobile'])) {
                                                    if($recFieldsKey == 'mobile' && $recFieldsValue == 1) {
                                                        if(isset($tabFieldsDecode['recinfo_fields']['mobilemandatory']) && $tabFieldsDecode['recinfo_fields']['mobilemandatory'] == 1 && $recipientsValue['people_fields']['mobile'] == '') {
                                                            return Response::json(['status' => 'error', 'result' => 'mobile field is mandatory for '.$recipientsValue['people_fields']['first_name'].' '.(isset($recipientsValue['people_fields']['last_name']) && $recipientsValue['people_fields']['last_name'] != '' ? $recipientsValue['people_fields']['last_name'] : '').' user in recipient fields']);
                                                        }
                                                    }
                                                } if(isset($recipientsValue['people_fields']['personal_no'])) {
                                                    if($recFieldsKey == 'personnr' && $recFieldsValue == 1) {
                                                        if(isset($tabFieldsDecode['recinfo_fields']['personnrmandatory']) && $tabFieldsDecode['recinfo_fields']['personnrmandatory'] == 1 && $recipientsValue['people_fields']['personal_no'] == '') {
                                                            return Response::json(['status' => 'error', 'result' => 'personal_no field is mandatory for '.$recipientsValue['people_fields']['first_name'].' '.(isset($recipientsValue['people_fields']['last_name']) && $recipientsValue['people_fields']['last_name'] != '' ? $recipientsValue['people_fields']['last_name'] : '').' user in recipient fields']);
                                                        }
                                                    }
                                                } if(isset($recipientsValue['people_fields']['address'])) {
                                                    if($recFieldsKey == 'address' && $recFieldsValue == 1) {
                                                        if(isset($tabFieldsDecode['recinfo_fields']['addressmandatory']) && $tabFieldsDecode['recinfo_fields']['addressmandatory'] == 1 && $recipientsValue['people_fields']['address'] == '') {
                                                            return Response::json(['status' => 'error', 'result' => 'address field is mandatory for '.$recipientsValue['people_fields']['first_name'].' '.(isset($recipientsValue['people_fields']['last_name']) && $recipientsValue['people_fields']['last_name'] != '' ? $recipientsValue['people_fields']['last_name'] : '').' user in recipient fields']);
                                                        }
                                                    }
                                                } if(isset($recipientsValue['people_fields']['city'])) {
                                                    if($recFieldsKey == 'city' && $recFieldsValue == 1) {
                                                        if(isset($tabFieldsDecode['recinfo_fields']['citymandatory']) && $tabFieldsDecode['recinfo_fields']['citymandatory'] == 1 && $recipientsValue['people_fields']['city'] == '') {
                                                            return Response::json(['status' => 'error', 'result' => 'city field is mandatory for '.$recipientsValue['people_fields']['first_name'].' '.(isset($recipientsValue['people_fields']['last_name']) && $recipientsValue['people_fields']['last_name'] != '' ? $recipientsValue['people_fields']['last_name'] : '').' user in recipient fields']);
                                                        }
                                                    }
                                                } if(isset($recipientsValue['people_fields']['zipcode'])) {
                                                    if($recFieldsKey == 'zip' && $recFieldsValue == 1) {
                                                        if(isset($tabFieldsDecode['recinfo_fields']['zipmandatory']) && $tabFieldsDecode['recinfo_fields']['zipmandatory'] == 1 && $recipientsValue['people_fields']['zipcode'] == '') {
                                                            return Response::json(['status' => 'error', 'result' => 'zipcode field is mandatory for '.$recipientsValue['people_fields']['first_name'].' '.(isset($recipientsValue['people_fields']['last_name']) && $recipientsValue['people_fields']['last_name'] != '' ? $recipientsValue['people_fields']['last_name'] : '').' user in recipient fields']);
                                                        }
                                                    }
                                                }
                                            } else {
                                                if($recFieldsKey == 'last_name' && $recFieldsValue == 1) {
                                                } elseif(isset($recipientsValue['people_fields']['last_name']) && $recFieldsKey == 'last_name' && $recFieldsValue != 1) {
                                                    return Response::json(['status' => 'error', 'result' => 'last_name field is off for '.$recipientsValue['people_fields']['first_name'].' '.(isset($recipientsValue['people_fields']['last_name']) && $recipientsValue['people_fields']['last_name'] != '' ? $recipientsValue['people_fields']['last_name'] : '').' user in recipient fields']);
                                                } if(isset($recipientsValue['people_fields']['mobile'])) {
                                                    if($recFieldsKey == 'mobile' && $recFieldsValue != 1) {
                                                        return Response::json(['status' => 'error', 'result' => 'mobile field is off for '.$recipientsValue['people_fields']['first_name'].' '.(isset($recipientsValue['people_fields']['last_name']) && $recipientsValue['people_fields']['last_name'] != '' ? $recipientsValue['people_fields']['last_name'] : '').' user in recipient fields']);
                                                    } elseif($recFieldsKey == 'mobile' && $recFieldsValue == 1) {
                                                        if((!isset($recipientsValue['people_fields']['mobile']) || $recipientsValue['people_fields']['mobile'] == '') && isset($tabFieldsDecode['recinfo_fields']['mobilemandatory']) && $tabFieldsDecode['recinfo_fields']['mobilemandatory'] == 1) {
                                                            return Response::json(['status' => 'error', 'result' => 'mobile field is mandatory for '.$recipientsValue['people_fields']['first_name'].' '.(isset($recipientsValue['people_fields']['last_name']) && $recipientsValue['people_fields']['last_name'] != '' ? $recipientsValue['people_fields']['last_name'] : '').' user in recipient fields']);
                                                        }
                                                    }
                                                } if(isset($recipientsValue['people_fields']['personal_no'])) {
                                                    if($recFieldsKey == 'personnr' && $recFieldsValue != 1) {
                                                        return Response::json(['status' => 'error', 'result' => 'personal_no field is off for '.$recipientsValue['people_fields']['first_name'].' '.(isset($recipientsValue['people_fields']['last_name']) && $recipientsValue['people_fields']['last_name'] != '' ? $recipientsValue['people_fields']['last_name'] : '').' user in recipient fields']);
                                                    } elseif($recFieldsKey == 'personnr' && $recFieldsValue == 1) {
                                                        if((!isset($recipientsValue['people_fields']['personal_no']) || $recipientsValue['people_fields']['personal_no'] == '') && isset($tabFieldsDecode['recinfo_fields']['personnrmandatory']) && $tabFieldsDecode['recinfo_fields']['personnrmandatory'] == 1) {
                                                            return Response::json(['status' => 'error', 'result' => 'personal_no field is mandatory for '.$recipientsValue['people_fields']['first_name'].' '.(isset($recipientsValue['people_fields']['last_name']) && $recipientsValue['people_fields']['last_name'] != '' ? $recipientsValue['people_fields']['last_name'] : '').' user in recipient fields']);
                                                        }
                                                    }
                                                } if(isset($recipientsValue['people_fields']['address'])) {
                                                    if($recFieldsKey == 'address' && $recFieldsValue != 1) {
                                                        return Response::json(['status' => 'error', 'result' => 'address field is off for '.$recipientsValue['people_fields']['first_name'].' '.(isset($recipientsValue['people_fields']['last_name']) && $recipientsValue['people_fields']['last_name'] != '' ? $recipientsValue['people_fields']['last_name'] : '').' user in recipient fields']);
                                                    } elseif($recFieldsKey == 'address' && $recFieldsValue == 1) {
                                                        if((!isset($recipientsValue['people_fields']['address']) || $recipientsValue['people_fields']['address'] == '') && isset($tabFieldsDecode['recinfo_fields']['addressmandatory']) && $tabFieldsDecode['recinfo_fields']['addressmandatory'] == 1) {
                                                            return Response::json(['status' => 'error', 'result' => 'address field is mandatory for '.$recipientsValue['people_fields']['first_name'].' '.(isset($recipientsValue['people_fields']['last_name']) && $recipientsValue['people_fields']['last_name'] != '' ? $recipientsValue['people_fields']['last_name'] : '').' user in recipient fields']);
                                                        }
                                                    }
                                                } if(isset($recipientsValue['people_fields']['city'])) {
                                                    if($recFieldsKey == 'city' && $recFieldsValue != 1) {
                                                        return Response::json(['status' => 'error', 'result' => 'city field is off for '.$recipientsValue['people_fields']['first_name'].' '.(isset($recipientsValue['people_fields']['last_name']) && $recipientsValue['people_fields']['last_name'] != '' ? $recipientsValue['people_fields']['last_name'] : '').' user in recipient fields']);
                                                    } elseif($recFieldsKey == 'city' && $recFieldsValue == 1) {
                                                        if((!isset($recipientsValue['people_fields']['city']) || $recipientsValue['people_fields']['city'] == '') && isset($tabFieldsDecode['recinfo_fields']['citymandatory']) && $tabFieldsDecode['recinfo_fields']['citymandatory'] == 1) {
                                                            return Response::json(['status' => 'error', 'result' => 'city field is mandatory for '.$recipientsValue['people_fields']['first_name'].' '.(isset($recipientsValue['people_fields']['last_name']) && $recipientsValue['people_fields']['last_name'] != '' ? $recipientsValue['people_fields']['last_name'] : '').' user in recipient fields']);
                                                        }
                                                    }
                                                } if(isset($recipientsValue['people_fields']['zipcode'])) {
                                                    if($recFieldsKey == 'zip' && $recFieldsValue != 1) {
                                                        return Response::json(['status' => 'error', 'result' => 'zipcode field is off for '.$recipientsValue['people_fields']['first_name'].' '.(isset($recipientsValue['people_fields']['last_name']) && $recipientsValue['people_fields']['last_name'] != '' ? $recipientsValue['people_fields']['last_name'] : '').' user in recipient fields']);
                                                    } elseif($recFieldsKey == 'zip' && $recFieldsValue == 1) {
                                                        if((!isset($recipientsValue['people_fields']['zipcode']) || $recipientsValue['people_fields']['zipcode'] == '') && isset($tabFieldsDecode['recinfo_fields']['zipmandatory']) && $tabFieldsDecode['recinfo_fields']['zipmandatory'] == 1) {
                                                            return Response::json(['status' => 'error', 'result' => 'zipcode field is mandatory for '.$recipientsValue['people_fields']['first_name'].' '.(isset($recipientsValue['people_fields']['last_name']) && $recipientsValue['people_fields']['last_name'] != '' ? $recipientsValue['people_fields']['last_name'] : '').' user in recipient fields']);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    //checking recipient fields ending

                                    //checking organization fields starting
                                    foreach($tabFieldsDecode['orginfo_fields'] as $orgFieldsKey => $orgFieldsValue) {
                                        if($orgFieldsKey == 'custom_fields' && !empty($orgFieldsValue)) {
                                            $customFields = json_decode($orgFieldsValue, true);
                                            foreach($customFields as $customFieldsKey => $customFieldsValue) {
                                                if(isset($data['is_ext_send']) && $data['is_ext_send'] == 1) {
                                                    if(isset($recipientsValue['organization_fields']['name']) && $recipientsValue['organization_fields']['name'] != '') {
                                                        if(isset($recipientsValue['organization_fields'][$customFieldsKey])) {
                                                            if(isset($customFields[str_replace(' ', '', $customFieldsKey).'mandatory']) && $customFields[str_replace(' ', '', $customFieldsKey).'mandatory'] == 1 && $recipientsValue['organization_fields'][$customFieldsKey] == '') {
                                                                return Response::json(['status' => 'error', 'result' => $customFieldsKey.' field is mandatory for '.$recipientsValue['people_fields']['first_name'].' '.(isset($recipientsValue['people_fields']['last_name']) && $recipientsValue['people_fields']['last_name'] != '' ? $recipientsValue['people_fields']['last_name'] : '').' user in organization fields']);
                                                            } elseif(isset($recipientsValue['organization_fields'][$customFieldsKey]) && $customFieldsValue != 1) {
                                                                return Response::json(['status' => 'error', 'result' => $customFieldsKey.' field is off for '.$recipientsValue['people_fields']['first_name'].' '.(isset($recipientsValue['people_fields']['last_name']) && $recipientsValue['people_fields']['last_name'] != '' ? $recipientsValue['people_fields']['last_name'] : '').' user in organization fields']);
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if(isset($recipientsValue['organization_fields'][$customFieldsKey])) {
                                                        if(isset($customFields[str_replace(' ', '', $customFieldsKey).'mandatory']) && $customFields[str_replace(' ', '', $customFieldsKey).'mandatory'] == 1 && $recipientsValue['organization_fields'][$customFieldsKey] == '') {
                                                            return Response::json(['status' => 'error', 'result' => $customFieldsKey.' field is mandatory for '.$recipientsValue['people_fields']['first_name'].' '.(isset($recipientsValue['people_fields']['last_name']) && $recipientsValue['people_fields']['last_name'] != '' ? $recipientsValue['people_fields']['last_name'] : '').' user in organization fields']);
                                                        } elseif(isset($recipientsValue['organization_fields'][$customFieldsKey]) && $customFieldsValue != 1) {
                                                            return Response::json(['status' => 'error', 'result' => $customFieldsKey.' field is off for '.$recipientsValue['people_fields']['first_name'].' '.(isset($recipientsValue['people_fields']['last_name']) && $recipientsValue['people_fields']['last_name'] != '' ? $recipientsValue['people_fields']['last_name'] : '').' user in organization fields']);
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if(isset($data['is_ext_send']) && $data['is_ext_send'] == 1) {
                                                if(isset($recipientsValue['organization_fields']['name']) && $recipientsValue['organization_fields']['name'] != '') {
                                                    if(isset($recipientsValue['organization_fields']['name'])) {
                                                        if($orgFieldsKey == 'org_name' && $orgFieldsValue == 1) {
                                                            if(isset($tabFieldsDecode['orginfo_fields']['org_namemandatory']) && $tabFieldsDecode['orginfo_fields']['org_namemandatory'] == 1 && $recipientsValue['organization_fields']['name'] == '') {
                                                                return Response::json(['status' => 'error', 'result' => 'company field is mandatory for '.$recipientsValue['people_fields']['first_name'].' '.(isset($recipientsValue['people_fields']['last_name']) && $recipientsValue['people_fields']['last_name'] != '' ? $recipientsValue['people_fields']['last_name'] : '').' user in organization fields']);
                                                            }
                                                        }
                                                    } if(isset($recipientsValue['organization_fields']['org_no'])) {
                                                        if($orgFieldsKey == 'org_reg_no' && $orgFieldsValue == 1) {
                                                            if(isset($tabFieldsDecode['orginfo_fields']['org_reg_nomandatory']) && $tabFieldsDecode['orginfo_fields']['org_reg_nomandatory'] == 1 && $recipientsValue['organization_fields']['org_no'] == '') {
                                                                return Response::json(['status' => 'error', 'result' => 'org_no field is mandatory for '.$recipientsValue['people_fields']['first_name'].' '.(isset($recipientsValue['people_fields']['last_name']) && $recipientsValue['people_fields']['last_name'] != '' ? $recipientsValue['people_fields']['last_name'] : '').' user in organization fields']);
                                                            }
                                                        }
                                                    } if(isset($recipientsValue['organization_fields']['phone'])) {
                                                        if($orgFieldsKey == 'org_mobile' && $orgFieldsValue == 1) {
                                                            if(isset($tabFieldsDecode['orginfo_fields']['org_mobilemandatory']) && $tabFieldsDecode['orginfo_fields']['org_mobilemandatory'] == 1 && $recipientsValue['organization_fields']['phone'] == '') {
                                                                return Response::json(['status' => 'error', 'result' => 'phone field is mandatory for '.$recipientsValue['people_fields']['first_name'].' '.(isset($recipientsValue['people_fields']['last_name']) && $recipientsValue['people_fields']['last_name'] != '' ? $recipientsValue['people_fields']['last_name'] : '').' user in organization fields']);
                                                            }
                                                        }
                                                    } if(isset($recipientsValue['organization_fields']['address'])) {
                                                        if($orgFieldsKey == 'org_address' && $orgFieldsValue == 1) {
                                                            if(isset($tabFieldsDecode['orginfo_fields']['org_addressmandatory']) && $tabFieldsDecode['orginfo_fields']['org_addressmandatory'] == 1 && $recipientsValue['organization_fields']['address'] == '') {
                                                                return Response::json(['status' => 'error', 'result' => 'address field is mandatory for '.$recipientsValue['people_fields']['first_name'].' '.(isset($recipientsValue['people_fields']['last_name']) && $recipientsValue['people_fields']['last_name'] != '' ? $recipientsValue['people_fields']['last_name'] : '').' user in organization fields']);
                                                            }
                                                        }
                                                    } if(isset($recipientsValue['organization_fields']['city'])) {
                                                        if($orgFieldsKey == 'org_reg_no' && $orgFieldsValue == 1) {
                                                            if(isset($tabFieldsDecode['orginfo_fields']['org_citymandatory']) && $tabFieldsDecode['orginfo_fields']['org_citymandatory'] == 1 && $recipientsValue['organization_fields']['city'] == '') {
                                                                return Response::json(['status' => 'error', 'result' => 'city field is mandatory for '.$recipientsValue['people_fields']['first_name'].' '.(isset($recipientsValue['people_fields']['last_name']) && $recipientsValue['people_fields']['last_name'] != '' ? $recipientsValue['people_fields']['last_name'] : '').' user in organization fields']);
                                                            }
                                                        }
                                                    } if(isset($recipientsValue['organization_fields']['zipcode'])) {
                                                        if($orgFieldsKey == 'org_zip' && $orgFieldsValue == 1) {
                                                            if(isset($tabFieldsDecode['orginfo_fields']['org_zipmandatory']) && $tabFieldsDecode['orginfo_fields']['org_zipmandatory'] == 1 && $recipientsValue['organization_fields']['zipcode'] == '') {
                                                                return Response::json(['status' => 'error', 'result' => 'zipcode field is mandatory for '.$recipientsValue['people_fields']['first_name'].' '.(isset($recipientsValue['people_fields']['last_name']) && $recipientsValue['people_fields']['last_name'] != '' ? $recipientsValue['people_fields']['last_name'] : '').' user in organization fields']);
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if(isset($recipientsValue['organization_fields']['name'])) {
                                                    if($recFieldsKey == 'zip' && $recFieldsValue != 1) {
                                                        return Response::json(['status' => 'error', 'result' => 'company field is off for '.$recipientsValue['people_fields']['first_name'].' '.(isset($recipientsValue['people_fields']['last_name']) && $recipientsValue['people_fields']['last_name'] != '' ? $recipientsValue['people_fields']['last_name'] : '').' user in recipient fields']);
                                                    } elseif($recFieldsKey == 'zip' && $recFieldsValue == 1) {
                                                        if((!isset($recipientsValue['organization_fields']['name']) || $recipientsValue['organization_fields']['name'] == '') && isset($tabFieldsDecode['orginfo_fields']['org_namemandatory']) && $tabFieldsDecode['orginfo_fields']['org_namemandatory'] == 1) {
                                                            return Response::json(['status' => 'error', 'result' => 'company field is mandatory for '.$recipientsValue['people_fields']['first_name'].' '.(isset($recipientsValue['people_fields']['last_name']) && $recipientsValue['people_fields']['last_name'] != '' ? $recipientsValue['people_fields']['last_name'] : '').' user in recipient fields']);
                                                        }
                                                    }
                                                } if(isset($recipientsValue['organization_fields']['org_no'])) {
                                                    if($recFieldsKey == 'org_reg_no' && $recFieldsValue != 1) {
                                                        return Response::json(['status' => 'error', 'result' => 'org_no field is off for '.$recipientsValue['people_fields']['first_name'].' '.(isset($recipientsValue['people_fields']['last_name']) && $recipientsValue['people_fields']['last_name'] != '' ? $recipientsValue['people_fields']['last_name'] : '').' user in recipient fields']);
                                                    } elseif($recFieldsKey == 'org_reg_no' && $recFieldsValue == 1) {
                                                        if((!isset($recipientsValue['organization_fields']['org_no']) || $recipientsValue['organization_fields']['org_no'] == '') && isset($tabFieldsDecode['orginfo_fields']['org_reg_nomandatory']) && $tabFieldsDecode['orginfo_fields']['org_reg_nomandatory'] == 1) {
                                                            return Response::json(['status' => 'error', 'result' => 'org_no field is mandatory for '.$recipientsValue['people_fields']['first_name'].' '.(isset($recipientsValue['people_fields']['last_name']) && $recipientsValue['people_fields']['last_name'] != '' ? $recipientsValue['people_fields']['last_name'] : '').' user in recipient fields']);
                                                        }
                                                    }
                                                } if(isset($recipientsValue['organization_fields']['phone'])) {
                                                    if($recFieldsKey == 'org_mobile' && $recFieldsValue != 1) {
                                                        return Response::json(['status' => 'error', 'result' => 'phone field is off for '.$recipientsValue['people_fields']['first_name'].' '.(isset($recipientsValue['people_fields']['last_name']) && $recipientsValue['people_fields']['last_name'] != '' ? $recipientsValue['people_fields']['last_name'] : '').' user in recipient fields']);
                                                    } elseif($recFieldsKey == 'org_mobile' && $recFieldsValue == 1) {
                                                        if((!isset($recipientsValue['organization_fields']['phone']) || $recipientsValue['organization_fields']['phone'] == '') && isset($tabFieldsDecode['orginfo_fields']['org_mobilemandatory']) && $tabFieldsDecode['orginfo_fields']['org_mobilemandatory'] == 1) {
                                                            return Response::json(['status' => 'error', 'result' => 'phone field is mandatory for '.$recipientsValue['people_fields']['first_name'].' '.(isset($recipientsValue['people_fields']['last_name']) && $recipientsValue['people_fields']['last_name'] != '' ? $recipientsValue['people_fields']['last_name'] : '').' user in recipient fields']);
                                                        }
                                                    }
                                                } if(isset($recipientsValue['organization_fields']['address'])) {
                                                    if($recFieldsKey == 'org_address' && $recFieldsValue != 1) {
                                                        return Response::json(['status' => 'error', 'result' => 'address field is off for '.$recipientsValue['people_fields']['first_name'].' '.(isset($recipientsValue['people_fields']['last_name']) && $recipientsValue['people_fields']['last_name'] != '' ? $recipientsValue['people_fields']['last_name'] : '').' user in recipient fields']);
                                                    } elseif($recFieldsKey == 'org_address' && $recFieldsValue == 1) {
                                                        if((!isset($recipientsValue['organization_fields']['address']) || $recipientsValue['organization_fields']['address'] == '') && isset($tabFieldsDecode['orginfo_fields']['org_addressmandatory']) && $tabFieldsDecode['orginfo_fields']['org_addressmandatory'] == 1) {
                                                            return Response::json(['status' => 'error', 'result' => 'address field is mandatory for '.$recipientsValue['people_fields']['first_name'].' '.(isset($recipientsValue['people_fields']['last_name']) && $recipientsValue['people_fields']['last_name'] != '' ? $recipientsValue['people_fields']['last_name'] : '').' user in recipient fields']);
                                                        }
                                                    }
                                                } if(isset($recipientsValue['organization_fields']['city'])) {
                                                    if($recFieldsKey == 'org_city' && $recFieldsValue != 1) {
                                                        return Response::json(['status' => 'error', 'result' => 'city field is off for '.$recipientsValue['people_fields']['first_name'].' '.(isset($recipientsValue['people_fields']['last_name']) && $recipientsValue['people_fields']['last_name'] != '' ? $recipientsValue['people_fields']['last_name'] : '').' user in recipient fields']);
                                                    } elseif($recFieldsKey == 'org_city' && $recFieldsValue == 1) {
                                                        if((!isset($recipientsValue['organization_fields']['city']) || $recipientsValue['organization_fields']['city'] == '') && isset($tabFieldsDecode['orginfo_fields']['org_citymandatory']) && $tabFieldsDecode['orginfo_fields']['org_citymandatory'] == 1) {
                                                            return Response::json(['status' => 'error', 'result' => 'city field is mandatory for '.$recipientsValue['people_fields']['first_name'].' '.(isset($recipientsValue['people_fields']['last_name']) && $recipientsValue['people_fields']['last_name'] != '' ? $recipientsValue['people_fields']['last_name'] : '').' user in recipient fields']);
                                                        }
                                                    }
                                                } if(isset($recipientsValue['organization_fields']['zipcode'])) {
                                                    if($recFieldsKey == 'org_zip' && $recFieldsValue != 1) {
                                                        return Response::json(['status' => 'error', 'result' => 'zipcode field is off for '.$recipientsValue['people_fields']['first_name'].' '.(isset($recipientsValue['people_fields']['last_name']) && $recipientsValue['people_fields']['last_name'] != '' ? $recipientsValue['people_fields']['last_name'] : '').' user in recipient fields']);
                                                    } elseif($recFieldsKey == 'org_zip' && $recFieldsValue == 1) {
                                                        if((!isset($recipientsValue['organization_fields']['zipcode']) || $recipientsValue['organization_fields']['zipcode'] == '') && isset($tabFieldsDecode['orginfo_fields']['org_zipmandatory']) && $tabFieldsDecode['orginfo_fields']['org_zipmandatory'] == 1) {
                                                            return Response::json(['status' => 'error', 'result' => 'zipcode field is mandatory for '.$recipientsValue['people_fields']['first_name'].' '.(isset($recipientsValue['people_fields']['last_name']) && $recipientsValue['people_fields']['last_name'] != '' ? $recipientsValue['people_fields']['last_name'] : '').' user in recipient fields']);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    //checking organization fields ending
                                }

                                $sentRec['full_name'] = $recipientsValue['people_fields']['first_name'].(isset($recipientsValue['people_fields']['last_name']) && $recipientsValue['people_fields']['last_name'] != '' ? ' '.$recipientsValue['people_fields']['last_name'] : '');
                                $sentRec['email'] = $recipientsValue['people_fields']['email'];
                                $partiesName[] = $recipientsValue['people_fields']['first_name'];
                                array_push($recsList, $sentRec);
                            }
                        }
                    } //Foreach End
                } else {
                    return Response::json(['status'=>'error','result' => 'Recipient information should not be empty']);
                }
            } else {
                return Response::json(['status'=>'error','result' => 'Recipient information is invalid format, JSON is required']);
            }
        } else {
            return Response::json(['status'=>'error','result' => 'Recipient information is missing']);
        }
        //checking recipients variable and other validation ending
        //checking document fields keys and it's values starting
        if(isset($data['documentfields'])) {
            if(!empty($data['documentfields']) && $this->is_JSON($data['documentfields'])) {
                $documentFields = json_decode($data['documentfields'], true);
                foreach($documentFields as $documentFieldsKey => $documentFieldsValue) {
                    if(!is_array($documentFieldsValue['document_fields'])) {
                        return Response::json(['status' => 'error', 'result' => 'document_fields should be array']);
                    } else {
                        if(!isset($documentFieldsValue['document_fields']) || empty($documentFieldsValue['document_fields'])) {
                            return Response::json(['status' => 'error', 'result' => 'Document information is missing']);
                        } elseif(isset($documentFieldsValue['document_fields']) && !empty($documentFieldsValue['document_fields'])) {
                            //Docfields
                            foreach($documentFieldsValue['document_fields'] as $docFldKey => $docFldValue) {
                                if(!isset($docFldKey) || $docFldKey == '') {
                                    return Response::json(['status' => 'error', 'result' => 'document_fields key is missing']);
                                } if(!isset($docFldValue) || $docFldValue == '') {
                                    return Response::json(['status' => 'error', 'result' => 'document_fields value is missing']);
                                }
                            }
                        }
                    }
                }//loop ends here
            } else {
                return Response::json(['status'=>'error','result' => 'Document fields information is invalid format, JSON is required']);
            }
        }
        //checking document fields keys and it's values ending

        //getting invitation url for showing document link in response instead of an email starting
        if(isset($data['invitation_url']) && $data['invitation_url'] == 1) {
            $signing_url = 1;
        } else {
            $signing_url = 0;
        }
        //getting invitation url for showing document link in response instead of an email ending

        //PDF Attachment Functionality START
        $attachmentArray = array();
        $attachment_mandatory = 0;
        $attachment_file = $attachment_name = '';

        if(isset($data['attachment']) && !empty($data['attachment'])) {
            $attachment_file = $data['attachment'];
            $fileTypes = array('jpg','jpeg','gif','png','pdf','doc','docx','xls','xlsx','zip','csv','txt');
            if(!in_array(strtolower($attachment_file->getClientOriginalExtension()), $fileTypes)) {
                return Response::json(['status'=>'error','result' => 'Invalid attachment file type, only document files are acceptable']);
            }
            $attachment_name = $attachment_file->getClientoriginalName();
            if(isset($data['attachment_name']) && !empty($data['attachment_name'])) {
                $attachment_name = $data['attachment_name'];
            }
            if(isset($data['attachment_mandatory']) && !empty($data['attachment_mandatory']) && $data['attachment_mandatory'] == 1) {
                $attachment_mandatory = 1;
            }
            $attachmentArray[1]['name'] = $attachment_name;
            $attachmentArray[1]['is_mandatory'] = $attachment_mandatory;
            $attachmentArray[1]['created_date'] = date("Y-m-d H:i:s");
        }
        //PDF Attachment Functionality END

        //Checking for Template belongs to this user or Parent (RJ) START
        $checkTemplate = Offerdocs::where('id', $template_id)->where('user_id', $user_id)->where('is_shareable', 0)
        ->orWhere(function ($query) use($parent_id,$template_id) {
            $query->where('id', $template_id)->where('user_id', $parent_id)->where('is_shareable', 1);
        })->count();

        if(!$checkTemplate) {
            return Response::json(['status'=>'error','result' =>'Template not found']);
        }
        //Checking for Template belongs to this user or Parent (RJ) END

        $reg_no = $company_name = $user_details = $tracking_id = "";
        if($utility->isSuperuser($user_id)) {
            $company_name = (isset($data["sender_company"]) && !empty($data["sender_company"]) ? $data["sender_company"] : "");
            if((isset($data["sender_company"]) && !empty($data["sender_company"])) && (!isset($data["sender_reg_no"]) && empty($data["sender_reg_no"]))) {
                return Response::json(["status" => "error", "result" => "After given sender_company name sender_reg_no is mandatory"]);
            } elseif((isset($data["sender_reg_no"]) && !empty($data["sender_reg_no"])) && (!isset($data["sender_company"]) && empty($data["sender_company"]))) {
                return Response::json(["status" => "error", "result" => "After given sender_reg_no sender_company is mandatory"]);
            } elseif(isset($data["sender_reg_no"]) && !empty($data["sender_reg_no"])) {
                $userdata = $utility->getParentDetails($user_id);
                $userArrar = array();
                $userArrar['first_name'] = $userdata->full_name;
                $userArrar['last_name'] = $userdata->second_name;
                $userArrar['email'] = $userdata->email;
                $userArrar['company'] = (isset($company_name) && !empty($company_name) ? $company_name : $userdata->company);
                $reg_no = $data["sender_reg_no"];
                $userArrar['reg_no'] = $reg_no;
                $userArrar['address'] = (isset($data["sender_address"]) && !empty($data["sender_address"]) ? $data["sender_address"] : $userdata->address);
                $userArrar['telephone'] = (isset($data["sender_telephone"]) && !empty($data["sender_telephone"]) ? $data["sender_telephone"] : $userdata->telephone);
                $userArrar['post_code'] = (isset($data["sender_post_code"]) && !empty($data["sender_post_code"]) ? $data["sender_post_code"] : $userdata->post_code);
                $userArrar['city'] = (isset($data["sender_city"]) && !empty($data["sender_city"]) ? $data["sender_city"] : $userdata->city);
                $user_details = json_encode($userArrar);
            } else {
                $gettingFromUserInfo = Userinfo::where("user_id", $parent_id)->select("reg_no")->first();
                $reg_no = $gettingFromUserInfo["reg_no"];
            }
        }

        if(isset($data["tracking_id"]) && !empty($data["tracking_id"])) {
            if(strlen($data["tracking_id"]) < 6 || strlen($data["tracking_id"]) > 6) {
                return Response::json(["status" => "error", "result" => "tracking_id must be 6 digits"]);
            } else {
                $tracking_id = $data["tracking_id"];
            }
        }
        //getting info and manipulating about super user ending

        //Condition if sender_email Available(for sub users)
        if(isset($data['sender_email']) && $data['sender_email'] != '') {
            $sender_email = Tcrypt::encrypter($data['sender_email']);
            $checkSubuser = User::where('email', $sender_email)->where('parent_id', $user_id)->select('id')->first();
            if($checkSubuser['id']) {
                $user_id = $checkSubuser['id'];
            }
        }

        $sentcontract = new sendcontractController();
        $contract = $sentcontract->getTemplateByTemplateID($template_id);

        if($contract == '0') {
            return Response::json(['status'=>'error','result' => 'template not found']);
        }

        if(isset($data['visible_name']) && $data['visible_name'] != '') {
            $visible_name = $data['visible_name'];
            $document_name = $data['visible_name'];
        } else {
            $visible_name = $contract->visible_name;
            $document_name = $contract->name;
        }
        
        //$lang = 'en';
        if(isset($data['language_id']) && $data['language_id'] != '') {
            $lang = $data['language_id'];
        } else {
            $language = Userinfo::where('user_id', '=', $user_id)->select('language')->first();
            $lang = ($contract->recipient_language == '' ? $language['language'] : $contract->recipient_language);
        }

        $dueDays = '';
        $userTimeZone = $utility->getUsertimezone($user_id);
        if(isset($data['due_days']) && $data['due_days'] != '') {
            $dueDays = $data['due_days'];
            if($dueDays > 0) {
                $dueDays = date('Y-m-d', strtotime(date('Y-m-d'). " + $dueDays days"));
            } else {
                $dueDays = date('Y-m-d');
            }
            $dueDays = $utility->changeTimeZone($dueDays.' 23:50:00', 'Y-m-d', $userTimeZone, 'UTC');
        } else {
            $dueDays = '0000-00-00 00:00:00';
        }

        $reminderDays = '';
        if(isset($data['reminder_days']) && $data['reminder_days'] != '') {
            $reminderDays = $data['reminder_days'];
            if($reminderDays > 0) {
                $reminderDays = date('Y-m-d', strtotime(date('Y-m-d'). " + $reminderDays days"));
            } else {
                $reminderDays = date('Y-m-d');
            }
            $reminderDays = $utility->changeTimeZone($reminderDays.' 08:50:00', 'Y-m-d H:i:s', $userTimeZone, 'UTC');
        } else {
            $reminderDays = '0000-00-00 00:00:00';
        }

        if(isset($data['invitation_message']) && $data['invitation_message'] != '') {
            $invitation_message = $data['invitation_message'];
        } else {
            $invitation_message = $contract->invitation_message;
        }
        if(!isset($data["invitation_sms"]) || $data["invitation_sms"] == "") {
            $data["invitation_sms"] = $contract->invitation_sms_message;
        }
        if(isset($data['confirmation_message']) && $data['confirmation_message'] != '') {
            $confirmation_message = $data['confirmation_message'];
        } else {
            $confirmation_message = $contract->confirmation_message;
        }
        if(!isset($data["confirmation_sms"]) || $data["confirmation_sms"] == "") {
            $data["confirmation_sms"] = $contract->confirmation_sms_message;
        }

        //save vimeo and youtube url
        if(isset($data['video_url']) && !empty($data['video_url'])) {
            if(preg_match("@^(?:https://(?:www\\.)?youtube.com/)(watch\\?v=|v/)([a-zA-Z0-9_]*)@", $data['video_url'], $match)) {
                $offerArray['video_link'] = $data['video_url'];
            } elseif(preg_match("/(https?:\/\/)?(www\.)?(player\.)?vimeo\.com\/([a-z]*\/)*([0-9]{6,11})[?]?.*/", $data['video_url'], $output_array)) {
                $offerArray['video_link'] = $data['video_url'];
            } else {
                return Response::json(['status'=>'error','result' =>'Invalid video url']);
            }
        } elseif(isset($data['video']) && !empty($data['video'])) {
            $video_file = $data['video'];
            if($video_file->getSize() > 10485760) {
                return Response::json(['status'=>'error','result' =>'File size is greator than 10mb']);
            } elseif($video_file->getMimeType() != "video/mp4") {
                return Response::json(['status'=>'error','result' =>'File type must be mp4']);
            }
            $title = $video_file->getClientoriginalName();
            $videoname = uniqid().'_'.$title;
            $destination = public_path().'/uploads/user_videos';
            $link = asset('/').'/uploads/user_videos/'.$videoname;
            $video_file->move($destination, $videoname);
            $offerArray['video_link'] = '/uploads/user_videos/'.$videoname;
        }

        $attachments = $contract->attachments;
        $contract->content = $contract->content;
        $offerSentId = $this->addOffersentapi($user_id,$dueDays,$lang,$document_name,$reminderDays,$contract->content,$visible_name,$invitation_message,$confirmation_message,$retargeting_code='',$attachments,$template_id);

        //Updating Recipients Column in Offer Sent Table
        $offerData1['recipients'] = json_encode($recsList);
        $offerData1['invitation_sms_message'] = $data["invitation_sms"];
        $offerData1['confirmation_sms_message'] = $data["confirmation_sms"];
        $offerWhere1['id'] = $offerSentId;

        //PDF Attachment Functionality START
        if($attachment_file != '') {
            $path  = $offerSentId.'_'.uniqid().'.'.$attachment_file->getClientOriginalExtension();
            $destination = public_path().'/uploads/contractattachments';
            $attachment_file->move($destination, $path);

            $filePath = $destination.'/'.$path;
            //Uploading to Google Cloud Server
            uploadToGCS($filePath,$user_id.'/offerdata',$path,env('simplesignoffersBucket'));

            //Deleing uploaded file from local ftp
            if(file_exists($filePath)) {
                unlink($filePath);
            }
            $attachmentArray[1]['path']   = $path;//filename
            $offerData1['attachments'] = json_encode($attachmentArray);
        }
        
        /// Add Waqar work in API
        if(isset($data['external_source']) && !empty($data['external_source'])) {
            $externalSource = json_decode($data['external_source'], true);
            if($externalSource[0]['customSMS'] == 1) {
                $offerData1['invitation_sms_message'] = ($externalSource[0]["invitation_sms_message"] != "" ? $externalSource[0]["invitation_sms_message"] : "");
                $offerData1['confirmation_sms_message'] = ($externalSource[0]["confirmation_sms_message"] != "" ? $externalSource[0]["confirmation_sms_message"]  : "");
            } if($externalSource[0]['customSMSEmailReminders'] == 1) {
                $offerData1['reminder_sms_message'] = ($externalSource[0]["reminder_sms_message"] != "" ? $externalSource[0]["reminder_sms_message"] : "");
                $offerData1['reminder_email_message'] = ($externalSource[0]["reminder_email_message"] != "" ? $externalSource[0]["reminder_email_message"]  : "");
            } if($externalSource[0]['setting_for_history']) {
                $offerData1['history_folder_id'] = ($externalSource[0]['history_template_folder'] ? $externalSource[0]['history_template_folder'] : '');
            }  if($externalSource[0]['allowforward']) {
                $offerData1['allow_forward'] = $externalSource[0]['allowforward'];
            } if($externalSource[0]['contract_chat']) {
                $offerData1['contract_chat'] = $externalSource[0]['contract_chat'];
            } if($externalSource[0]['link_template_checkbox']) {
                $offerData1['link_template'] = json_encode(['select_link_template' => $externalSource[0]['link_template'], 'template_id' => '', 'template_name' => '']);
            } if($externalSource[0]['hide_quote_pages']) {
                $offerData1['hide_quote_pages'] = $externalSource[0]['hide_quote_pages'];
            }
            $offerData1['request_attachment'] = $externalSource[0]['request_attachment'];
            $getOfferDocsData = Offerdocs::where('id', $template_id)->where('user_id', $user_id)->select('attachments')->first();
            if($getOfferDocsData) {
                $offerData1['attachments'] = $getOfferDocsData['attachments'];
                Offerdocs::where('id', $template_id)->where('user_id', $user_id)->update(['attachments' => '']);
            }
        }
        /// Add Waqar work in API END

        //reg no is adding if super user is available starting
        //$offerData1['reg_no'] = $reg_no;
        $offerData1['tracking_id'] = $tracking_id;
        if(isset($user_details) && !empty($user_details)) {
            $offerData1['user_details'] = $user_details;
        }
        //reg no is adding if super user is available ending
        
        //Condition for Link Template
        if(isset($contract->remember_settings) && $contract->remember_settings != '') {
            $remSettingArr = json_decode($contract->remember_settings,true);
            if(isset($remSettingArr['link_template']) && isset($remSettingArr['link_template']['select_link_template']) && $remSettingArr['link_template']['select_link_template'] == 1) {
                if(isset($remSettingArr['link_template']['template_id']) && $remSettingArr['link_template']['template_id'] != '') {
                    $offerData1['link_template'] = json_encode($remSettingArr['link_template']);
                }
            }
        }

        $utility->updateItem("offer_sent", $offerWhere1, $offerData1);

        /*Add content in orignal offer table*/
        $original_offer['sender_id'] = $user_id;
        $original_offer['offer_sent_id'] = $offerSentId;
        $original_offer['content'] = $contract->content;
        $utility->addItem("original_offer", $original_offer);

        //sendtemplatenewfunction
        $status = $this->senddocumenttemplateapi($offerSentId,$data,$user_id,$visible_name,$invitation_message,$lang,$signing_url);

        if($status) {
            //Video upload
            if(isset($data['video_title']) && !empty($data['video_title'])) {
                $offerArray['video_title'] = $data['video_title'];
            }
            $whereSent['id'] = $offerSentId;
            $offerArray['offer_status'] = 0;
            $utility->updateItem("offer_sent", $whereSent, $offerArray);

            if(isset($data['invitation_url']) && $data['invitation_url'] == 1) {
                $res = str_replace('\/', '/', json_encode(['status'=>'success','result' =>'Invitation URL successfully generated', 'parties name' => $partiesName, 'Invitation URL' => $status, 'document_id'=>$offerSentId]));
                return $res;
            }

            return Response::json(['status'=>'success','result' =>'document sent successfully','document_id' => $offerSentId]);
        } elseif($status==0) {
            return Response::json(['status'=>'success','result' =>'Your are not paid user, Please upgrade your account for send document']);
        }
    }
    
    
    public function getGetdocumentinformation($custom_data=[]) {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');
        $storeFieldsObjDB = false;

        //access_token validation starting
        if(isset($data['access_token']) && $data['access_token'] != '' && !isset($custom_data['user_id']) ) {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
        //access_token validation ending

        //contract_id validation starting
        if( isset($data['document_id']) && $data['document_id'] != '' ) {
            $document_id = $data['document_id'];
        }else if( isset($custom_data['sent_id']) && $custom_data['sent_id'] != '' ) {
            $document_id = $custom_data['sent_id'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'document_id is missing']);
        }

        if(isset($custom_data['user_id'])){
            $user_id = $custom_data['user_id'];
            $storeFieldsObjDB = true;
        }else{
            $user_id = $utility->getUserIdByAuthToken($access_token);
        }
        $parent_id = $utility->getParent($user_id);
        $getApiHitCount = Userinfo::where('user_id', $parent_id)->select('hit_count')->first();
        $addupdateapiaccesslogs = $utility->addupdateapiaccesslogs($user_id, 'getGetdocumentinformation v3', $data, $getApiHitCount['hit_count']);
        if($addupdateapiaccesslogs == 'exceed') {
            $this->apiCallLimitExceedMessage = str_replace('#hitCuntNo', $getApiHitCount['hit_count'], $this->apiCallLimitExceedMessage);
            return Response::json(['status' => 'error', 'result' => $this->apiCallLimitExceedMessage]);
        }
        $userSettings = $utility->getUserSettings($parent_id);

        if($utility->checkAdminStripe($user_id) && !isset($custom_data['user_id']) ) {
            return Response::json(['status' => 'error', 'result' => 'Account is locked make payment in order to continue Simplesign']);
        }

        $contractData = Offersentdetails::where('offer_send_details.offer_sent_id', $document_id)->join('offer_sent', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')->select('offer_send_details.id AS detail_id', 'offer_send_details.offer_sent_id', 'offer_send_details.user_details', 'offer_send_details.offer_status', 'offer_send_details.req_attached', 'offer_send_details.document_read_date', 'offer_send_details.signed_date', 'offer_send_details.authentication_method', 'offer_send_details.role', 'offer_send_details.invitation_type', 'offer_send_details.invitation_order', 'offer_send_details.offer_confirmation', 'offer_send_details.id_attachments', 'offer_sent.content')->where('offer_send_details.is_sender', 0)->where('offer_sent.sender_id', $user_id)->get()->toArray();

        if($contractData) {
            $responseArray = $senderInfo = $contractDetails =  [];
            foreach($contractData as $contractDataKey => $contractDataValue) {
                $peopleFields = $organizationFields = $details = [];
                $nameExplode = '';
                
                $recipientUserDetails = Tcrypt::decrypter($contractDataValue['user_details']);
                $recipientUserDetailsJsonDecode = json_decode($recipientUserDetails, true);

                //$peopleFields['detail_id'] = $contractDataValue['detail_id'];
                //$peopleFields['offer_sent_id'] = $contractDataValue['offer_sent_id'];
                $userRole = (isset($recipientUserDetailsJsonDecode['recrolename']) && $recipientUserDetailsJsonDecode['recrolename'] != '' ? $recipientUserDetailsJsonDecode['recrolename'] : (isset($recipientUserDetailsJsonDecode['partyname']) && $recipientUserDetailsJsonDecode['partyname'] != '' ? $recipientUserDetailsJsonDecode['partyname'] : ''));

                //basic information of recipient starting
                if(isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '') {
                    //for regular contract recipient use full_name key
                    $nameExplode = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? explode(' ', trim($recipientUserDetailsJsonDecode['full_name'])) : '');
                    $peopleFields['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                    $peopleFields['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                } elseif(isset($recipientUserDetailsJsonDecode['name']) && $recipientUserDetailsJsonDecode['name'] != '') {
                    //for online contract recipient use name key
                    $nameExplode = (isset($recipientUserDetailsJsonDecode['name']) && $recipientUserDetailsJsonDecode['name'] != '' ? explode(' ', trim($recipientUserDetailsJsonDecode['name'])) : '');
                    $peopleFields['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                    $peopleFields['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                }
                $peopleFields['email'] = (isset($recipientUserDetailsJsonDecode['email']) && $recipientUserDetailsJsonDecode['email'] != '' ? trim(preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $recipientUserDetailsJsonDecode['email'])) : '');
                $peopleFields['personal_no'] = (isset($recipientUserDetailsJsonDecode['personnr']) && $recipientUserDetailsJsonDecode['personnr'] != '' ? trim($recipientUserDetailsJsonDecode['personnr']) : '');
                $peopleFields['mobile'] = (isset($recipientUserDetailsJsonDecode['mobile']) && $recipientUserDetailsJsonDecode['mobile'] != '' ? trim($recipientUserDetailsJsonDecode['mobile']) : '');
                $peopleFields['address'] = (isset($recipientUserDetailsJsonDecode['address']) && $recipientUserDetailsJsonDecode['address'] != '' ? trim($recipientUserDetailsJsonDecode['address']) : '');
                $peopleFields['city'] = (isset($recipientUserDetailsJsonDecode['city']) && $recipientUserDetailsJsonDecode['city'] != '' ? trim($recipientUserDetailsJsonDecode['city']) : '');
                $peopleFields['zipcode'] = (isset($recipientUserDetailsJsonDecode['zipcode']) && $recipientUserDetailsJsonDecode['zipcode'] != '' ? trim($recipientUserDetailsJsonDecode['zipcode']) : (isset($recipientUserDetailsJsonDecode['zip']) && $recipientUserDetailsJsonDecode['zip'] != '' ? trim($recipientUserDetailsJsonDecode['zip']) : ''));
                //basic information of recipient ending

                //organization information of recipient starting
                if(isset($recipientUserDetailsJsonDecode['organization_fields'])) {
                    $orgFields = json_decode($recipientUserDetailsJsonDecode['organization_fields'], true);
                    foreach($orgFields as $orgFldsKey => $orgFldsValue) {
                        $orgFldsValue['orgFieldName'] = str_replace('name', 'organization_name', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('org_no', 'organization_no', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('phone', 'organization_phone', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('address', 'organization_address', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('city', 'organization_city', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('zipcode', 'organization_zipcode', $orgFldsValue['orgFieldName']);
                        $organizationFields[$orgFldsValue['orgFieldName']] = $orgFldsValue['orgFieldValue'];
                    }
                } else {
                    if(isset($recipientUserDetailsJsonDecode['org_name']) && $recipientUserDetailsJsonDecode['org_name'] != '') {
                        $organizationFields['organization_name'] = $recipientUserDetailsJsonDecode['org_name'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_reg_no']) && $recipientUserDetailsJsonDecode['org_reg_no'] != '') {
                        $organizationFields['organization_no'] = $recipientUserDetailsJsonDecode['org_reg_no'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_mobile']) && $recipientUserDetailsJsonDecode['org_mobile'] != '') {
                        $organizationFields['organization_phone'] = $recipientUserDetailsJsonDecode['org_mobile'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_address']) && $recipientUserDetailsJsonDecode['org_address'] != '') {
                        $organizationFields['organization_address'] = $recipientUserDetailsJsonDecode['org_address'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_city']) && $recipientUserDetailsJsonDecode['org_city'] != '') {
                        $organizationFields['organization_city'] = $recipientUserDetailsJsonDecode['org_city'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_zip']) && $recipientUserDetailsJsonDecode['org_zip'] != '') {
                        $organizationFields['organization_zipcode'] = $recipientUserDetailsJsonDecode['org_zip'];
                    }
                }
                //organization information of recipient ending

                //people information of new fields starting
                if(isset($recipientUserDetailsJsonDecode['extra_fields']) && !empty($recipientUserDetailsJsonDecode['extra_fields'])) {
                    $recipientFieldsWithoutValue = (isset($recipientUserDetailsJsonDecode['recipientfields']) && !empty($recipientUserDetailsJsonDecode['recipientfields']) ? json_decode($recipientUserDetailsJsonDecode['recipientfields'], true) : []);

                    $extraFields = (isset($recipientUserDetailsJsonDecode['extra_fields']) && !empty($recipientUserDetailsJsonDecode['extra_fields']) ? json_decode($recipientUserDetailsJsonDecode['extra_fields'], true) : []);
                    $intersect = array_uintersect($extraFields, $recipientFieldsWithoutValue, function($val1, $val2) {
                        return strcmp($val1['fieldName'], $val2['fieldName']);
                    });

                    $intersect = array_values($intersect);
                    if(!empty($intersect)) {
                        foreach($intersect as $extraFldKey => $extraFldValue) {
                            $peopleFields[$extraFldValue['fieldName']] = $extraFldValue['fieldValue'];
                        }
                    }
                }
                //people information of new fields ending

                //organization information of new fields starting
                if(isset($recipientUserDetailsJsonDecode['org_extra_fields']) && !empty($recipientUserDetailsJsonDecode['org_extra_fields'])) {
                    $orgExtraFields = json_decode($recipientUserDetailsJsonDecode['org_extra_fields'], true);
                    if(!empty($orgExtraFields)) {
                        foreach($orgExtraFields as $orgExtraFldKey => $orgExtraFldValue) {
                            $organizationFields[$orgExtraFldValue['fieldName']] = $orgExtraFldValue['fieldValue'];
                        }
                    }
                }
                //organization information of new fields ending

                //organization information of fields which are placed at document starting
                $content = Tcrypt::decrypter($contractDataValue['content']);
                if($content != '') {
                    $html = new \Htmldom($content);
                    foreach($html->find('.text') as $findKey => $findValue) {
                        //codition for regular contract starting
                        if(isset($recipientUserDetailsJsonDecode['id']) && $recipientUserDetailsJsonDecode['id'] == $findValue->recipientselectedid) {
                            if(strpos($findValue->getAttribute('class'), 'peopleNewField') !== false) {
                                if($findValue->find('h4', 0)) {
                                    $peopleFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                } else {
                                    if($findValue->find('p', 0)) {
                                        $peopleFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                    }
                                }
                            } if(strpos($findValue->getAttribute('class'), 'organizationNewField') !== false) {
                                if($findValue->find('h4', 0)) {
                                    $organizationFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                } else {
                                    if($findValue->find('p', 0)) {
                                        $organizationFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                    }
                                }
                            }
                            //codition for regular contract ending
                        } else {
                            //codition for online contract starting
                            if($userRole == $findValue->parent()->parent()->whowillfill) {
                                if(strpos($findValue->getAttribute('class'), 'peopleNewField') !== false) {
                                    if($findValue->find('h4', 0)) {
                                        $peopleFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                    } else {
                                        //right now paragraph tag is showing and will be replaced by h4 near future starting
                                        if($findValue->find('p', 0)) {
                                            $peopleFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                        }
                                        //right now paragraph tag is showing and will be replaced by h4 near future ending
                                    }
                                } if(strpos($findValue->getAttribute('class'), 'organizationNewField') !== false) {
                                    if($findValue->find('h4', 0)) {
                                        $organizationFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                    } else {
                                        //right now paragraph tag is showing and will be replaced by h4 near future starting
                                        if($findValue->find('p', 0)) {
                                            $organizationFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                        }
                                        //right now paragraph tag is showing and will be replaced by h4 near future ending
                                    }
                                }
                            }
                            //codition for online contract ending
                        }
                    }
                }
                //organization information of fields which are placed at document ending

                //basic information of document settings starting
                if(isset($recipientUserDetailsJsonDecode['details_fields'])) {
                    $detailsFields = json_decode($recipientUserDetailsJsonDecode['details_fields'], true);
                    foreach($detailsFields as $orgFldsKey => $orgFldsValue) {
                        $details[$orgFldsValue['detailsFieldName']] = $orgFldsValue['detailsFieldValue'];
                    }
                } else {
                    $details['recipient_role'] = (isset($recipientUserDetailsJsonDecode['recrolename']) && $recipientUserDetailsJsonDecode['recrolename'] != '' ? $recipientUserDetailsJsonDecode['recrolename'] : (isset($recipientUserDetailsJsonDecode['partyname']) && $recipientUserDetailsJsonDecode['partyname'] != '' ? $recipientUserDetailsJsonDecode['partyname'] : ''));

                    if($contractDataValue['role'] == 2) {
                        $contractDataValue['authentication_method'] = 8;
                    }
                    $details['authentication'] = $utility->authenticationMethodName($contractDataValue['authentication_method']);
                    if(isset($contractDataValue['invitation_type']) && $contractDataValue['invitation_type'] != '') {
                        $details['invitation_type'] = $utility->invitationTypeName($contractDataValue['invitation_type']);
                    }
                    if($contractDataValue['invitation_order'] != 0) {
                        $details['invitation_order'] = $contractDataValue['invitation_order'];
                    }
                    if(isset($contractDataValue['offer_confirmation']) && $contractDataValue['offer_confirmation'] != '') {
                        $details['confirmation'] = $utility->offerConfirmationName($contractDataValue['offer_confirmation']);
                    }
                    $details['id_attachment'] = $utility->idAttachmentName($contractDataValue['id_attachments']);
                }
                $details['request_attachment'] = ($contractDataValue['req_attached'] != '' ? 'yes' : 'no');
                if($contractDataValue['document_read_date'] != '' && $contractDataValue['document_read_date'] != '0000-00-00 00:00:00') {
                    $details['last_viewing_date'] = ($contractDataValue['document_read_date'] != '' ? $contractDataValue['document_read_date'] : '');
                }
                $details['signed_date'] = ($contractDataValue['signed_date'] != '' && $contractDataValue['signed_date'] != '0000-00-00 00:00:00' ? $contractDataValue['signed_date'] : '');
                $details['status'] = (isset($contractDataValue['offer_status']) != '' ? $utility->offerStatusName($contractDataValue['offer_status']) : '');

                if(!empty($organizationFields)) {
                    $peopleAndDetailsArray = ['people_fields' => $peopleFields, 'organization_fields' => $organizationFields, 'details' => $details];
                } else {
                    $peopleAndDetailsArray = ['people_fields' => $peopleFields, 'details' => $details];
                }
                array_push($responseArray, $peopleAndDetailsArray);
                //basic information of document settings ending
            }

            $offerSentContent = Offersent::where('id', $document_id)->where('sender_id', $user_id)->select('content', 'visible_name', 'name', 'language_id', 'id', 'offer_id', 'created_date', 'offer_status', 'signed_date', 'due_date')->first();
            $content = Tcrypt::decrypter($offerSentContent['content']);
            if($content != '') {
                //getGetdocumentinfoxml function of garda template response
                $html = new \Htmldom($content);
                $dynamicElements = [];
                foreach($html->find('.template_container') as $temConKey => $temConValue) {
                    $arrayPush = [];
                    foreach($temConValue->find('.formElement') as $findKey => $findValue) {
                                        
                        $elementStyle = $findValue->getAttribute('style');
                        $arrCSS = $utility->parse_css($elementStyle);
                        $parentDiv = $findValue->parent()->parent();

                        //Fixing Position when field is inside the borderbox or textbox START
                        $addtop = 0;
                        $addleft = 0;
                        if(strpos($parentDiv->getAttribute('class'), 'dynamic_border') !== false && strpos($parentDiv->getAttribute('class'), 'insert_box_div') === false) {
                            $parentCSS = $utility->parse_css($parentDiv->getAttribute('style'));
                            $addtop = (isset($parentCSS['top']) && $parentCSS['top'] != '' ? round($parentCSS['top']) : 0);
                            $addleft = (isset($parentCSS['left']) && $parentCSS['left'] != '' ? round($parentCSS['left']) : 0);
                        } elseif(strpos($parentDiv->getAttribute('class'), 'insert_box_div') !== false && strpos($parentDiv->getAttribute('class'), 'dynamic_border') === false) {
                            $parentCSS = $utility->parse_css($parentDiv->getAttribute('style'));
                            $addtop = (isset($parentCSS['top']) && $parentCSS['top'] != '' ? round($parentCSS['top']) : 0);
                            $addleft = (isset($parentCSS['left']) && $parentCSS['left'] != '' ? round($parentCSS['left']) : 0);
                        } elseif(strpos($parentDiv->getAttribute('class'), 'insert_box_div') !== false  && strpos($parentDiv->getAttribute('class'), 'dynamic_border') !== false) {
                            $parentCSS = $utility->parse_css($parentDiv->getAttribute('style'));
                            $addtop = (isset($parentCSS['top']) && $parentCSS['top'] != '' ? round($parentCSS['top']) : 0);
                            $addleft = (isset($parentCSS['left']) && $parentCSS['left'] != '' ? round($parentCSS['left']) : 0);
                        }
                        //Fixing Position when field is inside the borderbox or textbox END

                        $topPosition = (isset($arrCSS['top']) && $arrCSS['top'] != '' ? round($arrCSS['top'])+$addtop : 0);
                        $leftPosition = (isset($arrCSS['left']) && $arrCSS['left'] != '' ? round($arrCSS['left'])+$addleft : 0);
                        array_push($arrayPush, ['top' => $topPosition, 'left' => $leftPosition, 'dynamic_id' => $findValue->dynamic_id]);
                    }
                    if(!empty($arrayPush)) {
                        sort($arrayPush);
                        array_push($dynamicElements, $arrayPush);
                    }
                }

                $docFields = [];
                foreach($dynamicElements as $eachPageKey => $eachPageValue) {
                    foreach($eachPageValue as $eachElementKey => $eachElementValue) {
                        $eachDynamic_id = $eachElementValue['dynamic_id'];
                        $mainDiv = $html->find('[dynamic_id="'.$eachElementValue['dynamic_id'].'"]', 0);
                        $findValue = $mainDiv->find('.text', 0);
                        //getting document text fields
                        if(strpos($findValue->getAttribute('class'), 'documentField') !== false) {
                            if($findValue->selectedtype != '0') {
                                if($findValue->find('h4', 0) && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                    $docFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                } elseif($findValue->find('p', 0) && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                    $docFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                } elseif(!isset($docFields[$findValue->selectedtype])) {
                                    $docFields[$findValue->selectedtype] = '';
                                }
                                
                                if(strpos($mainDiv->getAttribute('class'), 'relationDisable') !== false && (!isset($docFields[$findValue->selectedtype]))) {
                                    $docFields[$findValue->selectedtype] = '';
                                }
                            }   //not equal condition ends here
                        }   //getting document text fields ends here
                        //getting custom text fields
                        if(strpos($findValue->getAttribute('class'), 'field_box_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'datepickerfields_new') === false) {
                            $docFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                        }
                        
                        if(strpos($findValue->getAttribute('class'), 'field_box_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'datepickerfields_new') === false && $findValue->currentmonth_num) {
                            $docFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                        }
                        //getting datepicker fields
                        if(strpos($findValue->getAttribute('class'), 'field_box_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'datepickerfields_new') !== false && $findValue->recipientselected == 'Me') {
                            $docFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                        }

                        //getting document checkbox elements
                        if(strpos($findValue->getAttribute('class'), 'documentFieldCheckbox') !== false) {
                            //all values of checkboxes are showing
                            if(strpos($findValue->find('.check_icon', 0)->getAttribute('style'), 'visible') !== false || strpos($findValue->getAttribute('class'), 'isChecked') !== false) {
                                $docFields[$findValue->fieldlabelname] = 'Yes';
                            } else {
                                $docFields[$findValue->fieldlabelname] = 'No';
                            }
                        }   //getting document checkbox elements ends here
                        //getting custom checkbox elements
                        if(strpos($findValue->getAttribute('class'), 'check_box_popupcontainer') !== false && strpos($mainDiv->getAttribute('class'), 'chechBoxCustom') !== false && $findValue->recipientselected == 'Me') {
                            if(strpos($findValue->find('.check_icon', 0)->getAttribute('style'), 'visible')) {
                                $docFields[$findValue->fieldlabelname] = 'Yes';
                            } else {
                                $docFields[$findValue->fieldlabelname] = 'No';
                            }
                        }

                        //getting document droplist elements
                        if(strpos($findValue->getAttribute('class'), 'documentFieldDroplist') !== false) {
                            if($findValue->find('span.texthere', 0)) {
                                $docFields[$findValue->dropdownlabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                            } elseif($findValue->find('p', 0)) {
                                $docFields[$findValue->dropdownlabel] = trim($findValue->find('p', 0)->plaintext);
                            }
                        }   //getting document droplist elements ends here
                        //getting custom droplist elements
                        if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && $findValue->recipientselected == 'Me') {
                            if($findValue->find('span.texthere', 0)) {
                                $docFields[$findValue->dropdownlabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                            } elseif($findValue->find('p', 0)) {
                                $docFields[$findValue->dropdownlabel] = trim($findValue->find('p', 0)->plaintext);
                            }
                        }
                    }
                }

                //document tags names showing and its loop starting
                foreach($html->find('.dynamicTag') as $findTagKey => $findTagValue) {
                    if(strpos($findTagValue->getAttribute('class'), 'documenttagName') !== false) {
                        $docFields[$findTagValue->tagname] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? trim($findTagValue->plaintext) : '');
                    }
                }
                //document tags names showing and its loop ending

                if(!empty($docFields)) {
                    //showing alphbats order to show document fields data
                    ksort($docFields);
                    $responseArray['document_fields'] = $docFields;
                    //$responseArray['document_fields'] = $docFields;
                }
            }

            //basic information of sender and account details starting
            $senderData = Offersentdetails::where('offer_send_details.offer_sent_id', $document_id)->join('offer_sent', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')->select('offer_send_details.user_details')->where('offer_send_details.is_sender', 1)->where('offer_sent.sender_id', $user_id)->first();

            if($senderData) {
                $senderDetails = $accountDetails = [];
                $senderUserDetails = Tcrypt::decrypter($senderData['user_details']);
                $senderUserDetailsJsonDecode = json_decode($senderUserDetails, true);

                //sender details information starting
                //for regular contract sender use full_name key and for online contract sender use first_name key
                $senderDetails['name'] = (isset($senderUserDetailsJsonDecode['full_name']) && $senderUserDetailsJsonDecode['full_name'] != '' ? trim($senderUserDetailsJsonDecode['full_name']) : (isset($senderUserDetailsJsonDecode['first_name']) && $senderUserDetailsJsonDecode['first_name'] != '' ? trim($senderUserDetailsJsonDecode['first_name']) : ''));
                $senderDetails['email'] = (isset($senderUserDetailsJsonDecode['email']) && $senderUserDetailsJsonDecode['email'] != '' ? trim(preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $senderUserDetailsJsonDecode['email'])) : '');

                $userCustomFields = (isset($senderUserDetailsJsonDecode['user_customfields']) && $senderUserDetailsJsonDecode['user_customfields'] != '' ? json_decode($senderUserDetailsJsonDecode['user_customfields'], true) : []);
                if(!empty($userCustomFields)) {
                    foreach($userCustomFields as $userCustomFldkey => $userCustomFldValue) {
                        $senderDetails[trim($userCustomFldkey)] = (isset($userCustomFldValue) && $userCustomFldValue != '' ? trim($userCustomFldValue) : '');
                    }
                }
                $responseArray['sender_details'] = $senderDetails;
                //sender details information ending

                //account details information starting
                $accountDetails['company'] = (isset($senderUserDetailsJsonDecode['company']) && $senderUserDetailsJsonDecode['company'] != '' ? trim($senderUserDetailsJsonDecode['company']) : '');
                $accountDetails['reg_no'] = (isset($senderUserDetailsJsonDecode['reg_no']) && $senderUserDetailsJsonDecode['reg_no'] != '' ? trim($senderUserDetailsJsonDecode['reg_no']) : '');
                $accountDetails['address'] = (isset($senderUserDetailsJsonDecode['address']) && $senderUserDetailsJsonDecode['address'] != '' ? trim($senderUserDetailsJsonDecode['address']) : '');
                $accountDetails['phone_no'] = (isset($senderUserDetailsJsonDecode['mobile']) && $senderUserDetailsJsonDecode['mobile'] != '' ? trim($senderUserDetailsJsonDecode['mobile']) : '');
                $accountDetails['zipcode'] = (isset($senderUserDetailsJsonDecode['zipcode']) && $senderUserDetailsJsonDecode['zipcode'] != '' ? trim($senderUserDetailsJsonDecode['zipcode']) : '');
                $accountDetails['city'] = (isset($senderUserDetailsJsonDecode['city']) && $senderUserDetailsJsonDecode['city'] != '' ? trim($senderUserDetailsJsonDecode['city']) : '');

                $responseArray['account_details'] = $accountDetails;
                //account details information ending
            }
            //basic information of sender and account details ending

            //basic information of document details starting
            if($offerSentContent) {
                $uniqueId = Offersentdetails::where('offer_send_details.offer_sent_id', $document_id)->join('offer_sent', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')->select('offer_send_details.unique_id')->where('offer_send_details.is_sender', 0)->where('offer_sent.sender_id', $user_id)->first();
                $documentDetails = [];
                //isset($offerSentContent['visible_name']) && 
                $documentDetails['template_name'] = ($offerSentContent['visible_name'] != '' ? trim(Tcrypt::decrypter($offerSentContent['visible_name'])) : trim(Tcrypt::decrypter($offerSentContent['name'])));
                $documentDetails['document_id'] = $offerSentContent['id'];
                $documentDetails['template_id'] = $offerSentContent['offer_id'];
                $documentDetails['language'] = (isset($offerSentContent['language_id']) && $offerSentContent['language_id'] != '' ? $utility->languageName($offerSentContent['language_id']) : '');
                $documentDetails['sent_date'] = (isset($offerSentContent['created_date']) && $offerSentContent['created_date'] != '' && $offerSentContent['created_date'] != '0000-00-00 00:00:00' ? trim($offerSentContent['created_date']) : '');
                $documentDetails['signed_date'] = (isset($offerSentContent['signed_date']) && $offerSentContent['signed_date'] != '' && $offerSentContent['signed_date'] != '0000-00-00 00:00:00' ? trim($offerSentContent['signed_date']) : '');
                $documentDetails['due_date'] = (isset($offerSentContent['due_date']) && $offerSentContent['due_date'] != '' && $offerSentContent['due_date'] != '0000-00-00 00:00:00' ? trim(date('Y-m-d', strtotime($offerSentContent['due_date']))) : '');
                $documentDetails['status'] = (isset($offerSentContent['offer_status']) ? $utility->offerStatusName($offerSentContent['offer_status']) : '');
                $documentDetails['pdf'] = $domain_name.'avtal/downloadpdf/'.$document_id.'/'.$uniqueId['unique_id'];

                $responseArray['document_details'] = $documentDetails;
            }
            //basic information of document details ending
            return response()->json(['status' => 'success', 'result' => $responseArray], 200, ['Content-Type' => 'application/json; charset=UTF-8'], JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
        } else {
            return Response::json(['status' => 'error', 'result' => 'No record(s) found']);
        }
    }

    public function getChangelogic() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');
        $storeFieldsObjDB = false;

        //access_token validation starting
        if(isset($data['access_token']) && $data['access_token'] != '' && !isset($custom_data['user_id']) ) {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
        //access_token validation ending

        //contract_id validation starting
        if( isset($data['document_id']) && $data['document_id'] != '' ) {
            $document_id = $data['document_id'];
        }else if( isset($custom_data['sent_id']) && $custom_data['sent_id'] != '' ) {
            $document_id = $custom_data['sent_id'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'document_id is missing']);
        }

        if(isset($custom_data['user_id'])){
            $user_id = $custom_data['user_id'];
            $storeFieldsObjDB = true;
        }else{
            $user_id = $utility->getUserIdByAuthToken($access_token);
        }
        $parent_id = $utility->getParent($user_id);
        if($utility->isParent($user_id) == 1) {
            $allUserIds = $utility->getSubusers($parent_id);
        } else {
            $allUserIds = [$user_id];
        }
        $userSettings = $utility->getUserSettings($parent_id);

        if($utility->checkAdminStripe($user_id) && !isset($custom_data['user_id']) ) {
            return Response::json(['status' => 'error', 'result' => 'Account is locked make payment in order to continue Simplesign']);
        }

        $contractData = Offersentdetails::where('offer_send_details.offer_sent_id', $document_id)->join('offer_sent', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')->select('offer_sent.language_id', 'offer_send_details.id AS detail_id', 'offer_send_details.offer_sent_id', 'offer_send_details.user_details', 'offer_send_details.offer_status', 'offer_send_details.req_attached', 'offer_send_details.document_read_date', 'offer_send_details.signed_date', 'offer_send_details.authentication_method', 'offer_send_details.role', 'offer_send_details.invitation_type', 'offer_send_details.invitation_order', 'offer_send_details.offer_confirmation', 'offer_send_details.id_attachments', 'offer_sent.content')->where('offer_send_details.is_sender', 0)->whereIn('offer_sent.sender_id', $allUserIds)->get()->toArray();

        if($contractData) {
            $responseArray = $senderInfo = $contractDetails =  [];
            foreach($contractData as $contractDataKey => $contractDataValue) {
                $languageId = $contractDataValue['language_id'];

                $peopleFields = $organizationFields = $details = [];
                $nameExplode = '';
                
                $recipientUserDetails = Tcrypt::decrypter($contractDataValue['user_details']);
                $recipientUserDetailsJsonDecode = json_decode($recipientUserDetails, true);

                //$peopleFields['detail_id'] = $contractDataValue['detail_id'];
                //$peopleFields['offer_sent_id'] = $contractDataValue['offer_sent_id'];
                $userRole = (isset($recipientUserDetailsJsonDecode['recrolename']) && $recipientUserDetailsJsonDecode['recrolename'] != '' ? $recipientUserDetailsJsonDecode['recrolename'] : (isset($recipientUserDetailsJsonDecode['partyname']) && $recipientUserDetailsJsonDecode['partyname'] != '' ? $recipientUserDetailsJsonDecode['partyname'] : ''));

                //basic information of recipient starting
                $recipientFieldsRolesTabFields = (isset($recipientUserDetailsJsonDecode['Recipient_fields_roles_tab_fields']) && !empty($recipientUserDetailsJsonDecode['Recipient_fields_roles_tab_fields']) ? json_decode($recipientUserDetailsJsonDecode['Recipient_fields_roles_tab_fields'], true) : '');
                $recinfoFields = ($recipientFieldsRolesTabFields != '' ? $recipientFieldsRolesTabFields['recinfo_fields'] : '');

                if(isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '') {
                    //for regular contract recipient use full_name key

                    if(isset($recinfoFields['last_name']) && $recinfoFields['last_name'] == 1) {
                        $peopleFields['first_name'] = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? $recipientUserDetailsJsonDecode['full_name'] : '');
                        $peopleFields['last_name'] = (isset($recipientUserDetailsJsonDecode['last_name']) && $recipientUserDetailsJsonDecode['last_name'] != '' ? $recipientUserDetailsJsonDecode['last_name'] : '');
                    } else {
                        $nameExplode = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($recipientUserDetailsJsonDecode['full_name'])) : '');
                        $peopleFields['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                        $peopleFields['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                    }
                } elseif(isset($recipientUserDetailsJsonDecode['name']) && $recipientUserDetailsJsonDecode['name'] != '') {
                    //for online contract recipient use name key
                    $nameExplode = (isset($recipientUserDetailsJsonDecode['name']) && $recipientUserDetailsJsonDecode['name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($recipientUserDetailsJsonDecode['name'])) : '');
                    $peopleFields['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                    $peopleFields['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                }
                $peopleFields['email'] = (isset($recipientUserDetailsJsonDecode['email']) && $recipientUserDetailsJsonDecode['email'] != '' ? trim(preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $recipientUserDetailsJsonDecode['email'])) : '');
                $peopleFields['personal_no'] = (isset($recipientUserDetailsJsonDecode['personnr']) && $recipientUserDetailsJsonDecode['personnr'] != '' ? (strlen(trim($recipientUserDetailsJsonDecode['personnr'])) == 12 || strlen(trim($recipientUserDetailsJsonDecode['personnr'])) == 13 ? substr(trim($recipientUserDetailsJsonDecode['personnr']), 2) : trim($recipientUserDetailsJsonDecode['personnr'])) : '');
                $peopleFields['mobile'] = (isset($recipientUserDetailsJsonDecode['mobile']) && $recipientUserDetailsJsonDecode['mobile'] != '' ? trim($recipientUserDetailsJsonDecode['mobile']) : '');
                $peopleFields['address'] = (isset($recipientUserDetailsJsonDecode['address']) && $recipientUserDetailsJsonDecode['address'] != '' ? trim($recipientUserDetailsJsonDecode['address']) : '');
                $peopleFields['city'] = (isset($recipientUserDetailsJsonDecode['city']) && $recipientUserDetailsJsonDecode['city'] != '' ? trim($recipientUserDetailsJsonDecode['city']) : '');
                $peopleFields['zipcode'] = (isset($recipientUserDetailsJsonDecode['zipcode']) && $recipientUserDetailsJsonDecode['zipcode'] != '' ? trim($recipientUserDetailsJsonDecode['zipcode']) : (isset($recipientUserDetailsJsonDecode['zip']) && $recipientUserDetailsJsonDecode['zip'] != '' ? trim($recipientUserDetailsJsonDecode['zip']) : ''));
                //basic information of recipient ending

                //organization information of recipient starting
                if(isset($recipientUserDetailsJsonDecode['organization_fields'])) {
                    $orgFields = json_decode($recipientUserDetailsJsonDecode['organization_fields'], true);
                    foreach($orgFields as $orgFldsKey => $orgFldsValue) {
                        $orgFldsValue['orgFieldName'] = str_replace('name', 'organization_name', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('org_no', 'organization_no', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('phone', 'organization_phone', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('address', 'organization_address', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('city', 'organization_city', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('zipcode', 'organization_zipcode', $orgFldsValue['orgFieldName']);
                        $organizationFields[$orgFldsValue['orgFieldName']] = $orgFldsValue['orgFieldValue'];
                    }
                } else {
                    if(isset($recipientUserDetailsJsonDecode['org_name']) && $recipientUserDetailsJsonDecode['org_name'] != '') {
                        $organizationFields['organization_name'] = $recipientUserDetailsJsonDecode['org_name'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_reg_no']) && $recipientUserDetailsJsonDecode['org_reg_no'] != '') {
                        $organizationFields['organization_no'] = $recipientUserDetailsJsonDecode['org_reg_no'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_mobile']) && $recipientUserDetailsJsonDecode['org_mobile'] != '') {
                        $organizationFields['organization_phone'] = $recipientUserDetailsJsonDecode['org_mobile'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_address']) && $recipientUserDetailsJsonDecode['org_address'] != '') {
                        $organizationFields['organization_address'] = $recipientUserDetailsJsonDecode['org_address'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_city']) && $recipientUserDetailsJsonDecode['org_city'] != '') {
                        $organizationFields['organization_city'] = $recipientUserDetailsJsonDecode['org_city'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_zip']) && $recipientUserDetailsJsonDecode['org_zip'] != '') {
                        $organizationFields['organization_zipcode'] = $recipientUserDetailsJsonDecode['org_zip'];
                    }
                }
                //organization information of recipient ending

                //people information of new fields starting
                if(isset($recipientUserDetailsJsonDecode['extra_fields']) && !empty($recipientUserDetailsJsonDecode['extra_fields'])) {
                    $recipientFieldsWithoutValue = (isset($recipientUserDetailsJsonDecode['recipientfields']) && !empty($recipientUserDetailsJsonDecode['recipientfields']) ? json_decode($recipientUserDetailsJsonDecode['recipientfields'], true) : []);

                    $extraFields = (isset($recipientUserDetailsJsonDecode['extra_fields']) && !empty($recipientUserDetailsJsonDecode['extra_fields']) ? json_decode($recipientUserDetailsJsonDecode['extra_fields'], true) : []);
                    $intersect = array_uintersect($extraFields, $recipientFieldsWithoutValue, function($val1, $val2) {
                        return strcmp($val1['fieldName'], $val2['fieldName']);
                    });

                    $intersect = array_values($intersect);
                    if(!empty($intersect)) {
                        foreach($intersect as $extraFldKey => $extraFldValue) {
                            $peopleFields[$extraFldValue['fieldName']] = $extraFldValue['fieldValue'];
                        }
                    }
                }
                //people information of new fields ending

                //organization information of new fields starting
                if(isset($recipientUserDetailsJsonDecode['org_extra_fields']) && !empty($recipientUserDetailsJsonDecode['org_extra_fields'])) {
                    $orgExtraFields = json_decode($recipientUserDetailsJsonDecode['org_extra_fields'], true);
                    if(!empty($orgExtraFields)) {
                        foreach($orgExtraFields as $orgExtraFldKey => $orgExtraFldValue) {
                            $organizationFields[$orgExtraFldValue['fieldName']] = $orgExtraFldValue['fieldValue'];
                        }
                    }
                }
                //organization information of new fields ending

                //organization information of fields which are placed at document starting
                $content = Tcrypt::decrypter($contractDataValue['content']);
                if($content != '') {
                    $html = new \Htmldom($content);
                    foreach($html->find('.text') as $findKey => $findValue) {
                        //codition for regular contract starting
                        if(isset($recipientUserDetailsJsonDecode['id']) && $recipientUserDetailsJsonDecode['id'] == $findValue->recipientselectedid) {
                            if(strpos($findValue->getAttribute('class'), 'peopleNewField') !== false) {
                                if($findValue->find('h4', 0)) {
                                    $peopleFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                } else {
                                    if($findValue->find('p', 0)) {
                                        $peopleFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                    }
                                }
                            } if(strpos($findValue->getAttribute('class'), 'organizationNewField') !== false) {
                                if($findValue->find('h4', 0)) {
                                    $organizationFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                } else {
                                    if($findValue->find('p', 0)) {
                                        $organizationFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                    }
                                }
                            }
                            //codition for regular contract ending
                        } else {
                            //codition for online contract starting
                            if($userRole == $findValue->parent()->parent()->whowillfill) {
                                if(strpos($findValue->getAttribute('class'), 'peopleNewField') !== false) {
                                    if($findValue->find('h4', 0)) {
                                        $peopleFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                    } else {
                                        //right now paragraph tag is showing and will be replaced by h4 near future starting
                                        if($findValue->find('p', 0)) {
                                            $peopleFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                        }
                                        //right now paragraph tag is showing and will be replaced by h4 near future ending
                                    }
                                } if(strpos($findValue->getAttribute('class'), 'organizationNewField') !== false) {
                                    if($findValue->find('h4', 0)) {
                                        $organizationFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                    } else {
                                        //right now paragraph tag is showing and will be replaced by h4 near future starting
                                        if($findValue->find('p', 0)) {
                                            $organizationFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                        }
                                        //right now paragraph tag is showing and will be replaced by h4 near future ending
                                    }
                                }
                            }
                            //codition for online contract ending
                        }
                    }
                }
                //organization information of fields which are placed at document ending

                //basic information of document settings starting
                if(isset($recipientUserDetailsJsonDecode['details_fields'])) {
                    $detailsFields = json_decode($recipientUserDetailsJsonDecode['details_fields'], true);
                    foreach($detailsFields as $orgFldsKey => $orgFldsValue) {
                        $details[$orgFldsValue['detailsFieldName']] = $orgFldsValue['detailsFieldValue'];
                    }
                } else {
                    $details['recipient_role'] = (isset($recipientUserDetailsJsonDecode['recrolename']) && $recipientUserDetailsJsonDecode['recrolename'] != '' ? $recipientUserDetailsJsonDecode['recrolename'] : (isset($recipientUserDetailsJsonDecode['partyname']) && $recipientUserDetailsJsonDecode['partyname'] != '' ? $recipientUserDetailsJsonDecode['partyname'] : ''));

                    if($contractDataValue['role'] == 2) {
                        $contractDataValue['authentication_method'] = 8;
                    }
                    $details['authentication'] = $utility->authenticationMethodName($contractDataValue['authentication_method']);
                    if(isset($contractDataValue['invitation_type']) && $contractDataValue['invitation_type'] != '') {
                        $details['invitation_type'] = $utility->invitationTypeName($contractDataValue['invitation_type']);
                    }
                    if($contractDataValue['invitation_order'] != 0) {
                        $details['invitation_order'] = $contractDataValue['invitation_order'];
                    }
                    if(isset($contractDataValue['offer_confirmation']) && $contractDataValue['offer_confirmation'] != '') {
                        $details['confirmation'] = $utility->offerConfirmationName($contractDataValue['offer_confirmation']);
                    }
                    $details['id_attachment'] = $utility->idAttachmentName($contractDataValue['id_attachments']);
                }
                $details['request_attachment'] = ($contractDataValue['req_attached'] != '' ? 'yes' : 'no');
                if($contractDataValue['document_read_date'] != '' && $contractDataValue['document_read_date'] != '0000-00-00 00:00:00') {
                    $details['last_viewing_date'] = ($contractDataValue['document_read_date'] != '' ? $contractDataValue['document_read_date'] : '');
                }
                $details['signed_date'] = ($contractDataValue['signed_date'] != '' && $contractDataValue['signed_date'] != '0000-00-00 00:00:00' ? $contractDataValue['signed_date'] : '');
                $details['status'] = (isset($contractDataValue['offer_status']) != '' ? $utility->offerStatusName($contractDataValue['offer_status']) : '');

                if(!empty($organizationFields)) {
                    $peopleAndDetailsArray = ['people_fields' => $peopleFields, 'organization_fields' => $organizationFields, 'details' => $details];
                } else {
                    $peopleAndDetailsArray = ['people_fields' => $peopleFields, 'details' => $details];
                }
                array_push($responseArray, $peopleAndDetailsArray);
                //basic information of document settings ending
            }

            $offerSentContent = Offersent::where('id', $document_id)->whereIn('sender_id', $allUserIds)->select('content', 'visible_name', 'name', 'language_id', 'id', 'offer_id', 'created_date', 'offer_status', 'signed_date', 'due_date')->first();
            $content = Tcrypt::decrypter($offerSentContent['content']);
            if($content != '') {
                //getGetdocumentinfoxml function of garda template response
                $html = new \Htmldom($content);
                $dynamicElements = [];
                foreach($html->find('.template_container') as $temConKey => $temConValue) {
                    $arrayPush = [];
                    foreach($temConValue->find('.formElement') as $findKey => $findValue) {

                        $elementStyle = $findValue->getAttribute('style');
                        $arrCSS = $utility->parse_css($elementStyle);
                        $parentDiv = $findValue->parent()->parent();

                        //Fixing Position when field is inside the borderbox or textbox START
                        $addtop = 0;
                        $addleft = 0;
                        if(strpos($parentDiv->getAttribute('class'), 'dynamic_border') !== false && strpos($parentDiv->getAttribute('class'), 'insert_box_div') === false) {
                            $parentCSS = $utility->parse_css($parentDiv->getAttribute('style'));
                            $addtop = (isset($parentCSS['top']) && $parentCSS['top'] != '' ? round($parentCSS['top']) : 0);
                            $addleft = (isset($parentCSS['left']) && $parentCSS['left'] != '' ? round($parentCSS['left']) : 0);
                        } elseif(strpos($parentDiv->getAttribute('class'), 'insert_box_div') !== false && strpos($parentDiv->getAttribute('class'), 'dynamic_border') === false) {
                            $parentCSS = $utility->parse_css($parentDiv->getAttribute('style'));
                            $addtop = (isset($parentCSS['top']) && $parentCSS['top'] != '' ? round($parentCSS['top']) : 0);
                            $addleft = (isset($parentCSS['left']) && $parentCSS['left'] != '' ? round($parentCSS['left']) : 0);
                        } elseif(strpos($parentDiv->getAttribute('class'), 'insert_box_div') !== false  && strpos($parentDiv->getAttribute('class'), 'dynamic_border') !== false) {
                            $parentCSS = $utility->parse_css($parentDiv->getAttribute('style'));
                            $addtop = (isset($parentCSS['top']) && $parentCSS['top'] != '' ? round($parentCSS['top']) : 0);
                            $addleft = (isset($parentCSS['left']) && $parentCSS['left'] != '' ? round($parentCSS['left']) : 0);
                        }
                        //Fixing Position when field is inside the borderbox or textbox END

                        $topPosition = (isset($arrCSS['top']) && $arrCSS['top'] != '' ? round($arrCSS['top'])+$addtop : 0);
                        $leftPosition = (isset($arrCSS['left']) && $arrCSS['left'] != '' ? round($arrCSS['left'])+$addleft : 0);
                        array_push($arrayPush, ['top' => $topPosition, 'left' => $leftPosition, 'dynamic_id' => $findValue->dynamic_id]);
                    }
                    if(!empty($arrayPush)) {
                        sort($arrayPush);
                        array_push($dynamicElements, $arrayPush);
                    }
                }

                $docFields = [];
                foreach($dynamicElements as $eachPageKey => $eachPageValue) {
                    foreach($eachPageValue as $eachElementKey => $eachElementValue) {
                        $eachDynamic_id = $eachElementValue['dynamic_id'];
                        $mainDiv = $html->find('[dynamic_id="'.$eachElementValue['dynamic_id'].'"]', 0);
                        $findValue = $mainDiv->find('.text', 0);
                        if(strpos($findValue->getAttribute('class'), 'documentFieldText') !== false || strpos($findValue->getAttribute('class'), 'documentFieldDate') !== false) {
                            if($findValue->selectedtype != '0') {
                                if($findValue->find('h4', 0) && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                    $docFields[$findValue->selectedtype] = $utility->convertDateMonthNameToInteger($languageId, trim($findValue->find('h4', 0)->plaintext));
                                } elseif($findValue->find('p', 0) && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                    $docFields[$findValue->selectedtype] = $utility->convertDateMonthNameToInteger($languageId, trim($findValue->find('p', 0)->plaintext));
                                } elseif(!isset($docFields[$findValue->selectedtype])) {
                                    $docFields[$findValue->selectedtype] = '';
                                }
                                
                                if(strpos($mainDiv->getAttribute('class'), 'relationDisable') !== false && (!isset($docFields[$findValue->selectedtype]))) {
                                    $docFields[$findValue->selectedtype] = '';
                                }
                            }   //not equal condition ends here
                        }
                        //getting custom text fields
                        try {
                            if(strpos($findValue->getAttribute('class'), 'field_box_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'datepickerfields_new') === false) {
                                $docFields[$findValue->selectedtype] = $utility->convertDateMonthNameToInteger($languageId, trim($findValue->find('h4', 0)->plaintext));
                            }
                        } catch(\Exception $e) {}

                        //getting datepicker fields
                        try {
                            if(strpos($findValue->getAttribute('class'), 'field_box_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'datepickerfields_new') !== false && $findValue->recipientselected == 'Me') {
                                $docFields[$findValue->selectedtype] = $utility->convertDateMonthNameToInteger($languageId, trim($findValue->find('h4', 0)->plaintext));
                            }
                        } catch(\Exception $e) {}

                        //getting document checkbox elements
                        if(strpos($findValue->getAttribute('class'), 'documentFieldCheckbox') !== false) {
                            //all values of checkboxes are showing
                            if(strpos($findValue->find('.check_icon', 0)->getAttribute('style'), 'visible') !== false || strpos($findValue->getAttribute('class'), 'isChecked') !== false) {
                                $docFields[$findValue->fieldlabelname] = 'Yes';
                            } else {
                                $docFields[$findValue->fieldlabelname] = 'No';
                            }
                        }   //getting document checkbox elements ends here
                        //getting custom checkbox elements
                        if(strpos($findValue->getAttribute('class'), 'check_box_popupcontainer') !== false && strpos($mainDiv->getAttribute('class'), 'chechBoxCustom') !== false && $findValue->recipientselected == 'Me') {
                            if(strpos($findValue->find('.check_icon', 0)->getAttribute('style'), 'visible')) {
                                $docFields[$findValue->fieldlabelname] = 'Yes';
                            } else {
                                $docFields[$findValue->fieldlabelname] = 'No';
                            }
                        }

                        //getting document droplist elements
                        if(strpos($findValue->getAttribute('class'), 'documentFieldDroplist') !== false) {
                            if($findValue->find('span.texthere', 0)) {
                                $docFields[$findValue->dropdownlabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                            } elseif($findValue->find('p', 0)) {
                                $docFields[$findValue->dropdownlabel] = trim($findValue->find('p', 0)->plaintext);
                            }
                        }   //getting document droplist elements ends here
                        //getting custom droplist elements
                        if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && $findValue->recipientselected == 'Me') {
                            if($findValue->find('span.texthere', 0)) {
                                $docFields[$findValue->dropdownlabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                            } elseif($findValue->find('p', 0)) {
                                $docFields[$findValue->dropdownlabel] = trim($findValue->find('p', 0)->plaintext);
                            }
                        }
                    }
                }

                //document tags names showing and its loop starting
                foreach($html->find('.dynamicTag') as $findTagKey => $findTagValue) {
                    if(strpos($findTagValue->getAttribute('class'), 'documenttagName') !== false) {
                        $docFields[$findTagValue->tagname] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, trim($findTagValue->plaintext)) : '');
                    }
                }
                //document tags names showing and its loop ending

                if(!empty($docFields)) {
                    //showing alphbats order to show document fields data
                    ksort($docFields);
                    $responseArray['document_fields'] = $docFields;
                }
            }

            //basic information of sender and account details starting
            $senderData = Offersentdetails::where('offer_send_details.offer_sent_id', $document_id)->join('offer_sent', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')->select('offer_send_details.user_details')->where('offer_send_details.is_sender', 1)->whereIn('offer_sent.sender_id', $allUserIds)->first();
            if($senderData) {
                $senderDetails = $accountDetails = [];
                $senderUserDetails = Tcrypt::decrypter($senderData['user_details']);
                $senderUserDetailsJsonDecode = json_decode($senderUserDetails, true);

                //sender details information starting
                //for regular contract sender use full_name key and for online contract sender use first_name key
                $senderDetails['name'] = (isset($senderUserDetailsJsonDecode['full_name']) && $senderUserDetailsJsonDecode['full_name'] != '' ? trim($senderUserDetailsJsonDecode['full_name']) : (isset($senderUserDetailsJsonDecode['first_name']) && $senderUserDetailsJsonDecode['first_name'] != '' ? trim($senderUserDetailsJsonDecode['first_name']) : ''));
                $senderDetails['email'] = (isset($senderUserDetailsJsonDecode['email']) && $senderUserDetailsJsonDecode['email'] != '' ? trim(preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $senderUserDetailsJsonDecode['email'])) : '');

                $userCustomFields = (isset($senderUserDetailsJsonDecode['user_customfields']) && $senderUserDetailsJsonDecode['user_customfields'] != '' ? json_decode($senderUserDetailsJsonDecode['user_customfields'], true) : []);
                if(!empty($userCustomFields)) {
                    foreach($userCustomFields as $userCustomFldkey => $userCustomFldValue) {
                        $senderDetails[trim($userCustomFldkey)] = (isset($userCustomFldValue) && $userCustomFldValue != '' ? trim($userCustomFldValue) : '');
                    }
                }
                $responseArray['sender_details'] = $senderDetails;
                //sender details information ending

                //account details information starting
                $accountDetails['company'] = (isset($senderUserDetailsJsonDecode['company']) && $senderUserDetailsJsonDecode['company'] != '' ? trim($senderUserDetailsJsonDecode['company']) : '');
                $accountDetails['reg_no'] = (isset($senderUserDetailsJsonDecode['reg_no']) && $senderUserDetailsJsonDecode['reg_no'] != '' ? trim($senderUserDetailsJsonDecode['reg_no']) : '');
                $accountDetails['address'] = (isset($senderUserDetailsJsonDecode['address']) && $senderUserDetailsJsonDecode['address'] != '' ? trim($senderUserDetailsJsonDecode['address']) : '');
                $accountDetails['phone_no'] = (isset($senderUserDetailsJsonDecode['mobile']) && $senderUserDetailsJsonDecode['mobile'] != '' ? trim($senderUserDetailsJsonDecode['mobile']) : '');
                $accountDetails['zipcode'] = (isset($senderUserDetailsJsonDecode['zipcode']) && $senderUserDetailsJsonDecode['zipcode'] != '' ? trim($senderUserDetailsJsonDecode['zipcode']) : '');
                $accountDetails['city'] = (isset($senderUserDetailsJsonDecode['city']) && $senderUserDetailsJsonDecode['city'] != '' ? trim($senderUserDetailsJsonDecode['city']) : '');

                $responseArray['account_details'] = $accountDetails;
                //account details information ending
            }
            //basic information of sender and account details ending

            //basic information of document details starting
            if($offerSentContent) {
                $uniqueId = Offersentdetails::where('offer_send_details.offer_sent_id', $document_id)->join('offer_sent', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')->select('offer_send_details.unique_id')->where('offer_send_details.is_sender', 0)->where('offer_sent.sender_id', $user_id)->first();
                $documentDetails = [];
                $documentDetails['template_name'] = ($offerSentContent['visible_name'] != '' ? trim(Tcrypt::decrypter($offerSentContent['visible_name'])) : trim(Tcrypt::decrypter($offerSentContent['name'])));
                $documentDetails['document_id'] = $offerSentContent['id'];
                $documentDetails['template_id'] = $offerSentContent['offer_id'];
                $documentDetails['language'] = (isset($offerSentContent['language_id']) && $offerSentContent['language_id'] != '' ? $utility->languageName($offerSentContent['language_id']) : '');
                $documentDetails['sent_date'] = (isset($offerSentContent['created_date']) && $offerSentContent['created_date'] != '' && $offerSentContent['created_date'] != '0000-00-00 00:00:00' ? trim($offerSentContent['created_date']) : '');
                $documentDetails['signed_date'] = (isset($offerSentContent['signed_date']) && $offerSentContent['signed_date'] != '' && $offerSentContent['signed_date'] != '0000-00-00 00:00:00' ? trim($offerSentContent['signed_date']) : '');
                $documentDetails['due_date'] = (isset($offerSentContent['due_date']) && $offerSentContent['due_date'] != '' && $offerSentContent['due_date'] != '0000-00-00 00:00:00' ? trim(date('Y-m-d', strtotime($offerSentContent['due_date']))) : '');
                $documentDetails['status'] = (isset($offerSentContent['offer_status']) ? $utility->offerStatusName($offerSentContent['offer_status']) : '');
                $documentDetails['pdf'] = $domain_name.'avtal/downloadpdf/'.$document_id.'/'.$uniqueId['unique_id'];

                $responseArray['document_details'] = $documentDetails;
            }
            //basic information of document details ending
            return response()->json(['status' => 'success', 'result' => $responseArray], 200, ['Content-Type' => 'application/json; charset=UTF-8'], JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
        } else {
            return Response::json(['status' => 'error', 'result' => 'No record(s) found']);
        }
    }

    public function getSpecificdocumentdetailscrive($accessToken='', $offerId='') {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');
        $access_token = '';
        $document_id = 0;

        //access_token validation starting
        if(isset($accessToken) && $accessToken != '') {
            $access_token = $accessToken;
        } else {
            return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
        //access_token validation ending

        //contract_id validation starting
        if(isset($offerId) && $offerId != 0) {
            $document_id = $offerId;
        } else {
            return Response::json(['status' => 'error', 'result' => 'document_id is missing']);
        }

        $user_id = $utility->getUserIdByAuthToken($access_token);
        $parent_id = $utility->getParent($user_id);
        if($utility->isParent($user_id) == 1) {
            $allUserIds = $utility->getSubusers($parent_id);
        } else {
            $allUserIds = [$user_id];
        }
        $userSettings = $utility->getUserSettings($parent_id);
        $getApiHitCount = Userinfo::where('user_id', $parent_id)->select('hit_count')->first();
        $addupdateapiaccesslogs = $utility->addupdateapiaccesslogs($user_id, 'getSpecificdocumentdetailscrive v3', $data, $getApiHitCount['hit_count']);
        if($addupdateapiaccesslogs == 'exceed') {
            $this->apiCallLimitExceedMessage = str_replace('#hitCuntNo', $getApiHitCount['hit_count'], $this->apiCallLimitExceedMessage);
            return Response::json(['status' => 'error', 'result' => $this->apiCallLimitExceedMessage]);
        }

        if($utility->checkAdminStripe($user_id)) {
            return Response::json(['status' => 'error', 'result' => 'Account is locked make payment in order to continue Simplesign']);
        }

        $contractData = Offersentdetails::where('offer_send_details.offer_sent_id', $document_id)->join('offer_sent', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')->select('offer_sent.language_id', 'offer_send_details.id AS detail_id', 'offer_send_details.offer_sent_id', 'offer_send_details.user_details', 'offer_send_details.offer_status', 'offer_send_details.req_attached', 'offer_send_details.document_read_date', 'offer_send_details.signed_date', 'offer_send_details.authentication_method', 'offer_send_details.role', 'offer_send_details.invitation_type', 'offer_send_details.invitation_order', 'offer_send_details.offer_confirmation', 'offer_send_details.id_attachments', 'offer_sent.content')->where('offer_send_details.is_sender', 0)->whereIn('offer_sent.sender_id', $allUserIds)->get()->toArray();
        $offerSentContent = Offersent::where('id', $document_id)->whereIn('sender_id', $allUserIds)->select('content', 'visible_name', 'name', 'language_id', 'id', 'offer_id', 'created_date', 'offer_status', 'signed_date', 'due_date')->first();
        if($contractData) {
            $responseArray = $senderInfo = $contractDetails =  [];
            foreach($contractData as $contractDataKey => $contractDataValue) {
                $languageId = $contractDataValue['language_id'];

                $peopleFields = $organizationFields = $details = [];
                $nameExplode = '';
                
                $recipientUserDetails = Tcrypt::decrypter($contractDataValue['user_details']);
                $recipientUserDetailsJsonDecode = json_decode($recipientUserDetails, true);

                //$peopleFields['detail_id'] = $contractDataValue['detail_id'];
                //$peopleFields['offer_sent_id'] = $contractDataValue['offer_sent_id'];
                $userRole = (isset($recipientUserDetailsJsonDecode['recrolename']) && $recipientUserDetailsJsonDecode['recrolename'] != '' ? $recipientUserDetailsJsonDecode['recrolename'] : (isset($recipientUserDetailsJsonDecode['partyname']) && $recipientUserDetailsJsonDecode['partyname'] != '' ? $recipientUserDetailsJsonDecode['partyname'] : ''));

                //basic information of recipient starting
                $recipientFieldsRolesTabFields = (isset($recipientUserDetailsJsonDecode['Recipient_fields_roles_tab_fields']) && !empty($recipientUserDetailsJsonDecode['Recipient_fields_roles_tab_fields']) ? json_decode($recipientUserDetailsJsonDecode['Recipient_fields_roles_tab_fields'], true) : '');
                $recinfoFields = ($recipientFieldsRolesTabFields != '' ? $recipientFieldsRolesTabFields['recinfo_fields'] : '');

                if(isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '') {
                    //for regular contract recipient use full_name key
                    if((isset($recinfoFields['last_name']) && $recinfoFields['last_name'] == 1) || (isset($recipientUserDetailsJsonDecode['last_name']) && $recipientUserDetailsJsonDecode['last_name'] != '')) {
                        $peopleFields['first_name'] = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? $recipientUserDetailsJsonDecode['full_name'] : '');
                        $peopleFields['last_name'] = (isset($recipientUserDetailsJsonDecode['last_name']) && $recipientUserDetailsJsonDecode['last_name'] != '' ? $recipientUserDetailsJsonDecode['last_name'] : '');
                    } else {
                        $nameExplode = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($recipientUserDetailsJsonDecode['full_name'])) : '');
                        $peopleFields['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                        $peopleFields['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                    }
                } elseif(isset($recipientUserDetailsJsonDecode['name']) && $recipientUserDetailsJsonDecode['name'] != '') {
                    //for online contract recipient use name key
                    $nameExplode = (isset($recipientUserDetailsJsonDecode['name']) && $recipientUserDetailsJsonDecode['name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($recipientUserDetailsJsonDecode['name'])) : '');
                    $peopleFields['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                    $peopleFields['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                }
                $peopleFields['email'] = (isset($recipientUserDetailsJsonDecode['email']) && $recipientUserDetailsJsonDecode['email'] != '' ? trim(preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $recipientUserDetailsJsonDecode['email'])) : '');
                $peopleFields['personal_no'] = (isset($recipientUserDetailsJsonDecode['personnr']) && $recipientUserDetailsJsonDecode['personnr'] != '' ? (strlen(trim($recipientUserDetailsJsonDecode['personnr'])) == 12 || strlen(trim($recipientUserDetailsJsonDecode['personnr'])) == 13 ? substr(trim($recipientUserDetailsJsonDecode['personnr']), 2) : trim($recipientUserDetailsJsonDecode['personnr'])) : '');
                $peopleFields['mobile'] = (isset($recipientUserDetailsJsonDecode['mobile']) && $recipientUserDetailsJsonDecode['mobile'] != '' ? trim($recipientUserDetailsJsonDecode['mobile']) : '');
                $peopleFields['address'] = (isset($recipientUserDetailsJsonDecode['address']) && $recipientUserDetailsJsonDecode['address'] != '' ? trim($recipientUserDetailsJsonDecode['address']) : '');
                $peopleFields['city'] = (isset($recipientUserDetailsJsonDecode['city']) && $recipientUserDetailsJsonDecode['city'] != '' ? trim($recipientUserDetailsJsonDecode['city']) : '');
                $peopleFields['zipcode'] = (isset($recipientUserDetailsJsonDecode['zipcode']) && $recipientUserDetailsJsonDecode['zipcode'] != '' ? trim($recipientUserDetailsJsonDecode['zipcode']) : (isset($recipientUserDetailsJsonDecode['zip']) && $recipientUserDetailsJsonDecode['zip'] != '' ? trim($recipientUserDetailsJsonDecode['zip']) : ''));
                //basic information of recipient ending

                //organization information of recipient starting
                if(isset($recipientUserDetailsJsonDecode['organization_fields'])) {
                    $orgFields = json_decode($recipientUserDetailsJsonDecode['organization_fields'], true);
                    foreach($orgFields as $orgFldsKey => $orgFldsValue) {
                        $orgFldsValue['orgFieldName'] = str_replace('name', 'organization_name', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('org_no', 'organization_no', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('phone', 'organization_phone', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('address', 'organization_address', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('city', 'organization_city', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('zipcode', 'organization_zipcode', $orgFldsValue['orgFieldName']);
                        $organizationFields[$orgFldsValue['orgFieldName']] = $orgFldsValue['orgFieldValue'];
                    }
                } else {
                    if(isset($recipientUserDetailsJsonDecode['org_name']) && $recipientUserDetailsJsonDecode['org_name'] != '') {
                        $organizationFields['organization_name'] = $recipientUserDetailsJsonDecode['org_name'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_reg_no']) && $recipientUserDetailsJsonDecode['org_reg_no'] != '') {
                        $organizationFields['organization_no'] = $recipientUserDetailsJsonDecode['org_reg_no'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_mobile']) && $recipientUserDetailsJsonDecode['org_mobile'] != '') {
                        $organizationFields['organization_phone'] = $recipientUserDetailsJsonDecode['org_mobile'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_address']) && $recipientUserDetailsJsonDecode['org_address'] != '') {
                        $organizationFields['organization_address'] = $recipientUserDetailsJsonDecode['org_address'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_city']) && $recipientUserDetailsJsonDecode['org_city'] != '') {
                        $organizationFields['organization_city'] = $recipientUserDetailsJsonDecode['org_city'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_zip']) && $recipientUserDetailsJsonDecode['org_zip'] != '') {
                        $organizationFields['organization_zipcode'] = $recipientUserDetailsJsonDecode['org_zip'];
                    }
                }
                //organization information of recipient ending

                //people information of new fields starting
                if(isset($recipientUserDetailsJsonDecode['extra_fields']) && !empty($recipientUserDetailsJsonDecode['extra_fields'])) {
                    $recipientFieldsWithoutValue = (isset($recipientUserDetailsJsonDecode['recipientfields']) && !empty($recipientUserDetailsJsonDecode['recipientfields']) ? json_decode($recipientUserDetailsJsonDecode['recipientfields'], true) : []);

                    $extraFields = (isset($recipientUserDetailsJsonDecode['extra_fields']) && !empty($recipientUserDetailsJsonDecode['extra_fields']) ? json_decode($recipientUserDetailsJsonDecode['extra_fields'], true) : []);
                    if($extraFields) {
                        $intersect = array_uintersect($extraFields, $recipientFieldsWithoutValue, function($val1, $val2) {
                            return strcmp($val1['fieldName'], $val2['fieldName']);
                        });
                        $intersect = array_values($intersect);
                    } else {
                        $intersect = [];
                    }

                    if(!empty($intersect)) {
                        foreach($intersect as $extraFldKey => $extraFldValue) {
                            $peopleFields[$extraFldValue['fieldName']] = $extraFldValue['fieldValue'];
                        }
                    }
                }
                //people information of new fields ending

                //organization information of new fields starting
                if(isset($recipientUserDetailsJsonDecode['org_extra_fields']) && !empty($recipientUserDetailsJsonDecode['org_extra_fields'])) {
                    $organizationFieldsWithoutValue = (isset($recipientUserDetailsJsonDecode['organizationfields']) && !empty($recipientUserDetailsJsonDecode['organizationfields']) ? json_decode($recipientUserDetailsJsonDecode['organizationfields'], true) : []);

                    $orgExtraFields = (isset($recipientUserDetailsJsonDecode['org_extra_fields']) && !empty($recipientUserDetailsJsonDecode['org_extra_fields']) ? json_decode($recipientUserDetailsJsonDecode['org_extra_fields'], true) : []);
                    if($orgExtraFields) {
                        $intersectOrg = array_uintersect($orgExtraFields, $organizationFieldsWithoutValue, function($val1, $val2) {
                            return strcmp($val1['fieldName'], $val2['fieldName']);
                        });
                        $intersectOrg = array_values($intersectOrg);
                    } else {
                        $intersectOrg = [];
                    }

                    if(!empty($intersectOrg)) {
                        foreach($intersectOrg as $orgExtraFldKey => $orgExtraFldValue) {
                            $organizationFields[$orgExtraFldValue['fieldName']] = $orgExtraFldValue['fieldValue'];
                        }
                    }
                }
                //organization information of new fields ending

                //organization information of fields which are placed at document starting
                $content = Tcrypt::decrypter($contractDataValue['content']);
                if($content != '') {
                    $html = new \Htmldom($content);
                    foreach($html->find('.text') as $findKey => $findValue) {
                        //codition for regular contract starting
                        if(isset($recipientUserDetailsJsonDecode['id']) && $recipientUserDetailsJsonDecode['id'] == $findValue->recipientselectedid) {
                            if(strpos($findValue->getAttribute('class'), 'peopleNewField') !== false) {
                                if($findValue->find('h4', 0)) {
                                    $peopleFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                } else {
                                    if($findValue->find('p', 0)) {
                                        $peopleFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                    }
                                }
                            } if(strpos($findValue->getAttribute('class'), 'organizationNewField') !== false) {
                                if($findValue->find('h4', 0)) {
                                    $organizationFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                } else {
                                    if($findValue->find('p', 0)) {
                                        $organizationFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                    }
                                }
                            }
                            //codition for regular contract ending
                        } else {
                            //codition for online contract starting
                            if($userRole == $findValue->parent()->parent()->whowillfill) {
                                if(strpos($findValue->getAttribute('class'), 'peopleNewField') !== false) {
                                    if($findValue->find('h4', 0)) {
                                        $peopleFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                    } else {
                                        //right now paragraph tag is showing and will be replaced by h4 near future starting
                                        if($findValue->find('p', 0)) {
                                            $peopleFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                        }
                                        //right now paragraph tag is showing and will be replaced by h4 near future ending
                                    }
                                } if(strpos($findValue->getAttribute('class'), 'organizationNewField') !== false) {
                                    if($findValue->find('h4', 0)) {
                                        $organizationFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                    } else {
                                        //right now paragraph tag is showing and will be replaced by h4 near future starting
                                        if($findValue->find('p', 0)) {
                                            $organizationFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                        }
                                        //right now paragraph tag is showing and will be replaced by h4 near future ending
                                    }
                                }
                            }
                            //codition for online contract ending
                        }
                    }
                }
                //organization information of fields which are placed at document ending

                //basic information of document settings starting
                if(isset($recipientUserDetailsJsonDecode['details_fields'])) {
                    $detailsFields = json_decode($recipientUserDetailsJsonDecode['details_fields'], true);
                    foreach($detailsFields as $orgFldsKey => $orgFldsValue) {
                        $details[$orgFldsValue['detailsFieldName']] = $orgFldsValue['detailsFieldValue'];
                    }
                } else {
                    $details['recipient_role'] = (isset($recipientUserDetailsJsonDecode['recrolename']) && $recipientUserDetailsJsonDecode['recrolename'] != '' ? $recipientUserDetailsJsonDecode['recrolename'] : (isset($recipientUserDetailsJsonDecode['partyname']) && $recipientUserDetailsJsonDecode['partyname'] != '' ? $recipientUserDetailsJsonDecode['partyname'] : ''));

                    if($contractDataValue['role'] == 2) {
                        $contractDataValue['authentication_method'] = 8;
                    }

                    $details['authentication'] = $utility->authenticationMethodName($contractDataValue['authentication_method']);
                    if(isset($contractDataValue['invitation_type']) && $contractDataValue['invitation_type'] != '') {
                        $details['invitation_type'] = $utility->invitationTypeName($contractDataValue['invitation_type']);
                    }
                    if($contractDataValue['invitation_order'] != 0) {
                        $details['invitation_order'] = $contractDataValue['invitation_order'];
                    }
                    if(isset($contractDataValue['offer_confirmation']) && $contractDataValue['offer_confirmation'] != '') {
                        $details['confirmation'] = $utility->offerConfirmationName($contractDataValue['offer_confirmation']);
                    }
                    $details['id_attachment'] = $utility->idAttachmentName($contractDataValue['id_attachments']);
                }
                $details['request_attachment'] = ($contractDataValue['req_attached'] != '' ? 'yes' : 'no');
                if($contractDataValue['document_read_date'] != '' && $contractDataValue['document_read_date'] != '0000-00-00 00:00:00') {
                    $details['last_viewing_date'] = ($contractDataValue['document_read_date'] != '' ? $contractDataValue['document_read_date'] : '');
                }
                $details['signed_date'] = ($contractDataValue['signed_date'] != '' && $contractDataValue['signed_date'] != '0000-00-00 00:00:00' ? $contractDataValue['signed_date'] : '');
                $details['status'] = (isset($contractDataValue['offer_status']) != '' ? $utility->offerStatusName($contractDataValue['offer_status']) : '');
                //this is for rejected to show in sender status
                if($contractDataValue['offer_status'] == 5) {
                    $offerSentContent['offer_status'] = 5;
                } if($contractDataValue['offer_status'] == 6) {
                    $offerSentContent['offer_status'] = 6;
                }

                if(!empty($organizationFields)) {
                    $peopleAndDetailsArray = ['people_fields' => $peopleFields, 'organization_fields' => $organizationFields, 'details' => $details];
                } else {
                    $peopleAndDetailsArray = ['people_fields' => $peopleFields, 'details' => $details];
                }
                array_push($responseArray, $peopleAndDetailsArray);
                //basic information of document settings ending
            }

            $content = Tcrypt::decrypter($offerSentContent['content']);
            if($content != '') {
                //getGetdocumentinfoxml function of garda template response
                $html = new \Htmldom($content);
                $dynamicElements = [];
                foreach($html->find('.template_container') as $temConKey => $temConValue) {
                    $arrayPush = [];
                    foreach($temConValue->find('.formElement') as $findKey => $findValue) {
                                        
                        $elementStyle = $findValue->getAttribute('style');
                        $arrCSS = $utility->parse_css($elementStyle);
                        $parentDiv = $findValue->parent()->parent();

                        //Fixing Position when field is inside the borderbox or textbox START
                        $addtop = 0;
                        $addleft = 0;
                        if(strpos($parentDiv->getAttribute('class'), 'dynamic_border') !== false && strpos($parentDiv->getAttribute('class'), 'insert_box_div') === false) {
                            $parentCSS = $utility->parse_css($parentDiv->getAttribute('style'));
                            $addtop = (isset($parentCSS['top']) && $parentCSS['top'] != '' ? round($parentCSS['top']) : 0);
                            $addleft = (isset($parentCSS['left']) && $parentCSS['left'] != '' ? round($parentCSS['left']) : 0);
                        } elseif(strpos($parentDiv->getAttribute('class'), 'insert_box_div') !== false && strpos($parentDiv->getAttribute('class'), 'dynamic_border') === false) {
                            $parentCSS = $utility->parse_css($parentDiv->getAttribute('style'));
                            $addtop = (isset($parentCSS['top']) && $parentCSS['top'] != '' ? round($parentCSS['top']) : 0);
                            $addleft = (isset($parentCSS['left']) && $parentCSS['left'] != '' ? round($parentCSS['left']) : 0);
                        } elseif(strpos($parentDiv->getAttribute('class'), 'insert_box_div') !== false  && strpos($parentDiv->getAttribute('class'), 'dynamic_border') !== false) {
                            $parentCSS = $utility->parse_css($parentDiv->getAttribute('style'));
                            $addtop = (isset($parentCSS['top']) && $parentCSS['top'] != '' ? round($parentCSS['top']) : 0);
                            $addleft = (isset($parentCSS['left']) && $parentCSS['left'] != '' ? round($parentCSS['left']) : 0);
                        }
                        //Fixing Position when field is inside the borderbox or textbox END

                        $topPosition = (isset($arrCSS['top']) && $arrCSS['top'] != '' ? round($arrCSS['top'])+$addtop : 0);
                        $leftPosition = (isset($arrCSS['left']) && $arrCSS['left'] != '' ? round($arrCSS['left'])+$addleft : 0);
                        array_push($arrayPush, ['top' => $topPosition, 'left' => $leftPosition, 'dynamic_id' => $findValue->dynamic_id]);
                    }
                    if(!empty($arrayPush)) {
                        sort($arrayPush);
                        array_push($dynamicElements, $arrayPush);
                    }
                }

                $docFields = [];
                foreach($dynamicElements as $eachPageKey => $eachPageValue) {
                    foreach($eachPageValue as $eachElementKey => $eachElementValue) {
                        $eachDynamic_id = $eachElementValue['dynamic_id'];
                        $mainDiv = $html->find('[dynamic_id="'.$eachElementValue['dynamic_id'].'"]', 0);
                        if(!$mainDiv->find('.text', 0)) {
                            continue;
                        }
                        $findValue = $mainDiv->find('.text', 0);
                        //getting document text fields
                        if(strpos($findValue->getAttribute('class'), 'documentField') !== false) {
                            if($findValue->selectedtype != '0') {
                                $apiAttributeOrSelectedType = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->selectedtype);
                                if($findValue->find('h4', 0) && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                    $docFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                } elseif($findValue->find('p', 0) && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                    $docFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('p', 0)->plaintext)));
                                } elseif(strpos($mainDiv->getAttribute('class'), 'relationDisable') === false && (!isset($docFields[$findValue->selectedtype]))) {
                                    //comments below line of code and add this condition with elseif and === false 
                                    $docFields[$apiAttributeOrSelectedType] = '';
                                }
                            }   //not equal condition ends here
                        }   //getting document text fields ends here
                        //getting custom text fields
                        try {
                            if(strpos($findValue->getAttribute('class'), 'field_box_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'datepickerfields_new') === false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                $apiAttributeOrSelectedType = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->selectedtype);
                                $docFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                            }
                        } catch(\Exception $e) {}

                        //getting datepicker fields
                        try {
                            if(strpos($findValue->getAttribute('class'), 'field_box_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'datepickerfields_new') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                $apiAttributeOrSelectedType = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->selectedtype);
                                $docFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                            }
                        } catch(\Exception $e) {}

                        //getting document checkbox elements
                        if(strpos($findValue->getAttribute('class'), 'documentFieldCheckbox') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            //all values of checkboxes are showing
                            $apiAttributeOrFieldLabelName = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->fieldlabelname);
                            if(strpos($findValue->find('.check_icon', 0)->getAttribute('style'), 'visible') !== false || strpos($findValue->getAttribute('class'), 'isChecked') !== false) {
                                $docFields[$apiAttributeOrFieldLabelName] = 'Yes';
                            } else {
                                $docFields[$apiAttributeOrFieldLabelName] = 'No';
                            }
                        }   //getting document checkbox elements ends here
                        //getting custom checkbox elements
                        if(strpos($findValue->getAttribute('class'), 'check_box_popupcontainer') !== false && strpos($mainDiv->getAttribute('class'), 'chechBoxCustom') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrFieldLabelName = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->fieldlabelname);
                            if(strpos($findValue->find('.check_icon', 0)->getAttribute('style'), 'visible')) {
                                $docFields[$apiAttributeOrFieldLabelName] = 'Yes';
                            } else {
                                $docFields[$apiAttributeOrFieldLabelName] = 'No';
                            }
                        }

                        //getting document droplist elements
                        $jsonDecodeDropDownValues = (isset($findValue->dropdownvalues) && !empty($findValue->dropdownvalues) ? json_decode(html_entity_decode($findValue->dropdownvalues), true) : []);
                        $jsonDecodeDropDownAlternativeValues = (isset($findValue->dropdownvalues_alternate) && !empty($findValue->dropdownvalues_alternate) ? json_decode(html_entity_decode($findValue->dropdownvalues_alternate), true) : []);
                        if(strpos($findValue->getAttribute('class'), 'documentFieldDroplist') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            //forsearching starting
                            if($findValue->find('span.texthere', 0)) {
                                if(!empty($jsonDecodeDropDownValues) && $findValue->dropdownlabel != trim($findValue->find('span.texthere', 0)->plaintext)) {
                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                    $docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? $findValue->selected_altvalue : trim($findValue->find('span.texthere', 0)->plaintext))));
                                } elseif(array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                    $docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? $findValue->selected_altvalue : trim($findValue->find('span.texthere', 0)->plaintext))));
                                } else {
                                    $docFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? $findValue->selected_altvalue : ''));
                                }
                            } else {
                                if(!empty($jsonDecodeDropDownValues) && $findValue->dropdownlabel != trim($findValue->find('p', 0)->plaintext)) {
                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                    $docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? $findValue->selected_altvalue : trim($findValue->find('p', 0)->plaintext))));
                                } elseif(array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                    $docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? $findValue->selected_altvalue : trim($findValue->find('p', 0)->plaintext))));
                                } else {
                                    $docFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? $findValue->selected_altvalue : ''));
                                }
                            }
                            //forsearching ending
                        }   //getting document droplist elements ends here

                        //getting custom droplist elements
                        if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            //forsearching starting
                            if($findValue->find('span.texthere', 0)) {
                                if(!empty($jsonDecodeDropDownValues) && $findValue->dropdownlabel != trim($findValue->find('span.texthere', 0)->plaintext)) {
                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                    $docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('span.texthere', 0)->plaintext))));
                                } elseif(isset($findValue->find('span.texther', 0)->plaintext) && array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                    $docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('span.texthere', 0)->plaintext))));
                                } else {
                                    $docFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : ''));
                                }
                            } else {
                                if(!empty($jsonDecodeDropDownValues) && $findValue->dropdownlabel != trim($findValue->find('span.texthere', 0)->plaintext)) {
                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                    $docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('p', 0)->plaintext))));
                                } elseif(isset($findValue->find('span.texther', 0)->plaintext) && array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                    $docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('p', 0)->plaintext))));
                                } else {
                                    $docFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : ''));
                                }
                            }
                            //forsearching ending
                        }

                        //document field droplist with multiple radio button
                        if(strpos($findValue->getAttribute('class'), 'documentFieldDroplist') !== false && strpos($findValue->getAttribute('class'), 'dropdown_radioList_api') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            if($findValue->find('.fa-dot-circle-o', 0)) {
                                $getArrayKey = array_search(trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext), $jsonDecodeDropDownValues);
                                $docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? $jsonDecodeDropDownAlternativeValues[$getArrayKey] : $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext);
                            } else {
                                $docFields[$apiAttributeOrDropDownLabel] = '';
                            }
                        }
                        //document field droplist with multiple radio button of custom and me
                        if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'dropdown_radioList_api') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            if($findValue->find('.fa-dot-circle-o', 0)) {
                                $getArrayKey = array_search(trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext), $jsonDecodeDropDownValues);
                                $docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? $jsonDecodeDropDownAlternativeValues[$getArrayKey] : $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext);
                            } else {
                                $docFields[$apiAttributeOrDropDownLabel] = '';
                            }
                        }
                        //document field droplist with multiple checkboxes
                        if(strpos($findValue->getAttribute('class'), 'documentFieldDroplist') !== false && strpos($findValue->getAttribute('class'), 'multi_choice_option') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            if($findValue->find('.fa-check', 0)) {
                                $faCheckValues = [];
                                foreach($findValue->find('.ionIconsCheck') as $checkBoxKey => $checkBoxValue) {
                                    if(strpos($checkBoxValue->getAttribute('class'), 'fa-check') !== false) {
                                        $faCheckValues[] = (isset($jsonDecodeDropDownAlternativeValues[$checkBoxKey]) && $jsonDecodeDropDownAlternativeValues[$checkBoxKey] !== '' ? $jsonDecodeDropDownAlternativeValues[$checkBoxKey] : $checkBoxValue->parent()->parent()->find('label', 0)->innertext);
                                    }
                                }
                                $totalFaCheckValues = count($faCheckValues);
                                if($totalFaCheckValues > 1) {
                                    $faCheckValues = implode(', ' , array_slice($faCheckValues,0,$totalFaCheckValues-1)) . ' and ' . end($faCheckValues);
                                } else {
                                    $faCheckValues = implode(', ' , $faCheckValues);
                                }
                                $docFields[$apiAttributeOrDropDownLabel] = $faCheckValues;
                            } else {
                                $docFields[$apiAttributeOrDropDownLabel] = '';
                            }
                        }
                        //document field droplist with multiple checkboxes of custom and me
                        if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'multi_choice_option') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            if($findValue->find('.fa-check', 0)) {
                                $faCheckValues = [];
                                foreach($findValue->find('.ionIconsCheck') as $checkBoxKey => $checkBoxValue) {
                                    if(strpos($checkBoxValue->getAttribute('class'), 'fa-check') !== false) {
                                        $faCheckValues[] = (isset($jsonDecodeDropDownAlternativeValues[$checkBoxKey]) && $jsonDecodeDropDownAlternativeValues[$checkBoxKey] !== '' ? $jsonDecodeDropDownAlternativeValues[$checkBoxKey] : $checkBoxValue->parent()->parent()->find('label', 0)->innertext);
                                    }
                                }
                                $totalFaCheckValues = count($faCheckValues);
                                if($totalFaCheckValues > 1) {
                                    $faCheckValues = implode(', ' , array_slice($faCheckValues,0,$totalFaCheckValues-1)) . ' and ' . end($faCheckValues);
                                } else {
                                    $faCheckValues = implode(', ' , $faCheckValues);
                                }
                                $docFields[$apiAttributeOrDropDownLabel] = $faCheckValues;
                            } else {
                                $docFields[$apiAttributeOrDropDownLabel] = '';
                            }
                        } //selectcolor_popupcontainer condition ends here
                    }   //second foreach loop ends here
                }   //first foreach loop ends here

                //document tags names showing and its loop starting
                foreach($html->find('.dynamicTag') as $findTagKey => $findTagValue) {
                    if(strpos($findTagValue->getAttribute('class'), 'documenttagName') !== false) {
                        $apiAttributeOrTagName = (isset($findTagValue->apitagattribute) && $findTagValue->apitagattribute != '' ? $findTagValue->apitagattribute : $findTagValue->tagname);
                        $jsonDecodeDropDownValues = (isset($findTagValue->dropdownvalues) && !empty($findTagValue->dropdownvalues) ? json_decode(html_entity_decode($findTagValue->dropdownvalues), true) : []);
                        $jsonDecodeDropDownAlternativeValues = (isset($findTagValue->dropdownvalues_alternate) && !empty($findTagValue->dropdownvalues_alternate) ? json_decode(html_entity_decode($findTagValue->dropdownvalues_alternate), true) : []);

                        if(strpos($findTagValue->getAttribute('class'), 'documentdroplisttagname') !== false) {
                            if(isset($findTagValue->dropdownapi) && $findTagValue->dropdownapi != '') {
                                $docFields[$apiAttributeOrTagName] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, trim($findTagValue->plaintext)) : '');
                            } else {
                                $tagValuesArray = [];
                                foreach($jsonDecodeDropDownValues as $dropDownKey => $dropDownValues) {
                                    if(isset($findTagValue->plaintext) && !empty($findTagValue->plaintext) && isset($dropDownValues) && !empty($dropDownValues)) {
                                        if(strpos($findTagValue->plaintext, $dropDownValues) > -1) {
                                            $getArrayKey = array_search(trim($dropDownValues), $jsonDecodeDropDownValues);
                                            $tagValuesArray[] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && !empty($jsonDecodeDropDownAlternativeValues[$getArrayKey]) ? $jsonDecodeDropDownAlternativeValues[$getArrayKey] : $utility->convertDateMonthNameToInteger($languageId, trim($dropDownValues)));
                                        } else {
                                            $docFields[$apiAttributeOrTagName] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, trim($findTagValue->plaintext)) : '');
                                        }
                                    }
                                }
                                $totalTagValuesArray = count($tagValuesArray);
                                if($totalTagValuesArray > 1) {
                                    $tagValuesArray = implode(', ' , array_slice($tagValuesArray,0,$totalTagValuesArray-1)) . ' and ' . end($tagValuesArray);
                                } else {
                                    $tagValuesArray = implode(', ' , $tagValuesArray);
                                }
                                $docFields[$apiAttributeOrTagName] = $tagValuesArray;
                            }
                        } else {
                            $docFields[$apiAttributeOrTagName] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, trim($findTagValue->plaintext)) : '');
                        }
                    }
                }
                //document tags names showing and its loop ending

                if(!empty($docFields)) {
                    //showing alphbats order to show document fields data
                    ksort($docFields);
                    $responseArray['document_fields'] = $docFields;
                }
            }

            //basic information of sender and account details starting
            $senderData = Offersentdetails::where('offer_send_details.offer_sent_id', $document_id)->join('offer_sent', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')->select('offer_send_details.user_details')->where('offer_send_details.is_sender', 1)->whereIn('offer_sent.sender_id', $allUserIds)->first();
            if($senderData) {
                $senderDetails = $accountDetails = [];
                $senderUserDetails = Tcrypt::decrypter($senderData['user_details']);
                $senderUserDetailsJsonDecode = json_decode($senderUserDetails, true);

                //sender details information starting
                //for regular contract sender use full_name key and for online contract sender use first_name key
                $senderDetails['name'] = (isset($senderUserDetailsJsonDecode['full_name']) && $senderUserDetailsJsonDecode['full_name'] != '' ? trim($senderUserDetailsJsonDecode['full_name']) : (isset($senderUserDetailsJsonDecode['first_name']) && $senderUserDetailsJsonDecode['first_name'] != '' ? trim($senderUserDetailsJsonDecode['first_name']) : ''));
                $senderDetails['email'] = (isset($senderUserDetailsJsonDecode['email']) && $senderUserDetailsJsonDecode['email'] != '' ? trim(preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $senderUserDetailsJsonDecode['email'])) : '');

                $userCustomFields = (isset($senderUserDetailsJsonDecode['user_customfields']) && $senderUserDetailsJsonDecode['user_customfields'] != '' ? json_decode($senderUserDetailsJsonDecode['user_customfields'], true) : []);
                if(!empty($userCustomFields)) {
                    foreach($userCustomFields as $userCustomFldkey => $userCustomFldValue) {
                        $senderDetails[trim($userCustomFldkey)] = (isset($userCustomFldValue) && $userCustomFldValue != '' ? trim($userCustomFldValue) : '');
                    }
                }
                $responseArray['sender_details'] = $senderDetails;
                //sender details information ending

                //account details information starting
                $accountDetails['company'] = (isset($senderUserDetailsJsonDecode['company']) && $senderUserDetailsJsonDecode['company'] != '' ? trim($senderUserDetailsJsonDecode['company']) : '');
                $accountDetails['reg_no'] = (isset($senderUserDetailsJsonDecode['reg_no']) && $senderUserDetailsJsonDecode['reg_no'] != '' ? trim($senderUserDetailsJsonDecode['reg_no']) : '');
                $accountDetails['address'] = (isset($senderUserDetailsJsonDecode['address']) && $senderUserDetailsJsonDecode['address'] != '' ? trim($senderUserDetailsJsonDecode['address']) : '');
                $accountDetails['phone_no'] = (isset($senderUserDetailsJsonDecode['mobile']) && $senderUserDetailsJsonDecode['mobile'] != '' ? trim($senderUserDetailsJsonDecode['mobile']) : (isset($senderUserDetailsJsonDecode['telephone']) && $senderUserDetailsJsonDecode['telephone'] != '' ? trim($senderUserDetailsJsonDecode['telephone']) : ''));
                $accountDetails['zipcode'] = (isset($senderUserDetailsJsonDecode['zipcode']) && $senderUserDetailsJsonDecode['zipcode'] != '' ? trim($senderUserDetailsJsonDecode['zipcode']) : (isset($senderUserDetailsJsonDecode['post_code']) && $senderUserDetailsJsonDecode['post_code'] != '' ? trim($senderUserDetailsJsonDecode['post_code']) : ''));
                $accountDetails['city'] = (isset($senderUserDetailsJsonDecode['city']) && $senderUserDetailsJsonDecode['city'] != '' ? trim($senderUserDetailsJsonDecode['city']) : '');

                $responseArray['account_details'] = $accountDetails;
                //account details information ending
            }
            //basic information of sender and account details ending

            //basic information of document details starting
            if($offerSentContent) {
                $uniqueId = Offersentdetails::where('offer_send_details.offer_sent_id', $document_id)->join('offer_sent', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')->select('offer_send_details.unique_id')->where('offer_send_details.is_sender', 0)->whereIn('offer_sent.sender_id', $allUserIds)->first();
                $documentDetails = [];
                $documentDetails['template_name'] = ($offerSentContent['visible_name'] != '' ? trim(Tcrypt::decrypter($offerSentContent['visible_name'])) : trim(Tcrypt::decrypter($offerSentContent['name'])));
                $documentDetails['document_id'] = $offerSentContent['id'];
                $documentDetails['template_id'] = $offerSentContent['offer_id'];
                $documentDetails['language'] = (isset($offerSentContent['language_id']) && $offerSentContent['language_id'] != '' ? $utility->languageName($offerSentContent['language_id']) : 'English');
                $documentDetails['sent_date'] = (isset($offerSentContent['created_date']) && $offerSentContent['created_date'] != '' && $offerSentContent['created_date'] != '0000-00-00 00:00:00' ? trim($offerSentContent['created_date']) : '');
                $documentDetails['signed_date'] = (isset($offerSentContent['signed_date']) && $offerSentContent['signed_date'] != '' && $offerSentContent['signed_date'] != '0000-00-00 00:00:00' ? trim($offerSentContent['signed_date']) : '');
                $documentDetails['due_date'] = (isset($offerSentContent['due_date']) && $offerSentContent['due_date'] != '' && $offerSentContent['due_date'] != '0000-00-00 00:00:00' ? trim(date('Y-m-d', strtotime($offerSentContent['due_date']))) : '');
                $documentDetails['status'] = (isset($offerSentContent['offer_status']) ? $utility->offerStatusName($offerSentContent['offer_status']) : '');
                $documentDetails['pdf'] = $domain_name.'avtal/downloadpdf/'.$document_id.'/'.$uniqueId['unique_id'];

                $responseArray['document_details'] = $documentDetails;
            }
            //basic information of document details ending
            return response()->json(['status' => 'success', 'result' => $responseArray], 200, ['Content-Type' => 'application/json; charset=UTF-8'], JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
        } else {
            return Response::json(['status' => 'error', 'result' => 'No record(s) found']);
        }
    }

    public function getHistoryscrive($accessToken='', $offerId='') {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');
        $access_token = '';
        $document_id = 0;
        
        //access_token validation starting
        if(isset($accessToken) && $accessToken != '') {
            $access_token = $accessToken;
        } else {
            return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
        //access_token validation ending
        
        //contract_id validation starting
        if(isset($offerId) && $offerId != 0) {
            $document_id = $offerId;
        } else {
            return Response::json(['status' => 'error', 'result' => 'document_id is missing']);
        }
        
        $user_id = $utility->getUserIdByAuthToken($access_token);
        $parent_id = $utility->getParent($user_id);
        if($utility->isParent($user_id) == 1) {
            $allUserIds = $utility->getSubusers($parent_id);
        } else {
            $allUserIds = [$user_id];
        }
        $userSettings = $utility->getUserSettings($parent_id);
        $getApiHitCount = Userinfo::where('user_id', $parent_id)->select('hit_count')->first();
        $addupdateapiaccesslogs = $utility->addupdateapiaccesslogs($user_id, 'getHistoryscrive v3', $data, $getApiHitCount['hit_count']);
        if($addupdateapiaccesslogs == 'exceed') {
            $this->apiCallLimitExceedMessage = str_replace('#hitCuntNo', $getApiHitCount['hit_count'], $this->apiCallLimitExceedMessage);
            return Response::json(['status' => 'error', 'result' => $this->apiCallLimitExceedMessage]);
        }
        
        if($utility->checkAdminStripe($user_id)) {
            return Response::json(['status' => 'error', 'result' => 'Account is locked make payment in order to continue Simplesign']);
        }
        
        $contractData = Offersentdetails::where('offer_send_details.offer_sent_id', $document_id)->join('offer_sent', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')->select('offer_sent.language_id', 'offer_send_details.id AS detail_id', 'offer_send_details.offer_sent_id', 'offer_send_details.user_details', 'offer_send_details.offer_status', 'offer_send_details.req_attached', 'offer_send_details.document_read_date', 'offer_send_details.signed_date', 'offer_send_details.authentication_method', 'offer_send_details.role', 'offer_send_details.invitation_type', 'offer_send_details.invitation_order', 'offer_send_details.offer_confirmation', 'offer_send_details.id_attachments', 'offer_sent.content')->where('offer_send_details.is_sender', 0)->whereIn('offer_sent.sender_id', $allUserIds)->get()->toArray();
        $offerSentContent = Offersent::where('id', $document_id)->whereIn('sender_id', $allUserIds)->select('content', 'visible_name', 'name', 'language_id', 'id', 'offer_id', 'created_date', 'offer_status', 'signed_date', 'due_date')->first();
        if($contractData) {
            $responseArray = $senderInfo = $contractDetails =  [];
            foreach($contractData as $contractDataKey => $contractDataValue) {
                $languageId = $contractDataValue['language_id'];
        
                $peopleFields = $organizationFields = $details = [];
                $nameExplode = '';
                        
                $recipientUserDetails = Tcrypt::decrypter($contractDataValue['user_details']);
                $recipientUserDetailsJsonDecode = json_decode($recipientUserDetails, true);
        
                //$peopleFields['detail_id'] = $contractDataValue['detail_id'];
                //$peopleFields['offer_sent_id'] = $contractDataValue['offer_sent_id'];
                $userRole = (isset($recipientUserDetailsJsonDecode['recrolename']) && $recipientUserDetailsJsonDecode['recrolename'] != '' ? $recipientUserDetailsJsonDecode['recrolename'] : (isset($recipientUserDetailsJsonDecode['partyname']) && $recipientUserDetailsJsonDecode['partyname'] != '' ? $recipientUserDetailsJsonDecode['partyname'] : ''));
        
                //basic information of recipient starting
                $recipientFieldsRolesTabFields = (isset($recipientUserDetailsJsonDecode['Recipient_fields_roles_tab_fields']) && !empty($recipientUserDetailsJsonDecode['Recipient_fields_roles_tab_fields']) ? json_decode($recipientUserDetailsJsonDecode['Recipient_fields_roles_tab_fields'], true) : '');
                $recinfoFields = ($recipientFieldsRolesTabFields != '' ? $recipientFieldsRolesTabFields['recinfo_fields'] : '');
        
                if(isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '') {
                    //for regular contract recipient use full_name key
                    if((isset($recinfoFields['last_name']) && $recinfoFields['last_name'] == 1) || (isset($recipientUserDetailsJsonDecode['last_name']) && $recipientUserDetailsJsonDecode['last_name'] != '')) {
                        $peopleFields['first_name'] = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? $recipientUserDetailsJsonDecode['full_name'] : '');
                        $peopleFields['last_name'] = (isset($recipientUserDetailsJsonDecode['last_name']) && $recipientUserDetailsJsonDecode['last_name'] != '' ? $recipientUserDetailsJsonDecode['last_name'] : '');
                    } else {
                        $nameExplode = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($recipientUserDetailsJsonDecode['full_name'])) : '');
                        $peopleFields['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                        $peopleFields['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                    }
                } elseif(isset($recipientUserDetailsJsonDecode['name']) && $recipientUserDetailsJsonDecode['name'] != '') {
                    //for online contract recipient use name key
                    $nameExplode = (isset($recipientUserDetailsJsonDecode['name']) && $recipientUserDetailsJsonDecode['name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($recipientUserDetailsJsonDecode['name'])) : '');
                    $peopleFields['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                    $peopleFields['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                }
                $peopleFields['email'] = (isset($recipientUserDetailsJsonDecode['email']) && $recipientUserDetailsJsonDecode['email'] != '' ? trim(preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $recipientUserDetailsJsonDecode['email'])) : '');
                $peopleFields['personal_no'] = (isset($recipientUserDetailsJsonDecode['personnr']) && $recipientUserDetailsJsonDecode['personnr'] != '' ? (strlen(trim($recipientUserDetailsJsonDecode['personnr'])) == 12 || strlen(trim($recipientUserDetailsJsonDecode['personnr'])) == 13 ? substr(trim($recipientUserDetailsJsonDecode['personnr']), 2) : trim($recipientUserDetailsJsonDecode['personnr'])) : '');
                $peopleFields['mobile'] = (isset($recipientUserDetailsJsonDecode['mobile']) && $recipientUserDetailsJsonDecode['mobile'] != '' ? trim($recipientUserDetailsJsonDecode['mobile']) : '');
                $peopleFields['address'] = (isset($recipientUserDetailsJsonDecode['address']) && $recipientUserDetailsJsonDecode['address'] != '' ? trim($recipientUserDetailsJsonDecode['address']) : '');
                $peopleFields['city'] = (isset($recipientUserDetailsJsonDecode['city']) && $recipientUserDetailsJsonDecode['city'] != '' ? trim($recipientUserDetailsJsonDecode['city']) : '');
                $peopleFields['zipcode'] = (isset($recipientUserDetailsJsonDecode['zipcode']) && $recipientUserDetailsJsonDecode['zipcode'] != '' ? trim($recipientUserDetailsJsonDecode['zipcode']) : (isset($recipientUserDetailsJsonDecode['zip']) && $recipientUserDetailsJsonDecode['zip'] != '' ? trim($recipientUserDetailsJsonDecode['zip']) : ''));
                //basic information of recipient ending
        
                //organization information of recipient starting
                if(isset($recipientUserDetailsJsonDecode['organization_fields'])) {
                    $orgFields = json_decode($recipientUserDetailsJsonDecode['organization_fields'], true);
                    foreach($orgFields as $orgFldsKey => $orgFldsValue) {
                        $orgFldsValue['orgFieldName'] = str_replace('name', 'organization_name', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('org_no', 'organization_no', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('phone', 'organization_phone', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('address', 'organization_address', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('city', 'organization_city', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('zipcode', 'organization_zipcode', $orgFldsValue['orgFieldName']);
                        $organizationFields[$orgFldsValue['orgFieldName']] = $orgFldsValue['orgFieldValue'];
                    }
                } else {
                    if(isset($recipientUserDetailsJsonDecode['org_name']) && $recipientUserDetailsJsonDecode['org_name'] != '') {
                        $organizationFields['organization_name'] = $recipientUserDetailsJsonDecode['org_name'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_reg_no']) && $recipientUserDetailsJsonDecode['org_reg_no'] != '') {
                        $organizationFields['organization_no'] = $recipientUserDetailsJsonDecode['org_reg_no'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_mobile']) && $recipientUserDetailsJsonDecode['org_mobile'] != '') {
                        $organizationFields['organization_phone'] = $recipientUserDetailsJsonDecode['org_mobile'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_address']) && $recipientUserDetailsJsonDecode['org_address'] != '') {
                        $organizationFields['organization_address'] = $recipientUserDetailsJsonDecode['org_address'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_city']) && $recipientUserDetailsJsonDecode['org_city'] != '') {
                        $organizationFields['organization_city'] = $recipientUserDetailsJsonDecode['org_city'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_zip']) && $recipientUserDetailsJsonDecode['org_zip'] != '') {
                        $organizationFields['organization_zipcode'] = $recipientUserDetailsJsonDecode['org_zip'];
                    }
                }
                //organization information of recipient ending
        
                //people information of new fields starting
                if(isset($recipientUserDetailsJsonDecode['extra_fields']) && !empty($recipientUserDetailsJsonDecode['extra_fields'])) {
                    $recipientFieldsWithoutValue = (isset($recipientUserDetailsJsonDecode['recipientfields']) && !empty($recipientUserDetailsJsonDecode['recipientfields']) ? json_decode($recipientUserDetailsJsonDecode['recipientfields'], true) : []);
        
                    $extraFields = (isset($recipientUserDetailsJsonDecode['extra_fields']) && !empty($recipientUserDetailsJsonDecode['extra_fields']) ? json_decode($recipientUserDetailsJsonDecode['extra_fields'], true) : []);
                    if($extraFields) {
                        $intersect = array_uintersect($extraFields, $recipientFieldsWithoutValue, function($val1, $val2) {
                            return strcmp($val1['fieldName'], $val2['fieldName']);
                        });
                        $intersect = array_values($intersect);
                    } else {
                        $intersect = [];
                    }

                    if(!empty($intersect)) {
                        foreach($intersect as $extraFldKey => $extraFldValue) {
                            $peopleFields[$extraFldValue['fieldName']] = $extraFldValue['fieldValue'];
                        }
                    }
                }
                //people information of new fields ending
        
                //organization information of new fields starting
                if(isset($recipientUserDetailsJsonDecode['org_extra_fields']) && !empty($recipientUserDetailsJsonDecode['org_extra_fields'])) {
                    $organizationFieldsWithoutValue = (isset($recipientUserDetailsJsonDecode['organizationfields']) && !empty($recipientUserDetailsJsonDecode['organizationfields']) ? json_decode($recipientUserDetailsJsonDecode['organizationfields'], true) : []);
        
                    $orgExtraFields = (isset($recipientUserDetailsJsonDecode['org_extra_fields']) && !empty($recipientUserDetailsJsonDecode['org_extra_fields']) ? json_decode($recipientUserDetailsJsonDecode['org_extra_fields'], true) : []);
                    if($orgExtraFields) {
                        $intersectOrg = array_uintersect($orgExtraFields, $organizationFieldsWithoutValue, function($val1, $val2) {
                            return strcmp($val1['fieldName'], $val2['fieldName']);
                        });
                        $intersectOrg = array_values($intersectOrg);
                    } else {
                        $intersectOrg = [];
                    }

                    if(!empty($intersectOrg)) {
                        foreach($intersectOrg as $orgExtraFldKey => $orgExtraFldValue) {
                            $organizationFields[$orgExtraFldValue['fieldName']] = $orgExtraFldValue['fieldValue'];
                        }
                    }
                }
                //organization information of new fields ending
        
                //organization information of fields which are placed at document starting
                $content = Tcrypt::decrypter($contractDataValue['content']);
                if($content != '') {
                    $html = new \Htmldom($content);
                    foreach($html->find('.text') as $findKey => $findValue) {
                        //codition for regular contract starting
                        if(isset($recipientUserDetailsJsonDecode['id']) && $recipientUserDetailsJsonDecode['id'] == $findValue->recipientselectedid) {
                            if(strpos($findValue->getAttribute('class'), 'peopleNewField') !== false) {
                                if($findValue->find('h4', 0)) {
                                    $peopleFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                } else {
                                    if($findValue->find('p', 0)) {
                                        $peopleFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                    }
                                }
                            } if(strpos($findValue->getAttribute('class'), 'organizationNewField') !== false) {
                                if($findValue->find('h4', 0)) {
                                    $organizationFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                } else {
                                    if($findValue->find('p', 0)) {
                                        $organizationFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                    }
                                }
                            }
                            //codition for regular contract ending
                        } else {
                            //codition for online contract starting
                            if($userRole == $findValue->parent()->parent()->whowillfill) {
                                if(strpos($findValue->getAttribute('class'), 'peopleNewField') !== false) {
                                    if($findValue->find('h4', 0)) {
                                        $peopleFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                    } else {
                                        //right now paragraph tag is showing and will be replaced by h4 near future starting
                                        if($findValue->find('p', 0)) {
                                            $peopleFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                        }
                                        //right now paragraph tag is showing and will be replaced by h4 near future ending
                                    }
                                } if(strpos($findValue->getAttribute('class'), 'organizationNewField') !== false) {
                                    if($findValue->find('h4', 0)) {
                                        $organizationFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                    } else {
                                        //right now paragraph tag is showing and will be replaced by h4 near future starting
                                        if($findValue->find('p', 0)) {
                                            $organizationFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                        }
                                        //right now paragraph tag is showing and will be replaced by h4 near future ending
                                    }
                                }
                            }
                            //codition for online contract ending
                        }
                    }
                }
                //organization information of fields which are placed at document ending

                //basic information of document settings starting
                if(isset($recipientUserDetailsJsonDecode['details_fields'])) {
                    $detailsFields = json_decode($recipientUserDetailsJsonDecode['details_fields'], true);
                    foreach($detailsFields as $orgFldsKey => $orgFldsValue) {
                        $details[$orgFldsValue['detailsFieldName']] = $orgFldsValue['detailsFieldValue'];
                    }
                } else {
                    $details['recipient_role'] = (isset($recipientUserDetailsJsonDecode['recrolename']) && $recipientUserDetailsJsonDecode['recrolename'] != '' ? $recipientUserDetailsJsonDecode['recrolename'] : (isset($recipientUserDetailsJsonDecode['partyname']) && $recipientUserDetailsJsonDecode['partyname'] != '' ? $recipientUserDetailsJsonDecode['partyname'] : ''));
        
                    if($contractDataValue['role'] == 2) {
                        $contractDataValue['authentication_method'] = 8;
                    }
        
                    $details['authentication'] = $utility->authenticationMethodName($contractDataValue['authentication_method']);
                    if(isset($contractDataValue['invitation_type']) && $contractDataValue['invitation_type'] != '') {
                        $details['invitation_type'] = $utility->invitationTypeName($contractDataValue['invitation_type']);
                    }
                    if($contractDataValue['invitation_order'] != 0) {
                        $details['invitation_order'] = $contractDataValue['invitation_order'];
                    }
                    if(isset($contractDataValue['offer_confirmation']) && $contractDataValue['offer_confirmation'] != '') {
                        $details['confirmation'] = $utility->offerConfirmationName($contractDataValue['offer_confirmation']);
                    }
                    $details['id_attachment'] = $utility->idAttachmentName($contractDataValue['id_attachments']);
                }
                $details['request_attachment'] = ($contractDataValue['req_attached'] != '' ? 'yes' : 'no');
                if($contractDataValue['document_read_date'] != '' && $contractDataValue['document_read_date'] != '0000-00-00 00:00:00') {
                    $details['last_viewing_date'] = ($contractDataValue['document_read_date'] != '' ? $contractDataValue['document_read_date'] : '');
                }
                $details['signed_date'] = ($contractDataValue['signed_date'] != '' && $contractDataValue['signed_date'] != '0000-00-00 00:00:00' ? $contractDataValue['signed_date'] : '');
                $details['status'] = (isset($contractDataValue['offer_status']) != '' ? $utility->offerStatusName($contractDataValue['offer_status']) : '');
                //this is for rejected to show in sender status
                if($contractDataValue['offer_status'] == 5) {
                    $offerSentContent['offer_status'] = 5;
                } if($contractDataValue['offer_status'] == 6) {
                    $offerSentContent['offer_status'] = 6;
                }
        
                if(!empty($organizationFields)) {
                    $peopleAndDetailsArray = ['people_fields' => $peopleFields, 'organization_fields' => $organizationFields, 'details' => $details];
                } else {
                    $peopleAndDetailsArray = ['people_fields' => $peopleFields, 'details' => $details];
                }
                array_push($responseArray, $peopleAndDetailsArray);
                //basic information of document settings ending
            }
        
            $content = Tcrypt::decrypter($offerSentContent['content']);
            if($content != '') {
                //getGetdocumentinfoxml function of garda template response
                $html = new \Htmldom($content);
                $dynamicElements = [];
                foreach($html->find('.template_container') as $temConKey => $temConValue) {
                    $arrayPush = [];
                    foreach($temConValue->find('.formElement') as $findKey => $findValue) {

                        $elementStyle = $findValue->getAttribute('style');
                        $arrCSS = $utility->parse_css($elementStyle);
                        $parentDiv = $findValue->parent()->parent();
        
                        //Fixing Position when field is inside the borderbox or textbox START
                        $addtop = 0;
                        $addleft = 0;
                        if(strpos($parentDiv->getAttribute('class'), 'dynamic_border') !== false && strpos($parentDiv->getAttribute('class'), 'insert_box_div') === false) {
                            $parentCSS = $utility->parse_css($parentDiv->getAttribute('style'));
                            $addtop = (isset($parentCSS['top']) && $parentCSS['top'] != '' ? round($parentCSS['top']) : 0);
                            $addleft = (isset($parentCSS['left']) && $parentCSS['left'] != '' ? round($parentCSS['left']) : 0);
                        } elseif(strpos($parentDiv->getAttribute('class'), 'insert_box_div') !== false && strpos($parentDiv->getAttribute('class'), 'dynamic_border') === false) {
                            $parentCSS = $utility->parse_css($parentDiv->getAttribute('style'));
                            $addtop = (isset($parentCSS['top']) && $parentCSS['top'] != '' ? round($parentCSS['top']) : 0);
                            $addleft = (isset($parentCSS['left']) && $parentCSS['left'] != '' ? round($parentCSS['left']) : 0);
                        } elseif(strpos($parentDiv->getAttribute('class'), 'insert_box_div') !== false  && strpos($parentDiv->getAttribute('class'), 'dynamic_border') !== false) {
                            $parentCSS = $utility->parse_css($parentDiv->getAttribute('style'));
                            $addtop = (isset($parentCSS['top']) && $parentCSS['top'] != '' ? round($parentCSS['top']) : 0);
                            $addleft = (isset($parentCSS['left']) && $parentCSS['left'] != '' ? round($parentCSS['left']) : 0);
                        }
                        //Fixing Position when field is inside the borderbox or textbox END
        
                        $topPosition = (isset($arrCSS['top']) && $arrCSS['top'] != '' ? round($arrCSS['top'])+$addtop : 0);
                        $leftPosition = (isset($arrCSS['left']) && $arrCSS['left'] != '' ? round($arrCSS['left'])+$addleft : 0);
                        array_push($arrayPush, ['top' => $topPosition, 'left' => $leftPosition, 'dynamic_id' => $findValue->dynamic_id]);
                    }
                    if(!empty($arrayPush)) {
                        sort($arrayPush);
                        array_push($dynamicElements, $arrayPush);
                    }
                }
        
                $docFields = [];
                foreach($dynamicElements as $eachPageKey => $eachPageValue) {
                    foreach($eachPageValue as $eachElementKey => $eachElementValue) {
                        $eachDynamic_id = $eachElementValue['dynamic_id'];
                        $mainDiv = $html->find('[dynamic_id="'.$eachElementValue['dynamic_id'].'"]', 0);
                        if(!$mainDiv->find('.text', 0)) {
                            continue;
                        }
                        $findValue = $mainDiv->find('.text', 0);
                        //getting document text fields
                        if(strpos($findValue->getAttribute('class'), 'documentField') !== false) {
                            if($findValue->selectedtype != '0') {
                                $apiAttributeOrSelectedType = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->selectedtype);
                                if($findValue->find('h4', 0) && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                    $docFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                } elseif($findValue->find('p', 0) && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                    $docFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('p', 0)->plaintext)));
                                } elseif(strpos($mainDiv->getAttribute('class'), 'relationDisable') === false && (!isset($docFields[$findValue->selectedtype]))) {
                                    //comments below line of code and add this condition with elseif and === false 
                                    $docFields[$apiAttributeOrSelectedType] = '';
                                }
                            }   //not equal condition ends here
                        }   //getting document text fields ends here
                        //getting custom text fields
                        try {
                            if(strpos($findValue->getAttribute('class'), 'field_box_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'datepickerfields_new') === false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                $apiAttributeOrSelectedType = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->selectedtype);
                                $docFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                            }
                        } catch(\Exception $e) {}
        
                        //getting datepicker fields
                        try {
                            if(strpos($findValue->getAttribute('class'), 'field_box_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'datepickerfields_new') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                $apiAttributeOrSelectedType = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->selectedtype);
                                $docFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                            }
                        } catch(\Exception $e) {}
        
                        //getting document checkbox elements
                        if(strpos($findValue->getAttribute('class'), 'documentFieldCheckbox') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            //all values of checkboxes are showing
                            $apiAttributeOrFieldLabelName = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->fieldlabelname);
                            if(strpos($findValue->find('.check_icon', 0)->getAttribute('style'), 'visible') !== false || strpos($findValue->getAttribute('class'), 'isChecked') !== false) {
                                $docFields[$apiAttributeOrFieldLabelName] = 'Yes';
                            } else {
                                $docFields[$apiAttributeOrFieldLabelName] = 'No';
                            }
                        }   //getting document checkbox elements ends here
                        //getting custom checkbox elements
                        if(strpos($findValue->getAttribute('class'), 'check_box_popupcontainer') !== false && strpos($mainDiv->getAttribute('class'), 'chechBoxCustom') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrFieldLabelName = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->fieldlabelname);
                            if(strpos($findValue->find('.check_icon', 0)->getAttribute('style'), 'visible')) {
                                $docFields[$apiAttributeOrFieldLabelName] = 'Yes';
                            } else {
                                $docFields[$apiAttributeOrFieldLabelName] = 'No';
                            }
                        }
        
                        //getting document droplist elements
                        $jsonDecodeDropDownValues = (isset($findValue->dropdownvalues) && !empty($findValue->dropdownvalues) ? json_decode(html_entity_decode($findValue->dropdownvalues), true) : []);
                        $jsonDecodeDropDownAlternativeValues = (isset($findValue->dropdownvalues_alternate) && !empty($findValue->dropdownvalues_alternate) ? json_decode(html_entity_decode($findValue->dropdownvalues_alternate), true) : []);
                        if(strpos($findValue->getAttribute('class'), 'documentFieldDroplist') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            //forsearching starting
                            if($findValue->find('span.texthere', 0)) {
                                if(!empty($jsonDecodeDropDownValues) && $findValue->dropdownlabel != trim($findValue->find('span.texthere', 0)->plaintext)) {
                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                    $docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? $findValue->selected_altvalue : trim($findValue->find('span.texthere', 0)->plaintext))));
                                } elseif(array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                    $docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? $findValue->selected_altvalue : trim($findValue->find('span.texthere', 0)->plaintext))));
                                } else {
                                    $docFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? $findValue->selected_altvalue : ''));
                                }
                            } else {
                                if(!empty($jsonDecodeDropDownValues) && $findValue->dropdownlabel != trim($findValue->find('p', 0)->plaintext)) {
                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                    $docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? $findValue->selected_altvalue : trim($findValue->find('p', 0)->plaintext))));
                                } elseif(array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                    $docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? $findValue->selected_altvalue : trim($findValue->find('p', 0)->plaintext))));
                                } else {
                                    $docFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? $findValue->selected_altvalue : ''));
                                }
                            }
                            //forsearching ending
                        }   //getting document droplist elements ends here
        
                        //getting custom droplist elements
                        if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            //forsearching starting
                            if($findValue->find('span.texthere', 0)) {
                                if(!empty($jsonDecodeDropDownValues) && $findValue->dropdownlabel != trim($findValue->find('span.texthere', 0)->plaintext)) {
                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                    $docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('span.texthere', 0)->plaintext))));
                                } elseif(isset($findValue->find('span.texther', 0)->plaintext) && array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                    $docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('span.texthere', 0)->plaintext))));
                                } else {
                                    $docFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : ''));
                                }
                            } else {
                                if(!empty($jsonDecodeDropDownValues) && $findValue->dropdownlabel != trim($findValue->find('span.texthere', 0)->plaintext)) {
                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                    $docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('p', 0)->plaintext))));
                                } elseif(isset($findValue->find('span.texther', 0)->plaintext) && array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                    $docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('p', 0)->plaintext))));
                                } else {
                                    $docFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : ''));
                                }
                            }
                            //forsearching ending
                        }
        
                        //document field droplist with multiple radio button
                        if(strpos($findValue->getAttribute('class'), 'documentFieldDroplist') !== false && strpos($findValue->getAttribute('class'), 'dropdown_radioList_api') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            if($findValue->find('.fa-dot-circle-o', 0)) {
                                $getArrayKey = array_search(trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext), $jsonDecodeDropDownValues);
                                $docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? $jsonDecodeDropDownAlternativeValues[$getArrayKey] : $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext);
                            } else {
                                $docFields[$apiAttributeOrDropDownLabel] = '';
                            }
                        }
                        //document field droplist with multiple radio button of custom and me
                        if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'dropdown_radioList_api') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            if($findValue->find('.fa-dot-circle-o', 0)) {
                                $getArrayKey = array_search(trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext), $jsonDecodeDropDownValues);
                                $docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? $jsonDecodeDropDownAlternativeValues[$getArrayKey] : $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext);
                            } else {
                                $docFields[$apiAttributeOrDropDownLabel] = '';
                            }
                        }
                        //document field droplist with multiple checkboxes
                        if(strpos($findValue->getAttribute('class'), 'documentFieldDroplist') !== false && strpos($findValue->getAttribute('class'), 'multi_choice_option') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            if($findValue->find('.fa-check', 0)) {
                                $faCheckValues = [];
                                foreach($findValue->find('.ionIconsCheck') as $checkBoxKey => $checkBoxValue) {
                                    if(strpos($checkBoxValue->getAttribute('class'), 'fa-check') !== false) {
                                        $faCheckValues[] = (isset($jsonDecodeDropDownAlternativeValues[$checkBoxKey]) && $jsonDecodeDropDownAlternativeValues[$checkBoxKey] !== '' ? $jsonDecodeDropDownAlternativeValues[$checkBoxKey] : $checkBoxValue->parent()->parent()->find('label', 0)->innertext);
                                    }
                                }
                                $totalFaCheckValues = count($faCheckValues);
                                if($totalFaCheckValues > 1) {
                                    $faCheckValues = implode(', ' , array_slice($faCheckValues,0,$totalFaCheckValues-1)) . ' and ' . end($faCheckValues);
                                } else {
                                    $faCheckValues = implode(', ' , $faCheckValues);
                                }
                                $docFields[$apiAttributeOrDropDownLabel] = $faCheckValues;
                            } else {
                                $docFields[$apiAttributeOrDropDownLabel] = '';
                            }
                        }
                        //document field droplist with multiple checkboxes of custom and me
                        if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'multi_choice_option') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            if($findValue->find('.fa-check', 0)) {
                                $faCheckValues = [];
                                foreach($findValue->find('.ionIconsCheck') as $checkBoxKey => $checkBoxValue) {
                                    if(strpos($checkBoxValue->getAttribute('class'), 'fa-check') !== false) {
                                        $faCheckValues[] = (isset($jsonDecodeDropDownAlternativeValues[$checkBoxKey]) && $jsonDecodeDropDownAlternativeValues[$checkBoxKey] !== '' ? $jsonDecodeDropDownAlternativeValues[$checkBoxKey] : $checkBoxValue->parent()->parent()->find('label', 0)->innertext);
                                    }
                                }
                                $totalFaCheckValues = count($faCheckValues);
                                if($totalFaCheckValues > 1) {
                                    $faCheckValues = implode(', ' , array_slice($faCheckValues,0,$totalFaCheckValues-1)) . ' and ' . end($faCheckValues);
                                } else {
                                    $faCheckValues = implode(', ' , $faCheckValues);
                                }
                                $docFields[$apiAttributeOrDropDownLabel] = $faCheckValues;
                            } else {
                                $docFields[$apiAttributeOrDropDownLabel] = '';
                            }
                        } //selectcolor_popupcontainer condition ends here
                    }   //second foreach loop ends here
                }   //first foreach loop ends here
        
                //document tags names showing and its loop starting
                foreach($html->find('.dynamicTag') as $findTagKey => $findTagValue) {
                    if(strpos($findTagValue->getAttribute('class'), 'documenttagName') !== false) {
                        $apiAttributeOrTagName = (isset($findTagValue->apitagattribute) && $findTagValue->apitagattribute != '' ? $findTagValue->apitagattribute : $findTagValue->tagname);
                        $jsonDecodeDropDownValues = (isset($findTagValue->dropdownvalues) && !empty($findTagValue->dropdownvalues) ? json_decode(html_entity_decode($findTagValue->dropdownvalues), true) : []);
                        $jsonDecodeDropDownAlternativeValues = (isset($findTagValue->dropdownvalues_alternate) && !empty($findTagValue->dropdownvalues_alternate) ? json_decode(html_entity_decode($findTagValue->dropdownvalues_alternate), true) : []);
        
                        if(strpos($findTagValue->getAttribute('class'), 'documentdroplisttagname') !== false) {
                            if(isset($findTagValue->dropdownapi) && $findTagValue->dropdownapi != '') {
                                $docFields[$apiAttributeOrTagName] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, trim($findTagValue->plaintext)) : '');
                            } else {
                                $tagValuesArray = [];
                                foreach($jsonDecodeDropDownValues as $dropDownKey => $dropDownValues) {
                                    if(isset($findTagValue->plaintext) && !empty($findTagValue->plaintext) && isset($dropDownValues) && !empty($dropDownValues)) {
                                        if(strpos($findTagValue->plaintext, $dropDownValues) > -1) {
                                            $getArrayKey = array_search(trim($dropDownValues), $jsonDecodeDropDownValues);
                                            $tagValuesArray[] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && !empty($jsonDecodeDropDownAlternativeValues[$getArrayKey]) ? $jsonDecodeDropDownAlternativeValues[$getArrayKey] : $utility->convertDateMonthNameToInteger($languageId, trim($dropDownValues)));
                                        } else {
                                            $docFields[$apiAttributeOrTagName] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, trim($findTagValue->plaintext)) : '');
                                        }
                                    }
                                }
                                $totalTagValuesArray = count($tagValuesArray);
                                if($totalTagValuesArray > 1) {
                                    $tagValuesArray = implode(', ' , array_slice($tagValuesArray,0,$totalTagValuesArray-1)) . ' and ' . end($tagValuesArray);
                                } else {
                                    $tagValuesArray = implode(', ' , $tagValuesArray);
                                }
                                $docFields[$apiAttributeOrTagName] = $tagValuesArray;
                            }
                        } else {
                            $docFields[$apiAttributeOrTagName] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, trim($findTagValue->plaintext)) : '');
                        }
                    }
                }
                //document tags names showing and its loop ending
        
                if(!empty($docFields)) {
                    //showing alphbats order to show document fields data
                    ksort($docFields);
                    $responseArray['document_fields'] = $docFields;
                }
            }
        
            //basic information of sender and account details starting
            $senderData = Offersentdetails::where('offer_send_details.offer_sent_id', $document_id)->join('offer_sent', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')->select('offer_send_details.user_details')->where('offer_send_details.is_sender', 1)->whereIn('offer_sent.sender_id', $allUserIds)->first();
            if($senderData) {
                $senderDetails = $accountDetails = [];
                $senderUserDetails = Tcrypt::decrypter($senderData['user_details']);
                $senderUserDetailsJsonDecode = json_decode($senderUserDetails, true);
        
                //sender details information starting
                //for regular contract sender use full_name key and for online contract sender use first_name key
                $senderDetails['name'] = (isset($senderUserDetailsJsonDecode['full_name']) && $senderUserDetailsJsonDecode['full_name'] != '' ? trim($senderUserDetailsJsonDecode['full_name']) : (isset($senderUserDetailsJsonDecode['first_name']) && $senderUserDetailsJsonDecode['first_name'] != '' ? trim($senderUserDetailsJsonDecode['first_name']) : ''));
                $senderDetails['email'] = (isset($senderUserDetailsJsonDecode['email']) && $senderUserDetailsJsonDecode['email'] != '' ? trim(preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $senderUserDetailsJsonDecode['email'])) : '');
        
                $userCustomFields = (isset($senderUserDetailsJsonDecode['user_customfields']) && $senderUserDetailsJsonDecode['user_customfields'] != '' ? json_decode($senderUserDetailsJsonDecode['user_customfields'], true) : []);
                if(!empty($userCustomFields)) {
                    foreach($userCustomFields as $userCustomFldkey => $userCustomFldValue) {
                        $senderDetails[trim($userCustomFldkey)] = (isset($userCustomFldValue) && $userCustomFldValue != '' ? trim($userCustomFldValue) : '');
                    }
                }
                $responseArray['sender_details'] = $senderDetails;
                //sender details information ending
        
                //account details information starting
                $accountDetails['company'] = (isset($senderUserDetailsJsonDecode['company']) && $senderUserDetailsJsonDecode['company'] != '' ? trim($senderUserDetailsJsonDecode['company']) : '');
                $accountDetails['reg_no'] = (isset($senderUserDetailsJsonDecode['reg_no']) && $senderUserDetailsJsonDecode['reg_no'] != '' ? trim($senderUserDetailsJsonDecode['reg_no']) : '');
                $accountDetails['address'] = (isset($senderUserDetailsJsonDecode['address']) && $senderUserDetailsJsonDecode['address'] != '' ? trim($senderUserDetailsJsonDecode['address']) : '');
                $accountDetails['phone_no'] = (isset($senderUserDetailsJsonDecode['mobile']) && $senderUserDetailsJsonDecode['mobile'] != '' ? trim($senderUserDetailsJsonDecode['mobile']) : (isset($senderUserDetailsJsonDecode['telephone']) && $senderUserDetailsJsonDecode['telephone'] != '' ? trim($senderUserDetailsJsonDecode['telephone']) : ''));
                $accountDetails['zipcode'] = (isset($senderUserDetailsJsonDecode['zipcode']) && $senderUserDetailsJsonDecode['zipcode'] != '' ? trim($senderUserDetailsJsonDecode['zipcode']) : (isset($senderUserDetailsJsonDecode['post_code']) && $senderUserDetailsJsonDecode['post_code'] != '' ? trim($senderUserDetailsJsonDecode['post_code']) : ''));
                $accountDetails['city'] = (isset($senderUserDetailsJsonDecode['city']) && $senderUserDetailsJsonDecode['city'] != '' ? trim($senderUserDetailsJsonDecode['city']) : '');
        
                $responseArray['account_details'] = $accountDetails;
                //account details information ending
            }
            //basic information of sender and account details ending
        
            //basic information of document details starting
            if($offerSentContent) {
                $uniqueId = Offersentdetails::where('offer_send_details.offer_sent_id', $document_id)->join('offer_sent', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')->select('offer_send_details.unique_id')->where('offer_send_details.is_sender', 0)->whereIn('offer_sent.sender_id', $allUserIds)->first();
                $documentDetails = [];
                $documentDetails['template_name'] = ($offerSentContent['visible_name'] != '' ? trim(Tcrypt::decrypter($offerSentContent['visible_name'])) : trim(Tcrypt::decrypter($offerSentContent['name'])));
                $documentDetails['document_id'] = $offerSentContent['id'];
                $documentDetails['template_id'] = $offerSentContent['offer_id'];
                $documentDetails['language'] = (isset($offerSentContent['language_id']) && $offerSentContent['language_id'] != '' ? $utility->languageName($offerSentContent['language_id']) : 'English');
                $documentDetails['sent_date'] = (isset($offerSentContent['created_date']) && $offerSentContent['created_date'] != '' && $offerSentContent['created_date'] != '0000-00-00 00:00:00' ? trim($offerSentContent['created_date']) : '');
                $documentDetails['signed_date'] = (isset($offerSentContent['signed_date']) && $offerSentContent['signed_date'] != '' && $offerSentContent['signed_date'] != '0000-00-00 00:00:00' ? trim($offerSentContent['signed_date']) : '');
                $documentDetails['due_date'] = (isset($offerSentContent['due_date']) && $offerSentContent['due_date'] != '' && $offerSentContent['due_date'] != '0000-00-00 00:00:00' ? trim(date('Y-m-d', strtotime($offerSentContent['due_date']))) : '');
                $documentDetails['status'] = (isset($offerSentContent['offer_status']) ? $utility->offerStatusName($offerSentContent['offer_status']) : '');
                $documentDetails['pdf'] = $domain_name.'avtal/downloadpdf/'.$document_id.'/'.$uniqueId['unique_id'];

                $responseArray['document_details'] = $documentDetails;
            }
            //basic information of document details ending
            return response()->json(['status' => 'success', 'result' => $responseArray], 200, ['Content-Type' => 'application/json; charset=UTF-8'], JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
        } else {
            return Response::json(['status' => 'error', 'result' => 'No record(s) found']);
        }
    }
    public function getSpecificdocumentdetailcopy($custom_data=[],$indexpopup=0) {

        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');
        $storeFieldsObjDB = false;
       if(isset($custom_data['access_token']) && $custom_data['access_token'] != '') {
            $data['access_token'] = $custom_data['access_token'];
        }
        if(isset($custom_data['document_id']) && $custom_data['document_id'] != '') {
            $data['document_id'] = $custom_data['document_id'];
        }
        if(isset($data['access_token']) && $data['access_token'] != '' && !isset($custom_data['user_id']) ) {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
        if(isset($custom_data['user_id'])) {
            $user_id = $custom_data['user_id'];
            $storeFieldsObjDB = true;
        } else {
            $user_id = $utility->getUserIdByAuthToken($access_token);
        }
        $parent_id = $utility->getParent($user_id);
        if($utility->isParent($user_id) == 1) {
            $allUserIds = $utility->getSubusers($parent_id);
        } else {
            $allUserIds = [$user_id];
        }
        //print_rj($allUserIds, 1);

        //contract_id validation starting
        if(isset($data['document_id']) && $data['document_id'] != '') {
            $document_id = $data['document_id'];
        } elseif(isset($custom_data['sent_id']) && $custom_data['sent_id'] != '') {
            $document_id = $custom_data['sent_id'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'document_id is missing']);
        }

        //print_rj($allUserIds);
        $userTimeZone = $utility->getUsertimezone($parent_id);
        $getDocumentIdFromExternalDocumentId = $utility->documentExternalId($document_id, $allUserIds);
        if(!empty($getDocumentIdFromExternalDocumentId)) {
            $document_id = $getDocumentIdFromExternalDocumentId;
            //print_rj($document_id, 1);
            $data['document_id'] = $document_id;
        }

        $checkingDraft = Offersent::where('id', $document_id)->where('offer_status', 7)->where('is_draft', 1)->count();
        if($checkingDraft) {
            return Response::json(['status' => 'error', 'result' => 'document is not sent']);
        }

        $userSettings = $utility->getUserSettings($parent_id);
        $getApiHitCount = Userinfo::where('user_id', $parent_id)->select('hit_count')->first();
        $addupdateapiaccesslogs = $utility->addupdateapiaccesslogs($user_id, 'getSpecificdocumentdetail v3', $data, $getApiHitCount['hit_count']);
        if($addupdateapiaccesslogs == 'exceed') {
            $this->apiCallLimitExceedMessage = str_replace('#hitCuntNo', $getApiHitCount['hit_count'], $this->apiCallLimitExceedMessage);
            return Response::json(['status' => 'error', 'result' => $this->apiCallLimitExceedMessage]);
        }

        if($utility->checkAdminStripe($user_id) && !isset($custom_data['user_id']) ) {
            return Response::json(['status' => 'error', 'result' => 'Account is locked make payment in order to continue Simplesign']);
        }

        $contractData = Offersentdetails::where('offer_send_details.offer_sent_id', $document_id)->join('offer_sent', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')->select('offer_sent.language_id', 'offer_send_details.id AS detail_id', 'offer_send_details.offer_sent_id', 'offer_send_details.user_details', 'offer_send_details.offer_status', 'offer_send_details.req_attached', 'offer_send_details.document_read_date', 'offer_send_details.signed_date', 'offer_send_details.authentication_method', 'offer_send_details.role', 'offer_send_details.invitation_type', 'offer_send_details.invitation_order', 'offer_send_details.offer_confirmation', 'offer_send_details.id_attachments', 'offer_sent.content','offer_sent.offer_type',  'offer_send_details.forward_status', 'offer_send_details.forward_user_details', 'offer_send_details.forward_signed')->where('offer_send_details.is_sender', 0)->whereIn('offer_sent.sender_id', $allUserIds)->get()->toArray();
        //print_rj($contractData, 1);
        if($contractData) {
            $responseArray = $senderInfo = $contractDetails =  [];
            $offerSentContent = Offersent::where('id', $document_id)->whereIn('sender_id', $allUserIds)->select('content', 'visible_name', 'name', 'language_id', 'id', 'offer_id', 'created_date', 'offer_status', 'signed_date', 'due_date', 'external_doc_id')->first();
            foreach($contractData as $contractDataKey => $contractDataValue) {
                $languageId = $contractDataValue['language_id'];

                $peopleFields = $organizationFields = $details = $inviteAndForwardDetails = [];
                $nameExplode = '';
                
                $recipientUserDetails = Tcrypt::decrypter($contractDataValue['user_details']);
                $recipientUserDetailsJsonDecode = json_decode($recipientUserDetails, true);
               // print_rj($recipientUserDetailsJsonDecode, 1);

                if( isset($recipientUserDetailsJsonDecode['getrecsettings'])) {
                   $recipientUserDetailsJsonDecode['recipientId'] = $recipientUserDetailsJsonDecode['getrecsettings'];
                }
                 //print_rj($getSpecificdocumentdetailawais,1);
                // exit();

               /* if($_SERVER["HTTP_HOST"] == "acceptance.simplesign.io"){
                    echo "<pre>";
                    print_r($recipientUserDetails);
                    
                }*/

                //$peopleFields['detail_id'] = $contractDataValue['detail_id'];
                //$peopleFields['offer_sent_id'] = $contractDataValue['offer_sent_id'];
                //$contractDataValue['forward_status'];
                /*echo $recipientUserDetailsJsonDecode['recipientId'];
                exit();*/
                $userRole = (isset($recipientUserDetailsJsonDecode['recrolename']) && $recipientUserDetailsJsonDecode['recrolename'] != '' ? $recipientUserDetailsJsonDecode['recrolename'] : (isset($recipientUserDetailsJsonDecode['partyname']) && $recipientUserDetailsJsonDecode['partyname'] != '' ? $recipientUserDetailsJsonDecode['partyname'] : ''));

                //basic information of recipient starting

                $recipientFieldsRolesTabFields = (isset($recipientUserDetailsJsonDecode['Recipient_fields_roles_tab_fields']) && !empty($recipientUserDetailsJsonDecode['Recipient_fields_roles_tab_fields']) ? json_decode($recipientUserDetailsJsonDecode['Recipient_fields_roles_tab_fields'], true) : '');
                $recinfoFields = ($recipientFieldsRolesTabFields != '' ? $recipientFieldsRolesTabFields['recinfo_fields'] : '');

                //print_rj($recipientUserDetailsJsonDecode, 1);
                if(isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '') {
                    //for regular contract recipient use full_name key
                    if((isset($recinfoFields['last_name']) && $recinfoFields['last_name'] == 1) || (isset($recipientUserDetailsJsonDecode['last_name']) && $recipientUserDetailsJsonDecode['last_name'] != '')) {
                        $nameExplode = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($recipientUserDetailsJsonDecode['full_name'])) : '');
                        if(isset($recipientUserDetailsJsonDecode['last_name']) && $recipientUserDetailsJsonDecode['last_name'] != '' && isset($nameExplode[1]) && $nameExplode[1] != '' && $nameExplode[1] != $recipientUserDetailsJsonDecode['last_name']) {
                            $peopleFields['first_name'] = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? $recipientUserDetailsJsonDecode['full_name'] : '');
                            $peopleFields['last_name'] = (isset($recipientUserDetailsJsonDecode['last_name']) && $recipientUserDetailsJsonDecode['last_name'] != '' ? $recipientUserDetailsJsonDecode['last_name'] : '');
                        } else {
                            $peopleFields['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                            $peopleFields['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                        }
                    } else {
                        $nameExplode = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($recipientUserDetailsJsonDecode['full_name'])) : '');
                        $peopleFields['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                        $peopleFields['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                    }
                } elseif(isset($recipientUserDetailsJsonDecode['name']) && $recipientUserDetailsJsonDecode['name'] != '') {
                    //for online contract recipient use name key
                    $nameExplode = (isset($recipientUserDetailsJsonDecode['name']) && $recipientUserDetailsJsonDecode['name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($recipientUserDetailsJsonDecode['name'])) : '');
                    $peopleFields['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                    $peopleFields['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                }
                $peopleFields['email'] = (isset($recipientUserDetailsJsonDecode['email']) && $recipientUserDetailsJsonDecode['email'] != '' ? trim(preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $recipientUserDetailsJsonDecode['email'])) : '');
                if($parent_id == 12665) {
                    $peopleFields['personal_no'] = (isset($recipientUserDetailsJsonDecode['personnr']) && $recipientUserDetailsJsonDecode['personnr'] != '' ? (strlen(trim($recipientUserDetailsJsonDecode['personnr'])) == 12 || strlen(trim($recipientUserDetailsJsonDecode['personnr'])) == 13 ? substr(trim($recipientUserDetailsJsonDecode['personnr']), 2) : trim($recipientUserDetailsJsonDecode['personnr'])) : '');
                } else {
                    $peopleFields['personal_no'] = (isset($recipientUserDetailsJsonDecode['personnr']) && $recipientUserDetailsJsonDecode['personnr'] != '' ? trim($recipientUserDetailsJsonDecode['personnr']) : '');
                }
                $peopleFields['mobile'] = (isset($recipientUserDetailsJsonDecode['mobile']) && $recipientUserDetailsJsonDecode['mobile'] != '' ? trim($recipientUserDetailsJsonDecode['mobile']) : '');
                $peopleFields['address'] = (isset($recipientUserDetailsJsonDecode['address']) && $recipientUserDetailsJsonDecode['address'] != '' ? trim($recipientUserDetailsJsonDecode['address']) : '');
                $peopleFields['city'] = (isset($recipientUserDetailsJsonDecode['city']) && $recipientUserDetailsJsonDecode['city'] != '' ? trim($recipientUserDetailsJsonDecode['city']) : '');
                $peopleFields['zipcode'] = (isset($recipientUserDetailsJsonDecode['zipcode']) && $recipientUserDetailsJsonDecode['zipcode'] != '' ? trim($recipientUserDetailsJsonDecode['zipcode']) : (isset($recipientUserDetailsJsonDecode['zip']) && $recipientUserDetailsJsonDecode['zip'] != '' ? trim($recipientUserDetailsJsonDecode['zip']) : ''));
                //basic information of recipient ending

                //organization information of recipient starting
                if(isset($recipientUserDetailsJsonDecode['organization_fields'])) {
                    $orgFields = json_decode($recipientUserDetailsJsonDecode['organization_fields'], true);
                    foreach($orgFields as $orgFldsKey => $orgFldsValue) {
                        $orgFldsValue['orgFieldName'] = str_replace('name', 'organization_name', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('org_no', 'organization_no', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('phone', 'organization_phone', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('address', 'organization_address', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('city', 'organization_city', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('zipcode', 'organization_zipcode', $orgFldsValue['orgFieldName']);
                        $organizationFields[$orgFldsValue['orgFieldName']] = $orgFldsValue['orgFieldValue'];
                    }
                } else {
                    if(isset($recipientUserDetailsJsonDecode['org_name']) && $recipientUserDetailsJsonDecode['org_name'] != '') {
                        $organizationFields['organization_name'] = $recipientUserDetailsJsonDecode['org_name'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_reg_no']) && $recipientUserDetailsJsonDecode['org_reg_no'] != '') {
                        $organizationFields['organization_no'] = $recipientUserDetailsJsonDecode['org_reg_no'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_mobile']) && $recipientUserDetailsJsonDecode['org_mobile'] != '') {
                        $organizationFields['organization_phone'] = $recipientUserDetailsJsonDecode['org_mobile'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_address']) && $recipientUserDetailsJsonDecode['org_address'] != '') {
                        $organizationFields['organization_address'] = $recipientUserDetailsJsonDecode['org_address'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_city']) && $recipientUserDetailsJsonDecode['org_city'] != '') {
                        $organizationFields['organization_city'] = $recipientUserDetailsJsonDecode['org_city'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_zip']) && $recipientUserDetailsJsonDecode['org_zip'] != '') {
                        $organizationFields['organization_zipcode'] = $recipientUserDetailsJsonDecode['org_zip'];
                    }
                }
                //organization information of recipient ending

                //people information of new fields starting
                if(isset($recipientUserDetailsJsonDecode['extra_fields']) && !empty($recipientUserDetailsJsonDecode['extra_fields'])) {
                    $recipientFieldsWithoutValue = (isset($recipientUserDetailsJsonDecode['recipientfields']) && !empty($recipientUserDetailsJsonDecode['recipientfields']) ? json_decode($recipientUserDetailsJsonDecode['recipientfields'], true) : []);

                    $extraFields = (isset($recipientUserDetailsJsonDecode['extra_fields']) && !empty($recipientUserDetailsJsonDecode['extra_fields']) ? json_decode($recipientUserDetailsJsonDecode['extra_fields'], true) : []);
                    if($extraFields) {
                        $intersect = array_uintersect($extraFields, $recipientFieldsWithoutValue, function($val1, $val2) {
                            return strcmp($val1['fieldName'], $val2['fieldName']);
                        });
                        $intersect = array_values($intersect);
                    } else {
                        $intersect = [];
                    }

                    if(!empty($intersect)) {
                        foreach($intersect as $extraFldKey => $extraFldValue) {
                            $peopleFields[$extraFldValue['fieldName']] = $extraFldValue['fieldValue'];
                        }
                    }
                }
                //people information of new fields ending

                //organization information of new fields starting
                if(isset($recipientUserDetailsJsonDecode['org_extra_fields']) && !empty($recipientUserDetailsJsonDecode['org_extra_fields'])) {
                    $organizationFieldsWithoutValue = (isset($recipientUserDetailsJsonDecode['organizationfields']) && !empty($recipientUserDetailsJsonDecode['organizationfields']) ? json_decode($recipientUserDetailsJsonDecode['organizationfields'], true) : []);

                    $orgExtraFields = (isset($recipientUserDetailsJsonDecode['org_extra_fields']) && !empty($recipientUserDetailsJsonDecode['org_extra_fields']) ? json_decode($recipientUserDetailsJsonDecode['org_extra_fields'], true) : []);
                    if($orgExtraFields) {
                        $intersectOrg = array_uintersect($orgExtraFields, $organizationFieldsWithoutValue, function($val1, $val2) {
                            return strcmp($val1['fieldName'], $val2['fieldName']);
                        });
                        $intersectOrg = array_values($intersectOrg);
                    } else {
                        $intersectOrg = [];
                    }

                    if(!empty($intersectOrg)) {
                        foreach($intersectOrg as $orgExtraFldKey => $orgExtraFldValue) {
                            $organizationFields[$orgExtraFldValue['fieldName']] = $orgExtraFldValue['fieldValue'];
                        }
                    }
                }
                //organization information of new fields ending
                
                //organization information of fields which are placed at document starting
                $content = Tcrypt::decrypter($contractDataValue['content']);
                if($content != '') {
                    $html = new \Htmldom($content);
                    foreach($html->find('.text[getrecsettings='.$recipientUserDetailsJsonDecode['recipientId'].']') as $findKey => $findValue) {
                    if(isset($findValue->selectedtype) && $findValue->selectedtype =="email"){
                    if($findValue->find('h4', 0)) {
                    $peopleFields['email'] = trim($findValue->find('h4', 0)->plaintext);
                    } else {
                    if($findValue->find('p', 0)) {
                    $peopleFields['email'] = trim($findValue->find('p', 0)->plaintext);
                    }
                    }
                    }
                       
                    if(isset($findValue->selectedtype) && $findValue->selectedtype =="mobile"){
                    if($findValue->find('h4', 0)) {
                    $peopleFields['mobile'] = trim($findValue->find('h4', 0)->plaintext);
                    } else {
                    if($findValue->find('p', 0)) {
                    $peopleFields['mobile'] = trim($findValue->find('p', 0)->plaintext);
                    }
                    }
                    } 

                    if(isset($findValue->selectedtype) && $findValue->selectedtype =="address"){

                    if($findValue->find('h4', 0)) {
                    $peopleFields['address'] = trim($findValue->find('h4', 0)->plaintext);
                    } else {
                    if($findValue->find('p', 0)) {
                    $peopleFields['address'] = trim($findValue->find('p', 0)->plaintext);
                    }
                    }
                    }

                    if(isset($findValue->selectedtype) && $findValue->selectedtype =="city"){
                    if($findValue->find('h4', 0)) {
                    $peopleFields['city'] = trim($findValue->find('h4', 0)->plaintext);
                    } else {
                    if($findValue->find('p', 0)) {
                    $peopleFields['city'] = trim($findValue->find('p', 0)->plaintext);
                    }
                    }
                    } 
                    if(isset($findValue->selectedtype) && $findValue->selectedtype =="zipcode"){
                    if($findValue->find('h4', 0)) {
                    $peopleFields['zipcode'] = trim($findValue->find('h4', 0)->plaintext);
                    } else {
                    if($findValue->find('p', 0)) {
                    $peopleFields['zipcode'] = trim($findValue->find('p', 0)->plaintext);
                    }
                    }
                    } 
                    if(isset($findValue->selectedtype) && $findValue->selectedtype =="org_name"){
                    if($findValue->find('h4', 0)) {
                    $organizationFields['organization_name'] = trim($findValue->find('h4', 0)->plaintext);
                    } else {
                    if($findValue->find('p', 0)) {
                    $organizationFields['organization_name'] = trim($findValue->find('p', 0)->plaintext);
                    }
                    }
                    }

                    if(isset($findValue->selectedtype) && $findValue->selectedtype == 'org_name') {
                    if ($findValue->find('h4', 0)) {
                     $organizationFields['organization_name'] = trim($findValue->find('h4', 0)->plaintext);
                    } else {
                    if($findValue->find('p', 0)) {
                    $organizationFields['organization_name'] = trim($findValue->find('p', 0)->plaintext);
                        }
                    }    
                }
                else if(isset($findValue->selectedtype) && $findValue->selectedtype == 'org_reg_no') {
                 if ($findValue->find('h4', 0)) {
                     $organizationFields['organization_no'] = trim($findValue->find('h4', 0)->plaintext);
                    } else {
                    if($findValue->find('p', 0)) {
                    $organizationFields['organization_no'] = trim($findValue->find('p', 0)->plaintext);
                        }
                    }
                }
                else if(isset($findValue->selectedtype ) && $findValue->selectedtype  == 'org_mobile') {

                 if ($findValue->find('h4', 0)) {
                     $organizationFields['organization_phone'] = trim($findValue->find('h4', 0)->plaintext);
                    } else {
                    if($findValue->find('p', 0)) {
                    $organizationFields['organization_phone'] = trim($findValue->find('p', 0)->plaintext);
                        }
                    }
                }
                else if(isset($findValue->selectedtype) && $findValue->selectedtype == 'org_address') {

                 if ($findValue->find('h4', 0)) {
                     $organizationFields['organization_address'] = trim($findValue->find('h4', 0)->plaintext);
                    } else {
                    if($findValue->find('p', 0)) {
                    $organizationFields['organization_address'] = trim($findValue->find('p', 0)->plaintext);
                        }
                    }
                }
                else if(isset($findValue->selectedtype) && $findValue->selectedtype == 'org_city') {
           
                 if ($findValue->find('h4', 0)) {
                     $organizationFields['organization_city'] = trim($findValue->find('h4', 0)->plaintext);
                    } else {
                    if($findValue->find('p', 0)) {
                    $organizationFields['organization_city'] = trim($findValue->find('p', 0)->plaintext);
                        }
                    }
                }
                else if(isset($findValue->selectedtype) && $findValue->selectedtype == 'org_zip') {
                if ($findValue->find('h4', 0)) {
                     $organizationFields['organization_zipcode'] = trim($findValue->find('h4', 0)->plaintext);
                    } else {
                    if($findValue->find('p', 0)) {
                    $organizationFields['organization_zipcode'] = trim($findValue->find('p', 0)->plaintext);
                        }
                    }
                } 
                else{/*    
                if ($findValue->find('h4', 0)) {
                $recdata[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                } else {
                //right now paragraph tag is showing and will be replaced by h4 near future starting
                if($findValue->find('p', 0)) {
                $recdata[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                }
                }
                */}
          

                    if(isset($recipientUserDetailsJsonDecode['id']) && $recipientUserDetailsJsonDecode['id'] == $findValue->recipientselectedid) {

                            
                            if(strpos($findValue->getAttribute('class'), 'peopleNewField') !== false) {
                                if($findValue->find('h4', 0)) {
                                    $peopleFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                } else {
                                    if($findValue->find('p', 0)) {
                                        $peopleFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                    }
                                }
                            } if(strpos($findValue->getAttribute('class'), 'organizationNewField') !== false) {
                                if($findValue->find('h4', 0)) {
                                    $organizationFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                } else {
                                    if($findValue->find('p', 0)) {
                                        $organizationFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                    }
                                }
                            }
                            //codition for regular contract ending
                        } else {
                          
                            //if($userRole == $findValue->parent()->parent()->whowillfill) {
                            if($userRole == $findValue->recipientselected) {
                                if(strpos($findValue->getAttribute('class'), 'peopleNewField') !== false) {
                                    if($findValue->find('h4', 0)) {
                                        $peopleFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                    } else {
                                        //right now paragraph tag is showing and will be replaced by h4 near future starting
                                        if($findValue->find('p', 0)) {
                                            $peopleFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                        }
                                        //right now paragraph tag is showing and will be replaced by h4 near future ending
                                    }
                                } if(strpos($findValue->getAttribute('class'), 'organizationNewField') !== false) {
                                    if($findValue->find('h4', 0)) {
                                        $organizationFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                    } else {
                                        //right now paragraph tag is showing and will be replaced by h4 near future starting
                                        if($findValue->find('p', 0)) {
                                            $organizationFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                        }
                                        //right now paragraph tag is showing and will be replaced by h4 near future ending
                                    }
                                }
                            }
                        
                            //codition for online contract ending
                        }
                    }
                }
                //organization information of fields which are placed at document ending

                //basic information of document settings starting
                if(isset($recipientUserDetailsJsonDecode['details_fields'])) {
                    $detailsFields = json_decode($recipientUserDetailsJsonDecode['details_fields'], true);
                    foreach($detailsFields as $orgFldsKey => $orgFldsValue) {
                        $details[$orgFldsValue['detailsFieldName']] = $orgFldsValue['detailsFieldValue'];
                    }
                } else {
                    //print_rj($recipientUserDetailsJsonDecode);
                    $details['recipient_role'] = (isset($recipientUserDetailsJsonDecode['recrolename']) && $recipientUserDetailsJsonDecode['recrolename'] != '' ? $recipientUserDetailsJsonDecode['recrolename'] : (isset($recipientUserDetailsJsonDecode['partyname']) && $recipientUserDetailsJsonDecode['partyname'] != '' ? $recipientUserDetailsJsonDecode['partyname'] : ''));

                    if($contractDataValue['role'] == 2) {
                        $contractDataValue['authentication_method'] = 8;
                    }

                    $details['authentication'] = $utility->authenticationMethodName($contractDataValue['authentication_method']);
                    if(isset($contractDataValue['invitation_type']) && $contractDataValue['invitation_type'] != '') {
                        $details['invitation_type'] = $utility->invitationTypeName($contractDataValue['invitation_type']);
                    }
                    if($contractDataValue['invitation_order'] != 0) {
                        $details['invitation_order'] = $contractDataValue['invitation_order'];
                    }
                    if(isset($contractDataValue['offer_confirmation']) && $contractDataValue['offer_confirmation'] != '') {
                        $details['confirmation'] = $utility->offerConfirmationName($contractDataValue['offer_confirmation']);
                    }
                    $details['id_attachment'] = $utility->idAttachmentName($contractDataValue['id_attachments']);
                }
                $details['request_attachment'] = ($contractDataValue['req_attached'] != '' ? 'yes' : 'no');
                if($contractDataValue['document_read_date'] != '' && $contractDataValue['document_read_date'] != '0000-00-00 00:00:00') {
                    $details['last_viewing_date'] = ($contractDataValue['document_read_date'] != '' ? $contractDataValue['document_read_date'] : '');
                }
                //$details['signed_date'] = ($contractDataValue['signed_date'] != '' && $contractDataValue['signed_date'] != '0000-00-00 00:00:00' ? $contractDataValue['signed_date'] : '');
                $details['signed_date'] = '';
                if($contractDataValue['signed_date'] != '' && $contractDataValue['signed_date'] != '0000-00-00 00:00:00' && $contractDataValue['offer_status'] == 4 && $contractDataValue['role'] == 1) {
                    $details['signed_date'] = $contractDataValue['signed_date'];
                } elseif($contractDataValue['signed_date'] != '' && $contractDataValue['signed_date'] != '0000-00-00 00:00:00' && $contractDataValue['offer_status'] == 3 && $contractDataValue['role'] == 2) {
                    $details['signed_date'] = $contractDataValue['signed_date'];
                }
                //https://acceptance.simplesign.io/admin/checkuserdetail/541998
                //https://acceptance.simplesign.io/v3/specificdocumentdetail?access_token=WvJ2kroPU3cmzsINnEFe70lKobdBtt3SId3owcU1&document_id=542361
                //https://acceptance.simplesign.io/v3/specificdocumentdetail?access_token=WvJ2kroPU3cmzsINnEFe70lKobdBtt3SId3owcU1&document_id=542371
                //https://acceptance.simplesign.io/admin/checkuserdetail/542371
                //https://docs.google.com/document/d/1U3iHzT9kXupLmeFnpamlAwUK1CZoChog1ZvDSEManaY/edit
                //https://acceptance.simplesign.io/v3/specificdocumentdetail?access_token=WvJ2kroPU3cmzsINnEFe70lKobdBtt3SId3owcU1&document_id=543068
                //https://acceptance.simplesign.io/v3/specificdocumentdetail?access_token=WvJ2kroPU3cmzsINnEFe70lKobdBtt3SId3owcU1&document_id=543218
                //https://acceptance.simplesign.io/v3/specificdocumentdetail?access_token=KyQE4Vp9Tok1VZZDoZ2Zy1GkdKnUi9xroK59D2EP&document_id=538121 client
                //forward status without transfer signature role
                /* Forward status is always == 1 for the recipient who is sending invitation (sigingrole/viewonly ) */
                /* Forward signed is always == 1 for the recipient who is only sending signature role to another person */
                if($contractDataValue['offer_status'] == 4 && $contractDataValue['forward_status'] == 1 && $contractDataValue['forward_signed'] == 1) {
                    $details['status'] = 'Forwarded to sign';
                } elseif($contractDataValue['offer_status'] < 4 && $contractDataValue['forward_status'] == 1 && $contractDataValue['forward_signed'] == 0) {
                    $details['status'] = 'Invited to view';
                } else {
                    $details['status'] = (isset($contractDataValue['offer_status']) != '' ? $utility->offerStatusName($contractDataValue['offer_status']) : '');
                }
                //$details['status'] = (isset($contractDataValue['offer_status']) != '' ? $utility->offerStatusName($contractDataValue['offer_status']) : '');

                if($contractDataValue['forward_user_details'] != '') {
                    $forwardUserDetails = Tcrypt::decrypter($contractDataValue['forward_user_details']);
                    if($forwardUserDetails != '') {
                        $forwardUserDetailsJsonDecode = json_decode($forwardUserDetails, true);
                        $forwaredFullName = (isset($forwardUserDetailsJsonDecode['full_name']) && $forwardUserDetailsJsonDecode['full_name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($forwardUserDetailsJsonDecode['full_name'])) : '');
                        $inviteAndForwardDetails['first_name'] = (isset($forwaredFullName[0]) && $forwaredFullName[0] != '' ? trim($forwaredFullName[0]) : '');
                        $inviteAndForwardDetails['last_name'] = (isset($forwaredFullName[1]) && $forwaredFullName[1] != '' ? trim($forwaredFullName[1]) : '');
                        //$inviteAndForwardDetails['email'] = (isset($forwardUserDetailsJsonDecode['email']) && $forwardUserDetailsJsonDecode['email'] != '' ? trim($forwardUserDetailsJsonDecode['email']) : '');
                        //$inviteAndForwardDetails['mobile'] = (isset($forwardUserDetailsJsonDecode['mobile']) && $forwardUserDetailsJsonDecode['mobile'] != '' ? trim($forwardUserDetailsJsonDecode['mobile']) : '');

                        /* test condition as per zain suggestion when signing role is forwarded */
                        /* Setting keys in the object for signature role sender and reciever */
                        if($contractDataValue['offer_status'] == 4 && $contractDataValue['forward_status'] == 1 && $contractDataValue['forward_signed'] == 1) {
                            $details['forwarded_signing_role_to'] = $inviteAndForwardDetails['first_name'].' '.$inviteAndForwardDetails['last_name'];
                        } elseif((($contractDataValue['offer_status'] <= 4 && $contractDataValue['role'] == 1) || ($contractDataValue['offer_status'] == 3 && $contractDataValue['role'] == 2)) && $contractDataValue['forward_status'] == 2 && isset($recipientUserDetailsJsonDecode['forward_to_sign']) && $recipientUserDetailsJsonDecode['forward_to_sign'] == 1) {
                            $details['invited_to_sign_by'] = $inviteAndForwardDetails['first_name'].' '.$inviteAndForwardDetails['last_name'];
                        }
                        //echo ($contractDataValue['forward_status']. ' ' .$recipientUserDetailsJsonDecode['email'].' '.$contractDataValue['forward_signed'].' '.(isset($forwardUserDetailsJsonDecode['invited_to_view']) ? $forwardUserDetailsJsonDecode['invited_to_view'] : "") );echo'<br>';
                        /* test condition as per zain suggestion when only invited to view */
                        /* Setting keys in the object for sender and reciever of invitation to view only*/
                        if($contractDataValue['forward_status'] == 1 && $contractDataValue['forward_signed'] == 0) {
                            $details['invited_to_view_only'] = $inviteAndForwardDetails['first_name'].' '.$inviteAndForwardDetails['last_name'];
                        } elseif($contractDataValue['forward_status'] == 2 && isset($recipientUserDetailsJsonDecode['invited_to_view']) && $recipientUserDetailsJsonDecode['invited_to_view'] == 1) {
                            $details['invited_to_view_only_by'] = $inviteAndForwardDetails['first_name'].' '.$inviteAndForwardDetails['last_name'];
                        }
                    }
                }

                //this is for rejected to show in sender status
                if($contractDataValue['offer_status'] == 5) {
                    $offerSentContent['offer_status'] = 5;
                } if($contractDataValue['offer_status'] == 6) {
                    $offerSentContent['offer_status'] = 6;
                }

                if(!empty($organizationFields)) {
                    $peopleAndDetailsArray = ['people_fields' => $peopleFields, 'organization_fields' => $organizationFields, 'details' => $details];
                } else {
                    $peopleAndDetailsArray = ['people_fields' => $peopleFields, 'details' => $details];
                }
                array_push($responseArray, $peopleAndDetailsArray);
                //basic information of document settings ending
            }
                $peopleAndDetailsArrayseco = [];
                $detailsec = [];
                $recsec = [];
                $orgsec = [];
                if(($contractData) && sizeof($contractData) == 1 ){
                   /* echo sizeof($contractData);
                    exit();*/
                $emailrec = "";
                $full_namerec = "";
                $mobilerec    = "";
                $addressrec    = "";
                $zipcoderec   = "";
                $cityerec     = "";
                $companyrec   = "";
                $detailsec['authentication'] = 1;
                $detailsec['id_attachment'] = 'no';
                $detailsec['request_attachment'] = 'no';
                $recipient_role = "";
                foreach($html->find('.field_box_popupcontainer[getrecsettings=2]') as $findTagKey => $findTagValue) {
                    
                $recipient_role = $findTagValue->recipientselected;   
                if(isset($findTagValue->selectedtype) && $findTagValue->selectedtype =="full_name"){
                if($findTagValue->find('h4', 0)) {
                $recsec['full_name'] = trim($findTagValue->find('h4', 0)->plaintext);
                } else {
                if($findTagValue->find('p', 0)) {
                $recsec['full_name'] = trim($findTagValue->find('p', 0)->plaintext);
                }
                }
                }

                /* if(isset($findTagValue->selectedtype) && $findTagValue->selectedtype == "email") {
                    print_rj('7397');
                } */

                if(isset($findTagValue->selectedtype) && $findTagValue->selectedtype == "email") {
                    if($findTagValue->find('h4', 0) && isset($findTagValue->find('h4', 0)->plaintext) && $findTagValue->find('h4', 0)->plaintext != '') {
                        $recsec['email'] = trim($findTagValue->find('h4', 0)->plaintext);
                    } else {
                        if($findTagValue->find('p', 0) && isset($findTagValue->find('p', 0)->innertext) && $findTagValue->find('p', 0)->innertext != '') {
                            $recsec['email'] = trim($findTagValue->find('p', 0)->innertext);
                        }
                    }
                }
                
                if(isset($findTagValue->selectedtype) && $findTagValue->selectedtype =="mobile"){
                if($findTagValue->find('h4', 0)) {
                $recsec['mobile'] = trim($findTagValue->find('h4', 0)->plaintext);
                } else {
                if($findTagValue->find('p', 0)) {
                $recsec['mobile'] = trim($findTagValue->find('p', 0)->plaintext);
                }
                }
                }

                if(isset($findTagValue->selectedtype) && $findTagValue->selectedtype =="address"){
                if($findTagValue->find('h4', 0)) {
                $recsec['address'] = trim($findTagValue->find('h4', 0)->plaintext);
                } else {
                if($findTagValue->find('p', 0)) {
                $recsec['address'] = trim($findTagValue->find('p', 0)->plaintext);
                }
                }
                }

                if(isset($findTagValue->selectedtype) && $findTagValue->selectedtype =="city"){
                if($findTagValue->find('h4', 0)) {
                $recsec['city'] = trim($findTagValue->find('h4', 0)->plaintext);
                } else {
                if($findTagValue->find('p', 0)) {
                $recsec['city'] = trim($findTagValue->find('p', 0)->plaintext);
                }
                }
                }

                if(isset($findTagValue->selectedtype) && $findTagValue->selectedtype =="personnr"){
                if($findTagValue->find('h4', 0)) {
                $recsec['personal_no'] = trim($findTagValue->find('h4', 0)->plaintext);
                } else {
                if($findTagValue->find('p', 0)) {
                $recsec['personal_no'] = trim($findTagValue->find('p', 0)->plaintext);
                }
                }
                }

                if(isset($findTagValue->selectedtype) && $findTagValue->selectedtype =="zipcode"){
                if($findTagValue->find('h4', 0)) {
                $recsec['zipcode'] = trim($findTagValue->find('h4', 0)->plaintext);
                } else {
                if($findTagValue->find('p', 0)) {
                $recsec['zipcode'] = trim($findTagValue->find('p', 0)->plaintext);
                }
                }
                }

                if(isset($findTagValue->selectedtype) && $findTagValue->selectedtype =="org_name"){
                if($findTagValue->find('h4', 0)) {
                $orgsec['organization_name'] = trim($findTagValue->find('h4', 0)->plaintext);
                } else {
                if($findTagValue->find('p', 0)) {
                $orgsec['organization_name'] = trim($findTagValue->find('p', 0)->plaintext);
                }
                }
                }

                if(isset($findTagValue->selectedtype) && $findTagValue->selectedtype =="org_reg_no"){
                if($findTagValue->find('h4', 0)) {
                $orgsec['organization_no'] = trim($findTagValue->find('h4', 0)->plaintext);
                } else {
                if($findTagValue->find('p', 0)) {
                $orgsec['organization_no'] = trim($findTagValue->find('p', 0)->plaintext);
                }
                }
                }

                if(isset($findTagValue->selectedtype) && $findTagValue->selectedtype =="org_mobile"){
                if($findTagValue->find('h4', 0)) {
                $orgsec['organization_phone'] = trim($findTagValue->find('h4', 0)->plaintext);
                } else {
                if($findTagValue->find('p', 0)) {
                $orgsec['organization_phone'] = trim($findTagValue->find('p', 0)->plaintext);
                }
                }
                }

                if(isset($findTagValue->selectedtype) && $findTagValue->selectedtype =="org_address"){
                if($findTagValue->find('h4', 0)) {
                $orgsec['organization_address'] = trim($findTagValue->find('h4', 0)->plaintext);
                } else {
                if($findTagValue->find('p', 0)) {
                $orgsec['organization_address'] = trim($findTagValue->find('p', 0)->plaintext);
                }
                }
                }

                 if(isset($findTagValue->selectedtype) && $findTagValue->selectedtype =="org_city"){
                if($findTagValue->find('h4', 0)) {
                $orgsec['organization_city'] = trim($findTagValue->find('h4', 0)->plaintext);
                } else {
                if($findTagValue->find('p', 0)) {
                $orgsec['organization_city'] = trim($findTagValue->find('p', 0)->plaintext);
                }
                }
                }

                if(isset($findTagValue->selectedtype) && $findTagValue->selectedtype =="org_zip"){
                if($findTagValue->find('h4', 0)) {
                $orgsec['organization_zipcode'] = trim($findTagValue->find('h4', 0)->plaintext);
                } else {
                if($findTagValue->find('p', 0)) {
                $orgsec['organization_zipcode'] = trim($findTagValue->find('p', 0)->plaintext);
                }
                }
                }

                if(isset($findTagValue->selectedtype) && $findTagValue->selectedtype =="org_zip"){
                if($findTagValue->find('h4', 0)) {
                $orgsec['organization_zipcode'] = trim($findTagValue->find('h4', 0)->plaintext);
                } else {
                if($findTagValue->find('p', 0)) {
                $orgsec['organization_zipcode'] = trim($findTagValue->find('p', 0)->plaintext);
                }
                }
                }
              /*  if($findTagValue->selectedtype == "org_name"){
                $orgsec["organization_name"] =  (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                }else{
                $recsec[$findTagValue->selectedtype] =  (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                    
                }*/
                }
                //die('line no 7531');
                $detailsec['recipient_role'] = $recipient_role ;
                $peopleAndDetailsArrayseco['people_fields'] = $recsec;
                $peopleAndDetailsArrayseco['organization_fields'] = $orgsec;
                $peopleAndDetailsArrayseco['details'] = $detailsec;
                if(!empty($peopleAndDetailsArray))
                array_push($responseArray, $peopleAndDetailsArrayseco);
             }
            //shahnawaz code
            // print_rj($peopleAndDetailsArray, 1);
            if($indexpopup == 1){
            $count = 0;
            if(isset($responseArray) && !empty($responseArray)) {
             $personsDetail = [];  
             foreach($responseArray as $recipientindexdata) {
                if(isset($responseArray[$count]['people_fields']['first_name']) )
                $personsDetail[$count]['name']     = $responseArray[$count]['people_fields']['first_name']." ".$responseArray[$count]['people_fields']['last_name'];
                if(isset($responseArray[$count]['people_fields']['first_name']) )
                $personsDetail[$count]['fullname']  = $responseArray[$count]['people_fields']['first_name']." ".$responseArray[$count]['people_fields']['last_name'];
                if(isset($responseArray[$count]['people_fields']['first_name']) )
                $personsDetail[$count]['value']     =  $responseArray[$count]['people_fields']['first_name']." ".$responseArray[$count]['people_fields']['last_name'];
                
                if(isset($responseArray[$count]['people_fields']['full_name']) )
                $personsDetail[$count]['name']     = $responseArray[$count]['people_fields']['full_name'];
                if(isset($responseArray[$count]['people_fields']['full_name']) )
                $personsDetail[$count]['fullname']  = $responseArray[$count]['people_fields']['full_name'];
                if(isset($responseArray[$count]['people_fields']['full_name']) )
                $personsDetail[$count]['value']     =  $responseArray[$count]['people_fields']['full_name'];
                $personsDetail[$count]['org_id'] = 0;
                $personsDetail[$count]['data'] = 0;
                if(isset($responseArray[$count]['people_fields']['email']) )
                $personsDetail[$count]['email'] = $responseArray[$count]['people_fields']['email'];
                if(isset($responseArray[$count]['people_fields']['mobile']) )
                $personsDetail[$count]['mobile'] = $responseArray[$count]['people_fields']['mobile'];
                if(isset($responseArray[$count]['people_fields']['address']) )
                $personsDetail[$count]['address'] =  $responseArray[$count]['people_fields']['address'];
                if(isset($responseArray[$count]['people_fields']['city']) )
                $personsDetail[$count]['city'] =  $responseArray[$count]['people_fields']['city'];
                if(isset($responseArray[$count]['people_fields']['zipcode']) )
                $personsDetail[$count]['zip'] = $responseArray[$count]['people_fields']['zipcode'];

                if(isset($responseArray[$count]['people_fields']['Land']) )
                $personsDetail[$count]['org_extra_land']     = $responseArray[$count]['people_fields']['Land'];

                if(isset($responseArray[$count]['people_fields']['personal_no']) )
                $personsDetail[$count]['personnr'] = $responseArray[$count]['people_fields']['personal_no'];

                 if(isset($responseArray[$count]['organization_fields']['organization_name']) ){
                $personsDetail[$count]['company'] = $responseArray[$count]['organization_fields']['organization_name'];
                $personsDetail[$count]['org_name'] = $responseArray[$count]['organization_fields']['organization_name'];
                }
                if(isset($responseArray[$count]['organization_fields']['organization_reg_no']) ){
                    $personsDetail[$count]['org_reg_no'] = $responseArray[$count]['organization_fields']['organization_reg_no'];
                } else if(isset($responseArray[$count]['organization_fields']['organization_no'])) {
                    $personsDetail[$count]['org_reg_no'] = $responseArray[$count]['organization_fields']['organization_no'];
                }
                if(isset($responseArray[$count]['organization_fields']['organization_phone']) ){
                $personsDetail[$count]['org_mobile'] = $responseArray[$count]['organization_fields']['organization_phone'];
                }
                
                if(isset($responseArray[$count]['organization_fields']['organization_address']) ){
                $personsDetail[$count]['org_address'] = $responseArray[$count]['organization_fields']['organization_address'];
                }

                 if(isset($responseArray[$count]['organization_fields']['organization_city']) ){
                $personsDetail[$count]['org_city'] = $responseArray[$count]['organization_fields']['organization_city'];
                }
                 if(isset($responseArray[$count]['organization_fields']['organization_zipcode']) ){
                $personsDetail[$count]['org_zip'] = $responseArray[$count]['organization_fields']['organization_zipcode'];
                }
                $count++;
             
             }
             $responseArray['personsDetail'] = $personsDetail; 
            }
           
            }
            
            $content = Tcrypt::decrypter($offerSentContent['content']);
            if($content != '') {
                //getGetdocumentinfoxml function of garda template response
                $html = new \Htmldom($content);
                $dynamicElements = [];
                foreach($html->find('.template_container') as $temConKey => $temConValue) {
                    $arrayPush = [];
                    foreach($temConValue->find('.formElement') as $findKey => $findValue) {
                                        
                        $elementStyle = $findValue->getAttribute('style');
                        $arrCSS = $utility->parse_css($elementStyle);
                        $parentDiv = $findValue->parent()->parent();

                        //Fixing Position when field is inside the borderbox or textbox START
                        $addtop = 0;
                        $addleft = 0;
                        if(strpos($parentDiv->getAttribute('class'), 'dynamic_border') !== false && strpos($parentDiv->getAttribute('class'), 'insert_box_div') === false) {
                            $parentCSS = $utility->parse_css($parentDiv->getAttribute('style'));
                            $addtop = (isset($parentCSS['top']) && $parentCSS['top'] != '' ? round($parentCSS['top']) : 0);
                            $addleft = (isset($parentCSS['left']) && $parentCSS['left'] != '' ? round($parentCSS['left']) : 0);
                        } elseif(strpos($parentDiv->getAttribute('class'), 'insert_box_div') !== false && strpos($parentDiv->getAttribute('class'), 'dynamic_border') === false) {
                            $parentCSS = $utility->parse_css($parentDiv->getAttribute('style'));
                            $addtop = (isset($parentCSS['top']) && $parentCSS['top'] != '' ? round($parentCSS['top']) : 0);
                            $addleft = (isset($parentCSS['left']) && $parentCSS['left'] != '' ? round($parentCSS['left']) : 0);
                        } elseif(strpos($parentDiv->getAttribute('class'), 'insert_box_div') !== false  && strpos($parentDiv->getAttribute('class'), 'dynamic_border') !== false) {
                            $parentCSS = $utility->parse_css($parentDiv->getAttribute('style'));
                            $addtop = (isset($parentCSS['top']) && $parentCSS['top'] != '' ? round($parentCSS['top']) : 0);
                            $addleft = (isset($parentCSS['left']) && $parentCSS['left'] != '' ? round($parentCSS['left']) : 0);
                        }
                        //Fixing Position when field is inside the borderbox or textbox END

                        $topPosition = (isset($arrCSS['top']) && $arrCSS['top'] != '' ? round($arrCSS['top'])+$addtop : 0);
                        $leftPosition = (isset($arrCSS['left']) && $arrCSS['left'] != '' ? round($arrCSS['left'])+$addleft : 0);
                        array_push($arrayPush, ['top' => $topPosition, 'left' => $leftPosition, 'dynamic_id' => $findValue->dynamic_id]);
                    }
                    if(!empty($arrayPush)) {
                        sort($arrayPush);
                        array_push($dynamicElements, $arrayPush);
                    }
                }

                $docFields = [];
                foreach($dynamicElements as $eachPageKey => $eachPageValue) {
                    foreach($eachPageValue as $eachElementKey => $eachElementValue) {
                        $eachDynamic_id = $eachElementValue['dynamic_id'];
                        $mainDiv = $html->find('[dynamic_id="'.$eachDynamic_id.'"]', 0);
                        if(!$mainDiv->find('.text', 0)) {
                            continue;
                        }

                        $findValue = $mainDiv->find('.text', 0);
                        //getting document text fields
                        if(strpos($findValue->getAttribute('class'), 'documentField') !== false) {
                            if($findValue->selectedtype != '0') {
                                $apiAttributeOrSelectedType = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->selectedtype);
                                if($parent_id == 10719) {
                                    $apiAttributeOrSelectedType = str_replace(' ', '_', $apiAttributeOrSelectedType);
                                }
                                if($findValue->find('h4', 0) && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                    $docFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode(htmlspecialchars_decode($findValue->find('h4', 0)->plaintext))));
                                } elseif($findValue->find('p', 0) && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                    $docFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode(htmlspecialchars_decode($findValue->find('p', 0)->plaintext))));
                                } elseif(strpos($mainDiv->getAttribute('class'), 'relationDisable') === false && (!isset($docFields[$findValue->selectedtype]))) {
                                    //comments below line of code and add this condition with elseif and === false 
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrSelectedType] = '';
                                } /* elseif(!isset($docFields[$findValue->selectedtype])) {
                                    $docFields[$apiAttributeOrSelectedType] = '';
                                }
                                
                                if(strpos($mainDiv->getAttribute('class'), 'relationDisable') !== false && (!isset($docFields[$findValue->selectedtype]))) {
                                    $docFields[$apiAttributeOrSelectedType] = '';
                                } */
                            }   //not equal condition ends here
                        }   //getting document text fields ends here
                        //getting custom text fields
                        try {
                            //if(strpos($findValue->getAttribute('class'), 'field_box_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && !strpos($findValue->getAttribute('class'), 'datepickerfields_new')) {
                            if(strpos($findValue->getAttribute('class'), 'field_box_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'datepickerfields_new') === false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                $apiAttributeOrSelectedType = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->selectedtype);
                                if($parent_id == 10719) {
                                    $apiAttributeOrSelectedType = str_replace(' ', '_', $apiAttributeOrSelectedType);
                                }
                                //comment below line on 4 August 2020 for not show the key if value is empty
                                //$docFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                if($findValue->find('h4', 0) && $findValue->find('h4', 0)->plaintext) {
                                    $docFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode( htmlspecialchars_decode($findValue->find('h4', 0)->plaintext) )));
                                }
                                if($findValue->find('p', 0) && $findValue->find('p', 0)->plaintext) {
                                    $docFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode(htmlspecialchars_decode($findValue->find('p', 0)->plaintext))));
                                }
                            }
                        } catch(\Exception $e) {}

                        //getting datepicker fields
                        try {
                            if(strpos($findValue->getAttribute('class'), 'field_box_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'datepickerfields_new') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                $apiAttributeOrSelectedType = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->selectedtype);
                                if($parent_id == 10719) {
                                    $apiAttributeOrSelectedType = str_replace(' ', '_', $apiAttributeOrSelectedType);
                                }
                                //comment below line on 4 August 2020 for not show the key if value is empty
                                //$docFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                if($findValue->find('h4', 0) && $findValue->find('h4', 0)->plaintext) {
                                    $docFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode(htmlspecialchars_decode($findValue->find('h4', 0)->plaintext))));
                                }
                                if($findValue->find('p', 0) && $findValue->find('p', 0)->plaintext) {
                                    $docFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode(htmlspecialchars_decode($findValue->find('p', 0)->plaintext))));
                                }
                            }
                        } catch(\Exception $e) {}

                        //getting document checkbox elements
                        if(strpos($findValue->getAttribute('class'), 'documentFieldCheckbox') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            //all values of checkboxes are showing
                            $apiAttributeOrFieldLabelName = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->fieldlabelname);
                            if($parent_id == 10719) {
                                $apiAttributeOrFieldLabelName = str_replace(' ', '_', $apiAttributeOrFieldLabelName);
                            }
                            if($findValue->find('.check_icon', 0) && (strpos($findValue->find('.check_icon', 0)->getAttribute('style'), 'visible') !== false || strpos($findValue->getAttribute('class'), 'isChecked') !== false)) {
                                $docFields[$apiAttributeOrFieldLabelName] = 'Yes';
                            } else {
                                $docFields[$apiAttributeOrFieldLabelName] = 'No';
                            }
                        }   //getting document checkbox elements ends here
                        //getting custom checkbox elements
                        if(strpos($findValue->getAttribute('class'), 'check_box_popupcontainer') !== false && strpos($mainDiv->getAttribute('class'), 'chechBoxCustom') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrFieldLabelName = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->fieldlabelname);
                            if($parent_id == 10719) {
                                $apiAttributeOrFieldLabelName = str_replace(' ', '_', $apiAttributeOrFieldLabelName);
                            }
                            if($findValue->find('.check_icon', 0) && strpos($findValue->find('.check_icon', 0)->getAttribute('style'), 'visible')) {
                                $docFields[$apiAttributeOrFieldLabelName] = 'Yes';
                            } else {
                                $docFields[$apiAttributeOrFieldLabelName] = 'No';
                            }
                        }

                        //getting document droplist elements
                        $jsonDecodeDropDownValues = (isset($findValue->dropdownvalues) && !empty($findValue->dropdownvalues) ? json_decode(html_entity_decode($findValue->dropdownvalues), true) : []);
                        $jsonDecodeDropDownAlternativeValues = (isset($findValue->dropdownvalues_alternate) && !empty($findValue->dropdownvalues_alternate) ? json_decode(html_entity_decode($findValue->dropdownvalues_alternate), true) : []);
                        if(strpos($findValue->getAttribute('class'), 'documentFieldDroplist') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            if($parent_id == 10719) {
                                $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                            }
                            //forsearching starting
                            if($findValue->find('span.texthere', 0)) {
                                if(!empty($jsonDecodeDropDownValues) && $findValue->dropdownlabel != trim($findValue->find('span.texthere', 0)->plaintext)) {
                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && !empty($jsonDecodeDropDownAlternativeValues[$getArrayKey]) ? $jsonDecodeDropDownAlternativeValues[$getArrayKey] : trim($findValue->find('span.texthere', 0)->plaintext));
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('span.texthere', 0)->plaintext)));
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? $findValue->selected_altvalue : trim($findValue->find('span.texthere', 0)->plaintext))));
                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = htmlspecialchars_decode(trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]));
                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = htmlspecialchars_decode($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = htmlspecialchars_decode($findValue->selected_altvalue);
                                    } elseif(isset($findValue->find('span.texthere', 0)->plaintext) && $findValue->find('span.texthere', 0)->plaintext != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = htmlspecialchars_decode(trim($findValue->find('span.texthere', 0)->plaintext));
                                    }
                                } elseif(array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? $findValue->selected_altvalue : trim($findValue->find('span.texthere', 0)->plaintext))));
                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = htmlspecialchars_decode(trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]));
                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = htmlspecialchars_decode(trim($findValue->find('span.texthere', 0)->selected_altvalue));
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = htmlspecialchars_decode($findValue->selected_altvalue);
                                    } elseif(isset($findValue->find('span.texthere', 0)->plaintext) && $findValue->find('span.texthere', 0)->plaintext != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = htmlspecialchars_decode(trim($findValue->find('span.texthere', 0)->plaintext));
                                    }
                                } else {
                                    //$docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? $findValue->selected_altvalue : ''));
                                    if(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = htmlspecialchars_decode(trim($findValue->find('span.texthere', 0)->selected_altvalue));
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = htmlspecialchars_decode($findValue->selected_altvalue);
                                    }
                                }
                            } else {
                                if(!empty($jsonDecodeDropDownValues) && isset($findValue->dropdownlabel ) && isset($findValue->find('p', 0)->plaintext ) && $findValue->dropdownlabel != trim($findValue->find('p', 0)->plaintext)) {
                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? $findValue->selected_altvalue : trim($findValue->find('p', 0)->plaintext))));
                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = htmlspecialchars_decode(trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]));
                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = htmlspecialchars_decode(trim($findValue->find('span.texthere', 0)->selected_altvalue));
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = htmlspecialchars_decode(trim($findValue->find('p', 0)->plaintext));
                                    } elseif(isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = htmlspecialchars_decode(trim($findValue->find('p', 0)->plaintext));
                                    }
                                } elseif(isset($findValue->find('p', 0)->plaintext) && array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? $findValue->selected_altvalue : trim($findValue->find('p', 0)->plaintext))));
                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = htmlspecialchars_decode(trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]));
                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = htmlspecialchars_decode(trim($findValue->find('span.texthere', 0)->selected_altvalue));
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = htmlspecialchars_decode($findValue->selected_altvalue);
                                    } elseif(isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = htmlspecialchars_decode(trim($findValue->find('p', 0)->plaintext));
                                    }
                                } else {
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? $findValue->selected_altvalue : ''));
                                    if(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = htmlspecialchars_decode(trim($findValue->find('span.texthere', 0)->selected_altvalue));
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = htmlspecialchars_decode($findValue->selected_altvalue);
                                    }
                                }
                            }
                            //forsearching ending
                            //remove commented code from here on 4 August 2020
                        }   //getting document droplist elements ends here
                        //getting custom droplist elements
                        if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            if($parent_id == 10719) {
                                $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                            }
                            //forsearching starting
                            if($findValue->find('span.texthere', 0)) {
                                if(!empty($jsonDecodeDropDownValues) && $findValue->dropdownlabel != trim($findValue->find('span.texthere', 0)->plaintext)) {
                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('span.texthere', 0)->plaintext))));
                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                    } elseif(isset($findValue->find('span.texthere', 0)->plaintext) && $findValue->find('span.texthere', 0)->plaintext != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                    }
                                } elseif(isset($findValue->find('span.texther', 0)->plaintext) && array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('span.texthere', 0)->plaintext))));
                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                    } elseif(isset($findValue->find('span.texthere', 0)->plaintext) && $findValue->find('span.texthere', 0)->plaintext != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                    }
                                } else {
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : ''));
                                    if(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                    }
                                }
                            } else {
                                if(!empty($jsonDecodeDropDownValues) && $findValue->dropdownlabel != trim($findValue->find('span.texthere', 0)->plaintext)) {
                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('p', 0)->plaintext))));
                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                    } elseif(isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('p', 0)->plaintext);
                                    }
                                } elseif(isset($findValue->find('span.texther', 0)->plaintext) && array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('p', 0)->plaintext))));
                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                    } elseif(isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('p', 0)->plaintext);
                                    }
                                } else {
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : ''));
                                    if(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                    }
                                }
                            }
                            //forsearching ending
                            //remove commented code from here on 4 August 2020
                        }

                        //document field droplist with multiple radio button
                        if(strpos($findValue->getAttribute('class'), 'documentFieldDroplist') !== false && strpos($findValue->getAttribute('class'), 'dropdown_radioList_api') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            if($parent_id == 10719) {
                                $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                            }
                            if($findValue->find('.fa-dot-circle-o', 0)) {
                                //$docFields[$apiAttributeOrDropDownLabel] = $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext;
                                //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && !empty($jsonDecodeDropDownAlternativeValues[$getArrayKey]) ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '' ? trim($findValue->selected_altvalue) : trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext)));
                                $getArrayKey = array_search(trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext), $jsonDecodeDropDownValues);
                                //comment below line on 4 August 2020 for not show the key if value is empty
                                //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? $jsonDecodeDropDownAlternativeValues[$getArrayKey] : $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext);
                                if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                    $docFields[$apiAttributeOrDropDownLabel] = $jsonDecodeDropDownAlternativeValues[$getArrayKey];
                                } elseif(isset($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext) && $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext != '') {
                                    $docFields[$apiAttributeOrDropDownLabel] = $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext;
                                }
                            } else {
                                //comment below line on 4 August 2020 for not show the key if value is empty
                                //$docFields[$apiAttributeOrDropDownLabel] = '';
                            }
                        }
                        //document field droplist with multiple radio button of custom and me
                        if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'dropdown_radioList_api') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            if($parent_id == 10719) {
                                $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                            }
                            if($findValue->find('.fa-dot-circle-o', 0)) {
                                //$docFields[$apiAttributeOrDropDownLabel] = $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext;
                                $getArrayKey = array_search(trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext), $jsonDecodeDropDownValues);
                                //comment below line on 4 August 2020 for not show the key if value is empty
                                //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? $jsonDecodeDropDownAlternativeValues[$getArrayKey] : $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext);
                                if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                    $docFields[$apiAttributeOrDropDownLabel] = $jsonDecodeDropDownAlternativeValues[$getArrayKey];
                                } elseif(isset($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext) && $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext != '') {
                                    $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext);
                                }
                            } else {
                                //comment below line on 4 August 2020 for not show the key if value is empty
                                //$docFields[$apiAttributeOrDropDownLabel] = '';
                            }
                        }
                        //document field droplist with multiple checkboxes
                        if(strpos($findValue->getAttribute('class'), 'documentFieldDroplist') !== false && strpos($findValue->getAttribute('class'), 'multi_choice_option') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            if($parent_id == 10719) {
                                $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                            }
                            if($findValue->find('.fa-check', 0)) {
                                $faCheckValues = [];
                                //foreach($findValue->find('.fa-check') as $checkBoxKey => $checkBoxValue) {
                                foreach($findValue->find('.ionIconsCheck') as $checkBoxKey => $checkBoxValue) {
                                    if(strpos($checkBoxValue->getAttribute('class'), 'fa-check') !== false) {
                                        $faCheckValues[] = (isset($jsonDecodeDropDownAlternativeValues[$checkBoxKey]) && $jsonDecodeDropDownAlternativeValues[$checkBoxKey] != '' ? $jsonDecodeDropDownAlternativeValues[$checkBoxKey] : $checkBoxValue->parent()->parent()->find('label', 0)->innertext);
                                    }
                                }
                                if(!empty($faCheckValues)) {
                                    $totalFaCheckValues = count($faCheckValues);
                                    if($totalFaCheckValues > 1) {
                                        $faCheckValues = implode(', ' , array_slice($faCheckValues,0,$totalFaCheckValues-1)) . ' and ' . end($faCheckValues);
                                    } else {
                                        $faCheckValues = implode(', ' , $faCheckValues);
                                    }
                                    $docFields[$apiAttributeOrDropDownLabel] = $faCheckValues;
                                }
                                //$docFields[$apiAttributeOrDropDownLabel] = $findValue->find('.fa-check', 0)->parent()->parent()->find('label', 0)->innertext;
                            } else {
                                //comment below line on 4 August 2020 for not show the key if value is empty
                                //$docFields[$apiAttributeOrDropDownLabel] = '';
                            }
                        }
                        //document field droplist with multiple checkboxes of custom and me
                        if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'multi_choice_option') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            if($parent_id == 10719) {
                                $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                            }
                            if($findValue->find('.fa-check', 0)) {
                                //$comma = (count($data["requesttypes"]) > 0 ? ($key+1 == count($data["requesttypes"])-1 ? ' and ' : ($key+1 < count($data["requesttypes"]) ? ', ' : '')) : '');
                                $faCheckValues = [];
                                foreach($findValue->find('.ionIconsCheck') as $checkBoxKey => $checkBoxValue) {
                                    if(strpos($checkBoxValue->getAttribute('class'), 'fa-check') !== false) {
                                        $faCheckValues[] = (isset($jsonDecodeDropDownAlternativeValues[$checkBoxKey]) && $jsonDecodeDropDownAlternativeValues[$checkBoxKey] != '' ? $jsonDecodeDropDownAlternativeValues[$checkBoxKey] : $checkBoxValue->parent()->parent()->find('label', 0)->innertext);
                                    }
                                }
                                if(!empty($faCheckValues)) {
                                    $totalFaCheckValues = count($faCheckValues);
                                    if($totalFaCheckValues > 1) {
                                        $faCheckValues = implode(', ' , array_slice($faCheckValues,0,$totalFaCheckValues-1)) . ' and ' . end($faCheckValues);
                                    } else {
                                        $faCheckValues = implode(', ' , $faCheckValues);
                                    }
                                    $docFields[$apiAttributeOrDropDownLabel] = $faCheckValues;
                                }
                            } else {
                                //comment below line on 4 August 2020 for not show the key if value is empty
                                //$docFields[$apiAttributeOrDropDownLabel] = '';
                            }
                        } //selectcolor_popupcontainer condition ends here
                    }   //second foreach loop ends here
                }   //first foreach loop ends here

                //document tags names showing and its loop starting
                foreach($html->find('.dynamicTag') as $findTagKey => $findTagValue) {
                    if(strpos($findTagValue->getAttribute('class'), 'documenttagName') !== false) {
                        $apiAttributeOrTagName = (isset($findTagValue->apitagattribute) && $findTagValue->apitagattribute != '' ? $findTagValue->apitagattribute : $findTagValue->tagname);
                        if($parent_id == 10719) {
                            $apiAttributeOrTagName = str_replace(' ', '_', $apiAttributeOrTagName);
                        }
                        $jsonDecodeDropDownValues = (isset($findTagValue->dropdownvalues) && !empty($findTagValue->dropdownvalues) ? json_decode(html_entity_decode($findTagValue->dropdownvalues), true) : []);
                        $jsonDecodeDropDownAlternativeValues = (isset($findTagValue->dropdownvalues_alternate) && !empty($findTagValue->dropdownvalues_alternate) ? json_decode(html_entity_decode($findTagValue->dropdownvalues_alternate), true) : []);

                        if(strpos($findTagValue->getAttribute('class'), 'documentdroplisttagname') !== false) {
                            if(isset($findTagValue->dropdownapi) && $findTagValue->dropdownapi != '') {
                                $docFields[$apiAttributeOrTagName] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                            } else {
                                $tagValuesArray = [];
                                foreach($jsonDecodeDropDownValues as $dropDownKey => $dropDownValues) {
                                    if(isset($findTagValue->plaintext) && !empty($findTagValue->plaintext) && isset($dropDownValues) && !empty($dropDownValues)) {
                                        if(strpos($findTagValue->plaintext, $dropDownValues) > -1) {
                                            $getArrayKey = array_search(trim($dropDownValues), $jsonDecodeDropDownValues);
                                            $tagValuesArray[] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && !empty($jsonDecodeDropDownAlternativeValues[$getArrayKey]) ? $jsonDecodeDropDownAlternativeValues[$getArrayKey] : $utility->convertDateMonthNameToInteger($languageId, trim($dropDownValues)));
                                        } else {
                                            $docFields[$apiAttributeOrTagName] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                                        }
                                    }
                                }
                                $totalTagValuesArray = count($tagValuesArray);
                                if($totalTagValuesArray > 1) {
                                    $tagValuesArray = implode(', ' , array_slice($tagValuesArray,0,$totalTagValuesArray-1)) . ' and ' . end($tagValuesArray);
                                } else {
                                    $tagValuesArray = implode(', ' , $tagValuesArray);
                                }
                                $docFields[$apiAttributeOrTagName] = $tagValuesArray;
                            }
                        } else {
                            $docFields[$apiAttributeOrTagName] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                        }
                    }
                }

                if($html->find('.billecta_GetBankInfo_h5')) {
                    foreach($html->find('.billecta_GetBankInfo_h5') as $findBillectaKey => $findBillectaValue) {
                        if(isset($findBillectaValue->billecta_row)) {
                            if($html->find('.billecta_row_'.$findBillectaValue->billecta_row)) {
                                if($findBillectaValue->innertext != '&nbsp;' && $findBillectaValue->innertext != '<br>') {
                                    //$docFields[$findBillectaValue->innertext] = $html->find('.billecta_row_'.$findBillectaValue->billecta_row, 0)->innertext;
                                    $docFields[$findBillectaValue->innertext] = str_replace(',', ' ', $html->find('.billecta_row_'.$findBillectaValue->billecta_row, 0)->innertext);
                                }
                            }
                        }
                    }
                }
                //document tags names showing and its loop ending

                if(!empty($docFields)) {
                    //showing alphbats order to show document fields data
                    /* If there area multiple case keys as name of document fields then below line will be needed to sort the array */
                    // $docFields = array_change_key_case($docFields, CASE_LOWER);
                    ksort($docFields);
                    $responseArray['document_fields'] = $docFields;
                }
            }

            //basic information of sender and account details starting
            //$senderData = Offersentdetails::where('offer_send_details.offer_sent_id', $document_id)->join('offer_sent', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')->select('offer_send_details.user_details')->where('offer_send_details.is_sender', 1)->where('offer_sent.sender_id', $user_id)->first();
            $senderData = Offersentdetails::where('offer_send_details.offer_sent_id', $document_id)->join('offer_sent', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')->select('offer_send_details.user_details')->where('offer_send_details.is_sender', 1)->whereIn('offer_sent.sender_id', $allUserIds)->first();

            if($senderData) {
                $senderDetails = $accountDetails = [];
                $senderUserDetails = Tcrypt::decrypter($senderData['user_details']);
                $senderUserDetailsJsonDecode = json_decode($senderUserDetails, true);

                //sender details information starting
                //for regular contract sender use full_name key and for online contract sender use first_name key
                $senderDetails['name'] = (isset($senderUserDetailsJsonDecode['full_name']) && $senderUserDetailsJsonDecode['full_name'] != '' ? trim($senderUserDetailsJsonDecode['full_name']) : (isset($senderUserDetailsJsonDecode['first_name']) && $senderUserDetailsJsonDecode['first_name'] != '' ? trim($senderUserDetailsJsonDecode['first_name']) : ''));
                $senderDetails['email'] = (isset($senderUserDetailsJsonDecode['email']) && $senderUserDetailsJsonDecode['email'] != '' ? trim(preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $senderUserDetailsJsonDecode['email'])) : '');

                $userCustomFields = (isset($senderUserDetailsJsonDecode['user_customfields']) && $senderUserDetailsJsonDecode['user_customfields'] != '' ? json_decode($senderUserDetailsJsonDecode['user_customfields'], true) : []);
                if(!empty($userCustomFields)) {
                    foreach($userCustomFields as $userCustomFldkey => $userCustomFldValue) {
                        $senderDetails[trim($userCustomFldkey)] = (isset($userCustomFldValue) && $userCustomFldValue != '' ? trim($userCustomFldValue) : '');
                        //$senderDetails[trim($userCustomFldkey)] = (isset($userCustomFldValue) && $userCustomFldValue != '' ? $utility->convertDateMonthNameToInteger($languageId, trim($userCustomFldValue)) : '');
                    }
                }
                $responseArray['sender_details'] = $senderDetails;
                //sender details information ending

                //account details information starting
                $accountDetails['company'] = (isset($senderUserDetailsJsonDecode['company']) && $senderUserDetailsJsonDecode['company'] != '' ? trim($senderUserDetailsJsonDecode['company']) : '');
                $accountDetails['reg_no'] = (isset($senderUserDetailsJsonDecode['reg_no']) && $senderUserDetailsJsonDecode['reg_no'] != '' ? trim($senderUserDetailsJsonDecode['reg_no']) : '');
                $accountDetails['address'] = (isset($senderUserDetailsJsonDecode['address']) && $senderUserDetailsJsonDecode['address'] != '' ? trim($senderUserDetailsJsonDecode['address']) : '');
                $accountDetails['phone_no'] = (isset($senderUserDetailsJsonDecode['mobile']) && $senderUserDetailsJsonDecode['mobile'] != '' ? trim($senderUserDetailsJsonDecode['mobile']) : (isset($senderUserDetailsJsonDecode['telephone']) && $senderUserDetailsJsonDecode['telephone'] != '' ? trim($senderUserDetailsJsonDecode['telephone']) : ''));
                $accountDetails['zipcode'] = (isset($senderUserDetailsJsonDecode['zipcode']) && $senderUserDetailsJsonDecode['zipcode'] != '' ? trim($senderUserDetailsJsonDecode['zipcode']) : (isset($senderUserDetailsJsonDecode['post_code']) && $senderUserDetailsJsonDecode['post_code'] != '' ? trim($senderUserDetailsJsonDecode['post_code']) : ''));
                $accountDetails['city'] = (isset($senderUserDetailsJsonDecode['city']) && $senderUserDetailsJsonDecode['city'] != '' ? trim($senderUserDetailsJsonDecode['city']) : '');

                $responseArray['account_details'] = $accountDetails;
                //account details information ending
            }
            //basic information of sender and account details ending

            //specificdocumentdetail API
            /* Get product table details against the template Zain*/
            if( $_SERVER['HTTP_HOST'] == 'acceptance.simplesign.io' || $_SERVER['HTTP_HOST'] == 'esign.simplesign.io' ) {
                $templatetabledata = $this->templateTables($document_id);
                foreach ($templatetabledata['producttables'] as $tablekey => $tabledata) {
                    $tablename = $tabledata['table_name'];
                    $tablecurrency = $tabledata['table_currency'];
                    $itemcollection = array();
                    foreach ($tabledata['tableitems'] as $itemkey => $itemdata) {
                        $itemdetails = array();
                        $itemdetails['product name'] = $itemdata['item_name'];
                        if ( isset($data['fromoverview']) && $data['fromoverview'] == 1 ) {
                            $itemdetails[$itemdata['item_name'].' (description)'] = ($itemdata['item_description'] != 'NULL' ? $itemdata['item_description'] : '');
                            $itemdetails[$itemdata['item_name'].' (quantity)'] = $itemdata['item_qty'];
                            $itemdetails[$itemdata['item_name'].' (price)'] = $itemdata['item_price'].' '.$tablecurrency;
                            if ($itemdata['item_discount'] != 0) {
                                $itemdetails[$itemdata['item_name'].' (discount)'] = $itemdata['item_discount'].' %';
                            }
                            $itemdetails[$itemdata['item_name'].' (cost)'] = $itemdata['item_cost'].' '.$tablecurrency;
                            $itemdetails[$itemdata['item_name'].' (margin)'] = $itemdata['item_margin'].' '.$tablecurrency;
                        } else {
                            $itemdetails['description'] = ($itemdata['item_description'] != 'NULL' ? $itemdata['item_description'] : '');
                            $itemdetails['quantity'] = $itemdata['item_qty'];
                            if ($itemdata['item_discount'] != 0) {
                                $itemdetails['item_discount'] = $itemdata['item_discount'].'%';
                            }
                            $itemdetails['price'] = $itemdata['item_price'].' '.$tablecurrency;
                            $itemdetails['cost'] = $itemdata['item_cost'].' '.$tablecurrency;
                            $itemdetails['margin'] = $itemdata['item_margin'].' '.$tablecurrency;
                        }
                        array_push($itemcollection, $itemdetails);
                        $responseArray[$tablename] = $itemcollection;
                    }
                }
            }

            //basic information of document details starting
            if($offerSentContent) {
                $uniqueId = Offersentdetails::where('offer_send_details.offer_sent_id', $document_id)->join('offer_sent', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')->select('offer_send_details.unique_id')->where('offer_send_details.is_sender', 0)->whereIn('offer_sent.sender_id', $allUserIds)->first();
                //DB::enableQueryLog();
                //print_rj(DB::getQueryLog());
                $documentLink = Offersentdetails::where('offer_send_details.offer_sent_id', $document_id)->join('offer_sent', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')->whereIn('offer_sent.sender_id', $allUserIds)->where('offer_send_details.is_sender', 1)->select('offer_send_details.id', 'offer_send_details.unique_id')->first();
                $documentDetails = [];
                $documentDetails['template_name'] = ($offerSentContent['visible_name'] != '' ? trim(Tcrypt::decrypter($offerSentContent['visible_name'])) : trim(Tcrypt::decrypter($offerSentContent['name'])));
                $documentDetails['document_id'] = (!empty($offerSentContent['external_doc_id']) ? $offerSentContent['external_doc_id'] : $offerSentContent['id']);
                //$documentDetails['document_id'] = $offerSentContent['id'];
                $documentDetails['template_id'] = $offerSentContent['offer_id'];
                $documentDetails['language'] = (isset($offerSentContent['language_id']) && $offerSentContent['language_id'] != '' ? $utility->languageName($offerSentContent['language_id']) : 'English');
                $documentDetails['sent_date'] = (isset($offerSentContent['created_date']) && $offerSentContent['created_date'] != '' && $offerSentContent['created_date'] != '0000-00-00 00:00:00' ? trim($offerSentContent['created_date']) : '');
                $documentDetails['signed_date'] = (isset($offerSentContent['signed_date']) && $offerSentContent['signed_date'] != '' && $offerSentContent['signed_date'] != '0000-00-00 00:00:00' ? trim($offerSentContent['signed_date']) : '');
                $documentDetails['due_date'] = (isset($offerSentContent['due_date']) && $offerSentContent['due_date'] != '' && $offerSentContent['due_date'] != '0000-00-00 00:00:00' ? trim(date('Y-m-d', strtotime($offerSentContent['due_date']))) : '');
                $documentDetails['status'] = (isset($offerSentContent['offer_status']) ? $utility->offerStatusName($offerSentContent['offer_status']) : '');

                $getAddOnObjectData = settings::where('user_id', $parent_id)->select('new_addon_obj')->first();
                $markCompleted = Offersent_data::where('sent_id', $offerSentContent['id'])->pluck('mark_completed');
                $multiCaseManagement = Offersent_data::where('sent_id', $offerSentContent['id'])->pluck('multi_case_management');
                $contractTypeId = Offersent_data::where('sent_id', $offerSentContent['id'])->pluck('contract_type_id');
                $markCompletedDate = Offersent_data::where('sent_id', $offerSentContent['id'])->pluck('mark_completed_date');

                /* Adding gross margin and total cost in Api response */
                $costmargin = "";
                $costmargin = Offersent_data::where('sent_id', '=', $offerSentContent['id'])->whereNotNull('document_cost')->whereNotNull('document_margin')->whereNotNull('document_price')->select('document_price', 'document_cost', 'document_margin')->first();

                
                if(!empty($getAddOnObjectData['new_addon_obj'])) {
                    $newAddonObjJesonDecode = json_decode($getAddOnObjectData['new_addon_obj'], true);
                    if(isset($newAddonObjJesonDecode['mark_as_completed_addon']) && $newAddonObjJesonDecode['mark_as_completed_addon'] == 1) {
                        if(isset($newAddonObjJesonDecode['mark_as_completed_addon_setting']) && !empty($newAddonObjJesonDecode['mark_as_completed_addon_setting'])) {
                            $markAsCompletedAddonSettingJsonDecode = json_decode($newAddonObjJesonDecode['mark_as_completed_addon_setting'], true);

                            $multiCaseManagementJsonDecode = (isset($multiCaseManagement) && !empty($multiCaseManagement) ? json_decode($multiCaseManagement, true) : []);
                            

                            //if(!empty($multiCaseManagementJsonDecode) || 1==1) {
                            if(!empty($multiCaseManagementJsonDecode)) {
                                if(isset($markAsCompletedAddonSettingJsonDecode['mark_tasks_array']) && !empty($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'])) {
                                    $numbetIncrement = 0;
                                    $flagForCompletedKey = false;
                                    $completeStatus = 'Not completed';
                                    foreach($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'] as $markAsCompletedAddonSettingJsonDecodeKey => $markAsCompletedAddonSettingJsonDecodeValue) {
                                        
                                        if(in_array($contractTypeId, $markAsCompletedAddonSettingJsonDecodeValue['contract_type_selected']) && (in_array($offerSentContent['offer_status'], $markAsCompletedAddonSettingJsonDecodeValue['marked_addon_status']) || in_array("", $markAsCompletedAddonSettingJsonDecodeValue['marked_addon_status']))) {
                                            $numbetIncrement++;
                                            $conditionalText = '';
                                            if(isset($multiCaseManagementJsonDecode[$numbetIncrement]) && !empty($multiCaseManagementJsonDecode[$numbetIncrement])) {
                                                if(isset($multiCaseManagementJsonDecode[$numbetIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numbetIncrement]['status_text'] == 'done') {
                                                    $conditionalText = 'Yes';
                                                } elseif(isset($multiCaseManagementJsonDecode[$numbetIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numbetIncrement]['status_text'] == 'in_process') {
                                                    $conditionalText = 'In process';
                                                } elseif(isset($multiCaseManagementJsonDecode[$numbetIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numbetIncrement]['status_text'] == 'no') {
                                                    $conditionalText = 'No';
                                                }
                                                if(isset($multiCaseManagementJsonDecode[$numbetIncrement]['task_no']) && isset($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'][$multiCaseManagementJsonDecode[$numbetIncrement]['task_no']])) {
                                                    $documentDetails[$markAsCompletedAddonSettingJsonDecode['mark_tasks_array'][$multiCaseManagementJsonDecode[$numbetIncrement]['task_no']]['tasknames']] = $conditionalText;
                                                    $flagForCompletedKey = true;
                                                } else {
                                                    if(isset($multiCaseManagementJsonDecode[$numbetIncrement]['task_no']) && $multiCaseManagementJsonDecode[$numbetIncrement]['task_no'] != '') {
                                                        $documentDetails[$markAsCompletedAddonSettingJsonDecodeValue['tasknames']] = 'No';
                                                        $flagForCompletedKey = true;
                                                    }
                                                }
                                            } else {
                                                if($markCompleted != 1) {
                                                    $documentDetails[$markAsCompletedAddonSettingJsonDecodeValue['tasknames']] = 'No';
                                                }
                                                $flagForCompletedKey = true;
                                            }
                                            if(isset($multiCaseManagementJsonDecode[$numbetIncrement]) && !empty($multiCaseManagementJsonDecode[$numbetIncrement]) && isset($multiCaseManagementJsonDecode[$numbetIncrement]['status_activity']) && !empty($multiCaseManagementJsonDecode[$numbetIncrement]['status_activity'])) {
                                                $flagForCompletedKey = true;
                                                //if(count($multiCaseManagementJsonDecode) == $isCompleted && $markAsCompletedAddonSettingJsonDecodeKey == count($markAsCompletedAddonSettingJsonDecode['mark_tasks_array']) -1) {
                                                if($markCompleted == 1) {
                                                    $completeStatus = $utility->changeTimeZone($markCompletedDate, 'Y-m-d H:i:s', 'UTC', $userTimeZone);
                                                }
                                            }   //status_activity
                                        }
                                    }
                                    //if(!empty($multiCaseManagementJsonDecode)) {
                                    if(!empty($flagForCompletedKey)) {
                                        $documentDetails['completed'] = $completeStatus;
                                    }
                                }
                            }
                        }
                    }
                }
                $documentDetails['pdf'] = $domain_name.'avtal/downloadpdf/'.$document_id.'/'.$uniqueId['unique_id'];
                $documentDetails['document_url'] = $domain_name.'document/view/'.$documentLink['id'].'/'.$documentLink['unique_id'];

                if ($costmargin != "") {
                    if ($costmargin['document_cost'] != "NULL") {
                        $documentDetails['document_cost'] =  $costmargin['document_cost'];
                    }

                    if ($costmargin['document_margin'] != "NULL") {
                        $documentDetails['document_margin'] =  $costmargin['document_margin'];
                    }

                    if ($costmargin['document_price'] != "NULL") {
                        $documentDetails['document_price'] =  $costmargin['document_price'];
                    }
                }
                //basic information of document details ending
                $responseArray['document_details'] = $documentDetails;
            }
            if(!isset($data['fromoverview'])) {
                $updatedIndexData = DB::table('document_indexdata')->where('document_id', $document_id)->get();
                if(!empty($updatedIndexData)) {
                    foreach($responseArray as $responseArrayKey => $responseArrayValue) { //loop on main array
                        if(is_numeric($responseArrayKey)) {
                            $recRole = $responseArray[$responseArrayKey]['details']['recipient_role'];
                            foreach($responseArrayValue as $responseArrayValueKey => $recValue) { //loop on numeric array
                                foreach($updatedIndexData as $updatedIndexDataKey => $updatedIndexDataValue) { // loop on array from database
                                    if($updatedIndexDataValue->rec_role == $recRole) {
                                        if($updatedIndexDataValue->object_type == $responseArrayValueKey) { //checking role condition
                                            $orginalFields = json_decode($updatedIndexDataValue->old_field, true);
                                            $newFields = json_decode($updatedIndexDataValue->new_field, true);
                                            $fieldName = array_keys($orginalFields)[0]; // getting field name orginal as it can't be changed from UI
                                            $updatedFieldValue = array_values($newFields)[0]; // getting updated values of that particular field
                                            $responseArray[$responseArrayKey][$responseArrayValueKey][$fieldName] = $updatedFieldValue; //assining values to the main object
                                        }
                                    }
                                }
                            }
                        } else {
                            foreach($updatedIndexData as $updatedIndexDataKey => $updatedIndexDataValue) { // loop on array from database
                                if($updatedIndexDataValue->object_type == $responseArrayKey) { //checking role condition
                                    $orginalFields = json_decode($updatedIndexDataValue->old_field, true);
                                    $newFields = json_decode($updatedIndexDataValue->new_field, true);
                                    $fieldName = array_keys($orginalFields)[0]; // getting field name orginal as it can't be changed from UI
                                    $updatedFieldValue = array_values($newFields)[0]; // getting updated values of that particular field
                                    $responseArray[$responseArrayKey][$fieldName] = $updatedFieldValue; //assining values to the main object
                                }
                            }
                        }
                    }
                }
            }
            
            return response()->json(['status' => 'success', 'result' => $responseArray], 200, ['Content-Type' => 'application/json; charset=UTF-8'], JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
        } else {
            return Response::json(['status' => 'error', 'result' => 'No record(s) found']);
        }
    
    }
    public function getSpecificdocumentdetail($custom_data=[],$fromindexdata=0,$fromindexdatapopup=0) {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');
        $storeFieldsObjDB = false;
        //setMajorDB();
        //print_rj($data, 1);

        //added by me (MS) 01 June 2020 starting
        if(isset($custom_data['access_token']) && $custom_data['access_token'] != '') {
            $data['access_token'] = $custom_data['access_token'];
        }
        if(isset($custom_data['document_id']) && $custom_data['document_id'] != '') {
            $data['document_id'] = $custom_data['document_id'];
        }
        //added by me (MS) 01 June 2020 ending

        //access_token validation starting
        if(isset($data['access_token']) && $data['access_token'] != '' && !isset($custom_data['user_id']) ) {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
        //access_token validation ending

        if(isset($custom_data['user_id'])) {
            $user_id = $custom_data['user_id'];
            $storeFieldsObjDB = true;
        } else {
            $user_id = $utility->getUserIdByAuthToken($access_token);
        }
        $parent_id = $utility->getParent($user_id);
        if($utility->isParent($user_id) == 1) {
            $allUserIds = $utility->getSubusers($parent_id);
        } else {
            $allUserIds = [$user_id];
        }
        //print_rj($allUserIds, 1);

        //contract_id validation starting
        if(isset($data['document_id']) && $data['document_id'] != '') {
            $document_id = $data['document_id'];
        } elseif(isset($custom_data['sent_id']) && $custom_data['sent_id'] != '') {
            $document_id = $custom_data['sent_id'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'document_id is missing']);
        }

        //print_rj($allUserIds);
        $userTimeZone = $utility->getUsertimezone($parent_id);
        $getUserAPITimeZone = $utility->getUserAPITimeZone($parent_id);
        $getDocumentIdFromExternalDocumentId = $utility->documentExternalId($document_id, $allUserIds);
        if(!empty($getDocumentIdFromExternalDocumentId)) {
            $document_id = $getDocumentIdFromExternalDocumentId;
            //print_rj($document_id, 1);
            $data['document_id'] = $document_id;
        }

        $checkingDraft = Offersent::where('id', $document_id)->where('offer_status', 7)->where('is_draft', 1)->count();
        if($checkingDraft) {
            return Response::json(['status' => 'error', 'result' => 'document is not sent']);
        }

        $userSettings = $utility->getUserSettings($parent_id);
        $getApiHitCount = Userinfo::where('user_id', $parent_id)->select('hit_count')->first();
        $addupdateapiaccesslogs = $utility->addupdateapiaccesslogs($user_id, 'getSpecificdocumentdetail v3', $data, $getApiHitCount['hit_count']);
        if($addupdateapiaccesslogs == 'exceed') {
            $this->apiCallLimitExceedMessage = str_replace('#hitCuntNo', $getApiHitCount['hit_count'], $this->apiCallLimitExceedMessage);
            return Response::json(['status' => 'error', 'result' => $this->apiCallLimitExceedMessage]);
        }

        if($utility->checkAdminStripe($user_id) && !isset($custom_data['user_id']) ) {
            return Response::json(['status' => 'error', 'result' => 'Account is locked make payment in order to continue Simplesign']);
        }

        $contractData = Offersentdetails::where('offer_send_details.offer_sent_id', $document_id)->join('offer_sent', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')->select('offer_sent.language_id', 'offer_send_details.id AS detail_id', 'offer_send_details.offer_sent_id', 'offer_send_details.user_details', 'offer_send_details.offer_status', 'offer_send_details.req_attached', 'offer_send_details.document_read_date', 'offer_send_details.signed_date', 'offer_send_details.authentication_method', 'offer_send_details.role', 'offer_send_details.invitation_type', 'offer_send_details.invitation_order', 'offer_send_details.offer_confirmation', 'offer_send_details.id_attachments', 'offer_sent.content','offer_sent.offer_type',  'offer_send_details.forward_status', 'offer_send_details.forward_user_details', 'offer_send_details.forward_signed')->where('offer_send_details.is_sender', 0)->whereIn('offer_sent.sender_id', $allUserIds)->get()->toArray();
        $fromindexdataruntime = 0;
        if($fromindexdata == 1){
         if(sizeof($contractData ) > 1){
            if($fromindexdata == 1){
             $fromindexdataruntime = 1;
            }
            //$fromindexdata = 0;
            //$fromindexdatapopup = 0;
            
         } else{
            //$fromindexdata = 0;
            //$fromindexdatapopup = 0;
         }  
       
        }
        //print_rj($contractData, 1);
        if($contractData) {
            $responseArray = $senderInfo = $contractDetails =  [];
            $offerSentContent = Offersent::where('id', $document_id)->whereIn('sender_id', $allUserIds)->select('content', 'visible_name', 'name', 'language_id', 'id', 'offer_id', 'created_date', 'offer_status', 'signed_date', 'due_date', 'external_doc_id')->first();
            foreach($contractData as $contractDataKey => $contractDataValue) {
                $languageId = $contractDataValue['language_id'];

                $peopleFields = $organizationFields = $details = $inviteAndForwardDetails = [];
                $nameExplode = '';
                
                $recipientUserDetails = Tcrypt::decrypter($contractDataValue['user_details']);
                $recipientUserDetailsJsonDecode = json_decode($recipientUserDetails, true);
               /* if($_SERVER["HTTP_HOST"] == "acceptance.simplesign.io"){
                    echo "<pre>";
                    print_r($recipientUserDetails);
                    
                }*/

                //$peopleFields['detail_id'] = $contractDataValue['detail_id'];
                //$peopleFields['offer_sent_id'] = $contractDataValue['offer_sent_id'];
                //$contractDataValue['forward_status'];
                $userRole = (isset($recipientUserDetailsJsonDecode['recrolename']) && $recipientUserDetailsJsonDecode['recrolename'] != '' ? $recipientUserDetailsJsonDecode['recrolename'] : (isset($recipientUserDetailsJsonDecode['partyname']) && $recipientUserDetailsJsonDecode['partyname'] != '' ? $recipientUserDetailsJsonDecode['partyname'] : ''));

                //basic information of recipient starting

                $recipientFieldsRolesTabFields = (isset($recipientUserDetailsJsonDecode['Recipient_fields_roles_tab_fields']) && !empty($recipientUserDetailsJsonDecode['Recipient_fields_roles_tab_fields']) ? json_decode($recipientUserDetailsJsonDecode['Recipient_fields_roles_tab_fields'], true) : '');
                $recinfoFields = ($recipientFieldsRolesTabFields != '' ? $recipientFieldsRolesTabFields['recinfo_fields'] : '');

                //print_rj($recipientUserDetailsJsonDecode, 1);
                if(isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '') {
                    //for regular contract recipient use full_name key
                    if((isset($recinfoFields['last_name']) && $recinfoFields['last_name'] == 1) || (isset($recipientUserDetailsJsonDecode['last_name']) && $recipientUserDetailsJsonDecode['last_name'] != '')) {
                        $nameExplode = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($recipientUserDetailsJsonDecode['full_name'])) : '');
                        if(isset($recipientUserDetailsJsonDecode['last_name']) && $recipientUserDetailsJsonDecode['last_name'] != '' && isset($nameExplode[1]) && $nameExplode[1] != '' && $nameExplode[1] != $recipientUserDetailsJsonDecode['last_name']) {
                            $peopleFields['first_name'] = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? $recipientUserDetailsJsonDecode['full_name'] : '');
                            $peopleFields['last_name'] = (isset($recipientUserDetailsJsonDecode['last_name']) && $recipientUserDetailsJsonDecode['last_name'] != '' ? $recipientUserDetailsJsonDecode['last_name'] : '');
                        } else {
                            $peopleFields['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                            $peopleFields['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                        }
                    } else {
                        $nameExplode = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($recipientUserDetailsJsonDecode['full_name'])) : '');
                        $peopleFields['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                        $peopleFields['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                    }
                } elseif(isset($recipientUserDetailsJsonDecode['name']) && $recipientUserDetailsJsonDecode['name'] != '') {
                    //for online contract recipient use name key
                    $nameExplode = (isset($recipientUserDetailsJsonDecode['name']) && $recipientUserDetailsJsonDecode['name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($recipientUserDetailsJsonDecode['name'])) : '');
                    $peopleFields['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                    $peopleFields['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                }
                $peopleFields['email'] = (isset($recipientUserDetailsJsonDecode['email']) && $recipientUserDetailsJsonDecode['email'] != '' ? trim(preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $recipientUserDetailsJsonDecode['email'])) : '');
                if($parent_id == 12665 || $parent_id == 15307) {
                    $peopleFields['personal_no'] = (isset($recipientUserDetailsJsonDecode['personnr']) && $recipientUserDetailsJsonDecode['personnr'] != '' ? (strlen(trim($recipientUserDetailsJsonDecode['personnr'])) == 12 || strlen(trim($recipientUserDetailsJsonDecode['personnr'])) == 13 ? substr(trim($recipientUserDetailsJsonDecode['personnr']), 2) : trim($recipientUserDetailsJsonDecode['personnr'])) : '');
                } else {
                    $peopleFields['personal_no'] = (isset($recipientUserDetailsJsonDecode['personnr']) && $recipientUserDetailsJsonDecode['personnr'] != '' ? trim($recipientUserDetailsJsonDecode['personnr']) : '');
                }
                $peopleFields['mobile'] = (isset($recipientUserDetailsJsonDecode['mobile']) && $recipientUserDetailsJsonDecode['mobile'] != '' ? trim($recipientUserDetailsJsonDecode['mobile']) : '');
                $peopleFields['address'] = (isset($recipientUserDetailsJsonDecode['address']) && $recipientUserDetailsJsonDecode['address'] != '' ? trim($recipientUserDetailsJsonDecode['address']) : '');
                $peopleFields['city'] = (isset($recipientUserDetailsJsonDecode['city']) && $recipientUserDetailsJsonDecode['city'] != '' ? trim($recipientUserDetailsJsonDecode['city']) : '');
                $peopleFields['zipcode'] = (isset($recipientUserDetailsJsonDecode['zipcode']) && $recipientUserDetailsJsonDecode['zipcode'] != '' ? trim($recipientUserDetailsJsonDecode['zipcode']) : (isset($recipientUserDetailsJsonDecode['zip']) && $recipientUserDetailsJsonDecode['zip'] != '' ? trim($recipientUserDetailsJsonDecode['zip']) : ''));
                //basic information of recipient ending

                //organization information of recipient starting
                if(isset($recipientUserDetailsJsonDecode['organization_fields'])) {
                    $orgFields = json_decode($recipientUserDetailsJsonDecode['organization_fields'], true);
                    foreach($orgFields as $orgFldsKey => $orgFldsValue) {
                        $orgFldsValue['orgFieldName'] = str_replace('name', 'organization_name', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('org_no', 'organization_no', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('phone', 'organization_phone', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('address', 'organization_address', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('city', 'organization_city', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('zipcode', 'organization_zipcode', $orgFldsValue['orgFieldName']);
                        $organizationFields[$orgFldsValue['orgFieldName']] = $orgFldsValue['orgFieldValue'];
                    }
                } else {
                    if(isset($recipientUserDetailsJsonDecode['org_name']) && $recipientUserDetailsJsonDecode['org_name'] != '') {
                        $organizationFields['organization_name'] = $recipientUserDetailsJsonDecode['org_name'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_reg_no']) && $recipientUserDetailsJsonDecode['org_reg_no'] != '') {
                        $organizationFields['organization_no'] = $recipientUserDetailsJsonDecode['org_reg_no'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_mobile']) && $recipientUserDetailsJsonDecode['org_mobile'] != '') {
                        $organizationFields['organization_phone'] = $recipientUserDetailsJsonDecode['org_mobile'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_address']) && $recipientUserDetailsJsonDecode['org_address'] != '') {
                        $organizationFields['organization_address'] = $recipientUserDetailsJsonDecode['org_address'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_city']) && $recipientUserDetailsJsonDecode['org_city'] != '') {
                        $organizationFields['organization_city'] = $recipientUserDetailsJsonDecode['org_city'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_zip']) && $recipientUserDetailsJsonDecode['org_zip'] != '') {
                        $organizationFields['organization_zipcode'] = $recipientUserDetailsJsonDecode['org_zip'];
                    }
                }
                //organization information of recipient ending

                //people information of new fields starting
                if(isset($recipientUserDetailsJsonDecode['extra_fields']) && !empty($recipientUserDetailsJsonDecode['extra_fields'])) {
                    $recipientFieldsWithoutValue = (isset($recipientUserDetailsJsonDecode['recipientfields']) && !empty($recipientUserDetailsJsonDecode['recipientfields']) ? json_decode($recipientUserDetailsJsonDecode['recipientfields'], true) : []);

                    $extraFields = (isset($recipientUserDetailsJsonDecode['extra_fields']) && !empty($recipientUserDetailsJsonDecode['extra_fields']) ? json_decode($recipientUserDetailsJsonDecode['extra_fields'], true) : []);
                    if($extraFields) {
                        $intersect = array_uintersect($extraFields, $recipientFieldsWithoutValue, function($val1, $val2) {
                            return strcmp($val1['fieldName'], $val2['fieldName']);
                        });
                        $intersect = array_values($intersect);
                    } else {
                        $intersect = [];
                    }

                    if(!empty($intersect)) {
                        foreach($intersect as $extraFldKey => $extraFldValue) {
                            $peopleFields[$extraFldValue['fieldName']] = $extraFldValue['fieldValue'];
                        }
                    }
                }
                //people information of new fields ending

                //organization information of new fields starting
                if(isset($recipientUserDetailsJsonDecode['org_extra_fields']) && !empty($recipientUserDetailsJsonDecode['org_extra_fields'])) {
                    $organizationFieldsWithoutValue = (isset($recipientUserDetailsJsonDecode['organizationfields']) && !empty($recipientUserDetailsJsonDecode['organizationfields']) ? json_decode($recipientUserDetailsJsonDecode['organizationfields'], true) : []);

                    $orgExtraFields = (isset($recipientUserDetailsJsonDecode['org_extra_fields']) && !empty($recipientUserDetailsJsonDecode['org_extra_fields']) ? json_decode($recipientUserDetailsJsonDecode['org_extra_fields'], true) : []);
                    if($orgExtraFields) {
                        $intersectOrg = array_uintersect($orgExtraFields, $organizationFieldsWithoutValue, function($val1, $val2) {
                            return strcmp($val1['fieldName'], $val2['fieldName']);
                        });
                        $intersectOrg = array_values($intersectOrg);
                    } else {
                        $intersectOrg = [];
                    }

                    if(!empty($intersectOrg)) {
                        foreach($intersectOrg as $orgExtraFldKey => $orgExtraFldValue) {
                            $organizationFields[$orgExtraFldValue['fieldName']] = $orgExtraFldValue['fieldValue'];
                        }
                    }
                }
                //organization information of new fields ending
                
                //organization information of fields which are placed at document starting
                $content = Tcrypt::decrypter($contractDataValue['content']);
                if($content != '') {
                    $html = new \Htmldom($content);
                    foreach($html->find('.text') as $findKey => $findValue) {
                        //codition for regular contract starting
                        
                        if($fromindexdata == 1 && $contractDataValue['offer_type'] == 5 && (isset($findValue->getrecsettings) && $findValue->getrecsettings == 1)){

                               if($peopleFields['mobile'] == "" && isset($findValue->selectedtype) && $findValue->selectedtype =="mobile"){
                                if($findValue->find('h4', 0)) {
                                    $peopleFields['mobile'] = trim($findValue->find('h4', 0)->plaintext);
                                } else {
                                    if($findValue->find('p', 0)) {
                                    $peopleFields['mobile'] = trim($findValue->find('p', 0)->plaintext);
                                    }
                                }
                               } 

                              if($peopleFields['address'] == "" && isset($findValue->selectedtype) && $findValue->selectedtype =="address"){
                                
                                if($findValue->find('h4', 0)) {
                                    $peopleFields['address'] = trim($findValue->find('h4', 0)->plaintext);
                                } else {
                                    if($findValue->find('p', 0)) {
                                    $peopleFields['address'] = trim($findValue->find('p', 0)->plaintext);
                                    }
                                }
                               }

                               if($peopleFields['city'] == "" && isset($findValue->selectedtype) && $findValue->selectedtype =="city"){
                                if($findValue->find('h4', 0)) {
                                    $peopleFields['city'] = trim($findValue->find('h4', 0)->plaintext);
                                } else {
                                    if($findValue->find('p', 0)) {
                                    $peopleFields['city'] = trim($findValue->find('p', 0)->plaintext);
                                    }
                                }
                               } 
                               if($peopleFields['zipcode'] == "" && isset($findValue->selectedtype) && $findValue->selectedtype =="zipcode"){
                                if($findValue->find('h4', 0)) {
                                    $peopleFields['zipcode'] = trim($findValue->find('h4', 0)->plaintext);
                                } else {
                                    if($findValue->find('p', 0)) {
                                    $peopleFields['zipcode'] = trim($findValue->find('p', 0)->plaintext);
                                    }
                                }
                               } 
                            }

                        if(isset($recipientUserDetailsJsonDecode['id']) && $recipientUserDetailsJsonDecode['id'] == $findValue->recipientselectedid) {

                            
                            if(strpos($findValue->getAttribute('class'), 'peopleNewField') !== false) {
                                if($findValue->find('h4', 0)) {
                                    $peopleFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                } else {
                                    if($findValue->find('p', 0)) {
                                        $peopleFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                    }
                                }
                            } if(strpos($findValue->getAttribute('class'), 'organizationNewField') !== false) {
                                if($findValue->find('h4', 0)) {
                                    $organizationFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                } else {
                                    if($findValue->find('p', 0)) {
                                        $organizationFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                    }
                                }
                            }
                            //codition for regular contract ending
                        } else {
                            //codition for online contract starting
                            if($fromindexdata == 1 && $contractDataValue['offer_type'] == 5){

                            }else{
                                //print_rj($userRole);
                                //print_rj($findValue->parent()->parent()->whowillfill);
                            //if($userRole == $findValue->parent()->parent()->whowillfill) {
                            if($userRole == $findValue->recipientselected) {
                                if(strpos($findValue->getAttribute('class'), 'peopleNewField') !== false) {
                                    if($findValue->find('h4', 0)) {
                                        $peopleFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                    } else {
                                        //right now paragraph tag is showing and will be replaced by h4 near future starting
                                        if($findValue->find('p', 0)) {
                                            $peopleFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                        }
                                        //right now paragraph tag is showing and will be replaced by h4 near future ending
                                    }
                                } if(strpos($findValue->getAttribute('class'), 'organizationNewField') !== false) {
                                    if($findValue->find('h4', 0)) {
                                        $organizationFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                    } else {
                                        //right now paragraph tag is showing and will be replaced by h4 near future starting
                                        if($findValue->find('p', 0)) {
                                            $organizationFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                        }
                                        //right now paragraph tag is showing and will be replaced by h4 near future ending
                                    }
                                }
                            }
                        }
                            //codition for online contract ending
                        }
                    }
                }
                //organization information of fields which are placed at document ending

                //basic information of document settings starting
                if(isset($recipientUserDetailsJsonDecode['details_fields'])) {
                    $detailsFields = json_decode($recipientUserDetailsJsonDecode['details_fields'], true);
                    foreach($detailsFields as $orgFldsKey => $orgFldsValue) {
                        $details[$orgFldsValue['detailsFieldName']] = $orgFldsValue['detailsFieldValue'];
                    }
                } else {
                    //print_rj($recipientUserDetailsJsonDecode);
                    $details['recipient_role'] = (isset($recipientUserDetailsJsonDecode['recrolename']) && $recipientUserDetailsJsonDecode['recrolename'] != '' ? $recipientUserDetailsJsonDecode['recrolename'] : (isset($recipientUserDetailsJsonDecode['partyname']) && $recipientUserDetailsJsonDecode['partyname'] != '' ? $recipientUserDetailsJsonDecode['partyname'] : ''));

                    if($contractDataValue['role'] == 2) {
                        $contractDataValue['authentication_method'] = 8;
                    }

                    $details['authentication'] = $utility->authenticationMethodName($contractDataValue['authentication_method']);
                    if(isset($contractDataValue['invitation_type']) && $contractDataValue['invitation_type'] != '') {
                        $details['invitation_type'] = $utility->invitationTypeName($contractDataValue['invitation_type']);
                    }
                    if($contractDataValue['invitation_order'] != 0) {
                        $details['invitation_order'] = $contractDataValue['invitation_order'];
                    }
                    if(isset($contractDataValue['offer_confirmation']) && $contractDataValue['offer_confirmation'] != '') {
                        $details['confirmation'] = $utility->offerConfirmationName($contractDataValue['offer_confirmation']);
                    }
                    $details['id_attachment'] = $utility->idAttachmentName($contractDataValue['id_attachments']);
                }
                $details['request_attachment'] = ($contractDataValue['req_attached'] != '' ? 'yes' : 'no');
                if($contractDataValue['document_read_date'] != '' && $contractDataValue['document_read_date'] != '0000-00-00 00:00:00') {
                    //if($_SERVER['HTTP_HOST'] == 'acceptance.simplesign.io') {
                        $details['last_viewing_date'] = ($contractDataValue['document_read_date'] != '' ? $utility->changeTimeZone($contractDataValue['document_read_date'], 'Y-m-d H:i:s', 'UTC', $userTimeZone) : '');
                    /* } else {
                        $details['last_viewing_date'] = ($contractDataValue['document_read_date'] != '' ? $contractDataValue['document_read_date'] : '');
                    } */
                }
                //$details['signed_date'] = ($contractDataValue['signed_date'] != '' && $contractDataValue['signed_date'] != '0000-00-00 00:00:00' ? $contractDataValue['signed_date'] : '');
                $details['signed_date'] = '';
                if($contractDataValue['signed_date'] != '' && $contractDataValue['signed_date'] != '0000-00-00 00:00:00' && $contractDataValue['offer_status'] == 4 && $contractDataValue['role'] == 1) {
                    //if($_SERVER['HTTP_HOST'] == 'acceptance.simplesign.io') {
                        $details['signed_date'] = $utility->changeTimeZone($contractDataValue['signed_date'], 'Y-m-d H:i:s', 'UTC', $userTimeZone);
                    /* } else {
                        $details['signed_date'] = $contractDataValue['signed_date'];
                    } */
                } elseif($contractDataValue['signed_date'] != '' && $contractDataValue['signed_date'] != '0000-00-00 00:00:00' && $contractDataValue['offer_status'] == 3 && $contractDataValue['role'] == 2) {
                    //if($_SERVER['HTTP_HOST'] == 'acceptance.simplesign.io') {
                        $details['signed_date'] = $utility->changeTimeZone($contractDataValue['signed_date'], 'Y-m-d H:i:s', 'UTC', $userTimeZone);
                    /* } else {
                        $details['signed_date'] = $contractDataValue['signed_date'];
                    } */
                }
                //https://acceptance.simplesign.io/admin/checkuserdetail/541998
                //https://acceptance.simplesign.io/v3/specificdocumentdetail?access_token=WvJ2kroPU3cmzsINnEFe70lKobdBtt3SId3owcU1&document_id=542361
                //https://acceptance.simplesign.io/v3/specificdocumentdetail?access_token=WvJ2kroPU3cmzsINnEFe70lKobdBtt3SId3owcU1&document_id=542371
                //https://acceptance.simplesign.io/admin/checkuserdetail/542371
                //https://docs.google.com/document/d/1U3iHzT9kXupLmeFnpamlAwUK1CZoChog1ZvDSEManaY/edit
                //https://acceptance.simplesign.io/v3/specificdocumentdetail?access_token=WvJ2kroPU3cmzsINnEFe70lKobdBtt3SId3owcU1&document_id=543068
                //https://acceptance.simplesign.io/v3/specificdocumentdetail?access_token=WvJ2kroPU3cmzsINnEFe70lKobdBtt3SId3owcU1&document_id=543218
                //https://acceptance.simplesign.io/v3/specificdocumentdetail?access_token=KyQE4Vp9Tok1VZZDoZ2Zy1GkdKnUi9xroK59D2EP&document_id=538121 client
                //forward status without transfer signature role
                /* Forward status is always == 1 for the recipient who is sending invitation (sigingrole/viewonly ) */
                /* Forward signed is always == 1 for the recipient who is only sending signature role to another person */
                if($contractDataValue['offer_status'] == 4 && $contractDataValue['forward_status'] == 1 && $contractDataValue['forward_signed'] == 1) {
                    $details['status'] = 'Forwarded to sign';
                } elseif($contractDataValue['offer_status'] < 4 && $contractDataValue['forward_status'] == 1 && $contractDataValue['forward_signed'] == 0) {
                    $details['status'] = 'Invited to view';
                } else {
                    $details['status'] = (isset($contractDataValue['offer_status']) != '' ? $utility->offerStatusName($contractDataValue['offer_status']) : '');
                }
                //$details['status'] = (isset($contractDataValue['offer_status']) != '' ? $utility->offerStatusName($contractDataValue['offer_status']) : '');

                if($contractDataValue['forward_user_details'] != '') {
                    $forwardUserDetails = Tcrypt::decrypter($contractDataValue['forward_user_details']);
                    if($forwardUserDetails != '') {
                        $forwardUserDetailsJsonDecode = json_decode($forwardUserDetails, true);
                        $forwaredFullName = (isset($forwardUserDetailsJsonDecode['full_name']) && $forwardUserDetailsJsonDecode['full_name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($forwardUserDetailsJsonDecode['full_name'])) : '');
                        $inviteAndForwardDetails['first_name'] = (isset($forwaredFullName[0]) && $forwaredFullName[0] != '' ? trim($forwaredFullName[0]) : '');
                        $inviteAndForwardDetails['last_name'] = (isset($forwaredFullName[1]) && $forwaredFullName[1] != '' ? trim($forwaredFullName[1]) : '');
                        //$inviteAndForwardDetails['email'] = (isset($forwardUserDetailsJsonDecode['email']) && $forwardUserDetailsJsonDecode['email'] != '' ? trim($forwardUserDetailsJsonDecode['email']) : '');
                        //$inviteAndForwardDetails['mobile'] = (isset($forwardUserDetailsJsonDecode['mobile']) && $forwardUserDetailsJsonDecode['mobile'] != '' ? trim($forwardUserDetailsJsonDecode['mobile']) : '');

                        /* test condition as per zain suggestion when signing role is forwarded */
                        /* Setting keys in the object for signature role sender and reciever */
                        if($contractDataValue['offer_status'] == 4 && $contractDataValue['forward_status'] == 1 && $contractDataValue['forward_signed'] == 1) {
                            $details['forwarded_signing_role_to'] = $inviteAndForwardDetails['first_name'].' '.$inviteAndForwardDetails['last_name'];
                        } elseif((($contractDataValue['offer_status'] <= 4 && $contractDataValue['role'] == 1) || ($contractDataValue['offer_status'] == 3 && $contractDataValue['role'] == 2)) && $contractDataValue['forward_status'] == 2 && isset($recipientUserDetailsJsonDecode['forward_to_sign']) && $recipientUserDetailsJsonDecode['forward_to_sign'] == 1) {
                            $details['invited_to_sign_by'] = $inviteAndForwardDetails['first_name'].' '.$inviteAndForwardDetails['last_name'];
                        }
                        //echo ($contractDataValue['forward_status']. ' ' .$recipientUserDetailsJsonDecode['email'].' '.$contractDataValue['forward_signed'].' '.(isset($forwardUserDetailsJsonDecode['invited_to_view']) ? $forwardUserDetailsJsonDecode['invited_to_view'] : "") );echo'<br>';
                        /* test condition as per zain suggestion when only invited to view */
                        /* Setting keys in the object for sender and reciever of invitation to view only*/
                        if($contractDataValue['forward_status'] == 1 && $contractDataValue['forward_signed'] == 0) {
                            $details['invited_to_view_only'] = $inviteAndForwardDetails['first_name'].' '.$inviteAndForwardDetails['last_name'];
                        } elseif($contractDataValue['forward_status'] == 2 && isset($recipientUserDetailsJsonDecode['invited_to_view']) && $recipientUserDetailsJsonDecode['invited_to_view'] == 1) {
                            $details['invited_to_view_only_by'] = $inviteAndForwardDetails['first_name'].' '.$inviteAndForwardDetails['last_name'];
                        }
                    }
                }

                //this is for rejected to show in sender status
                if($contractDataValue['offer_status'] == 5) {
                    $offerSentContent['offer_status'] = 5;
                } if($contractDataValue['offer_status'] == 6) {
                    $offerSentContent['offer_status'] = 6;
                }

                if(!empty($organizationFields)) {
                    $peopleAndDetailsArray = ['people_fields' => $peopleFields, 'organization_fields' => $organizationFields, 'details' => $details];
                } else {
                    $peopleAndDetailsArray = ['people_fields' => $peopleFields, 'details' => $details];
                }
                array_push($responseArray, $peopleAndDetailsArray);
                //basic information of document settings ending
            }
            //shahnawaz code
            if($fromindexdata == 1 && $contractDataValue['offer_type'] == 5){
                if($fromindexdataruntime != 1){
                $recdata = [];
                $recorg = [];
                $recdatil = [];
                $Alldata = [];
                foreach($html->find('.field_box_popupcontainer[selectedtype=org_reg_no]') as $findTagKey => $findTagValue) {  
                    if ($findTagValue->find('h4', 0)) {
                     $recorg['organization_reg_no'] = trim($findTagValue->find('h4', 0)->plaintext);
                    } else {
                    if($findTagValue->find('p', 0)) {
                    $recorg['organization_reg_no'] = trim($findTagValue->find('p', 0)->plaintext);
                        }
                    } 
                }

                foreach($html->find('.field_box_popupcontainer[getrecsettings=2]') as $findTagKey => $findTagValue) { 
                

                if(isset($findTagValue->recipientselected)){
                $recdatil['recipient_role'] = $findTagValue->recipientselected; 
                }      
                if(isset($findTagValue->selectedtype) && $findTagValue->selectedtype == 'org_name') {
                    if ($findTagValue->find('h4', 0)) {
                     $recorg['organization_name'] = trim($findTagValue->find('h4', 0)->plaintext);
                    } else {
                    if($findTagValue->find('p', 0)) {
                    $recorg['organization_name'] = trim($findTagValue->find('p', 0)->plaintext);
                        }
                    }    
                }
                else if(isset($findTagValue->selectedtype) && $findTagValue->selectedtype == 'org_reg_no') {
                 if ($findTagValue->find('h4', 0)) {
                     $recorg['organization_no'] = trim($findTagValue->find('h4', 0)->plaintext);
                    } else {
                    if($findTagValue->find('p', 0)) {
                    $recorg['organization_no'] = trim($findTagValue->find('p', 0)->plaintext);
                        }
                    }
                }
                else if(isset($findTagValue->selectedtype ) && $findTagValue->selectedtype  == 'org_mobile') {

                 if ($findTagValue->find('h4', 0)) {
                     $recorg['organization_phone'] = trim($findTagValue->find('h4', 0)->plaintext);
                    } else {
                    if($findTagValue->find('p', 0)) {
                    $recorg['organization_phone'] = trim($findTagValue->find('p', 0)->plaintext);
                        }
                    }
                }
                else if(isset($findTagValue->selectedtype) && $findTagValue->selectedtype == 'org_address') {
                 if ($findTagValue->find('h4', 0)) {
                     $recorg['organization_address'] = trim($findTagValue->find('h4', 0)->plaintext);
                    } else {
                    if($findTagValue->find('p', 0)) {
                    $recorg['organization_address'] = trim($findTagValue->find('p', 0)->plaintext);
                        }
                    }
                }
                else if(isset($findTagValue->selectedtype) && $findTagValue->selectedtype == 'org_city') {
           
                 if ($findTagValue->find('h4', 0)) {
                     $recorg['organization_city'] = trim($findTagValue->find('h4', 0)->plaintext);
                    } else {
                    if($findTagValue->find('p', 0)) {
                    $recorg['organization_city'] = trim($findTagValue->find('p', 0)->plaintext);
                        }
                    }
                }
                else if(isset($findTagValue->selectedtype) && $findTagValue->selectedtype == 'org_zip') {
                if ($findTagValue->find('h4', 0)) {
                     $recorg['organization_zipcode'] = trim($findTagValue->find('h4', 0)->plaintext);
                    } else {
                    if($findTagValue->find('p', 0)) {
                    $recorg['organization_zipcode'] = trim($findTagValue->find('p', 0)->plaintext);
                        }
                    }
                } 
                else{    
                if ($findTagValue->find('h4', 0)) {
                $recdata[$findTagValue->selectedtype] = trim($findTagValue->find('h4', 0)->plaintext);
                } else {
                //right now paragraph tag is showing and will be replaced by h4 near future starting
                if($findTagValue->find('p', 0)) {
                $recdata[$findTagValue->selectedtype] = trim($findTagValue->find('p', 0)->plaintext);
                }
                }
                }
                 
            }
            //$recdatil['recipient_role'] = "test";
            $recdatil['authentication'] = "Regular Signature";
            $recdatil['id_attachment'] = "no";
            $recdatil['request_attachment'] = "no";
            $recdatil['status'] = "Signed";
            $Alldata['people_fields'] = $recdata;
            $Alldata['organization'] = $recorg;
            $Alldata['details'] = $recdatil;
            array_push($responseArray, $Alldata);
            }
            $count = 0;
            
             
            if(isset($responseArray) && !empty($responseArray) && $fromindexdatapopup != 1) {
             $personsDetail = [];   
             foreach($responseArray as $recipientindexdata) {
                if(isset($responseArray[$count]['people_fields']['first_name']) )
                $personsDetail[$count]['name']     = $responseArray[$count]['people_fields']['first_name']." ".$responseArray[$count]['people_fields']['last_name'];
                if(isset($responseArray[$count]['people_fields']['first_name']) )
                $personsDetail[$count]['fullname']  = $responseArray[$count]['people_fields']['first_name']." ".$responseArray[$count]['people_fields']['last_name'];
                if(isset($responseArray[$count]['people_fields']['first_name']) )
                $personsDetail[$count]['value']     =  $responseArray[$count]['people_fields']['first_name']." ".$responseArray[$count]['people_fields']['last_name'];
                
                if(isset($responseArray[$count]['people_fields']['full_name']) )
                $personsDetail[$count]['name']     = $responseArray[$count]['people_fields']['full_name'];
                if(isset($responseArray[$count]['people_fields']['full_name']) )
                $personsDetail[$count]['fullname']  = $responseArray[$count]['people_fields']['full_name'];
                if(isset($responseArray[$count]['people_fields']['full_name']) )
                $personsDetail[$count]['value']     =  $responseArray[$count]['people_fields']['full_name'];
                $personsDetail[$count]['org_id'] = 0;
                $personsDetail[$count]['data'] = 0;
                if(isset($responseArray[$count]['people_fields']['email']) )
                $personsDetail[$count]['email'] = $responseArray[$count]['people_fields']['email'];
                if(isset($responseArray[$count]['people_fields']['mobile']) )
                $personsDetail[$count]['mobile'] = $responseArray[$count]['people_fields']['mobile'];
                if(isset($responseArray[$count]['people_fields']['address']) )
                $personsDetail[$count]['address'] =  $responseArray[$count]['people_fields']['address'];
                if(isset($responseArray[$count]['people_fields']['city']) )
                $personsDetail[$count]['city'] =  $responseArray[$count]['people_fields']['city'];
                if(isset($responseArray[$count]['people_fields']['zipcode']) )
                $personsDetail[$count]['zip'] = $responseArray[$count]['people_fields']['zipcode'];

                if(isset($responseArray[$count]['people_fields']['personal_no']) )
                $personsDetail[$count]['personnr'] = $responseArray[$count]['people_fields']['personal_no'];

                 if(isset($responseArray[$count]['organization']['organization_name']) ){
                $personsDetail[$count]['company'] = $responseArray[$count]['organization']['organization_name'];
                $personsDetail[$count]['org_name'] = $responseArray[$count]['organization']['organization_name'];
                }
                if(isset($responseArray[$count]['organization']['organization_reg_no']) ){
                $personsDetail[$count]['org_reg_no'] = $responseArray[$count]['organization']['organization_reg_no'];
                }
                if(isset($responseArray[$count]['organization']['organization_phone']) ){
                $personsDetail[$count]['org_mobile'] = $responseArray[$count]['organization']['organization_phone'];
                }
                
                if(isset($responseArray[$count]['organization']['organization_address']) ){
                $personsDetail[$count]['org_address'] = $responseArray[$count]['organization']['organization_address'];
                }

                 if(isset($responseArray[$count]['organization']['organization_city']) ){
                $personsDetail[$count]['org_city'] = $responseArray[$count]['organization']['organization_city'];
                }
                 if(isset($responseArray[$count]['organization']['organization_zipcode']) ){
                $personsDetail[$count]['org_zip'] = $responseArray[$count]['organization']['organization_zipcode'];
                }
                $count++;
             
             }
             $responseArray['personsDetail'] = $personsDetail; 
            }
           
            }
            
            $content = Tcrypt::decrypter($offerSentContent['content']);
            if($content != '') {
                //getGetdocumentinfoxml function of garda template response
                $html = new \Htmldom($content);
                $dynamicElements = [];
                foreach($html->find('.template_container') as $temConKey => $temConValue) {
                    $arrayPush = [];
                    foreach($temConValue->find('.formElement') as $findKey => $findValue) {
                                        
                        $elementStyle = $findValue->getAttribute('style');
                        $arrCSS = $utility->parse_css($elementStyle);
                        $parentDiv = $findValue->parent()->parent();

                        //Fixing Position when field is inside the borderbox or textbox START
                        $addtop = 0;
                        $addleft = 0;
                        if(strpos($parentDiv->getAttribute('class'), 'dynamic_border') !== false && strpos($parentDiv->getAttribute('class'), 'insert_box_div') === false) {
                            $parentCSS = $utility->parse_css($parentDiv->getAttribute('style'));
                            $addtop = (isset($parentCSS['top']) && $parentCSS['top'] != '' ? round($parentCSS['top']) : 0);
                            $addleft = (isset($parentCSS['left']) && $parentCSS['left'] != '' ? round($parentCSS['left']) : 0);
                        } elseif(strpos($parentDiv->getAttribute('class'), 'insert_box_div') !== false && strpos($parentDiv->getAttribute('class'), 'dynamic_border') === false) {
                            $parentCSS = $utility->parse_css($parentDiv->getAttribute('style'));
                            $addtop = (isset($parentCSS['top']) && $parentCSS['top'] != '' ? round($parentCSS['top']) : 0);
                            $addleft = (isset($parentCSS['left']) && $parentCSS['left'] != '' ? round($parentCSS['left']) : 0);
                        } elseif(strpos($parentDiv->getAttribute('class'), 'insert_box_div') !== false  && strpos($parentDiv->getAttribute('class'), 'dynamic_border') !== false) {
                            $parentCSS = $utility->parse_css($parentDiv->getAttribute('style'));
                            $addtop = (isset($parentCSS['top']) && $parentCSS['top'] != '' ? round($parentCSS['top']) : 0);
                            $addleft = (isset($parentCSS['left']) && $parentCSS['left'] != '' ? round($parentCSS['left']) : 0);
                        }
                        //Fixing Position when field is inside the borderbox or textbox END

                        $topPosition = (isset($arrCSS['top']) && $arrCSS['top'] != '' ? round($arrCSS['top'])+$addtop : 0);
                        $leftPosition = (isset($arrCSS['left']) && $arrCSS['left'] != '' ? round($arrCSS['left'])+$addleft : 0);
                        array_push($arrayPush, ['top' => $topPosition, 'left' => $leftPosition, 'dynamic_id' => $findValue->dynamic_id]);
                    }
                    if(!empty($arrayPush)) {
                        sort($arrayPush);
                        array_push($dynamicElements, $arrayPush);
                    }
                }

                $docFields = [];
                foreach($dynamicElements as $eachPageKey => $eachPageValue) {
                    foreach($eachPageValue as $eachElementKey => $eachElementValue) {
                        $eachDynamic_id = $eachElementValue['dynamic_id'];
                        $mainDiv = $html->find('[dynamic_id="'.$eachDynamic_id.'"]', 0);
                        if(!$mainDiv->find('.text', 0)) {
                            continue;
                        }

                        $findValue = $mainDiv->find('.text', 0);
                        //getting document text fields
                        if(strpos($findValue->getAttribute('class'), 'documentField') !== false) {
                            if($findValue->selectedtype != '0') {
                                $apiAttributeOrSelectedType = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->selectedtype);
                                if($parent_id == 10719) {
                                    $apiAttributeOrSelectedType = str_replace(' ', '_', $apiAttributeOrSelectedType);
                                }
                                if($findValue->find('h4', 0) && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                    $docFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                } elseif($findValue->find('p', 0) && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                    $docFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('p', 0)->plaintext)));
                                } elseif(strpos($mainDiv->getAttribute('class'), 'relationDisable') === false && (!isset($docFields[$findValue->selectedtype]))) {
                                    //comments below line of code and add this condition with elseif and === false 
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrSelectedType] = '';
                                } /* elseif(!isset($docFields[$findValue->selectedtype])) {
                                    $docFields[$apiAttributeOrSelectedType] = '';
                                }
                                
                                if(strpos($mainDiv->getAttribute('class'), 'relationDisable') !== false && (!isset($docFields[$findValue->selectedtype]))) {
                                    $docFields[$apiAttributeOrSelectedType] = '';
                                } */
                            }   //not equal condition ends here
                        }   //getting document text fields ends here
                        //getting custom text fields
                        try {
                            //if(strpos($findValue->getAttribute('class'), 'field_box_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && !strpos($findValue->getAttribute('class'), 'datepickerfields_new')) {
                            if(strpos($findValue->getAttribute('class'), 'field_box_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'datepickerfields_new') === false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                $apiAttributeOrSelectedType = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->selectedtype);
                                if($parent_id == 10719) {
                                    $apiAttributeOrSelectedType = str_replace(' ', '_', $apiAttributeOrSelectedType);
                                }
                                //comment below line on 4 August 2020 for not show the key if value is empty
                                //$docFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                if($findValue->find('h4', 0) && $findValue->find('h4', 0)->plaintext) {
                                    $docFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                }
                                if($findValue->find('p', 0) && $findValue->find('p', 0)->plaintext) {
                                    $docFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('p', 0)->plaintext)));
                                }
                            }
                        } catch(\Exception $e) {}

                        //getting datepicker fields
                        try {
                            if(strpos($findValue->getAttribute('class'), 'field_box_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'datepickerfields_new') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                $apiAttributeOrSelectedType = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->selectedtype);
                                if($parent_id == 10719) {
                                    $apiAttributeOrSelectedType = str_replace(' ', '_', $apiAttributeOrSelectedType);
                                }
                                //comment below line on 4 August 2020 for not show the key if value is empty
                                //$docFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                if($findValue->find('h4', 0) && $findValue->find('h4', 0)->plaintext) {
                                    $docFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                }
                                if($findValue->find('p', 0) && $findValue->find('p', 0)->plaintext) {
                                    $docFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('p', 0)->plaintext)));
                                }
                            }
                        } catch(\Exception $e) {}

                        //getting document checkbox elements
                        if(strpos($findValue->getAttribute('class'), 'documentFieldCheckbox') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            //all values of checkboxes are showing
                            $apiAttributeOrFieldLabelName = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->fieldlabelname);
                            if($parent_id == 10719) {
                                $apiAttributeOrFieldLabelName = str_replace(' ', '_', $apiAttributeOrFieldLabelName);
                            }
                            if($findValue->find('.check_icon', 0) && (strpos($findValue->find('.check_icon', 0)->getAttribute('style'), 'visible') !== false || strpos($findValue->getAttribute('class'), 'isChecked') !== false)) {
                                $docFields[$apiAttributeOrFieldLabelName] = 'Yes';
                            } else {
                                $docFields[$apiAttributeOrFieldLabelName] = 'No';
                            }
                        }   //getting document checkbox elements ends here
                        //getting custom checkbox elements
                        if(strpos($findValue->getAttribute('class'), 'check_box_popupcontainer') !== false && strpos($mainDiv->getAttribute('class'), 'chechBoxCustom') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrFieldLabelName = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->fieldlabelname);
                            if($parent_id == 10719) {
                                $apiAttributeOrFieldLabelName = str_replace(' ', '_', $apiAttributeOrFieldLabelName);
                            }
                            if($findValue->find('.check_icon', 0) && strpos($findValue->find('.check_icon', 0)->getAttribute('style'), 'visible')) {
                                $docFields[$apiAttributeOrFieldLabelName] = 'Yes';
                            } else {
                                $docFields[$apiAttributeOrFieldLabelName] = 'No';
                            }
                        }

                        //getting document droplist elements
                        $jsonDecodeDropDownValues = (isset($findValue->dropdownvalues) && !empty($findValue->dropdownvalues) ? json_decode(html_entity_decode($findValue->dropdownvalues), true) : []);
                        $jsonDecodeDropDownAlternativeValues = (isset($findValue->dropdownvalues_alternate) && !empty($findValue->dropdownvalues_alternate) ? json_decode(html_entity_decode($findValue->dropdownvalues_alternate), true) : []);
                        if(strpos($findValue->getAttribute('class'), 'documentFieldDroplist') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            if($parent_id == 10719) {
                                $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                            }
                            //forsearching starting
                            if($findValue->find('span.texthere', 0)) {
                                if(!empty($jsonDecodeDropDownValues) && $findValue->dropdownlabel != trim($findValue->find('span.texthere', 0)->plaintext)) {
                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && !empty($jsonDecodeDropDownAlternativeValues[$getArrayKey]) ? $jsonDecodeDropDownAlternativeValues[$getArrayKey] : trim($findValue->find('span.texthere', 0)->plaintext));
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('span.texthere', 0)->plaintext)));
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? $findValue->selected_altvalue : trim($findValue->find('span.texthere', 0)->plaintext))));
                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = $findValue->find('span.texthere', 0)->selected_altvalue;
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = $findValue->selected_altvalue;
                                    } elseif(isset($findValue->find('span.texthere', 0)->plaintext) && $findValue->find('span.texthere', 0)->plaintext != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                    }
                                } elseif(array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? $findValue->selected_altvalue : trim($findValue->find('span.texthere', 0)->plaintext))));
                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = $findValue->selected_altvalue;
                                    } elseif(isset($findValue->find('span.texthere', 0)->plaintext) && $findValue->find('span.texthere', 0)->plaintext != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                    }
                                } else {
                                    //$docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? $findValue->selected_altvalue : ''));
                                    if(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = $findValue->selected_altvalue;
                                    }
                                }
                            } else {
                                if(!empty($jsonDecodeDropDownValues) && isset($findValue->dropdownlabel ) && isset($findValue->find('p', 0)->plaintext ) && $findValue->dropdownlabel != trim($findValue->find('p', 0)->plaintext)) {
                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? $findValue->selected_altvalue : trim($findValue->find('p', 0)->plaintext))));
                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('p', 0)->plaintext);
                                    } elseif(isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('p', 0)->plaintext);
                                    }
                                } elseif(isset($findValue->find('p', 0)->plaintext) && array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? $findValue->selected_altvalue : trim($findValue->find('p', 0)->plaintext))));
                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = $findValue->selected_altvalue;
                                    } elseif(isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('p', 0)->plaintext);
                                    }
                                } else {
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? $findValue->selected_altvalue : ''));
                                    if(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = $findValue->selected_altvalue;
                                    }
                                }
                            }
                            //forsearching ending
                            //remove commented code from here on 4 August 2020
                        }   //getting document droplist elements ends here
                        //getting custom droplist elements
                        if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            if($parent_id == 10719) {
                                $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                            }
                            //forsearching starting
                            if($findValue->find('span.texthere', 0)) {
                                if(!empty($jsonDecodeDropDownValues) && $findValue->dropdownlabel != trim($findValue->find('span.texthere', 0)->plaintext)) {
                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('span.texthere', 0)->plaintext))));
                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                    } elseif(isset($findValue->find('span.texthere', 0)->plaintext) && $findValue->find('span.texthere', 0)->plaintext != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                    }
                                } elseif(isset($findValue->find('span.texther', 0)->plaintext) && array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('span.texthere', 0)->plaintext))));
                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                    } elseif(isset($findValue->find('span.texthere', 0)->plaintext) && $findValue->find('span.texthere', 0)->plaintext != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                    }
                                } else {
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : ''));
                                    if(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                    }
                                }
                            } else {
                                if(!empty($jsonDecodeDropDownValues) && $findValue->dropdownlabel != trim($findValue->find('span.texthere', 0)->plaintext)) {
                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('p', 0)->plaintext))));
                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                    } elseif(isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('p', 0)->plaintext);
                                    }
                                } elseif(isset($findValue->find('span.texther', 0)->plaintext) && array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('p', 0)->plaintext))));
                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                    } elseif(isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('p', 0)->plaintext);
                                    }
                                } else {
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : ''));
                                    if(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                    }
                                }
                            }
                            //forsearching ending
                            //remove commented code from here on 4 August 2020
                        }

                        //document field droplist with multiple radio button
                        if(strpos($findValue->getAttribute('class'), 'documentFieldDroplist') !== false && strpos($findValue->getAttribute('class'), 'dropdown_radioList_api') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            if($parent_id == 10719) {
                                $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                            }
                            if($findValue->find('.fa-dot-circle-o', 0)) {
                                //$docFields[$apiAttributeOrDropDownLabel] = $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext;
                                //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && !empty($jsonDecodeDropDownAlternativeValues[$getArrayKey]) ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '' ? trim($findValue->selected_altvalue) : trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext)));
                                $getArrayKey = array_search(trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext), $jsonDecodeDropDownValues);
                                //comment below line on 4 August 2020 for not show the key if value is empty
                                //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? $jsonDecodeDropDownAlternativeValues[$getArrayKey] : $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext);
                                if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                    $docFields[$apiAttributeOrDropDownLabel] = $jsonDecodeDropDownAlternativeValues[$getArrayKey];
                                } elseif(isset($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext) && $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext != '') {
                                    $docFields[$apiAttributeOrDropDownLabel] = $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext;
                                }
                            } else {
                                //comment below line on 4 August 2020 for not show the key if value is empty
                                //$docFields[$apiAttributeOrDropDownLabel] = '';
                            }
                        }
                        //document field droplist with multiple radio button of custom and me
                        if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'dropdown_radioList_api') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            if($parent_id == 10719) {
                                $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                            }
                            if($findValue->find('.fa-dot-circle-o', 0)) {
                                //$docFields[$apiAttributeOrDropDownLabel] = $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext;
                                $getArrayKey = array_search(trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext), $jsonDecodeDropDownValues);
                                //comment below line on 4 August 2020 for not show the key if value is empty
                                //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? $jsonDecodeDropDownAlternativeValues[$getArrayKey] : $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext);
                                if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                    $docFields[$apiAttributeOrDropDownLabel] = $jsonDecodeDropDownAlternativeValues[$getArrayKey];
                                } elseif(isset($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext) && $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext != '') {
                                    $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext);
                                }
                            } else {
                                //comment below line on 4 August 2020 for not show the key if value is empty
                                //$docFields[$apiAttributeOrDropDownLabel] = '';
                            }
                        }
                        //document field droplist with multiple checkboxes
                        if(strpos($findValue->getAttribute('class'), 'documentFieldDroplist') !== false && strpos($findValue->getAttribute('class'), 'multi_choice_option') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            if($parent_id == 10719) {
                                $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                            }
                            if($findValue->find('.fa-check', 0)) {
                                $faCheckValues = [];
                                //foreach($findValue->find('.fa-check') as $checkBoxKey => $checkBoxValue) {
                                foreach($findValue->find('.ionIconsCheck') as $checkBoxKey => $checkBoxValue) {
                                    if(strpos($checkBoxValue->getAttribute('class'), 'fa-check') !== false) {
                                        $faCheckValues[] = (isset($jsonDecodeDropDownAlternativeValues[$checkBoxKey]) && $jsonDecodeDropDownAlternativeValues[$checkBoxKey] != '' ? $jsonDecodeDropDownAlternativeValues[$checkBoxKey] : $checkBoxValue->parent()->parent()->find('label', 0)->innertext);
                                    }
                                }
                                if(!empty($faCheckValues)) {
                                    $totalFaCheckValues = count($faCheckValues);
                                    if($totalFaCheckValues > 1) {
                                        $faCheckValues = implode(', ' , array_slice($faCheckValues,0,$totalFaCheckValues-1)) . ' and ' . end($faCheckValues);
                                    } else {
                                        $faCheckValues = implode(', ' , $faCheckValues);
                                    }
                                    $docFields[$apiAttributeOrDropDownLabel] = $faCheckValues;
                                }
                                //$docFields[$apiAttributeOrDropDownLabel] = $findValue->find('.fa-check', 0)->parent()->parent()->find('label', 0)->innertext;
                            } else {
                                //comment below line on 4 August 2020 for not show the key if value is empty
                                //$docFields[$apiAttributeOrDropDownLabel] = '';
                            }
                        }
                        //document field droplist with multiple checkboxes of custom and me
                        if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'multi_choice_option') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            if($parent_id == 10719) {
                                $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                            }
                            if($findValue->find('.fa-check', 0)) {
                                //$comma = (count($data["requesttypes"]) > 0 ? ($key+1 == count($data["requesttypes"])-1 ? ' and ' : ($key+1 < count($data["requesttypes"]) ? ', ' : '')) : '');
                                $faCheckValues = [];
                                foreach($findValue->find('.ionIconsCheck') as $checkBoxKey => $checkBoxValue) {
                                    if(strpos($checkBoxValue->getAttribute('class'), 'fa-check') !== false) {
                                        $faCheckValues[] = (isset($jsonDecodeDropDownAlternativeValues[$checkBoxKey]) && $jsonDecodeDropDownAlternativeValues[$checkBoxKey] != '' ? $jsonDecodeDropDownAlternativeValues[$checkBoxKey] : $checkBoxValue->parent()->parent()->find('label', 0)->innertext);
                                    }
                                }
                                if(!empty($faCheckValues)) {
                                    $totalFaCheckValues = count($faCheckValues);
                                    if($totalFaCheckValues > 1) {
                                        $faCheckValues = implode(', ' , array_slice($faCheckValues,0,$totalFaCheckValues-1)) . ' and ' . end($faCheckValues);
                                    } else {
                                        $faCheckValues = implode(', ' , $faCheckValues);
                                    }
                                    $docFields[$apiAttributeOrDropDownLabel] = $faCheckValues;
                                }
                            } else {
                                //comment below line on 4 August 2020 for not show the key if value is empty
                                //$docFields[$apiAttributeOrDropDownLabel] = '';
                            }
                        } //selectcolor_popupcontainer condition ends here
                    }   //second foreach loop ends here
                }   //first foreach loop ends here

                //document tags names showing and its loop starting
                foreach($html->find('.dynamicTag') as $findTagKey => $findTagValue) {
                    if(strpos($findTagValue->getAttribute('class'), 'documenttagName') !== false) {
                        $apiAttributeOrTagName = (isset($findTagValue->apitagattribute) && $findTagValue->apitagattribute != '' ? $findTagValue->apitagattribute : $findTagValue->tagname);
                        if($parent_id == 10719) {
                            $apiAttributeOrTagName = str_replace(' ', '_', $apiAttributeOrTagName);
                        }
                        $jsonDecodeDropDownValues = (isset($findTagValue->dropdownvalues) && !empty($findTagValue->dropdownvalues) ? json_decode(html_entity_decode($findTagValue->dropdownvalues), true) : []);
                        $jsonDecodeDropDownAlternativeValues = (isset($findTagValue->dropdownvalues_alternate) && !empty($findTagValue->dropdownvalues_alternate) ? json_decode(html_entity_decode($findTagValue->dropdownvalues_alternate), true) : []);

                        if(strpos($findTagValue->getAttribute('class'), 'documentdroplisttagname') !== false) {
                            if(isset($findTagValue->dropdownapi) && $findTagValue->dropdownapi != '') {
                                $docFields[$apiAttributeOrTagName] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                            } else {
                                $tagValuesArray = [];
                                foreach($jsonDecodeDropDownValues as $dropDownKey => $dropDownValues) {
                                    if(isset($findTagValue->plaintext) && !empty($findTagValue->plaintext) && isset($dropDownValues) && !empty($dropDownValues)) {
                                        if(strpos($findTagValue->plaintext, $dropDownValues) > -1) {
                                            $getArrayKey = array_search(trim($dropDownValues), $jsonDecodeDropDownValues);
                                            $tagValuesArray[] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && !empty($jsonDecodeDropDownAlternativeValues[$getArrayKey]) ? $jsonDecodeDropDownAlternativeValues[$getArrayKey] : $utility->convertDateMonthNameToInteger($languageId, trim($dropDownValues)));
                                        } else {
                                            $docFields[$apiAttributeOrTagName] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                                        }
                                    }
                                }
                                $totalTagValuesArray = count($tagValuesArray);
                                if($totalTagValuesArray > 1) {
                                    $tagValuesArray = implode(', ' , array_slice($tagValuesArray,0,$totalTagValuesArray-1)) . ' and ' . end($tagValuesArray);
                                } else {
                                    $tagValuesArray = implode(', ' , $tagValuesArray);
                                }
                                $docFields[$apiAttributeOrTagName] = $tagValuesArray;
                            }
                        } else {
                            $docFields[$apiAttributeOrTagName] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                        }
                    }
                }

                if($html->find('.billecta_GetBankInfo_h5')) {
                    foreach($html->find('.billecta_GetBankInfo_h5') as $findBillectaKey => $findBillectaValue) {
                        if(isset($findBillectaValue->billecta_row)) {
                            if($html->find('.billecta_row_'.$findBillectaValue->billecta_row)) {
                                if($findBillectaValue->innertext != '&nbsp;' && $findBillectaValue->innertext != '<br>') {
                                    //$docFields[$findBillectaValue->innertext] = $html->find('.billecta_row_'.$findBillectaValue->billecta_row, 0)->innertext;
                                    $docFields[$findBillectaValue->innertext] = str_replace(',', ' ', $html->find('.billecta_row_'.$findBillectaValue->billecta_row, 0)->innertext);
                                }
                            }
                        }
                    }
                }
                //document tags names showing and its loop ending

                if(!empty($docFields)) {
                    //showing alphbats order to show document fields data
                    /* If there area multiple case keys as name of document fields then below line will be needed to sort the array */
                    // $docFields = array_change_key_case($docFields, CASE_LOWER);
                    ksort($docFields);
                    $responseArray['document_fields'] = $docFields;
                }
            }

            //basic information of sender and account details starting
            //$senderData = Offersentdetails::where('offer_send_details.offer_sent_id', $document_id)->join('offer_sent', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')->select('offer_send_details.user_details')->where('offer_send_details.is_sender', 1)->where('offer_sent.sender_id', $user_id)->first();
            $senderData = Offersentdetails::where('offer_send_details.offer_sent_id', $document_id)->join('offer_sent', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')->select('offer_send_details.user_details')->where('offer_send_details.is_sender', 1)->whereIn('offer_sent.sender_id', $allUserIds)->first();

            if($senderData) {
                $senderDetails = $accountDetails = [];
                $senderUserDetails = Tcrypt::decrypter($senderData['user_details']);
                $senderUserDetailsJsonDecode = json_decode($senderUserDetails, true);

                //sender details information starting
                //for regular contract sender use full_name key and for online contract sender use first_name key
                $senderDetails['name'] = (isset($senderUserDetailsJsonDecode['full_name']) && $senderUserDetailsJsonDecode['full_name'] != '' ? trim($senderUserDetailsJsonDecode['full_name']) : (isset($senderUserDetailsJsonDecode['first_name']) && $senderUserDetailsJsonDecode['first_name'] != '' ? trim($senderUserDetailsJsonDecode['first_name']) : ''));
                $senderDetails['email'] = (isset($senderUserDetailsJsonDecode['email']) && $senderUserDetailsJsonDecode['email'] != '' ? trim(preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $senderUserDetailsJsonDecode['email'])) : '');

                $userCustomFields = (isset($senderUserDetailsJsonDecode['user_customfields']) && $senderUserDetailsJsonDecode['user_customfields'] != '' ? json_decode($senderUserDetailsJsonDecode['user_customfields'], true) : []);
                if(!empty($userCustomFields)) {
                    foreach($userCustomFields as $userCustomFldkey => $userCustomFldValue) {
                        $senderDetails[trim($userCustomFldkey)] = (isset($userCustomFldValue) && $userCustomFldValue != '' ? trim($userCustomFldValue) : '');
                        //$senderDetails[trim($userCustomFldkey)] = (isset($userCustomFldValue) && $userCustomFldValue != '' ? $utility->convertDateMonthNameToInteger($languageId, trim($userCustomFldValue)) : '');
                    }
                }
                $responseArray['sender_details'] = $senderDetails;
                //sender details information ending

                //account details information starting
                $accountDetails['company'] = (isset($senderUserDetailsJsonDecode['company']) && $senderUserDetailsJsonDecode['company'] != '' ? trim($senderUserDetailsJsonDecode['company']) : '');
                $accountDetails['reg_no'] = (isset($senderUserDetailsJsonDecode['reg_no']) && $senderUserDetailsJsonDecode['reg_no'] != '' ? trim($senderUserDetailsJsonDecode['reg_no']) : '');
                $accountDetails['address'] = (isset($senderUserDetailsJsonDecode['address']) && $senderUserDetailsJsonDecode['address'] != '' ? trim($senderUserDetailsJsonDecode['address']) : '');
                $accountDetails['phone_no'] = (isset($senderUserDetailsJsonDecode['mobile']) && $senderUserDetailsJsonDecode['mobile'] != '' ? trim($senderUserDetailsJsonDecode['mobile']) : (isset($senderUserDetailsJsonDecode['telephone']) && $senderUserDetailsJsonDecode['telephone'] != '' ? trim($senderUserDetailsJsonDecode['telephone']) : ''));
                $accountDetails['zipcode'] = (isset($senderUserDetailsJsonDecode['zipcode']) && $senderUserDetailsJsonDecode['zipcode'] != '' ? trim($senderUserDetailsJsonDecode['zipcode']) : (isset($senderUserDetailsJsonDecode['post_code']) && $senderUserDetailsJsonDecode['post_code'] != '' ? trim($senderUserDetailsJsonDecode['post_code']) : ''));
                $accountDetails['city'] = (isset($senderUserDetailsJsonDecode['city']) && $senderUserDetailsJsonDecode['city'] != '' ? trim($senderUserDetailsJsonDecode['city']) : '');

                $responseArray['account_details'] = $accountDetails;
                //account details information ending
            }
            //basic information of sender and account details ending

            //specificdocumentdetail API
            /* Get product table details against the template Zain*/
            if( $_SERVER['HTTP_HOST'] == 'acceptance.simplesign.io' || $_SERVER['HTTP_HOST'] == 'esign.simplesign.io' ) {
                $templatetabledata = $this->templateTables($document_id);
                foreach ($templatetabledata['producttables'] as $tablekey => $tabledata) {
                    $tablename = $tabledata['table_name'];
                    $tablecurrency = $tabledata['table_currency'];
                    $itemcollection = array();
                    foreach ($tabledata['tableitems'] as $itemkey => $itemdata) {
                        $itemdetails = array();
                        $itemdetails['product name'] = $itemdata['item_name'];
                        if ( isset($data['fromoverview']) && $data['fromoverview'] == 1 ) {
                            $itemdetails[$itemdata['item_name'].' (description)'] = ($itemdata['item_description'] != 'NULL' ? $itemdata['item_description'] : '');
                            $itemdetails[$itemdata['item_name'].' (quantity)'] = $itemdata['item_qty'];
                            $itemdetails[$itemdata['item_name'].' (price)'] = $itemdata['item_price'].' '.$tablecurrency;
                            if ($itemdata['item_discount'] != 0) {
                                $itemdetails[$itemdata['item_name'].' (discount)'] = $itemdata['item_discount'].' %';
                            }
                            $itemdetails[$itemdata['item_name'].' (cost)'] = $itemdata['item_cost'].' '.$tablecurrency;
                            $itemdetails[$itemdata['item_name'].' (margin)'] = $itemdata['item_margin'].' '.$tablecurrency;
                        } else {
                            $itemdetails['description'] = ($itemdata['item_description'] != 'NULL' ? $itemdata['item_description'] : '');
                            $itemdetails['quantity'] = $itemdata['item_qty'];
                            if ($itemdata['item_discount'] != 0) {
                                $itemdetails['item_discount'] = $itemdata['item_discount'].'%';
                            }
                            $itemdetails['price'] = $itemdata['item_price'].' '.$tablecurrency;
                            $itemdetails['cost'] = $itemdata['item_cost'].' '.$tablecurrency;
                            $itemdetails['margin'] = $itemdata['item_margin'].' '.$tablecurrency;
                        }
                        array_push($itemcollection, $itemdetails);
                        $responseArray[$tablename] = $itemcollection;
                    }
                }
            }

            //basic information of document details starting
            if($offerSentContent) {
                $uniqueId = Offersentdetails::where('offer_send_details.offer_sent_id', $document_id)->join('offer_sent', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')->select('offer_send_details.unique_id')->where('offer_send_details.is_sender', 0)->whereIn('offer_sent.sender_id', $allUserIds)->first();
                //DB::enableQueryLog();
                //print_rj(DB::getQueryLog());
                $documentLink = Offersentdetails::where('offer_send_details.offer_sent_id', $document_id)->join('offer_sent', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')->whereIn('offer_sent.sender_id', $allUserIds)->where('offer_send_details.is_sender', 1)->select('offer_send_details.id', 'offer_send_details.unique_id')->first();
                $documentDetails = [];
                $documentDetails['template_name'] = ($offerSentContent['visible_name'] != '' ? trim(Tcrypt::decrypter($offerSentContent['visible_name'])) : trim(Tcrypt::decrypter($offerSentContent['name'])));
                $documentDetails['document_id'] = (!empty($offerSentContent['external_doc_id']) ? $offerSentContent['external_doc_id'] : $offerSentContent['id']);
                //$documentDetails['document_id'] = $offerSentContent['id'];
                $documentDetails['template_id'] = $offerSentContent['offer_id'];
                $documentDetails['language'] = (isset($offerSentContent['language_id']) && $offerSentContent['language_id'] != '' ? $utility->languageName($offerSentContent['language_id']) : 'English');
                //if($_SERVER['HTTP_HOST'] == 'acceptance.simplesign.io') {
                    $documentDetails['sent_date'] = (isset($offerSentContent['created_date']) && $offerSentContent['created_date'] != '' && $offerSentContent['created_date'] != '0000-00-00 00:00:00' ? $utility->changeTimeZone(trim($offerSentContent['created_date']), 'Y-m-d H:i:s', 'UTC', $userTimeZone) : '');
                    $documentDetails['signed_date'] = (isset($offerSentContent['signed_date']) && $offerSentContent['signed_date'] != '' && $offerSentContent['signed_date'] != '0000-00-00 00:00:00' ? $utility->changeTimeZone(trim($offerSentContent['signed_date']), 'Y-m-d H:i:s', 'UTC', $userTimeZone) : '');
                    $documentDetails['due_date'] = (isset($offerSentContent['due_date']) && $offerSentContent['due_date'] != '' && $offerSentContent['due_date'] != '0000-00-00 00:00:00' ? $utility->changeTimeZone(trim(date('Y-m-d', strtotime($offerSentContent['due_date']))), 'Y-m-d', 'UTC', $userTimeZone) : '');
                /* } else {
                    $documentDetails['sent_date'] = (isset($offerSentContent['created_date']) && $offerSentContent['created_date'] != '' && $offerSentContent['created_date'] != '0000-00-00 00:00:00' ? trim($offerSentContent['created_date']) : '');
                    $documentDetails['signed_date'] = (isset($offerSentContent['signed_date']) && $offerSentContent['signed_date'] != '' && $offerSentContent['signed_date'] != '0000-00-00 00:00:00' ? trim($offerSentContent['signed_date']) : '');
                    $documentDetails['due_date'] = (isset($offerSentContent['due_date']) && $offerSentContent['due_date'] != '' && $offerSentContent['due_date'] != '0000-00-00 00:00:00' ? trim(date('Y-m-d', strtotime($offerSentContent['due_date']))) : '');
                } */
                $documentDetails['status'] = (isset($offerSentContent['offer_status']) ? $utility->offerStatusName($offerSentContent['offer_status']) : '');

                $getAddOnObjectData = settings::where('user_id', $parent_id)->select('new_addon_obj')->first();
                $markCompleted = Offersent_data::where('sent_id', $offerSentContent['id'])->pluck('mark_completed');
                $multiCaseManagement = Offersent_data::where('sent_id', $offerSentContent['id'])->pluck('multi_case_management');
                $contractTypeId = Offersent_data::where('sent_id', $offerSentContent['id'])->pluck('contract_type_id');
                $markCompletedDate = Offersent_data::where('sent_id', $offerSentContent['id'])->pluck('mark_completed_date');

                /* Adding gross margin and total cost in Api response */
                $costmargin = "";
                $costmargin = Offersent_data::where('sent_id', '=', $offerSentContent['id'])->whereNotNull('document_cost')->whereNotNull('document_margin')->whereNotNull('document_price')->select('document_price', 'document_cost', 'document_margin')->first();

                
                if(!empty($getAddOnObjectData['new_addon_obj'])) {
                    $newAddonObjJesonDecode = json_decode($getAddOnObjectData['new_addon_obj'], true);
                    if(isset($newAddonObjJesonDecode['mark_as_completed_addon']) && $newAddonObjJesonDecode['mark_as_completed_addon'] == 1) {
                        if(isset($newAddonObjJesonDecode['mark_as_completed_addon_setting']) && !empty($newAddonObjJesonDecode['mark_as_completed_addon_setting'])) {
                            $markAsCompletedAddonSettingJsonDecode = json_decode($newAddonObjJesonDecode['mark_as_completed_addon_setting'], true);

                            $multiCaseManagementJsonDecode = (isset($multiCaseManagement) && !empty($multiCaseManagement) ? json_decode($multiCaseManagement, true) : []);
                            

                            //if(!empty($multiCaseManagementJsonDecode) || 1==1) {
                            if(!empty($multiCaseManagementJsonDecode)) {
                                if(isset($markAsCompletedAddonSettingJsonDecode['mark_tasks_array']) && !empty($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'])) {
                                    $numbetIncrement = 0;
                                    $flagForCompletedKey = false;
                                    $completeStatus = 'Not completed';
                                    foreach($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'] as $markAsCompletedAddonSettingJsonDecodeKey => $markAsCompletedAddonSettingJsonDecodeValue) {
                                        
                                        if(in_array($contractTypeId, $markAsCompletedAddonSettingJsonDecodeValue['contract_type_selected']) && (in_array($offerSentContent['offer_status'], $markAsCompletedAddonSettingJsonDecodeValue['marked_addon_status']) || in_array("", $markAsCompletedAddonSettingJsonDecodeValue['marked_addon_status']))) {
                                            $numbetIncrement++;
                                            $conditionalText = '';
                                            if(isset($multiCaseManagementJsonDecode[$numbetIncrement]) && !empty($multiCaseManagementJsonDecode[$numbetIncrement])) {
                                                if(isset($multiCaseManagementJsonDecode[$numbetIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numbetIncrement]['status_text'] == 'done') {
                                                    $conditionalText = 'Yes';
                                                } elseif(isset($multiCaseManagementJsonDecode[$numbetIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numbetIncrement]['status_text'] == 'in_process') {
                                                    $conditionalText = 'In process';
                                                } elseif(isset($multiCaseManagementJsonDecode[$numbetIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numbetIncrement]['status_text'] == 'no') {
                                                    $conditionalText = 'No';
                                                }
                                                if(isset($multiCaseManagementJsonDecode[$numbetIncrement]['task_no']) && isset($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'][$multiCaseManagementJsonDecode[$numbetIncrement]['task_no']])) {
                                                    $documentDetails[$markAsCompletedAddonSettingJsonDecode['mark_tasks_array'][$multiCaseManagementJsonDecode[$numbetIncrement]['task_no']]['tasknames']] = $conditionalText;
                                                    $flagForCompletedKey = true;
                                                } else {
                                                    if(isset($multiCaseManagementJsonDecode[$numbetIncrement]['task_no']) && $multiCaseManagementJsonDecode[$numbetIncrement]['task_no'] != '') {
                                                        $documentDetails[$markAsCompletedAddonSettingJsonDecodeValue['tasknames']] = 'No';
                                                        $flagForCompletedKey = true;
                                                    }
                                                }
                                            } else {
                                                if($markCompleted != 1) {
                                                    $documentDetails[$markAsCompletedAddonSettingJsonDecodeValue['tasknames']] = 'No';
                                                }
                                                $flagForCompletedKey = true;
                                            }
                                            if(isset($multiCaseManagementJsonDecode[$numbetIncrement]) && !empty($multiCaseManagementJsonDecode[$numbetIncrement]) && isset($multiCaseManagementJsonDecode[$numbetIncrement]['status_activity']) && !empty($multiCaseManagementJsonDecode[$numbetIncrement]['status_activity'])) {
                                                $flagForCompletedKey = true;
                                                //if(count($multiCaseManagementJsonDecode) == $isCompleted && $markAsCompletedAddonSettingJsonDecodeKey == count($markAsCompletedAddonSettingJsonDecode['mark_tasks_array']) -1) {
                                                if($markCompleted == 1) {
                                                    //if($_SERVER['HTTP_HOST'] == 'acceptance.simplesign.io') {
                                                        $completeStatus = $utility->changeTimeZone($markCompletedDate, 'Y-m-d H:i:s', 'UTC', $userTimeZone);
                                                    /* } else {
                                                        $completeStatus = $utility->changeTimeZone($markCompletedDate, 'Y-m-d H:i:s', 'UTC', $userTimeZone);
                                                    } */
                                                }
                                            }   //status_activity
                                        }
                                    }
                                    //if(!empty($multiCaseManagementJsonDecode)) {
                                    if(!empty($flagForCompletedKey)) {
                                        $documentDetails['completed'] = $completeStatus;
                                    }
                                }
                            }
                        }
                    }
                }
                $documentDetails['pdf'] = $domain_name.'avtal/downloadpdf/'.$document_id.'/'.$uniqueId['unique_id'];
                $documentDetails['document_url'] = $domain_name.'document/view/'.$documentLink['id'].'/'.$documentLink['unique_id'];

                if ($costmargin != "") {
                    if ($costmargin['document_cost'] != "NULL") {
                        $documentDetails['document_cost'] =  $costmargin['document_cost'];
                    }

                    if ($costmargin['document_margin'] != "NULL") {
                        $documentDetails['document_margin'] =  $costmargin['document_margin'];
                    }

                    if ($costmargin['document_price'] != "NULL") {
                        $documentDetails['document_price'] =  $costmargin['document_price'];
                    }
                }
                //basic information of document details ending
                $responseArray['document_details'] = $documentDetails;
            }
            if(!isset($data['fromoverview'])) {
                $updatedIndexData = DB::table('document_indexdata')->where('document_id', $document_id)->get();
                if(!empty($updatedIndexData)) {
                    foreach($responseArray as $responseArrayKey => $responseArrayValue) { //loop on main array
                        if(is_numeric($responseArrayKey)) {
                            $recRole = $responseArray[$responseArrayKey]['details']['recipient_role'];
                            foreach($responseArrayValue as $responseArrayValueKey => $recValue) { //loop on numeric array
                                foreach($updatedIndexData as $updatedIndexDataKey => $updatedIndexDataValue) { // loop on array from database
                                    if($updatedIndexDataValue->rec_role == $recRole) {
                                        if($updatedIndexDataValue->object_type == $responseArrayValueKey) { //checking role condition
                                            $orginalFields = json_decode($updatedIndexDataValue->old_field, true);
                                            $newFields = json_decode($updatedIndexDataValue->new_field, true);
                                            $fieldName = array_keys($orginalFields)[0]; // getting field name orginal as it can't be changed from UI
                                            $updatedFieldValue = array_values($newFields)[0]; // getting updated values of that particular field
                                            $responseArray[$responseArrayKey][$responseArrayValueKey][$fieldName] = $updatedFieldValue; //assining values to the main object
                                        }
                                    }
                                }
                            }
                        } else {
                            foreach($updatedIndexData as $updatedIndexDataKey => $updatedIndexDataValue) { // loop on array from database
                                if($updatedIndexDataValue->object_type == $responseArrayKey) { //checking role condition
                                    $orginalFields = json_decode($updatedIndexDataValue->old_field, true);
                                    $newFields = json_decode($updatedIndexDataValue->new_field, true);
                                    $fieldName = array_keys($orginalFields)[0]; // getting field name orginal as it can't be changed from UI
                                    $updatedFieldValue = array_values($newFields)[0]; // getting updated values of that particular field
                                    $responseArray[$responseArrayKey][$fieldName] = $updatedFieldValue; //assining values to the main object
                                }
                            }
                        }
                    }
                }
            }
            
            return response()->json(['status' => 'success', 'result' => $responseArray], 200, ['Content-Type' => 'application/json; charset=UTF-8'], JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
        } else {
            return Response::json(['status' => 'error', 'result' => 'No record(s) found']);
        }
    }

    public function getDocumentdetail($custom_data=[]) {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');
        $storeFieldsObjDB = false;
        //setMajorDB();

        //added by me (MS) 01 June 2020 starting
        if(isset($custom_data['access_token']) && $custom_data['access_token'] != '') {
            $data['access_token'] = $custom_data['access_token'];
        }
        if(isset($custom_data['document_id']) && $custom_data['document_id'] != '') {
            $data['document_id'] = $custom_data['document_id'];
        }
        //added by me (MS) 01 June 2020 ending

        //access_token validation starting
        if(isset($data['access_token']) && $data['access_token'] != '' && !isset($custom_data['user_id']) ) {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
        //access_token validation ending

        if(isset($custom_data['user_id'])) {
            $user_id = $custom_data['user_id'];
            $storeFieldsObjDB = true;
        } else {
            $user_id = $utility->getUserIdByAuthToken($access_token);
        }
        $parent_id = $utility->getParent($user_id);
        if($utility->isParent($user_id) == 1) {
            $allUserIds = $utility->getSubusers($parent_id);
        } else {
            $allUserIds = [$user_id];
        }

        //contract_id validation starting
        if(isset($data['document_id']) && $data['document_id'] != '') {
            $document_id = $data['document_id'];
        } elseif(isset($custom_data['sent_id']) && $custom_data['sent_id'] != '') {
            $document_id = $custom_data['sent_id'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'document_id is missing']);
        }

        $userTimeZone = $utility->getUsertimezone($parent_id);
        $getUserAPITimeZone = $utility->getUserAPITimeZone($parent_id);
        $getDocumentIdFromExternalDocumentId = $utility->documentExternalId($document_id, $allUserIds);
        if(!empty($getDocumentIdFromExternalDocumentId)) {
            $document_id = $getDocumentIdFromExternalDocumentId;
            $data['document_id'] = $document_id;
        }

        $checkingDraft = Offersent::where('id', $document_id)->where('offer_status', 7)->where('is_draft', 1)->count();
        if($checkingDraft) {
            return Response::json(['status' => 'error', 'result' => 'document is not sent']);
        }

        $userSettings = $utility->getUserSettings($parent_id);
        $getApiHitCount = Userinfo::where('user_id', $parent_id)->select('hit_count')->first();
        $addupdateapiaccesslogs = $utility->addupdateapiaccesslogs($user_id, 'getDocumentdetail v3', $data, $getApiHitCount['hit_count']);
        if($addupdateapiaccesslogs == 'exceed') {
            $this->apiCallLimitExceedMessage = str_replace('#hitCuntNo', $getApiHitCount['hit_count'], $this->apiCallLimitExceedMessage);
            return Response::json(['status' => 'error', 'result' => $this->apiCallLimitExceedMessage]);
        }

        if($utility->checkAdminStripe($user_id) && !isset($custom_data['user_id']) ) {
            return Response::json(['status' => 'error', 'result' => 'Account is locked make payment in order to continue Simplesign']);
        }
        
        $contractData = Offersentdetails::where('offer_send_details.offer_sent_id', $document_id)->join('offer_sent', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')->select('offer_sent.language_id', 'offer_send_details.id AS detail_id', 'offer_send_details.offer_sent_id', 'offer_send_details.user_details', 'offer_send_details.offer_status', 'offer_send_details.req_attached', 'offer_send_details.document_read_date', 'offer_send_details.signed_date', 'offer_send_details.authentication_method', 'offer_send_details.role', 'offer_send_details.invitation_type', 'offer_send_details.invitation_order', 'offer_send_details.offer_confirmation', 'offer_send_details.id_attachments', 'offer_sent.content', 'offer_send_details.forward_status', 'offer_send_details.forward_user_details', 'offer_send_details.forward_signed')->where('offer_send_details.is_sender', 0)->whereIn('offer_sent.sender_id', $allUserIds)->get()->toArray();
        if($contractData) {
            $responseArray = $senderInfo = $contractDetails = $allRecipientData = [];
            $offerSentContent = Offersent::where('id', $document_id)->whereIn('sender_id', $allUserIds)->select('content', 'visible_name', 'name', 'language_id', 'id', 'offer_id', 'created_date', 'offer_status', 'signed_date', 'due_date', 'external_doc_id')->first();
            foreach($contractData as $contractDataKey => $contractDataValue) {
                $languageId = $contractDataValue['language_id'];

                $peopleFields = $organizationFields = $details = $inviteAndForwardDetails = [];
                $nameExplode = '';
                
                $recipientUserDetails = Tcrypt::decrypter($contractDataValue['user_details']);
                $recipientUserDetailsJsonDecode = json_decode($recipientUserDetails, true);
                $userRole = (isset($recipientUserDetailsJsonDecode['recrolename']) && $recipientUserDetailsJsonDecode['recrolename'] != '' ? $recipientUserDetailsJsonDecode['recrolename'] : (isset($recipientUserDetailsJsonDecode['partyname']) && $recipientUserDetailsJsonDecode['partyname'] != '' ? $recipientUserDetailsJsonDecode['partyname'] : ''));

                //basic information of recipient starting

                $recipientFieldsRolesTabFields = (isset($recipientUserDetailsJsonDecode['Recipient_fields_roles_tab_fields']) && !empty($recipientUserDetailsJsonDecode['Recipient_fields_roles_tab_fields']) ? json_decode($recipientUserDetailsJsonDecode['Recipient_fields_roles_tab_fields'], true) : '');
                $recinfoFields = ($recipientFieldsRolesTabFields != '' ? $recipientFieldsRolesTabFields['recinfo_fields'] : '');

                if(isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '') {
                    //for regular contract recipient use full_name key
                    if((isset($recinfoFields['last_name']) && $recinfoFields['last_name'] == 1) || (isset($recipientUserDetailsJsonDecode['last_name']) && $recipientUserDetailsJsonDecode['last_name'] != '')) {
                        $nameExplode = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($recipientUserDetailsJsonDecode['full_name'])) : '');
                        if(isset($recipientUserDetailsJsonDecode['last_name']) && $recipientUserDetailsJsonDecode['last_name'] != '' && isset($nameExplode[1]) && $nameExplode[1] != '' && $nameExplode[1] != $recipientUserDetailsJsonDecode['last_name']) {
                            $peopleFields['first_name'] = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? $recipientUserDetailsJsonDecode['full_name'] : '');
                            $peopleFields['last_name'] = (isset($recipientUserDetailsJsonDecode['last_name']) && $recipientUserDetailsJsonDecode['last_name'] != '' ? $recipientUserDetailsJsonDecode['last_name'] : '');
                        } else {
                            $peopleFields['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                            $peopleFields['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                        }
                    } else {
                        $nameExplode = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($recipientUserDetailsJsonDecode['full_name'])) : '');
                        $peopleFields['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                        $peopleFields['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                    }
                    /* if((isset($recinfoFields['last_name']) && $recinfoFields['last_name'] == 1) || (isset($recipientUserDetailsJsonDecode['last_name']) && $recipientUserDetailsJsonDecode['last_name'] != '')) {
                        $peopleFields['first_name'] = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? $recipientUserDetailsJsonDecode['full_name'] : '');
                        $peopleFields['last_name'] = (isset($recipientUserDetailsJsonDecode['last_name']) && $recipientUserDetailsJsonDecode['last_name'] != '' ? $recipientUserDetailsJsonDecode['last_name'] : '');
                    } else {
                        $nameExplode = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($recipientUserDetailsJsonDecode['full_name'])) : '');
                        $peopleFields['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                        $peopleFields['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                    } */
                } elseif(isset($recipientUserDetailsJsonDecode['name']) && $recipientUserDetailsJsonDecode['name'] != '') {
                    //for online contract recipient use name key
                    $nameExplode = (isset($recipientUserDetailsJsonDecode['name']) && $recipientUserDetailsJsonDecode['name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($recipientUserDetailsJsonDecode['name'])) : '');
                    $peopleFields['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                    $peopleFields['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                }
                $peopleFields['email'] = (isset($recipientUserDetailsJsonDecode['email']) && $recipientUserDetailsJsonDecode['email'] != '' ? trim(preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $recipientUserDetailsJsonDecode['email'])) : '');
                //$peopleFields['personal_no'] = (isset($recipientUserDetailsJsonDecode['personnr']) && $recipientUserDetailsJsonDecode['personnr'] != '' ? trim($recipientUserDetailsJsonDecode['personnr']) : '');
                //$peopleFields['personal_no'] = (isset($recipientUserDetailsJsonDecode['personnr']) && $recipientUserDetailsJsonDecode['personnr'] != '' ? (strlen(trim($recipientUserDetailsJsonDecode['personnr'])) == 12 || strlen(trim($recipientUserDetailsJsonDecode['personnr'])) == 13 ? substr(trim($recipientUserDetailsJsonDecode['personnr']), 2) : trim($recipientUserDetailsJsonDecode['personnr'])) : '');
                if($parent_id == 12665 || $parent_id == 15307) {
                    $peopleFields['personal_no'] = (isset($recipientUserDetailsJsonDecode['personnr']) && $recipientUserDetailsJsonDecode['personnr'] != '' ? (strlen(trim($recipientUserDetailsJsonDecode['personnr'])) == 12 || strlen(trim($recipientUserDetailsJsonDecode['personnr'])) == 13 ? substr(trim($recipientUserDetailsJsonDecode['personnr']), 2) : trim($recipientUserDetailsJsonDecode['personnr'])) : '');
                } else {
                    $peopleFields['personal_no'] = (isset($recipientUserDetailsJsonDecode['personnr']) && $recipientUserDetailsJsonDecode['personnr'] != '' ? trim($recipientUserDetailsJsonDecode['personnr']) : '');
                }
                $peopleFields['mobile'] = (isset($recipientUserDetailsJsonDecode['mobile']) && $recipientUserDetailsJsonDecode['mobile'] != '' ? trim($recipientUserDetailsJsonDecode['mobile']) : '');
                $peopleFields['address'] = (isset($recipientUserDetailsJsonDecode['address']) && $recipientUserDetailsJsonDecode['address'] != '' ? trim($recipientUserDetailsJsonDecode['address']) : '');
                $peopleFields['city'] = (isset($recipientUserDetailsJsonDecode['city']) && $recipientUserDetailsJsonDecode['city'] != '' ? trim($recipientUserDetailsJsonDecode['city']) : '');
                $peopleFields['zipcode'] = (isset($recipientUserDetailsJsonDecode['zipcode']) && $recipientUserDetailsJsonDecode['zipcode'] != '' ? trim($recipientUserDetailsJsonDecode['zipcode']) : (isset($recipientUserDetailsJsonDecode['zip']) && $recipientUserDetailsJsonDecode['zip'] != '' ? trim($recipientUserDetailsJsonDecode['zip']) : ''));
                //basic information of recipient ending

                //organization information of recipient starting
                if(isset($recipientUserDetailsJsonDecode['organization_fields'])) {
                    $orgFields = json_decode($recipientUserDetailsJsonDecode['organization_fields'], true);
                    foreach($orgFields as $orgFldsKey => $orgFldsValue) {
                        $orgFldsValue['orgFieldName'] = str_replace('name', 'organization_name', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('org_no', 'organization_no', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('phone', 'organization_phone', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('address', 'organization_address', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('city', 'organization_city', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('zipcode', 'organization_zipcode', $orgFldsValue['orgFieldName']);
                        $organizationFields[$orgFldsValue['orgFieldName']] = $orgFldsValue['orgFieldValue'];
                    }
                } else {
                    if(isset($recipientUserDetailsJsonDecode['org_name']) && $recipientUserDetailsJsonDecode['org_name'] != '') {
                        $organizationFields['organization_name'] = $recipientUserDetailsJsonDecode['org_name'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_reg_no']) && $recipientUserDetailsJsonDecode['org_reg_no'] != '') {
                        $organizationFields['organization_no'] = $recipientUserDetailsJsonDecode['org_reg_no'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_mobile']) && $recipientUserDetailsJsonDecode['org_mobile'] != '') {
                        $organizationFields['organization_phone'] = $recipientUserDetailsJsonDecode['org_mobile'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_address']) && $recipientUserDetailsJsonDecode['org_address'] != '') {
                        $organizationFields['organization_address'] = $recipientUserDetailsJsonDecode['org_address'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_city']) && $recipientUserDetailsJsonDecode['org_city'] != '') {
                        $organizationFields['organization_city'] = $recipientUserDetailsJsonDecode['org_city'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_zip']) && $recipientUserDetailsJsonDecode['org_zip'] != '') {
                        $organizationFields['organization_zipcode'] = $recipientUserDetailsJsonDecode['org_zip'];
                    }
                }
                //organization information of recipient ending

                //people information of new fields starting
                if(isset($recipientUserDetailsJsonDecode['extra_fields']) && !empty($recipientUserDetailsJsonDecode['extra_fields'])) {
                    $recipientFieldsWithoutValue = (isset($recipientUserDetailsJsonDecode['recipientfields']) && !empty($recipientUserDetailsJsonDecode['recipientfields']) ? json_decode($recipientUserDetailsJsonDecode['recipientfields'], true) : []);

                    $extraFields = (isset($recipientUserDetailsJsonDecode['extra_fields']) && !empty($recipientUserDetailsJsonDecode['extra_fields']) ? json_decode($recipientUserDetailsJsonDecode['extra_fields'], true) : []);
                    if($extraFields) {
                        $intersect = array_uintersect($extraFields, $recipientFieldsWithoutValue, function($val1, $val2) {
                            return strcmp($val1['fieldName'], $val2['fieldName']);
                        });
                        $intersect = array_values($intersect);
                    } else {
                        $intersect = [];
                    }

                    if(!empty($intersect)) {
                        foreach($intersect as $extraFldKey => $extraFldValue) {
                            $peopleFields[$extraFldValue['fieldName']] = $extraFldValue['fieldValue'];
                        }
                    }
                }
                //people information of new fields ending

                //organization information of new fields starting
                if(isset($recipientUserDetailsJsonDecode['org_extra_fields']) && !empty($recipientUserDetailsJsonDecode['org_extra_fields'])) {
                    $organizationFieldsWithoutValue = (isset($recipientUserDetailsJsonDecode['organizationfields']) && !empty($recipientUserDetailsJsonDecode['organizationfields']) ? json_decode($recipientUserDetailsJsonDecode['organizationfields'], true) : []);

                    $orgExtraFields = (isset($recipientUserDetailsJsonDecode['org_extra_fields']) && !empty($recipientUserDetailsJsonDecode['org_extra_fields']) ? json_decode($recipientUserDetailsJsonDecode['org_extra_fields'], true) : []);
                    if($orgExtraFields) {
                        $intersectOrg = array_uintersect($orgExtraFields, $organizationFieldsWithoutValue, function($val1, $val2) {
                            return strcmp($val1['fieldName'], $val2['fieldName']);
                        });
                        $intersectOrg = array_values($intersectOrg);
                    } else {
                        $intersectOrg = [];
                    }

                    if(!empty($intersectOrg)) {
                        foreach($intersectOrg as $orgExtraFldKey => $orgExtraFldValue) {
                            $organizationFields[$orgExtraFldValue['fieldName']] = $orgExtraFldValue['fieldValue'];
                        }
                    }
                }
                //organization information of new fields ending

                //organization information of fields which are placed at document starting
                $content = Tcrypt::decrypter($contractDataValue['content']);
                if($content != '') {
                    $html = new \Htmldom($content);
                    foreach($html->find('.text') as $findKey => $findValue) {
                        //codition for regular contract starting
                        if(isset($recipientUserDetailsJsonDecode['id']) && $recipientUserDetailsJsonDecode['id'] == $findValue->recipientselectedid) {
                            if(strpos($findValue->getAttribute('class'), 'peopleNewField') !== false) {
                                if($findValue->find('h4', 0)) {
                                    $peopleFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                } else {
                                    if($findValue->find('p', 0)) {
                                        $peopleFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                    }
                                }
                            } if(strpos($findValue->getAttribute('class'), 'organizationNewField') !== false) {
                                if($findValue->find('h4', 0)) {
                                    $organizationFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                } else {
                                    if($findValue->find('p', 0)) {
                                        $organizationFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                    }
                                }
                            }
                            //codition for regular contract ending
                        } else {
                            //codition for online contract starting

                            //if($userRole == $findValue->parent()->parent()->whowillfill) {
                            if($userRole == $findValue->recipientselected) {
                                if(strpos($findValue->getAttribute('class'), 'peopleNewField') !== false) {
                                    if($findValue->find('h4', 0)) {
                                        $peopleFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                    } else {
                                        //right now paragraph tag is showing and will be replaced by h4 near future starting
                                        if($findValue->find('p', 0)) {
                                            $peopleFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                        }
                                        //right now paragraph tag is showing and will be replaced by h4 near future ending
                                    }
                                } if(strpos($findValue->getAttribute('class'), 'organizationNewField') !== false) {
                                    if($findValue->find('h4', 0)) {
                                        $organizationFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                    } else {
                                        //right now paragraph tag is showing and will be replaced by h4 near future starting
                                        if($findValue->find('p', 0)) {
                                            $organizationFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                        }
                                        //right now paragraph tag is showing and will be replaced by h4 near future ending
                                    }
                                }
                            }
                            //codition for online contract ending
                        }
                    }
                }
                //organization information of fields which are placed at document ending

                //basic information of document settings starting
                if(isset($recipientUserDetailsJsonDecode['details_fields'])) {
                    $detailsFields = json_decode($recipientUserDetailsJsonDecode['details_fields'], true);
                    foreach($detailsFields as $orgFldsKey => $orgFldsValue) {
                        $details[$orgFldsValue['detailsFieldName']] = $orgFldsValue['detailsFieldValue'];
                    }
                } else {
                    $details['recipient_role'] = (isset($recipientUserDetailsJsonDecode['recrolename']) && $recipientUserDetailsJsonDecode['recrolename'] != '' ? $recipientUserDetailsJsonDecode['recrolename'] : (isset($recipientUserDetailsJsonDecode['partyname']) && $recipientUserDetailsJsonDecode['partyname'] != '' ? $recipientUserDetailsJsonDecode['partyname'] : ''));

                    if($contractDataValue['role'] == 2) {
                        $contractDataValue['authentication_method'] = 8;
                    }

                    $details['authentication'] = $utility->authenticationMethodName($contractDataValue['authentication_method']);
                    if(isset($contractDataValue['invitation_type']) && $contractDataValue['invitation_type'] != '') {
                        $details['invitation_type'] = $utility->invitationTypeName($contractDataValue['invitation_type']);
                    }
                    if($contractDataValue['invitation_order'] != 0) {
                        $details['invitation_order'] = $contractDataValue['invitation_order'];
                    }
                    if(isset($contractDataValue['offer_confirmation']) && $contractDataValue['offer_confirmation'] != '') {
                        $details['confirmation'] = $utility->offerConfirmationName($contractDataValue['offer_confirmation']);
                    }
                    $details['id_attachment'] = $utility->idAttachmentName($contractDataValue['id_attachments']);
                }
                $details['request_attachment'] = ($contractDataValue['req_attached'] != '' ? 'yes' : 'no');
                if($contractDataValue['document_read_date'] != '' && $contractDataValue['document_read_date'] != '0000-00-00 00:00:00') {
                    //if($_SERVER['HTTP_HOST'] == 'acceptance.simplesign.io') {
                        $details['last_viewing_date'] = ($contractDataValue['document_read_date'] != '' ? $utility->changeTimeZone($contractDataValue['document_read_date'], 'Y-m-d H:i:s', 'UTC', $userTimeZone) : '');
                    /* } else {
                        $details['last_viewing_date'] = ($contractDataValue['document_read_date'] != '' ? $contractDataValue['document_read_date'] : '');
                    } */
                }
                //$details['signed_date'] = ($contractDataValue['signed_date'] != '' && $contractDataValue['signed_date'] != '0000-00-00 00:00:00' ? $contractDataValue['signed_date'] : '');
                $details['signed_date'] = '';
                if($contractDataValue['signed_date'] != '' && $contractDataValue['signed_date'] != '0000-00-00 00:00:00' && $contractDataValue['offer_status'] == 4 && $contractDataValue['role'] == 1) {
                    //if($_SERVER['HTTP_HOST'] == 'acceptance.simplesign.io') {
                        $details['signed_date'] = $utility->changeTimeZone($contractDataValue['signed_date'], 'Y-m-d H:i:s', 'UTC', $userTimeZone);
                    /* } else {
                        $details['signed_date'] = $contractDataValue['signed_date'];
                    } */
                } elseif($contractDataValue['signed_date'] != '' && $contractDataValue['signed_date'] != '0000-00-00 00:00:00' && $contractDataValue['offer_status'] == 3 && $contractDataValue['role'] == 2) {
                    //if($_SERVER['HTTP_HOST'] == 'acceptance.simplesign.io') {
                        $details['signed_date'] = $utility->changeTimeZone($contractDataValue['signed_date'], 'Y-m-d H:i:s', 'UTC', $userTimeZone);
                    /* } else {
                        $details['signed_date'] = $contractDataValue['signed_date'];
                    } */
                }
                if($contractDataValue['offer_status'] == 4 && $contractDataValue['forward_status'] == 1 && $contractDataValue['forward_signed'] == 1) {
                    $details['status'] = 'Forwarded to sign';
                } elseif($contractDataValue['offer_status'] < 4 && $contractDataValue['forward_status'] == 1 && $contractDataValue['forward_signed'] == 0) {
                    $details['status'] = 'Invited to view';
                } else {
                    $details['status'] = (isset($contractDataValue['offer_status']) != '' ? $utility->offerStatusName($contractDataValue['offer_status']) : '');
                }
                //$details['status'] = (isset($contractDataValue['offer_status']) != '' ? $utility->offerStatusName($contractDataValue['offer_status']) : '');
                if($contractDataValue['forward_user_details'] != '') {
                    $forwardUserDetails = Tcrypt::decrypter($contractDataValue['forward_user_details']);
                    if($forwardUserDetails != '') {
                        $forwardUserDetailsJsonDecode = json_decode($forwardUserDetails, true);
                        $forwaredFullName = (isset($forwardUserDetailsJsonDecode['full_name']) && $forwardUserDetailsJsonDecode['full_name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($forwardUserDetailsJsonDecode['full_name'])) : '');
                        $inviteAndForwardDetails['first_name'] = (isset($forwaredFullName[0]) && $forwaredFullName[0] != '' ? trim($forwaredFullName[0]) : '');
                        $inviteAndForwardDetails['last_name'] = (isset($forwaredFullName[1]) && $forwaredFullName[1] != '' ? trim($forwaredFullName[1]) : '');
                        //$inviteAndForwardDetails['email'] = (isset($forwardUserDetailsJsonDecode['email']) && $forwardUserDetailsJsonDecode['email'] != '' ? trim($forwardUserDetailsJsonDecode['email']) : '');
                        //$inviteAndForwardDetails['mobile'] = (isset($forwardUserDetailsJsonDecode['mobile']) && $forwardUserDetailsJsonDecode['mobile'] != '' ? trim($forwardUserDetailsJsonDecode['mobile']) : '');

                        /* test condition as per zain suggestion when signing role is forwarded */
                        /* Setting keys in the object for signature role sender and reciever */
                        if($contractDataValue['offer_status'] == 4 && $contractDataValue['forward_status'] == 1 && $contractDataValue['forward_signed'] == 1) {
                            $details['forwarded_signing_role_to'] = $inviteAndForwardDetails['first_name'].' '.$inviteAndForwardDetails['last_name'];
                        } elseif((($contractDataValue['offer_status'] <= 4 && $contractDataValue['role'] == 1) || ($contractDataValue['offer_status'] == 3 && $contractDataValue['role'] == 2)) && $contractDataValue['forward_status'] == 2 && isset($recipientUserDetailsJsonDecode['forward_to_sign']) && $recipientUserDetailsJsonDecode['forward_to_sign'] == 1) {
                            $details['invited_to_sign_by'] = $inviteAndForwardDetails['first_name'].' '.$inviteAndForwardDetails['last_name'];
                        }
                        //echo ($contractDataValue['forward_status']. ' ' .$recipientUserDetailsJsonDecode['email'].' '.$contractDataValue['forward_signed'].' '.(isset($forwardUserDetailsJsonDecode['invited_to_view']) ? $forwardUserDetailsJsonDecode['invited_to_view'] : "") );echo'<br>';
                        /* test condition as per zain suggestion when only invited to view */
                        /* Setting keys in the object for sender and reciever of invitation to view only*/
                        if($contractDataValue['forward_status'] == 1 && $contractDataValue['forward_signed'] == 0) {
                            $details['invited_to_view_only'] = $inviteAndForwardDetails['first_name'].' '.$inviteAndForwardDetails['last_name'];
                        } elseif($contractDataValue['forward_status'] == 2 && isset($recipientUserDetailsJsonDecode['invited_to_view']) && $recipientUserDetailsJsonDecode['invited_to_view'] == 1) {
                            $details['invited_to_view_only_by'] = $inviteAndForwardDetails['first_name'].' '.$inviteAndForwardDetails['last_name'];
                        }
                    }
                }
                //this is for rejected to show in sender status
                if($contractDataValue['offer_status'] == 5) {
                    $offerSentContent['offer_status'] = 5;
                } if($contractDataValue['offer_status'] == 6) {
                    $offerSentContent['offer_status'] = 6;
                }

                if(!empty($organizationFields)) {
                    $peopleAndDetailsArray = ['people_fields' => $peopleFields, 'organization_fields' => $organizationFields, 'details' => $details];
                } else {
                    $peopleAndDetailsArray = ['people_fields' => $peopleFields, 'details' => $details];
                }
                array_push($allRecipientData, $peopleAndDetailsArray);
                //basic information of document settings ending
            }
            $responseArray = ['recipients' => $allRecipientData];
            
            $content = Tcrypt::decrypter($offerSentContent['content']);
            if($content != '') {
                //getGetdocumentinfoxml function of garda template response
                $html = new \Htmldom($content);
                $dynamicElements = [];
                foreach($html->find('.template_container') as $temConKey => $temConValue) {
                    $arrayPush = [];
                    foreach($temConValue->find('.formElement') as $findKey => $findValue) {

                        $elementStyle = $findValue->getAttribute('style');
                        $arrCSS = $utility->parse_css($elementStyle);
                        $parentDiv = $findValue->parent()->parent();
                        
                        //Fixing Position when field is inside the borderbox or textbox START
                        $addtop = 0;
                        $addleft = 0;
                        if(strpos($parentDiv->getAttribute('class'), 'dynamic_border') !== false && strpos($parentDiv->getAttribute('class'), 'insert_box_div') === false) {
                            $parentCSS = $utility->parse_css($parentDiv->getAttribute('style'));
                            $addtop = (isset($parentCSS['top']) && $parentCSS['top'] != '' ? round($parentCSS['top']) : 0);
                            $addleft = (isset($parentCSS['left']) && $parentCSS['left'] != '' ? round($parentCSS['left']) : 0);
                        } elseif(strpos($parentDiv->getAttribute('class'), 'insert_box_div') !== false && strpos($parentDiv->getAttribute('class'), 'dynamic_border') === false) {
                            $parentCSS = $utility->parse_css($parentDiv->getAttribute('style'));
                            $addtop = (isset($parentCSS['top']) && $parentCSS['top'] != '' ? round($parentCSS['top']) : 0);
                            $addleft = (isset($parentCSS['left']) && $parentCSS['left'] != '' ? round($parentCSS['left']) : 0);
                        } elseif(strpos($parentDiv->getAttribute('class'), 'insert_box_div') !== false  && strpos($parentDiv->getAttribute('class'), 'dynamic_border') !== false) {
                            $parentCSS = $utility->parse_css($parentDiv->getAttribute('style'));
                            $addtop = (isset($parentCSS['top']) && $parentCSS['top'] != '' ? round($parentCSS['top']) : 0);
                            $addleft = (isset($parentCSS['left']) && $parentCSS['left'] != '' ? round($parentCSS['left']) : 0);
                        }
                        //Fixing Position when field is inside the borderbox or textbox END

                        $topPosition = (isset($arrCSS['top']) && $arrCSS['top'] != '' ? round($arrCSS['top'])+$addtop : 0);
                        $leftPosition = (isset($arrCSS['left']) && $arrCSS['left'] != '' ? round($arrCSS['left'])+$addleft : 0);
                        array_push($arrayPush, ['top' => $topPosition, 'left' => $leftPosition, 'dynamic_id' => $findValue->dynamic_id]);
                    }
                    if(!empty($arrayPush)) {
                        sort($arrayPush);
                        array_push($dynamicElements, $arrayPush);
                    }
                }

                $docFields = [];
                foreach($dynamicElements as $eachPageKey => $eachPageValue) {
                    foreach($eachPageValue as $eachElementKey => $eachElementValue) {
                        $eachDynamic_id = $eachElementValue['dynamic_id'];
                        $mainDiv = $html->find('[dynamic_id="'.$eachElementValue['dynamic_id'].'"]', 0);
                        if(!$mainDiv->find('.text', 0)) {
                            continue;
                        }
                        $findValue = $mainDiv->find('.text', 0);
                        //getting document text fields
                        if(strpos($findValue->getAttribute('class'), 'documentField') !== false) {
                            if($findValue->selectedtype != '0') {
                                $apiAttributeOrSelectedType = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->selectedtype);
                                if($parent_id == 10719) {
                                    $apiAttributeOrSelectedType = str_replace(' ', '_', $apiAttributeOrSelectedType);
                                }
                                if($findValue->find('h4', 0) && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                    $docFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                } elseif($findValue->find('p', 0) && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                    $docFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('p', 0)->plaintext)));
                                } elseif(strpos($mainDiv->getAttribute('class'), 'relationDisable') === false && (!isset($docFields[$findValue->selectedtype]))) {
                                    //comments below line of code and add this condition with elseif and === false 
                                    $docFields[$apiAttributeOrSelectedType] = '';
                                }
                            }   //not equal condition ends here
                        }   //getting document text fields ends here
                        //getting custom text fields
                        try {
                            if(strpos($findValue->getAttribute('class'), 'field_box_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'datepickerfields_new') === false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                $apiAttributeOrSelectedType = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->selectedtype);
                                if($parent_id == 10719) {
                                    $apiAttributeOrSelectedType = str_replace(' ', '_', $apiAttributeOrSelectedType);
                                }
                                if($findValue->find('h4', 0) && $findValue->find('h4', 0)->plaintext) {
                                    $docFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                }
                                if($findValue->find('p', 0) && $findValue->find('p', 0)->plaintext) {
                                    $docFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('p', 0)->plaintext)));
                                }
                            }
                        } catch(\Exception $e) {}

                        //getting datepicker fields
                        try {
                            if(strpos($findValue->getAttribute('class'), 'field_box_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'datepickerfields_new') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                $apiAttributeOrSelectedType = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->selectedtype);
                                if($parent_id == 10719) {
                                    $apiAttributeOrSelectedType = str_replace(' ', '_', $apiAttributeOrSelectedType);
                                }
                                if($findValue->find('h4', 0) && $findValue->find('h4', 0)->plaintext) {
                                    $docFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                }
                                if($findValue->find('p', 0) && $findValue->find('p', 0)->plaintext) {
                                    $docFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('p', 0)->plaintext)));
                                }
                            }
                        } catch(\Exception $e) {}

                        //getting document checkbox elements
                        if(strpos($findValue->getAttribute('class'), 'documentFieldCheckbox') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            //all values of checkboxes are showing
                            $apiAttributeOrFieldLabelName = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->fieldlabelname);
                            if($parent_id == 10719) {
                                $apiAttributeOrFieldLabelName = str_replace(' ', '_', $apiAttributeOrFieldLabelName);
                            }
                            if($findValue->find('.check_icon', 0) && (strpos($findValue->find('.check_icon', 0)->getAttribute('style'), 'visible') !== false || strpos($findValue->getAttribute('class'), 'isChecked') !== false)) {
                                $docFields[$apiAttributeOrFieldLabelName] = 'Yes';
                            } else {
                                $docFields[$apiAttributeOrFieldLabelName] = 'No';
                            }
                        }   //getting document checkbox elements ends here
                        //getting custom checkbox elements
                        if(strpos($findValue->getAttribute('class'), 'check_box_popupcontainer') !== false && strpos($mainDiv->getAttribute('class'), 'chechBoxCustom') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrFieldLabelName = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->fieldlabelname);
                            if($parent_id == 10719) {
                                $apiAttributeOrFieldLabelName = str_replace(' ', '_', $apiAttributeOrFieldLabelName);
                            }
                            if($findValue->find('.check_icon', 0) && strpos($findValue->find('.check_icon', 0)->getAttribute('style'), 'visible')) {
                                $docFields[$apiAttributeOrFieldLabelName] = 'Yes';
                            } else {
                                $docFields[$apiAttributeOrFieldLabelName] = 'No';
                            }
                        }

                        //getting document droplist elements
                        $jsonDecodeDropDownValues = (isset($findValue->dropdownvalues) && !empty($findValue->dropdownvalues) ? json_decode(html_entity_decode($findValue->dropdownvalues), true) : []);
                        $jsonDecodeDropDownAlternativeValues = (isset($findValue->dropdownvalues_alternate) && !empty($findValue->dropdownvalues_alternate) ? json_decode(html_entity_decode($findValue->dropdownvalues_alternate), true) : []);
                        if(strpos($findValue->getAttribute('class'), 'documentFieldDroplist') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            if($parent_id == 10719) {
                                $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                            }
                            //for searching starting
                            if($findValue->find('span.texthere', 0)) {
                                if(!empty($jsonDecodeDropDownValues) && $findValue->dropdownlabel != trim($findValue->find('span.texthere', 0)->plaintext)) {
                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                    $docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '' ? $findValue->selected_altvalue : trim($findValue->find('span.texthere', 0)->plaintext))));
                                } elseif(array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                    $docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '' ? $findValue->selected_altvalue : trim($findValue->find('span.texthere', 0)->plaintext))));
                                } else {
                                    $docFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '' ? $findValue->selected_altvalue : ''));
                                }
                            } else {
                                if(!empty($jsonDecodeDropDownValues) && $findValue->dropdownlabel != trim($findValue->find('p', 0)->plaintext)) {
                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                    $docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '' ? $findValue->selected_altvalue : trim($findValue->find('p', 0)->plaintext))));
                                } elseif(array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                    $docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '' ? $findValue->selected_altvalue : trim($findValue->find('p', 0)->plaintext))));
                                } else {
                                    $docFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '' ? $findValue->selected_altvalue : ''));
                                }
                            }
                            //for searching ending
                        }   //getting document droplist elements ends here
                        //getting custom droplist elements
                        if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            if($parent_id == 10719) {
                                $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                            }
                            //forsearching starting
                            if($findValue->find('span.texthere', 0)) {
                                if(!empty($jsonDecodeDropDownValues) && $findValue->dropdownlabel != trim($findValue->find('span.texthere', 0)->plaintext)) {
                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                    $docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '' ? trim($findValue->selected_altvalue) : trim($findValue->find('span.texthere', 0)->plaintext))));
                                } elseif(isset($findValue->find('span.texther', 0)->plaintext) && array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                    $docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '' ? trim($findValue->selected_altvalue) : trim($findValue->find('span.texthere', 0)->plaintext))));
                                } else {
                                    $docFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '' ? trim($findValue->selected_altvalue) : ''));
                                }
                            } else {
                                if(!empty($jsonDecodeDropDownValues) && $findValue->dropdownlabel != trim($findValue->find('span.texthere', 0)->plaintext)) {
                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                    $docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '' ? trim($findValue->selected_altvalue) : trim($findValue->find('p', 0)->plaintext))));
                                } elseif(isset($findValue->find('span.texther', 0)->plaintext) && array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                    $docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '' ? trim($findValue->selected_altvalue) : trim($findValue->find('p', 0)->plaintext))));
                                } else {
                                    $docFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '' ? trim($findValue->selected_altvalue) : ''));
                                }
                            }
                            //forsearching ending
                        }

                        //document field droplist with multiple radio button
                        if(strpos($findValue->getAttribute('class'), 'documentFieldDroplist') !== false && strpos($findValue->getAttribute('class'), 'dropdown_radioList_api') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            if($parent_id == 10719) {
                                $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                            }
                            if($findValue->find('.fa-dot-circle-o', 0)) {
                                $getArrayKey = array_search(trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext), $jsonDecodeDropDownValues);
                                $docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '' ? $jsonDecodeDropDownAlternativeValues[$getArrayKey] : $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext);
                            } else {
                                $docFields[$apiAttributeOrDropDownLabel] = '';
                            }
                        }
                        //document field droplist with multiple radio button of custom and me
                        if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'dropdown_radioList_api') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            if($parent_id == 10719) {
                                $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                            }
                            if($findValue->find('.fa-dot-circle-o', 0)) {
                                $getArrayKey = array_search(trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext), $jsonDecodeDropDownValues);
                                $docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '' ? $jsonDecodeDropDownAlternativeValues[$getArrayKey] : $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext);
                            } else {
                                $docFields[$apiAttributeOrDropDownLabel] = '';
                            }
                        }
                        //document field droplist with multiple checkboxes
                        if(strpos($findValue->getAttribute('class'), 'documentFieldDroplist') !== false && strpos($findValue->getAttribute('class'), 'multi_choice_option') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            if($parent_id == 10719) {
                                $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                            }
                            if($findValue->find('.fa-check', 0)) {
                                $faCheckValues = [];
                                foreach($findValue->find('.ionIconsCheck') as $checkBoxKey => $checkBoxValue) {
                                    if(strpos($checkBoxValue->getAttribute('class'), 'fa-check') !== false) {
                                        $faCheckValues[] = (isset($jsonDecodeDropDownAlternativeValues[$checkBoxKey]) && $jsonDecodeDropDownAlternativeValues[$checkBoxKey] != '' ? $jsonDecodeDropDownAlternativeValues[$checkBoxKey] : $checkBoxValue->parent()->parent()->find('label', 0)->innertext);
                                    }
                                }
                                $totalFaCheckValues = count($faCheckValues);
                                if($totalFaCheckValues > 1) {
                                    $faCheckValues = implode(', ' , array_slice($faCheckValues,0,$totalFaCheckValues-1)) . ' and ' . end($faCheckValues);
                                } else {
                                    $faCheckValues = implode(', ' , $faCheckValues);
                                }
                                $docFields[$apiAttributeOrDropDownLabel] = $faCheckValues;
                            } else {
                                $docFields[$apiAttributeOrDropDownLabel] = '';
                            }
                        }
                        //document field droplist with multiple checkboxes of custom and me
                        if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'multi_choice_option') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            if($parent_id == 10719) {
                                $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                            }
                            if($findValue->find('.fa-check', 0)) {
                                $faCheckValues = [];
                                foreach($findValue->find('.ionIconsCheck') as $checkBoxKey => $checkBoxValue) {
                                    if(strpos($checkBoxValue->getAttribute('class'), 'fa-check') !== false) {
                                        $faCheckValues[] = (isset($jsonDecodeDropDownAlternativeValues[$checkBoxKey]) && $jsonDecodeDropDownAlternativeValues[$checkBoxKey] != '' ? $jsonDecodeDropDownAlternativeValues[$checkBoxKey] : $checkBoxValue->parent()->parent()->find('label', 0)->innertext);
                                    }
                                }
                                $totalFaCheckValues = count($faCheckValues);
                                if($totalFaCheckValues > 1) {
                                    $faCheckValues = implode(', ' , array_slice($faCheckValues,0,$totalFaCheckValues-1)) . ' and ' . end($faCheckValues);
                                } else {
                                    $faCheckValues = implode(', ' , $faCheckValues);
                                }
                                $docFields[$apiAttributeOrDropDownLabel] = $faCheckValues;
                            } else {
                                $docFields[$apiAttributeOrDropDownLabel] = '';
                            }
                        } //selectcolor_popupcontainer condition ends here
                    }   //second foreach loop ends here
                }   //first foreach loop ends here

                //document tags names showing and its loop starting
                foreach($html->find('.dynamicTag') as $findTagKey => $findTagValue) {
                    if(strpos($findTagValue->getAttribute('class'), 'documenttagName') !== false) {
                        $apiAttributeOrTagName = (isset($findTagValue->apitagattribute) && $findTagValue->apitagattribute != '' ? $findTagValue->apitagattribute : $findTagValue->tagname);
                        if($parent_id == 10719) {
                            $apiAttributeOrTagName = str_replace(' ', '_', $apiAttributeOrTagName);
                        }
                        $jsonDecodeDropDownValues = (isset($findTagValue->dropdownvalues) && !empty($findTagValue->dropdownvalues) ? json_decode(html_entity_decode($findTagValue->dropdownvalues), true) : []);
                        $jsonDecodeDropDownAlternativeValues = (isset($findTagValue->dropdownvalues_alternate) && !empty($findTagValue->dropdownvalues_alternate) ? json_decode(html_entity_decode($findTagValue->dropdownvalues_alternate), true) : []);

                        if(strpos($findTagValue->getAttribute('class'), 'documentdroplisttagname') !== false) {
                            if(isset($findTagValue->dropdownapi) && $findTagValue->dropdownapi != '') {
                                $docFields[$apiAttributeOrTagName] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                            } else {
                                $tagValuesArray = [];
                                foreach($jsonDecodeDropDownValues as $dropDownKey => $dropDownValues) {
                                    if(isset($findTagValue->plaintext) && !empty($findTagValue->plaintext) && isset($dropDownValues) && !empty($dropDownValues)) {
                                        if(strpos($findTagValue->plaintext, $dropDownValues) > -1) {
                                            $getArrayKey = array_search(trim($dropDownValues), $jsonDecodeDropDownValues);
                                            $tagValuesArray[] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && !empty($jsonDecodeDropDownAlternativeValues[$getArrayKey]) ? $jsonDecodeDropDownAlternativeValues[$getArrayKey] : $utility->convertDateMonthNameToInteger($languageId, trim($dropDownValues)));
                                        } else {
                                            $docFields[$apiAttributeOrTagName] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                                        }
                                    }
                                }
                                $totalTagValuesArray = count($tagValuesArray);
                                if($totalTagValuesArray > 1) {
                                    $tagValuesArray = implode(', ' , array_slice($tagValuesArray,0,$totalTagValuesArray-1)) . ' and ' . end($tagValuesArray);
                                } else {
                                    $tagValuesArray = implode(', ' , $tagValuesArray);
                                }
                                $docFields[$apiAttributeOrTagName] = $tagValuesArray;
                            }
                        } else {
                            $docFields[$apiAttributeOrTagName] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                        }
                    }
                }
                //document tags names showing and its loop ending

                if($html->find('.billecta_GetBankInfo_h5')) {
                    foreach($html->find('.billecta_GetBankInfo_h5') as $findBillectaKey => $findBillectaValue) {
                        if(isset($findBillectaValue->billecta_row)) {
                            if($html->find('.billecta_row_'.$findBillectaValue->billecta_row)) {
                                if($findBillectaValue->innertext != '&nbsp;' && $findBillectaValue->innertext != '<br>') {
                                    //$docFields[$findBillectaValue->innertext] = $html->find('.billecta_row_'.$findBillectaValue->billecta_row, 0)->innertext;
                                    $docFields[$findBillectaValue->innertext] = str_replace(',', ' ', $html->find('.billecta_row_'.$findBillectaValue->billecta_row, 0)->innertext);
                                }
                            }
                        }
                    }
                }

                if(!empty($docFields)) {
                    //showing alphbats order to show document fields data
                    ksort($docFields);
                    $responseArray['document_fields'] = $docFields;
                }
            }

            //basic information of sender and account details starting
            $senderData = Offersentdetails::where('offer_send_details.offer_sent_id', $document_id)->join('offer_sent', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')->select('offer_send_details.user_details')->where('offer_send_details.is_sender', 1)->whereIn('offer_sent.sender_id', $allUserIds)->first();

            if($senderData) {
                $senderDetails = $accountDetails = [];
                $senderUserDetails = Tcrypt::decrypter($senderData['user_details']);
                $senderUserDetailsJsonDecode = json_decode($senderUserDetails, true);

                //sender details information starting
                //for regular contract sender use full_name key and for online contract sender use first_name key
                $senderDetails['name'] = (isset($senderUserDetailsJsonDecode['full_name']) && $senderUserDetailsJsonDecode['full_name'] != '' ? trim($senderUserDetailsJsonDecode['full_name']) : (isset($senderUserDetailsJsonDecode['first_name']) && $senderUserDetailsJsonDecode['first_name'] != '' ? trim($senderUserDetailsJsonDecode['first_name']) : ''));
                $senderDetails['email'] = (isset($senderUserDetailsJsonDecode['email']) && $senderUserDetailsJsonDecode['email'] != '' ? trim(preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $senderUserDetailsJsonDecode['email'])) : '');

                $userCustomFields = (isset($senderUserDetailsJsonDecode['user_customfields']) && $senderUserDetailsJsonDecode['user_customfields'] != '' ? json_decode($senderUserDetailsJsonDecode['user_customfields'], true) : []);
                if(!empty($userCustomFields)) {
                    foreach($userCustomFields as $userCustomFldkey => $userCustomFldValue) {
                        $senderDetails[trim($userCustomFldkey)] = (isset($userCustomFldValue) && $userCustomFldValue != '' ? trim($userCustomFldValue) : '');
                    }
                }
                $responseArray['sender_details'] = $senderDetails;
                //sender details information ending

                //account details information starting
                $accountDetails['company'] = (isset($senderUserDetailsJsonDecode['company']) && $senderUserDetailsJsonDecode['company'] != '' ? trim($senderUserDetailsJsonDecode['company']) : '');
                $accountDetails['reg_no'] = (isset($senderUserDetailsJsonDecode['reg_no']) && $senderUserDetailsJsonDecode['reg_no'] != '' ? trim($senderUserDetailsJsonDecode['reg_no']) : '');
                $accountDetails['address'] = (isset($senderUserDetailsJsonDecode['address']) && $senderUserDetailsJsonDecode['address'] != '' ? trim($senderUserDetailsJsonDecode['address']) : '');
                $accountDetails['phone_no'] = (isset($senderUserDetailsJsonDecode['mobile']) && $senderUserDetailsJsonDecode['mobile'] != '' ? trim($senderUserDetailsJsonDecode['mobile']) : (isset($senderUserDetailsJsonDecode['telephone']) && $senderUserDetailsJsonDecode['telephone'] != '' ? trim($senderUserDetailsJsonDecode['telephone']) : ''));
                $accountDetails['zipcode'] = (isset($senderUserDetailsJsonDecode['zipcode']) && $senderUserDetailsJsonDecode['zipcode'] != '' ? trim($senderUserDetailsJsonDecode['zipcode']) : (isset($senderUserDetailsJsonDecode['post_code']) && $senderUserDetailsJsonDecode['post_code'] != '' ? trim($senderUserDetailsJsonDecode['post_code']) : ''));
                $accountDetails['city'] = (isset($senderUserDetailsJsonDecode['city']) && $senderUserDetailsJsonDecode['city'] != '' ? trim($senderUserDetailsJsonDecode['city']) : '');

                $responseArray['account_details'] = $accountDetails;
                //account details information ending
            }
            //basic information of sender and account details ending
            //documentdetail API
            //if($_SERVER['HTTP_HOST'] == 'acceptance.simplesign.io') {
                $templatetabledata = $this->templateTables($document_id);
                foreach ($templatetabledata['producttables'] as $tablekey => $tabledata) {
                    $tablename = $tabledata['table_name'];
                    $tablecurrency = $tabledata['table_currency'];
                    $itemcollection = array();
                    foreach ($tabledata['tableitems'] as $itemkey => $itemdata) {
                        $itemdetails = array();
                        $itemdetails['product name'] = $itemdata['item_name'];
                        if ( isset($data['fromoverview']) && $data['fromoverview'] == 1 ) {
                            $itemdetails[$itemdata['item_name'].' (description)'] = ($itemdata['item_description'] != 'NULL' ? $itemdata['item_description'] : '');
                            $itemdetails[$itemdata['item_name'].' (quantity)'] = $itemdata['item_qty'];
                            $itemdetails[$itemdata['item_name'].' (price)'] = $itemdata['item_price'].' '.$tablecurrency;
                            if ($itemdata['item_discount'] != 0) {
                                $itemdetails[$itemdata['item_name'].' (discount)'] = $itemdata['item_discount'].' %';
                            }
                            $itemdetails[$itemdata['item_name'].' (cost)'] = $itemdata['item_cost'].' '.$tablecurrency;
                            $itemdetails[$itemdata['item_name'].' (margin)'] = $itemdata['item_margin'].' '.$tablecurrency;
                        } else {
                            $itemdetails['description'] = ($itemdata['item_description'] != 'NULL' ? $itemdata['item_description'] : '');
                            $itemdetails['quantity'] = $itemdata['item_qty'];
                            if ($itemdata['item_discount'] != 0) {
                                $itemdetails['item_discount'] = $itemdata['item_discount'].'%';
                            }
                            $itemdetails['price'] = $itemdata['item_price'].' '.$tablecurrency;
                            $itemdetails['cost'] = $itemdata['item_cost'].' '.$tablecurrency;
                            $itemdetails['margin'] = $itemdata['item_margin'].' '.$tablecurrency;
                        }
                        array_push($itemcollection, $itemdetails);
                        $responseArray[$tablename] = $itemcollection;
                    }
                }
            //}

            //basic information of document details starting
            if($offerSentContent) {
                $uniqueId = Offersentdetails::where('offer_send_details.offer_sent_id', $document_id)->join('offer_sent', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')->select('offer_send_details.unique_id')->where('offer_send_details.is_sender', 0)->whereIn('offer_sent.sender_id', $allUserIds)->first();
                $documentLink = Offersentdetails::where('offer_send_details.offer_sent_id', $document_id)->join('offer_sent', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')->whereIn('offer_sent.sender_id', $allUserIds)->where('offer_send_details.is_sender', 1)->select('offer_send_details.id', 'offer_send_details.unique_id')->first();
                $documentDetails = [];
                $documentDetails['template_name'] = ($offerSentContent['visible_name'] != '' ? trim(Tcrypt::decrypter($offerSentContent['visible_name'])) : trim(Tcrypt::decrypter($offerSentContent['name'])));
                $documentDetails['document_id'] = (!empty($offerSentContent['external_doc_id']) ? $offerSentContent['external_doc_id'] : $offerSentContent['id']);
                $documentDetails['template_id'] = $offerSentContent['offer_id'];
                $documentDetails['language'] = (isset($offerSentContent['language_id']) && $offerSentContent['language_id'] != '' ? $utility->languageName($offerSentContent['language_id']) : 'English');
                //if($_SERVER['HTTP_HOST'] == 'acceptance.simplesign.io') {
                    $documentDetails['sent_date'] = (isset($offerSentContent['created_date']) && $offerSentContent['created_date'] != '' && $offerSentContent['created_date'] != '0000-00-00 00:00:00' ? $utility->changeTimeZone(trim($offerSentContent['created_date']), 'Y-m-d H:i:s', 'UTC', $userTimeZone) : '');
                    $documentDetails['signed_date'] = (isset($offerSentContent['signed_date']) && $offerSentContent['signed_date'] != '' && $offerSentContent['signed_date'] != '0000-00-00 00:00:00' ? $utility->changeTimeZone(trim($offerSentContent['signed_date']), 'Y-m-d H:i:s', 'UTC', $userTimeZone) : '');
                    $documentDetails['due_date'] = (isset($offerSentContent['due_date']) && $offerSentContent['due_date'] != '' && $offerSentContent['due_date'] != '0000-00-00 00:00:00' ? $utility->changeTimeZone(trim(date('Y-m-d', strtotime($offerSentContent['due_date']))), 'Y-m-d', 'UTC', $userTimeZone) : '');
                /* } else {
                    $documentDetails['sent_date'] = (isset($offerSentContent['created_date']) && $offerSentContent['created_date'] != '' && $offerSentContent['created_date'] != '0000-00-00 00:00:00' ? trim($offerSentContent['created_date']) : '');
                    $documentDetails['signed_date'] = (isset($offerSentContent['signed_date']) && $offerSentContent['signed_date'] != '' && $offerSentContent['signed_date'] != '0000-00-00 00:00:00' ? trim($offerSentContent['signed_date']) : '');
                    $documentDetails['due_date'] = (isset($offerSentContent['due_date']) && $offerSentContent['due_date'] != '' && $offerSentContent['due_date'] != '0000-00-00 00:00:00' ? trim(date('Y-m-d', strtotime($offerSentContent['due_date']))) : '');
                } */
                $documentDetails['status'] = (isset($offerSentContent['offer_status']) ? $utility->offerStatusName($offerSentContent['offer_status']) : '');
                $getAddOnObjectData = settings::where('user_id', $parent_id)->select('new_addon_obj')->first();
                $markCompleted = Offersent_data::where('sent_id', $offerSentContent['id'])->pluck('mark_completed');
                $multiCaseManagement = Offersent_data::where('sent_id', $offerSentContent['id'])->pluck('multi_case_management');
                $contractTypeId = Offersent_data::where('sent_id', $offerSentContent['id'])->pluck('contract_type_id');
                $markCompletedDate = Offersent_data::where('sent_id', $offerSentContent['id'])->pluck('mark_completed_date');
                $costmargin = "";
                /* Adding gross margin and total cost in Api response */
                $costmargin = Offersent_data::where('sent_id', $offerSentContent['id'])->whereNotNull('document_cost')->whereNotNull('document_margin')->whereNotNull('document_price')->select('document_price', 'document_cost', 'document_margin')->first();
                if(!empty($getAddOnObjectData['new_addon_obj'])) {
                    $newAddonObjJesonDecode = json_decode($getAddOnObjectData['new_addon_obj'], true);
                    if(isset($newAddonObjJesonDecode['mark_as_completed_addon']) && $newAddonObjJesonDecode['mark_as_completed_addon'] == 1) {
                        if(isset($newAddonObjJesonDecode['mark_as_completed_addon_setting']) && !empty($newAddonObjJesonDecode['mark_as_completed_addon_setting'])) {
                            $markAsCompletedAddonSettingJsonDecode = json_decode($newAddonObjJesonDecode['mark_as_completed_addon_setting'], true);
                            $multiCaseManagementJsonDecode = (isset($multiCaseManagement) && !empty($multiCaseManagement) ? json_decode($multiCaseManagement, true) : []);
                            if(isset($markAsCompletedAddonSettingJsonDecode['mark_tasks_array']) && !empty($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'])) {
                                $numbetIncrement = 0;
                                $flagForCompletedKey = false;
                                $completeStatus = 'Not completed';
                                foreach($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'] as $markAsCompletedAddonSettingJsonDecodeKey => $markAsCompletedAddonSettingJsonDecodeValue) {
                                    if(in_array($contractTypeId, $markAsCompletedAddonSettingJsonDecodeValue['contract_type_selected']) && (in_array($offerSentContent['offer_status'], $markAsCompletedAddonSettingJsonDecodeValue['marked_addon_status']) || in_array("", $markAsCompletedAddonSettingJsonDecodeValue['marked_addon_status']))) {
                                        $numbetIncrement++;
                                        $conditionalText = '';
                                        if(isset($multiCaseManagementJsonDecode[$numbetIncrement]) && !empty($multiCaseManagementJsonDecode[$numbetIncrement])) {
                                            if(isset($multiCaseManagementJsonDecode[$numbetIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numbetIncrement]['status_text'] == 'done') {
                                                $conditionalText = 'Yes';
                                            } elseif(isset($multiCaseManagementJsonDecode[$numbetIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numbetIncrement]['status_text'] == 'in_process') {
                                                $conditionalText = 'In process';
                                            } elseif(isset($multiCaseManagementJsonDecode[$numbetIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numbetIncrement]['status_text'] == 'no') {
                                                $conditionalText = 'No';
                                            }
                                            if(isset($multiCaseManagementJsonDecode[$numbetIncrement]['task_no']) && isset($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'][$multiCaseManagementJsonDecode[$numbetIncrement]['task_no']])) {
                                                $documentDetails[$markAsCompletedAddonSettingJsonDecode['mark_tasks_array'][$multiCaseManagementJsonDecode[$numbetIncrement]['task_no']]['tasknames']] = $conditionalText;//$multiCaseManagementJsonDecode[$numbetIncrement]['status_text'];
                                                $flagForCompletedKey = true;
                                            } else {
                                                if(isset($multiCaseManagementJsonDecode[$numbetIncrement]['task_no']) && $multiCaseManagementJsonDecode[$numbetIncrement]['task_no'] != '') {
                                                    $documentDetails[$markAsCompletedAddonSettingJsonDecodeValue['tasknames']] = 'No';
                                                    $flagForCompletedKey = true;
                                                }
                                            }
                                        } else {
                                            if($markCompleted != 1) {
                                                $documentDetails[$markAsCompletedAddonSettingJsonDecodeValue['tasknames']] = 'No';
                                            }
                                            $flagForCompletedKey = true;
                                        }
                                        if(isset($multiCaseManagementJsonDecode[$numbetIncrement]) && !empty($multiCaseManagementJsonDecode[$numbetIncrement]) && isset($multiCaseManagementJsonDecode[$numbetIncrement]['status_activity']) && !empty($multiCaseManagementJsonDecode[$numbetIncrement]['status_activity'])) {
                                            $flagForCompletedKey = true;
                                            //if(count($multiCaseManagementJsonDecode) == $isCompleted && $markAsCompletedAddonSettingJsonDecodeKey == count($markAsCompletedAddonSettingJsonDecode['mark_tasks_array']) -1) {
                                            if($markCompleted == 1) {
                                                //if($_SERVER['HTTP_HOST'] == 'acceptance.simplesign.io') {
                                                    $completeStatus = $utility->changeTimeZone($markCompletedDate, 'Y-m-d H:i:s', 'UTC', $userTimeZone);
                                                /* } else {
                                                    $completeStatus = $utility->changeTimeZone($markCompletedDate, 'Y-m-d H:i:s', 'UTC', $userTimeZone);
                                                } */
                                            }
                                        }   //status_activity
                                    }
                                }
                                //if(!empty($multiCaseManagementJsonDecode)) {
                                if(!empty($flagForCompletedKey)) {
                                    $documentDetails['completed'] = $completeStatus;
                                }
                            }
                        }
                    }
                }
                $documentDetails['pdf'] = $domain_name.'avtal/downloadpdf/'.$document_id.'/'.$uniqueId['unique_id'];
                $documentDetails['document_url'] = $domain_name.'document/view/'.$documentLink['id'].'/'.$documentLink['unique_id'];

                if ($costmargin != "") {
                    if ($costmargin['document_cost'] != "NULL") {
                        $documentDetails['document_cost'] =  $costmargin['document_cost'];
                    }

                    if ($costmargin['document_margin'] != "NULL") {
                        $documentDetails['document_margin'] =  $costmargin['document_margin'];
                    }

                    if ($costmargin['document_price'] != "NULL") {
                        $documentDetails['document_price'] =  $costmargin['document_price'];
                    }
                }

                $responseArray['document_details'] = $documentDetails;
            }
            //if($_SERVER['HTTP_HOST'] == 'acceptance.simplesign.io') {
                $updatedIndexData = DB::table('document_indexdata')->where('document_id', $document_id)->get();
                if(!empty($updatedIndexData)) {
                    foreach($responseArray as $responseArrayKey => $responseArrayValue) { //loop on main array
                        if($responseArrayKey == 'recipients') {
                            foreach($responseArrayValue as $responseArrayValueKey => $recValue) { //loop on numeric array
                                $recRole = $recValue['details']['recipient_role'];
                                foreach($updatedIndexData as $updatedIndexDataKey => $updatedIndexDataValue) { // loop on array from database
                                    if($updatedIndexDataValue->rec_role == $recRole) {
                                        if(in_array($updatedIndexDataValue->object_type, array_keys($recValue))) { //checking role condition
                                            $orginalFields = json_decode($updatedIndexDataValue->old_field, true);
                                            $newFields = json_decode($updatedIndexDataValue->new_field, true);
                                            $fieldName = array_keys($orginalFields)[0]; // getting field name orginal as it can't be changed from UI
                                            $updatedFieldValue = array_values($newFields)[0]; // getting updated values of that particular field
                                            $responseArray[$responseArrayKey][$responseArrayValueKey][$updatedIndexDataValue->object_type][$fieldName] = $updatedFieldValue; //assining values to the main object
                                        }
                                    }
                                }
                            }
                        } else {
                            foreach($updatedIndexData as $updatedIndexDataKey => $updatedIndexDataValue) { // loop on array from database
                                if($updatedIndexDataValue->object_type == $responseArrayKey) { //checking role condition
                                    $orginalFields = json_decode($updatedIndexDataValue->old_field, true);
                                    $newFields = json_decode($updatedIndexDataValue->new_field, true);
                                    $fieldName = array_keys($orginalFields)[0]; // getting field name orginal as it can't be changed from UI
                                    $updatedFieldValue = array_values($newFields)[0]; // getting updated values of that particular field
                                    $responseArray[$responseArrayKey][$fieldName] = $updatedFieldValue; //assining values to the main object
                                }
                            }
                        }
                    }
                }
            //}
            //basic information of document details ending
            return response()->json(['status' => 'success', 'result' => $responseArray], 200, ['Content-Type' => 'application/json; charset=UTF-8'], JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
        } else {
            return Response::json(['status' => 'error', 'result' => 'No record(s) found']);
        }
    }

    public function postGetdocumentinfo() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');

        //access_token validation starting
        if(isset($data['access_token'])) {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
        //access_token validation ending

        //contract_id validation starting
        if(isset($data['contract_id']) && $data['contract_id'] != '') {
            $contract_id = $data['contract_id'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'contract_id is missing']);
        }
        //contract_id validation ending

        $user_id = $utility->getUserIdByAuthToken($access_token);
        $parent_id = $utility->getParent($user_id);
        $userSettings = $utility->getUserSettings($parent_id);
        $getApiHitCount = Userinfo::where('user_id', $parent_id)->select('hit_count')->first();
        $addupdateapiaccesslogs = $utility->addupdateapiaccesslogs($user_id, 'postGetdocumentinfo v3', $data, $getApiHitCount['hit_count']);
        if($addupdateapiaccesslogs == 'exceed') {
            $this->apiCallLimitExceedMessage = str_replace('#hitCuntNo', $getApiHitCount['hit_count'], $this->apiCallLimitExceedMessage);
            return Response::json(['status' => 'error', 'result' => $this->apiCallLimitExceedMessage]);
        }

        if($utility->checkAdminStripe($user_id)) {
            return Response::json(['status' => 'error', 'result' => 'Account is locked make payment in order to continue Simplesign']);
        }

        $contractData = Offersentdetails::where('offer_send_details.offer_sent_id', $contract_id)->join('offer_sent', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')->select('offer_send_details.id', 'offer_send_details.offer_sent_id', 'offer_send_details.user_details', 'offer_send_details.offer_status', 'offer_send_details.req_attached', 'offer_send_details.document_read_date', 'offer_send_details.authentication_method', 'offer_send_details.invitation_type', 'offer_send_details.invitation_order', 'offer_send_details.offer_confirmation', 'offer_send_details.id_attachments', 'offer_send_details.unique_id')->where('offer_send_details.is_sender', 0)->where('offer_sent.sender_id', $user_id)->get()->toArray();

        //DB::enableQueryLog();
        //print_r(DB::getQueryLog());
        if($contractData) {
            $responseArray = $senderInfo = $contractDetails =  [];
            foreach($contractData as $contractDataKey => $contractDataValue) {
                $peopleFields = $organizationFields = $details = [];
                $recipientUserDetails = Tcrypt::decrypter($contractDataValue['user_details']);
                
                $recipientUserDetailsJsonDecode = json_decode($recipientUserDetails, true);
                $peopleFields['name'] = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? $recipientUserDetailsJsonDecode['full_name'] : (isset($recipientUserDetailsJsonDecode['first_name']) ? $recipientUserDetailsJsonDecode['first_name'] : (isset($recipientUserDetailsJsonDecode['name']) ? $recipientUserDetailsJsonDecode['name'] : '')));
                $peopleFields['email'] = (isset($recipientUserDetailsJsonDecode['email']) && $recipientUserDetailsJsonDecode['email'] != '' ? preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $recipientUserDetailsJsonDecode['email']) : '');
                $peopleFields['personal_no'] = (isset($recipientUserDetailsJsonDecode['personal_no']) && $recipientUserDetailsJsonDecode['personal_no'] != '' ? $recipientUserDetailsJsonDecode['personal_no'] : '');
                $peopleFields['mobile'] = (isset($recipientUserDetailsJsonDecode['mobile']) && $recipientUserDetailsJsonDecode['mobile'] != '' ? $recipientUserDetailsJsonDecode['mobile'] : '');
                $peopleFields['address'] = (isset($recipientUserDetailsJsonDecode['address']) && $recipientUserDetailsJsonDecode['address'] != '' ? $recipientUserDetailsJsonDecode['address'] : '');
                $peopleFields['city'] = (isset($recipientUserDetailsJsonDecode['city']) && $recipientUserDetailsJsonDecode['city'] != '' ? $recipientUserDetailsJsonDecode['city'] : '');
                $peopleFields['zipcode'] = (isset($recipientUserDetailsJsonDecode['zipcode']) && $recipientUserDetailsJsonDecode['zipcode'] != '' ? $recipientUserDetailsJsonDecode['zipcode'] : '');

                if(isset($recipientUserDetailsJsonDecode['extanddoc_fields'])) {
                    $extAndDocFields = json_decode($recipientUserDetailsJsonDecode['extanddoc_fields'], true);
                    foreach($extAndDocFields as $extAndDocFldsKey => $extAndDocFldsValue) {
                        $peopleFields[$extAndDocFldsValue['extAndDocFieldName']] = $extAndDocFldsValue['extAndDocFieldValue'];
                    }
                } else {
                    if(isset($recipientUserDetailsJsonDecode['extra_fields'])) {
                        $extraFields = (isset($recipientUserDetailsJsonDecode['extra_fields']) ? json_decode($recipientUserDetailsJsonDecode['extra_fields'], true) : '');
                        if($extraFields != '') {
                            foreach($extraFields as $extraFieldsKey => $extraFieldsValue) {
                                $peopleFields[$extraFieldsValue['fieldName']] = $extraFieldsValue['fieldValue'];
                            }
                        }
                    }
                }

                if(isset($recipientUserDetailsJsonDecode['organization_fields'])) {
                    $orgFields = json_decode($recipientUserDetailsJsonDecode['organization_fields'], true);
                    foreach($orgFields as $orgFldsKey => $orgFldsValue) {
                        $orgFldsValue['orgFieldName'] = str_replace('name', 'organization_name', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('org_no', 'organization_no', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('phone', 'organization_phone', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('address', 'organization_address', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('city', 'organization_city', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('zipcode', 'organization_zipcode', $orgFldsValue['orgFieldName']);
                        //$orgFldsValue['orgFieldName'] = str_replace('org', 'organization', $orgFldsValue['orgFieldName']);
                        $organizationFields[$orgFldsValue['orgFieldName']] = $orgFldsValue['orgFieldValue'];
                    }
                } else {
                    $organizationFields['organization_name'] = (isset($recipientUserDetailsJsonDecode['org_name']) && $recipientUserDetailsJsonDecode['org_name'] != '' ? $recipientUserDetailsJsonDecode['org_name'] : '');
                    $organizationFields['organization_no'] = (isset($recipientUserDetailsJsonDecode['org_reg_no']) && $recipientUserDetailsJsonDecode['org_reg_no'] != '' ? $recipientUserDetailsJsonDecode['org_reg_no'] : '');
                    $organizationFields['organization_phone'] = (isset($recipientUserDetailsJsonDecode['org_mobile']) && $recipientUserDetailsJsonDecode['org_mobile'] != '' ? $recipientUserDetailsJsonDecode['org_mobile'] : '');
                    $organizationFields['organization_address'] = (isset($recipientUserDetailsJsonDecode['org_address']) && $recipientUserDetailsJsonDecode['org_address'] != '' ? $recipientUserDetailsJsonDecode['org_address'] : '');
                    $organizationFields['organization_city'] = (isset($recipientUserDetailsJsonDecode['org_city']) && $recipientUserDetailsJsonDecode['org_city'] != '' ? $recipientUserDetailsJsonDecode['org_city'] : '');
                    $organizationFields['organization_zipcode'] = (isset($recipientUserDetailsJsonDecode['org_zip']) && $recipientUserDetailsJsonDecode['org_zip'] != '' ? $recipientUserDetailsJsonDecode['org_zip'] : '');
                }

                if(isset($recipientUserDetailsJsonDecode['details_fields'])) {
                    $detailsFields = json_decode($recipientUserDetailsJsonDecode['details_fields'], true);
                    foreach($detailsFields as $orgFldsKey => $orgFldsValue) {
                        $details[$orgFldsValue['detailsFieldName']] = $orgFldsValue['detailsFieldValue'];
                    }
                } else {
                    $details['recipient_role'] = (isset($recipientUserDetailsJsonDecode['recrolename']) && $recipientUserDetailsJsonDecode['recrolename'] != '' ? $recipientUserDetailsJsonDecode['recrolename'] : '');
                    $details['authentication'] = $utility->authenticationMethodName($contractDataValue['authentication_method']);
                    $details['invitation_type'] = $utility->invitationTypeName($contractDataValue['invitation_type']);
                    $details['invitation_order'] = $contractDataValue['invitation_order'];
                    $details['confirmation'] = $utility->offerConfirmationName($contractDataValue['offer_confirmation']);
                    $details['id_attachment'] = $utility->idAttachmentName($contractDataValue['id_attachments']);
                }

                $details['recipient_contract_status'] = $utility->offerStatusName($contractDataValue['offer_status']);
                $details['request_attachment'] = ($contractDataValue['req_attached'] != '' ? $contractDataValue['req_attached'] : '');
                $details['contract_read_date'] = ($contractDataValue['document_read_date'] != '' && $contractDataValue['document_read_date'] != '0000-00-00 00:00:00' ? $contractDataValue['document_read_date'] : '');

                $eachArray = ['people_fields' => $peopleFields, 'organization_fields' => $organizationFields, 'details' => $details];
                array_push($responseArray, $eachArray);
            }

            $senderData = Offersentdetails::where('offer_send_details.offer_sent_id', $contract_id)->join('offer_sent', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')->select('offer_sent.language_id', 'offer_sent.visible_name', 'offer_sent.name', 'offer_sent.offer_status', 'offer_send_details.user_details', 'offer_sent.created_date', 'offer_sent.signed_date', 'offer_sent.due_days', 'offer_sent.reminder_days', 'offer_sent.offer_type', 'offer_send_details.offer_status AS details_offer_status', 'offer_send_details.unique_id', 'offer_send_details.offer_sent_id')->where('offer_send_details.is_sender', 1)->where('offer_sent.sender_id', $user_id)->first();
            if($senderData) {
                $senderUserDetails = Tcrypt::decrypter($senderData['user_details']);
                $senderUserDetailsJsonDecode = json_decode($senderUserDetails, true);

                //sender info details starting
                $senderInfo['name'] = (isset($senderUserDetailsJsonDecode['full_name']) && $senderUserDetailsJsonDecode['full_name'] != '' ? $senderUserDetailsJsonDecode['full_name'] : '');
                $senderInfo['email'] = (isset($senderUserDetailsJsonDecode['email']) && $senderUserDetailsJsonDecode['email'] != '' ? preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $senderUserDetailsJsonDecode['email']) : '');
                $senderInfo['company'] = (isset($senderUserDetailsJsonDecode['company']) && $senderUserDetailsJsonDecode['company'] != '' ? $senderUserDetailsJsonDecode['company'] : '');
                $senderInfo['reg_no'] = (isset($senderUserDetailsJsonDecode['reg_no']) && $senderUserDetailsJsonDecode['reg_no'] != '' ? $senderUserDetailsJsonDecode['reg_no'] : '');
                $senderInfo['address'] = (isset($senderUserDetailsJsonDecode['address']) && $senderUserDetailsJsonDecode['address'] != '' ? $senderUserDetailsJsonDecode['address'] : '');
                $senderInfo['phone_no'] = (isset($senderUserDetailsJsonDecode['telephone']) && $senderUserDetailsJsonDecode['telephone'] != '' ? $senderUserDetailsJsonDecode['telephone'] : '');
                $senderInfo['zipcode'] = (isset($senderUserDetailsJsonDecode['post_code']) && $senderUserDetailsJsonDecode['post_code'] != '' ? $senderUserDetailsJsonDecode['post_code'] : '');
                $senderInfo['city'] = (isset($senderUserDetailsJsonDecode['city']) && $senderUserDetailsJsonDecode['city'] != '' ? $senderUserDetailsJsonDecode['city'] : '');

                $extraFieldsData = Userinfo::where('user_id', $user_id)->pluck('extra_fields_data');
                if($extraFieldsData != '') {
                    $extraFieldsDataJsonDecode = json_decode($extraFieldsData, true);
                    foreach($extraFieldsDataJsonDecode as $decodekey => $decodeValue) {
                        $senderInfo[$decodekey] = (isset($decodeValue) && $decodeValue != '' ? $decodeValue : '');
                    }
                }
                $responseArray['sender_details'] = $senderInfo;
                //sender info details ending

                //contract details info starting
                $contractDetails['document_name'] = ($senderData['visible_name'] != '' ? Tcrypt::decrypter($senderData['visible_name']) : Tcrypt::decrypter($senderData['name']));
                $contractDetails['contract_language'] = $utility->languageName($senderData['language_id']);
                $contractDetails['sent_date'] = ($senderData['created_date'] != '' && $senderData['created_date'] != '0000-00-00 00:00:00' ? $senderData['created_date'] : '');
                $contractDetails['signed_date'] = ($senderData['signed_date'] != '' && $senderData['signed_date'] != '0000-00-00 00:00:00' ? $senderData['signed_date'] : '');
                $contractDetails['contract_due_days'] = ($senderData['due_days'] != '' ? $senderData['due_days'] : '');
                $contractDetails['contract_reminder_days'] = ($senderData['reminder_days'] != '' ? $senderData['reminder_days'] : '');

                $contractDetails['contract_status'] = $utility->offerStatusName($senderData['offer_status']);
                //$senderData['offer_status']
                $contractURL = $domain_name.'avtal/downloadpdf/'.$senderData['offer_sent_id'].'/'.$senderData['unique_id'];
                if($senderData['offer_status'] == 4) {
                    $contractDetails['signed_pdf'] = $contractURL;
                } else {
                    $contractDetails['contract_pdf'] = $contractURL;
                }
                //$contractDetails['contract_type'] = $utility->offerTypeName($senderData['offer_type']);

                $responseArray['contract_details'] = $contractDetails;
                //contract details info ending
            }
            return Response::json(['status' => 'success', 'result' => $responseArray]);
        } else {
            return Response::json(['status' => 'error', 'result' => 'No record(s) found']);
        }
    }

    public function anySigneddocuments() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');
        $template_id = 0;
        $offerSentIds = $caseManagementOfferSentIds = [];
        //setMajorDB();

        //access_token validation starting
        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
        //access_token validation ending

        $user_id = $utility->getUserIdByAuthToken($access_token);
        $parent_id = $utility->getParent($user_id);
        $userTimeZone = $utility->getUsertimezone($parent_id);
        $getUserAPITimeZone = $utility->getUserAPITimeZone($parent_id);
        $timeFormat = settings::where('user_id', $parent_id)->pluck('time_format');
        $getApiHitCount = Userinfo::where('user_id', $parent_id)->select('hit_count')->first();
        $addupdateapiaccesslogs = $utility->addupdateapiaccesslogs($user_id, 'anySigneddocuments v3', $data, $getApiHitCount['hit_count']);
        if($addupdateapiaccesslogs == 'exceed') {
            $this->apiCallLimitExceedMessage = str_replace('#hitCuntNo', $getApiHitCount['hit_count'], $this->apiCallLimitExceedMessage);
            return Response::json(['status' => 'error', 'result' => $this->apiCallLimitExceedMessage]);
        }

        $subUserId = 0;
        if(isset($data['user_id']) && $data['user_id'] != '') {
            $subUserId = $data['user_id'];
            $checkUser = User::where('id', $subUserId)->where('parent_id', $user_id)->count();
            if(!$checkUser) {
                return Response::json(['status' => 'error', 'result' => 'invalid user_id']);
            }
        }

        if($utility->isParent($user_id) == 1) {
            $allUserIds = $utility->getSubusers($parent_id);
        } else {
            $allUserIds = [$user_id];
        }

        if($subUserId > 0) {
            $allUserIds = [$subUserId];
        }

        $userSettings = $utility->getUserSettings($parent_id);

        if($utility->checkAdminStripe($user_id)) {
            return Response::json(['status' => 'error', 'result' => 'Account is locked make payment in order to continue Simplesign']);
        }

        $offerSentObject = new Offersent();

        $whereRaw = '(1=1)';
        $fromDate = '';
        $dateTime = new \DateTime();
        if(isset($data['from_date']) && !empty($data['from_date'])) {
            if($dateTime->createFromFormat('Y-m-d', $data['from_date']) !== FALSE) {
                $fromDate = $data['from_date'].' 00:00:00';
            } elseif($dateTime->createFromFormat('Y-m-d-H-i-s', $data['from_date']) !== FALSE) {
                $fromDate = $dateTime->createFromFormat('Y-m-d-H-i-s', $data['from_date'])->format('Y-m-d H:i:s');
            } else {
                return Response::json(['status' => 'error', 'result' => 'from_date format is invalid']);
            }
        } if(isset($data['to_date']) && !empty($data['to_date'])) {
            if($dateTime->createFromFormat('Y-m-d', $data['to_date']) !== FALSE) {
                $toDate = $data['to_date'].' 23:59:59';
            } elseif($dateTime->createFromFormat('Y-m-d-H-i-s', $data['to_date']) !== FALSE) {
                $toDate = $dateTime->createFromFormat('Y-m-d-H-i-s', $data['to_date'])->format('Y-m-d H:i:s');
            } else {
                return Response::json(['status' => 'error', 'result' => 'to_date format is invalid']);
            }
        } elseif($fromDate != '') {
            //elseif used because if user didn't pass to_date so variable just add date value by default
            if($dateTime->createFromFormat('Y-m-d', $fromDate) !== FALSE) {
                $toDate = date('Y-m-d').' 23:59:59';
            } elseif($dateTime->createFromFormat('Y-m-d-H-i-s', $fromDate) !== FALSE) {
                $toDate = date('Y-m-d H:i:s');
            } else {
                $toDate = date('Y-m-d').' 23:59:59';
            }
        }
        if($fromDate != '' && $toDate != '') {
            //if($_SERVER['HTTP_HOST'] == 'acceptance.simplesign.io') {
                $fromDate = $utility->changeTimeZone($fromDate, 'Y-m-d H:i:s', $userTimeZone, 'UTC');
                $toDate = $utility->changeTimeZone($toDate, 'Y-m-d H:i:s', $userTimeZone, 'UTC');
            /* } else {
                $fromDate = $utility->changeTimeZone($fromDate, 'Y-m-d H:i:s', $userTimeZone, 'UTC');
                $toDate = $utility->changeTimeZone($toDate, 'Y-m-d H:i:s', $userTimeZone, 'UTC');
            } */
            $whereRaw = "(";
            
            $whereRaw .= "(simplesign_offer_sent.signed_date != '0000-00-00 00:00:00' ";
            $whereRaw .= "AND simplesign_offer_sent.signed_date BETWEEN '".$fromDate."' AND '".$toDate."') ";

            $whereRaw .= ")";
            $offerSentObject = $offerSentObject->whereRaw($whereRaw);
        }

        //$offerSentObject = $offerSentObject->from('offer_sent as ofs')->join('offer_send_details as ofd', 'ofs.id', '=', 'ofd.offer_sent_id');
        if((isset($data['task_name']) && $data['task_name'] != '') || (isset($data['task_status']) && $data['task_status'] != '')) {
            $offerSentObject = $offerSentObject->join('offersent_data', 'offer_sent.id', '=', 'offersent_data.sent_id');
        } if((isset($data['task_filter']) && $data['task_filter'] != '') || (isset($data['completed_fromdate']) && $data['completed_fromdate'] != '' || isset($data['completed_todate']) && $data['completed_todate'] != '')) {
            $offerSentObject = $offerSentObject->join('offersent_data as ofsd', 'offer_sent.id', '=', 'ofsd.sent_id');
        }

        if(isset($data['document_id']) && $data['document_id'] != '') {
            $offerSentObject = $offerSentObject->where('offer_sent.id', $data['document_id']);
        }

        $lastDocumentId = (isset($data['last_document_id']) && $data['last_document_id'] != '' ? $data['last_document_id'] : 0);
        $offerSentObject = $offerSentObject->where('offer_sent.id', '>', $lastDocumentId);

        $orderBy = 'asc';
        if(isset($data['order']) && $data['order'] != '') {
            if($data['order'] != 'asc' && $data['order'] != 'desc') {
                $orderBy = 'asc';
            } else {
                $orderBy = $data['order'];
            }
        }

        //case managment filter starting
        $getAddOnObjectData = settings::where('user_id', $parent_id)->select('new_addon_obj')->first();
        if((isset($data['task_name']) && $data['task_name'] != '') || (isset($data['task_status']) && $data['task_status'] != '')) {
            if($getAddOnObjectData['new_addon_obj'] != '') {
                $newAddonObjJsonDataForCaseManagment = json_decode($getAddOnObjectData['new_addon_obj'], true);
                if(isset($newAddonObjJsonDataForCaseManagment['mark_as_completed_addon']) && $newAddonObjJsonDataForCaseManagment['mark_as_completed_addon'] == 1) {
                    $markAsCompletedAddonSetting = (isset($newAddonObjJsonDataForCaseManagment['mark_as_completed_addon_setting']) && $newAddonObjJsonDataForCaseManagment['mark_as_completed_addon_setting'] != '' ? json_decode($newAddonObjJsonDataForCaseManagment['mark_as_completed_addon_setting'], true) : []);
                    if(!empty($markAsCompletedAddonSetting)) {
                        if(isset($markAsCompletedAddonSetting['mark_tasks_array']) && !empty($markAsCompletedAddonSetting['mark_tasks_array'])) {
                            if(isset($data['task_status']) && ($data['task_status'] == 'yes' || $data['task_status'] == 'Yes' || $data['task_status'] == 'YES' || $data['task_status'] == 'yEs' || $data['task_status'] == 'YeS' || $data['task_status'] == 'YEs')) {
                                $data['task_status'] = 'done';
                            } if(isset($data['task_status']) && ($data['task_status'] == 'in process' || $data['task_status'] == 'in Process' || $data['task_status'] == 'in_process' || $data['task_status'] == 'in_Process' || $data['task_status'] == 'In process' || $data['task_status'] == 'In Process' || $data['task_status'] == 'In_process' || $data['task_status'] == 'In_Process' || $data['task_status'] == 'inprocess' || $data['task_status'] == 'inProcess' || $data['task_status'] == 'Inprocess' || $data['task_status'] == 'inProcess' || $data['task_status'] == 'in-process' || $data['task_status'] == 'in-Process' || $data['task_status'] == 'In-process' || $data['task_status'] == 'In-Process')) {
                                $data['task_status'] = 'in_process';
                            } if(isset($data['task_status']) && ($data['task_status'] == 'no' || $data['task_status'] == 'No' || $data['task_status'] == 'NO' || $data['task_status'] == 'nO')) {
                                $data['task_status'] = 'no';
                            }
                            foreach($markAsCompletedAddonSetting['mark_tasks_array'] as $markTasksArrayKey => $markTasksArrayValue) {
                                if($markTasksArrayValue['tasknames'] == $data['task_name']) {
                                    $index = $markTasksArrayKey;
                                    if(isset($data['task_status']) && $data['task_status'] != '') {
                                        $offerSentObjectNew = $offerSentObject->where('offersent_data.multi_case_management', 'like', '%'.($index).'%')->where('offersent_data.multi_case_management', 'like', '%'.$data['task_status'].'%');
                                    } else {
                                        $offerSentObjectNew = $offerSentObject->where('offersent_data.multi_case_management', 'like', '%'.($index).'%');
                                    }
                                    $offerSentObjectNew = $offerSentObjectNew->select('offer_sent.id', 'offer_sent.offer_id', 'offer_sent.offer_status', 'offersent_data.contract_type_id', 'offersent_data.multi_case_management')->orderBy('offer_sent.signed_date', $orderBy)->take(20)->get()->toArray();
                                    if($offerSentObjectNew) {
                                        foreach($offerSentObjectNew as $offerSentObjectNewKey => $offerSentObjectNewValue) {
                                            if(in_array($offerSentObjectNewValue['contract_type_id'], $markTasksArrayValue['contract_type_selected']) && (in_array($offerSentObjectNewValue['offer_status'], $markTasksArrayValue['marked_addon_status']) || in_array("", $markTasksArrayValue['marked_addon_status']))) {
                                                if($offerSentObjectNewValue['multi_case_management'] != '') {
                                                    $multiCaseManagementJsonDecodeForFilter = json_decode($offerSentObjectNewValue['multi_case_management'], true);
                                                    foreach($multiCaseManagementJsonDecodeForFilter as $multiCaseManagementJsonDecodeForFilterKey => $multiCaseManagementJsonDecodeForFilterValue) {
                                                        if(isset($data['task_status']) && $data['task_status'] != '') {
                                                            if($multiCaseManagementJsonDecodeForFilterValue['status_text'] == $data['task_status'] && isset($multiCaseManagementJsonDecodeForFilterValue['task_no']) && $multiCaseManagementJsonDecodeForFilterValue['task_no'] == $index && $multiCaseManagementJsonDecodeForFilterValue['task_no'] != -1 && !in_array($offerSentObjectNewValue['id'], $caseManagementOfferSentIds)) {
                                                                array_push($caseManagementOfferSentIds, $offerSentObjectNewValue['id']);
                                                            } elseif($multiCaseManagementJsonDecodeForFilterValue['status_text'] == $data['task_status'] && isset($multiCaseManagementJsonDecodeForFilterValue['task_no']) && $multiCaseManagementJsonDecodeForFilterValue['task_no'] == $index && $multiCaseManagementJsonDecodeForFilterValue['task_no'] == -1 && !in_array($offerSentObjectNewValue['id'], $caseManagementOfferSentIds)) {
                                                                array_push($caseManagementOfferSentIds, $offerSentObjectNewValue['id']);
                                                            }
                                                        } else {
                                                            if(isset($multiCaseManagementJsonDecodeForFilterValue['task_no']) && $multiCaseManagementJsonDecodeForFilterValue['task_no'] == $index && $multiCaseManagementJsonDecodeForFilterValue['task_no'] != -1 && !in_array($offerSentObjectNewValue['id'], $caseManagementOfferSentIds)) {
                                                                array_push($caseManagementOfferSentIds, $offerSentObjectNewValue['id']);
                                                            } elseif(isset($multiCaseManagementJsonDecodeForFilterValue['task_no']) && $multiCaseManagementJsonDecodeForFilterValue['task_no'] == $index && $multiCaseManagementJsonDecodeForFilterValue['task_no'] == -1 && !in_array($offerSentObjectNewValue['id'], $caseManagementOfferSentIds)) {
                                                                array_push($caseManagementOfferSentIds, $offerSentObjectNewValue['id']);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                } else {
                    return Response::json(['status' => 'error', 'result' => 'Task management feature is not enabled in your account, Contact Simplesign support for task management activation.']);
                }
            }
            if(count($caseManagementOfferSentIds) > 0) {
                $offerSentObject = $offerSentObject->whereIn('offer_sent.id', $caseManagementOfferSentIds);
            } else {
                return Response::json(['status' => 'error', 'result' => 'No record(s) found.']);
            }
        } if(isset($data['task_filter']) && $data['task_filter'] != '') {
            $caseManagementOfferSentIds = [];
            if($this->is_JSON($data['task_filter'])) {
                $taskFilter = json_decode($data['task_filter'], true);
                $taskFilterArray = [];
                //If casemanagement column is empty, we don't fetch it with filter, but in UI it shows by default "No" value.
                $valueArray = ['yes', 'no', 'in process', 'in_process', 'inprocess', 'in-process'];
                if($getAddOnObjectData['new_addon_obj'] != '' && !empty($taskFilter)) {
                    $newAddonObjJsonDataForCaseManagment = json_decode($getAddOnObjectData['new_addon_obj'], true);
                    if(isset($newAddonObjJsonDataForCaseManagment['mark_as_completed_addon']) && $newAddonObjJsonDataForCaseManagment['mark_as_completed_addon'] == 1) {
                        $markAsCompletedAddonSetting = (isset($newAddonObjJsonDataForCaseManagment['mark_as_completed_addon_setting']) && $newAddonObjJsonDataForCaseManagment['mark_as_completed_addon_setting'] != '' ? json_decode($newAddonObjJsonDataForCaseManagment['mark_as_completed_addon_setting'], true) : []);
                        if(!empty($markAsCompletedAddonSetting)) {
                            if(isset($markAsCompletedAddonSetting['mark_tasks_array']) && !empty($markAsCompletedAddonSetting['mark_tasks_array'])) {
                                $taskManagementWhere = '';
                                //$multiCaseManagementFurtherFilterIncrementedIndex = 0;
                                foreach($taskFilter as $taskFilterKey => $taskFilterValue) {
                                    $task_index = null;
                                    if(!in_array(strtolower($taskFilterValue), $valueArray)) {
                                        return Response::json(['status' => 'error', 'result' => "value should be yes, no or in_process for $taskFilterKey"]);
                                    }
                                    if(isset($taskFilterValue) && ($taskFilterValue == 'yes' || $taskFilterValue == 'Yes' || $taskFilterValue == 'YES' || $taskFilterValue == 'yEs' || $taskFilterValue == 'yES' || $taskFilterValue == 'YeS' || $taskFilterValue == 'YEs')) {
                                        $taskFilterValue = 'done';
                                    } if(isset($taskFilterValue) && ($taskFilterValue == 'in process' || $taskFilterValue == 'in Process' || $taskFilterValue == 'in_process' || $taskFilterValue == 'in_Process' || $taskFilterValue == 'In process' || $taskFilterValue == 'In Process' || $taskFilterValue == 'In_process' || $taskFilterValue == 'In_Process' || $taskFilterValue == 'inprocess' || $taskFilterValue == 'inProcess' || $taskFilterValue == 'Inprocess' || $taskFilterValue == 'inProcess' || $taskFilterValue == 'in-process' || $taskFilterValue == 'in-Process' || $taskFilterValue == 'In-process' || $taskFilterValue == 'In-Process')) {
                                        $taskFilterValue = 'in_process';
                                    } if(isset($taskFilterValue) && ($taskFilterValue == 'no' || $taskFilterValue == 'No' || $taskFilterValue == 'NO' || $taskFilterValue == 'nO')) {
                                        $taskFilterValue = 'no';
                                    }
                                    foreach($markAsCompletedAddonSetting['mark_tasks_array'] as $markTasksArrayKey => $markTasksArrayValue) {
                                        if($markTasksArrayValue['tasknames'] == $taskFilterKey) {
                                            $contractType = $markTasksArrayValue['contract_type_selected'];
                                            $marked_offer_status = $markTasksArrayValue['marked_addon_status'];
                                            $task_index = $markTasksArrayKey;
                                            if($taskManagementWhere != '') {
                                                $taskManagementWhere .= " AND ";
                                            }
                                            $taskManagementWhere .= " ( ";
                                            $taskManagementWhere .= " JSON_EXTRACT(`simplesign_ofsd`.`multi_case_management`, '$.*.task_no') LIKE '%\"$markTasksArrayKey\"%' AND JSON_EXTRACT(`simplesign_ofsd`.`multi_case_management`, '$.*.status_text') LIKE '%\"$taskFilterValue\"%' ";
                                            if($contractType) {
                                                $taskManagementWhere .= " AND simplesign_ofsd.contract_type_id in (".join(",", $contractType).")  ";
                                            }
                                            if($marked_offer_status && isset($marked_offer_status[0]) && $marked_offer_status[0]) {
                                                $taskManagementWhere .= " AND simplesign_offer_sent.offer_status in (".join(",", $marked_offer_status).")  ";
                                            }
                                            $taskManagementWhere .= " )";
                                        }
                                    }
                                    if($task_index !== null) {
                                        $taskFilterArray[] = ['task_name' => $taskFilterKey, 'task_val' => $taskFilterValue, 'task_index' => $task_index];
                                    } else {
                                        return Response::json(['status' => 'error', 'result' => "Task filter $taskFilterKey not found"]);
                                    }
                                }

                                //$caseManagementDocumentIds = [];
                                $offerSentObjectForIds = $offerSentObject->whereRaw($taskManagementWhere);
                                $offerSentObjectForIds = $offerSentObjectForIds->select('offer_sent.id', 'offer_sent.unique_id', 'offer_sent.offer_status', 'ofsd.multi_case_management', 'ofsd.contract_type_id')->orderBy('offer_sent.id', $orderBy)->get()->toArray();
                                foreach($offerSentObjectForIds as $offerSentObjectForIdsKey => $offerSentObjectForIdsValue) {
                                    $MatchingStatus = false;
                                    if($offerSentObjectForIdsValue['multi_case_management'] != '') {
                                        $matchingNum = 0;
                                        $multiCaseManagementJsonDecodeForFilter = json_decode($offerSentObjectForIdsValue['multi_case_management'], true);
                                        foreach($multiCaseManagementJsonDecodeForFilter as $taskSKey1 => $taskSVal1) {
                                            foreach($taskFilterArray as $taskFKey1 => $taskFVal1) {
                                                if($taskSVal1['status_text'] == $taskFVal1['task_val'] && isset($taskSVal1['task_no']) && $taskSVal1['task_no'] == $taskFVal1['task_index']) {
                                                    $matchingNum++;
                                                }
                                            }
                                        }
                                        if(count($taskFilterArray) == $matchingNum) {
                                            $MatchingStatus = true;
                                        }
                                    }
                                    if($MatchingStatus) {
                                        //array_push($caseManagementDocumentIds, $offerSentObjectForIdsValue);
                                        array_push($caseManagementOfferSentIds, $offerSentObjectForIdsValue['id']);
                                    }
                                }
                                if(!$offerSentObjectForIds || $taskManagementWhere == '') {
                                    return Response::json(['status' => 'error', 'result' => 'No record(s) found.']);
                                }
                            }
                        }
                    } else {
                        return Response::json(['status' => 'error', 'result' => 'Task management feature is not enabled in your account, Contact Simplesign support for task management activation.']);
                    }
                }
                if(count($caseManagementOfferSentIds) > 0) {
                    $offerSentObject = $offerSentObject->whereIn('offer_sent.id', $caseManagementOfferSentIds);
                } else {
                    return Response::json(['status' => 'error', 'result' => 'No record(s) found.']);
                }
            } else {
                return Response::json(['status'=>'error','result' => 'Task filter is invalid format, JSON is required']);
            }
        }
        if(isset($data['completed_fromdate']) && $data['completed_fromdate'] != '') {
            $timeZone = 'UTC';
            $taskFromDate = $taskTodate = $yearMonthDateFormatFrom = $yearMonthDateFormatTo = '';
            if($dateTime->createFromFormat('Y-m-d', $data['completed_fromdate']) !== FALSE) {
                $yearMonthDateFormatFrom = 'Y-m-d';
                $taskFromDate = $dateTime->createFromFormat($yearMonthDateFormatFrom, $data['completed_fromdate'])->format($yearMonthDateFormatFrom);
            } elseif($dateTime->createFromFormat('Y-m-d-H-i-s', $data['completed_fromdate']) !== FALSE) {
                $yearMonthDateFormatFrom = 'Y-m-d H:i:s';
                $taskFromDate = $dateTime->createFromFormat('Y-m-d-H-i-s', $data['completed_fromdate'])->format($yearMonthDateFormatFrom);
            }
            //if($_SERVER['HTTP_HOST'] == 'acceptance.simplesign.io') {
                $taskFromDate = $utility->changeTimeZone($taskFromDate, $yearMonthDateFormatFrom, $userTimeZone, $timeZone);
            /* } else {
                $taskFromDate = $utility->changeTimeZone($taskFromDate, $yearMonthDateFormatFrom, $userTimeZone, $timeZone);
            } */
            if(isset($data['completed_todate']) && $data['completed_todate'] != '') {
                if($dateTime->createFromFormat('Y-m-d', $data['completed_todate']) !== FALSE) {
                    $yearMonthDateFormatTo = 'Y-m-d';
                    $taskTodate = $dateTime->createFromFormat($yearMonthDateFormatTo, $data['completed_todate'])->format($yearMonthDateFormatTo);
                } elseif($dateTime->createFromFormat('Y-m-d-H-i-s', $data['completed_todate']) !== FALSE) {
                    $yearMonthDateFormatTo = 'Y-m-d H:i:s';
                    $taskTodate = $dateTime->createFromFormat('Y-m-d-H-i-s', $data['completed_todate'])->format($yearMonthDateFormatTo);
                }
                //if($_SERVER['HTTP_HOST'] == 'acceptance.simplesign.io') {
                    $taskTodate = $utility->changeTimeZone($taskTodate, $yearMonthDateFormatTo, $userTimeZone, $timeZone);
                /* } else {
                    $taskTodate = $utility->changeTimeZone($taskTodate, $yearMonthDateFormatTo, $userTimeZone, $timeZone);
                } */
            } elseif($taskFromDate != '') {
                //elseif used because if user didn't pass completed_todate so variable just add date value by default
                if($dateTime->createFromFormat('Y-m-d', $taskFromDate) !== FALSE) {
                    $taskTodate = date('Y-m-d').' 23:59:59';
                } elseif($dateTime->createFromFormat('Y-m-d-H-i-s', $taskFromDate) !== FALSE) {
                    $taskTodate = date('Y-m-d H:i:s');
                } else {
                    $taskTodate = date('Y-m-d').' 23:59:59';
                }
            }
            $caseManagementOfferSentIds = [];
            $taskFilterArrayDate = [];
            if($getAddOnObjectData['new_addon_obj'] != '') {
                $newAddonObjJsonDataForCaseManagment = json_decode($getAddOnObjectData['new_addon_obj'], true);
                if(isset($newAddonObjJsonDataForCaseManagment['mark_as_completed_addon']) && $newAddonObjJsonDataForCaseManagment['mark_as_completed_addon'] == 1) {
                    $markAsCompletedAddonSetting = (isset($newAddonObjJsonDataForCaseManagment['mark_as_completed_addon_setting']) && $newAddonObjJsonDataForCaseManagment['mark_as_completed_addon_setting'] != '' ? json_decode($newAddonObjJsonDataForCaseManagment['mark_as_completed_addon_setting'], true) : []);
                    if(!empty($markAsCompletedAddonSetting)) {
                        if(isset($markAsCompletedAddonSetting['mark_tasks_array']) && !empty($markAsCompletedAddonSetting['mark_tasks_array'])) {
                            $taskManagementWhere = '';
                            $task_index = null;
                            foreach($markAsCompletedAddonSetting['mark_tasks_array'] as $markTasksArrayKey => $markTasksArrayValue) {
                                if($markTasksArrayValue['tasknames']) {
                                    $contractType = $markTasksArrayValue['contract_type_selected'];
                                    $marked_offer_status = $markTasksArrayValue['marked_addon_status'];
                                    $task_index = $markTasksArrayKey;
                                    if($taskManagementWhere != '') {
                                        $taskManagementWhere .= " AND ";
                                    }
                                    $taskManagementWhere .= " ( ";
                                    //AND JSON_EXTRACT(`simplesign_ofsd`.`multi_case_management`, '$.*.status_text') LIKE '%done%' 
                                    $taskManagementWhere .= " JSON_EXTRACT(`simplesign_ofsd`.`multi_case_management`, '$.*.task_no') LIKE '%\"$markTasksArrayKey\"%' ";
                                    $taskManagementWhere .= " AND simplesign_ofsd.mark_completed = '1' AND simplesign_ofsd.mark_completed_date BETWEEN '$taskFromDate' AND '$taskTodate' ";
                                    if($contractType) {
                                        $taskManagementWhere .= " AND simplesign_ofsd.contract_type_id in (".join(",", $contractType).")  ";
                                    }
                                    if($marked_offer_status && isset($marked_offer_status[0]) && $marked_offer_status[0]) {
                                        $taskManagementWhere .= " AND simplesign_offer_sent.offer_status in (".join(",", $marked_offer_status).")  ";
                                    }
                                    $taskManagementWhere .= " )";
                                }
                            }
                            if($task_index !== null) {
                                $taskFilterArrayDate[] = ['task_index' => $task_index];
                            } else {
                                return Response::json(['status' => 'error', 'result' => "Task filter not found"]);
                            }
                            $offerSentObjectForIds = $offerSentObject->whereRaw($taskManagementWhere);
                            $offerSentObjectForIds = $offerSentObjectForIds->select('offer_sent.sender_id', 'offer_sent.id', 'offer_sent.unique_id', 'offer_sent.offer_status', 'ofsd.multi_case_management', 'ofsd.contract_type_id')->orderBy('offer_sent.id', 'desc')->get()->toArray();
                            foreach($offerSentObjectForIds as $offerSentObjectForIdsKey => $offerSentObjectForIdsValue) {
                                $MatchingStatus = false;
                                if($offerSentObjectForIdsValue['multi_case_management'] != '') {
                                    $matchingNum = 0;
                                    $multiCaseManagementJsonDecodeForFilter = json_decode($offerSentObjectForIdsValue['multi_case_management'], true);
                                    foreach($multiCaseManagementJsonDecodeForFilter as $taskSKey1 => $taskSVal1) {
                                        foreach($taskFilterArrayDate as $taskFKey1 => $taskFVal1) {
                                            if(isset($taskSVal1['task_no']) && $taskSVal1['task_no'] == $taskFVal1['task_index']) {
                                                $matchingNum++;
                                            }
                                        }
                                    }
                                    if(count($taskFilterArrayDate) == $matchingNum) {
                                        $MatchingStatus = true;
                                    }
                                }
                                if($MatchingStatus) {
                                    array_push($caseManagementOfferSentIds, $offerSentObjectForIdsValue['id']);
                                }
                            }
                            if(!$offerSentObjectForIds || $taskManagementWhere == '') {
                                return Response::json(['status' => 'error', 'result' => 'No record(s) found']);
                            }
                        }
                    }
                } else {
                    return Response::json(['status' => 'error', 'result' => 'Task management feature is not enabled in your account, Contact Simplesign support for task management activation.']);
                }
            }
            if(count($caseManagementOfferSentIds) > 0) {
                $offerSentObject = $offerSentObject->whereIn('offer_sent.id', $caseManagementOfferSentIds);
            } else {
                return Response::json(['status' => 'error', 'result' => 'No record(s) found']);
            }
        }
        //case managment filter ending

        //$offerSentObject = $offerSentObject->where('offer_sent.offer_status', 4)->select('offer_sent.id', 'offer_sent.offer_id', 'offer_sent.language_id', 'offer_sent.timedateformat', 'offer_sent.visible_name', 'offer_sent.name', 'offer_sent.created_date', 'offer_sent.signed_date', 'offer_sent.due_days', 'offer_sent.due_date', 'offer_sent.reminder_days', 'offer_sent.offer_status', 'offer_sent.offer_type', 'offer_sent.sender_id', 'offer_sent.content')->where('offer_sent.offer_status', '!=', 7)->whereIn('offer_sent.sender_id', $allUserIds)->whereRaw($whereRaw)->orderBy('offer_sent.signed_date', $orderBy);
        $offerSentObject = $offerSentObject->where('offer_sent.offer_status', 4)->select('offer_sent.id', 'offer_sent.offer_id', 'offer_sent.language_id', 'offer_sent.timedateformat', 'offer_sent.visible_name', 'offer_sent.name', 'offer_sent.created_date', 'offer_sent.signed_date', 'offer_sent.due_days', 'offer_sent.due_date', 'offer_sent.reminder_days', 'offer_sent.offer_status', 'offer_sent.offer_type', 'offer_sent.sender_id')->where('offer_sent.offer_status', '!=', 7)->whereIn('offer_sent.sender_id', $allUserIds)->whereRaw($whereRaw)->orderBy('offer_sent.signed_date', $orderBy);
        $totalOfferSentData = $offerSentObject->count();

        $offerSentData = $offerSentObject->take(20)->get()->toArray();

        foreach($offerSentData as $sentDataKey => $sentDataValue) {
            array_push($offerSentIds, $sentDataValue['id']);
        }

        //collect content
        $contentRecords = Offersent::whereIn('id', $offerSentIds)->select('id', 'content')->get()->toArray();
        $contentRecords = collect($contentRecords);

        $selectRaw = "CAST(AES_DECRYPT(simplesign_offer_send_details.user_details,'".env('ENCRYPT_KEY')."','".env('ENCRYPT_IV')."') AS CHAR) as user_details";
        DB::statement(' SET block_encryption_mode = \''.env('ENCRYPT_CIPHER').'\'');

        $contractData = Offersentdetails::whereIn('offer_sent_id', $offerSentIds)->select('offer_send_details.offer_status', DB::raw($selectRaw), 'is_sender', 'offer_send_details.id AS detail_id', 'offer_sent_id', 'req_attached', 'document_read_date', 'signed_date', 'authentication_method', 'role', 'invitation_type', 'invitation_order', 'offer_confirmation', 'id_attachments', 'offer_send_details.id', 'offer_send_details.unique_id', 'forward_status', 'forward_user_details', 'forward_signed')->get()->toArray();

        //DB::enableQueryLog();
        //print_r(DB::getQueryLog());
        if($user_id > 0) {
            if($contractData) {
                $responseArray = $pagination = $sentIdsForIndexdata = [];
                foreach($offerSentData as $sentIdsKey => $sentIdsValue) {
                    $sentIdsValue['content'] = $contentRecords->where('id', $sentIdsValue['id'])->pluck('content')->first();
                    $eachSentId = $sentIdsValue['id'];
                    $languageId = $sentIdsValue['language_id'];
                    array_push($sentIdsForIndexdata, $sentIdsValue['id']);
                    $peoples = $senderDetails = $documentFields = $accountDetails = $documentDetails = [];
                    foreach($contractData as $contractDataKey => $contractDataValue) {
                        $peopleFields = $organizationFields = $details = $inviteAndForwardDetails = [];
                        $nameExplode = $uniqueId = $documentLink = '';
                        
                        $recipientUserDetailsJsonDecode = json_decode($contractDataValue['user_details'], true);
                        //$peopleFields['detail_id'] = $contractDataValue['detail_id'];
                        //$peopleFields['offer_sent_id'] = $contractDataValue['offer_sent_id'];
                        //$peopleFields['user_id'] = $sentIdsValue['sender_id'];
                        $userRole = (isset($recipientUserDetailsJsonDecode['recrolename']) && $recipientUserDetailsJsonDecode['recrolename'] != '' ? $recipientUserDetailsJsonDecode['recrolename'] : (isset($recipientUserDetailsJsonDecode['partyname']) && $recipientUserDetailsJsonDecode['partyname'] != '' ? $recipientUserDetailsJsonDecode['partyname'] : ''));

                        if($contractDataValue['offer_sent_id'] == $eachSentId && $contractDataValue['is_sender'] == 1) {
                            //for regular contract sender use full_name key and for online contract sender use first_name key
                            $senderDetails['name'] = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? trim($recipientUserDetailsJsonDecode['full_name']) : (isset($recipientUserDetailsJsonDecode['first_name']) && $recipientUserDetailsJsonDecode['first_name'] != '' ? trim($recipientUserDetailsJsonDecode['first_name']) : ''));
                            $senderDetails['email'] = (isset($recipientUserDetailsJsonDecode['email']) && $recipientUserDetailsJsonDecode['email'] != '' ? trim(preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $recipientUserDetailsJsonDecode['email'])) : '');

                            $userCustomFields = (isset($recipientUserDetailsJsonDecode['user_customfields']) && $recipientUserDetailsJsonDecode['user_customfields'] != '' ? json_decode($recipientUserDetailsJsonDecode['user_customfields'], true) : []);
                            if(!empty($userCustomFields)) {
                                foreach($userCustomFields as $userCustomFldkey => $userCustomFldValue) {
                                    $senderDetails[trim($userCustomFldkey)] = (isset($userCustomFldValue) && $userCustomFldValue != '' ? trim($userCustomFldValue) : '');
                                }
                            }

                            $accountDetails['company'] = (isset($recipientUserDetailsJsonDecode['company']) && $recipientUserDetailsJsonDecode['company'] != '' ? trim($recipientUserDetailsJsonDecode['company']) : '');
                            $accountDetails['reg_no'] = (isset($recipientUserDetailsJsonDecode['reg_no']) && $recipientUserDetailsJsonDecode['reg_no'] != '' ? trim($recipientUserDetailsJsonDecode['reg_no']) : '');
                            $accountDetails['address'] = (isset($recipientUserDetailsJsonDecode['address']) && $recipientUserDetailsJsonDecode['address'] != '' ? trim($recipientUserDetailsJsonDecode['address']) : '');
                            $accountDetails['phone_no'] = (isset($recipientUserDetailsJsonDecode['mobile']) && $recipientUserDetailsJsonDecode['mobile'] != '' ? trim($recipientUserDetailsJsonDecode['mobile']) : (isset($recipientUserDetailsJsonDecode['telephone']) && $recipientUserDetailsJsonDecode['telephone'] != '' ? trim($recipientUserDetailsJsonDecode['telephone']) : ''));
                            $accountDetails['zipcode'] = (isset($recipientUserDetailsJsonDecode['zipcode']) && $recipientUserDetailsJsonDecode['zipcode'] != '' ? trim($recipientUserDetailsJsonDecode['zipcode']) : (isset($recipientUserDetailsJsonDecode['post_code']) && $recipientUserDetailsJsonDecode['post_code'] != '' ? trim($recipientUserDetailsJsonDecode['post_code']) : ''));
                            $accountDetails['city'] = (isset($recipientUserDetailsJsonDecode['city']) && $recipientUserDetailsJsonDecode['city'] != '' ? trim($recipientUserDetailsJsonDecode['city']) : '');
                            
                            $documentLink = $domain_name.'document/view/'.$contractDataValue['detail_id'].'/'.$contractDataValue['unique_id'];
                        }

                        $uniqueId = $contractDataValue['unique_id'];
                        //getting recipient data starting
                        $recipientFieldsRolesTabFields = (isset($recipientUserDetailsJsonDecode['Recipient_fields_roles_tab_fields']) && !empty($recipientUserDetailsJsonDecode['Recipient_fields_roles_tab_fields']) ? json_decode($recipientUserDetailsJsonDecode['Recipient_fields_roles_tab_fields'], true) : '');
                        $recinfoFields = ($recipientFieldsRolesTabFields != '' ? $recipientFieldsRolesTabFields['recinfo_fields'] : '');
                        if($contractDataValue['offer_sent_id'] == $eachSentId && $contractDataValue['is_sender'] == 0) {
                            //for regular contract recipient use full_name key
                            if(isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '') {
                                if((isset($recinfoFields['last_name']) && $recinfoFields['last_name'] == 1) || (isset($recipientUserDetailsJsonDecode['last_name']) && $recipientUserDetailsJsonDecode['last_name'] != '')) {
                                    $nameExplode = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($recipientUserDetailsJsonDecode['full_name'])) : '');
                                    if(isset($recipientUserDetailsJsonDecode['last_name']) && $recipientUserDetailsJsonDecode['last_name'] != '' && isset($nameExplode[1]) && $nameExplode[1] != '' && $nameExplode[1] != $recipientUserDetailsJsonDecode['last_name']) {
                                        $peopleFields['first_name'] = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? $recipientUserDetailsJsonDecode['full_name'] : '');
                                        $peopleFields['last_name'] = (isset($recipientUserDetailsJsonDecode['last_name']) && $recipientUserDetailsJsonDecode['last_name'] != '' ? $recipientUserDetailsJsonDecode['last_name'] : '');
                                    } else {
                                        $peopleFields['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                                        $peopleFields['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                                    }
                                } else {
                                    $nameExplode = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($recipientUserDetailsJsonDecode['full_name'])) : '');
                                    $peopleFields['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                                    $peopleFields['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                                }
                                /* if((isset($recinfoFields['last_name']) && $recinfoFields['last_name'] == 1) || (isset($recipientUserDetailsJsonDecode['last_name']) && $recipientUserDetailsJsonDecode['last_name'] != '')) {
                                    $peopleFields['first_name'] = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? $recipientUserDetailsJsonDecode['full_name'] : '');
                                    $peopleFields['last_name'] = (isset($recipientUserDetailsJsonDecode['last_name']) && $recipientUserDetailsJsonDecode['last_name'] != '' ? $recipientUserDetailsJsonDecode['last_name'] : '');
                                } else {
                                    $nameExplode = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($recipientUserDetailsJsonDecode['full_name'])) : '');
                                    $peopleFields['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                                    $peopleFields['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                                } */
                            } elseif(isset($recipientUserDetailsJsonDecode['name']) && $recipientUserDetailsJsonDecode['name'] != '') {
                                //for online contract recipient use name key
                                $nameExplode = (isset($recipientUserDetailsJsonDecode['name']) && $recipientUserDetailsJsonDecode['name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($recipientUserDetailsJsonDecode['name'])) : '');
                                $peopleFields['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                                $peopleFields['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                            }

                            //recipient information in peopleFields starting
                            $peopleFields['email'] = (isset($recipientUserDetailsJsonDecode['email']) && $recipientUserDetailsJsonDecode['email'] != '' ? trim(preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $recipientUserDetailsJsonDecode['email'])) : '');
                            //$peopleFields['personal_no'] = (isset($recipientUserDetailsJsonDecode['personnr']) && $recipientUserDetailsJsonDecode['personnr'] != '' ? (strlen(trim($recipientUserDetailsJsonDecode['personnr'])) == 12 || strlen(trim($recipientUserDetailsJsonDecode['personnr'])) == 13 ? substr(trim($recipientUserDetailsJsonDecode['personnr']), 2) : trim($recipientUserDetailsJsonDecode['personnr'])) : '');
                            //$peopleFields['personal_no'] = (isset($recipientUserDetailsJsonDecode['personnr']) && $recipientUserDetailsJsonDecode['personnr'] != '' ? trim($recipientUserDetailsJsonDecode['personnr']) : '');
                            if($parent_id == 12665 || $parent_id == 15307) {
                                $peopleFields['personal_no'] = (isset($recipientUserDetailsJsonDecode['personnr']) && $recipientUserDetailsJsonDecode['personnr'] != '' ? (strlen(trim($recipientUserDetailsJsonDecode['personnr'])) == 12 || strlen(trim($recipientUserDetailsJsonDecode['personnr'])) == 13 ? substr(trim($recipientUserDetailsJsonDecode['personnr']), 2) : trim($recipientUserDetailsJsonDecode['personnr'])) : '');
                            } else {
                                $peopleFields['personal_no'] = (isset($recipientUserDetailsJsonDecode['personnr']) && $recipientUserDetailsJsonDecode['personnr'] != '' ? trim($recipientUserDetailsJsonDecode['personnr']) : '');
                            }
                            $peopleFields['mobile'] = (isset($recipientUserDetailsJsonDecode['mobile']) && $recipientUserDetailsJsonDecode['mobile'] != '' ? trim($recipientUserDetailsJsonDecode['mobile']) : '');
                            $peopleFields['address'] = (isset($recipientUserDetailsJsonDecode['address']) && $recipientUserDetailsJsonDecode['address'] != '' ? trim($recipientUserDetailsJsonDecode['address']) : '');
                            $peopleFields['city'] = (isset($recipientUserDetailsJsonDecode['city']) && $recipientUserDetailsJsonDecode['city'] != '' ? trim($recipientUserDetailsJsonDecode['city']) : '');
                            $peopleFields['zipcode'] = (isset($recipientUserDetailsJsonDecode['zipcode']) && $recipientUserDetailsJsonDecode['zipcode'] != '' ? trim($recipientUserDetailsJsonDecode['zipcode']) : (isset($recipientUserDetailsJsonDecode['zip']) && $recipientUserDetailsJsonDecode['zip'] != '' ? trim($recipientUserDetailsJsonDecode['zip']) : ''));
                            //recipient information in peopleFields ending

                            //people information of new fields starting
                            if(isset($recipientUserDetailsJsonDecode['extra_fields']) && !empty($recipientUserDetailsJsonDecode['extra_fields'])) {
                                $recipientFieldsWithoutValue = (isset($recipientUserDetailsJsonDecode['recipientfields']) && !empty($recipientUserDetailsJsonDecode['recipientfields']) ? json_decode($recipientUserDetailsJsonDecode['recipientfields'], true) : []);

                                $extraFields = (isset($recipientUserDetailsJsonDecode['extra_fields']) && !empty($recipientUserDetailsJsonDecode['extra_fields']) ? json_decode($recipientUserDetailsJsonDecode['extra_fields'], true) : []);
                                
                                if($extraFields) {
                                    $intersect = array_uintersect($extraFields, $recipientFieldsWithoutValue, function($val1, $val2) {
                                        return strcmp($val1['fieldName'], $val2['fieldName']);
                                    });
                                    $intersect = array_values($intersect);
                                } else {
                                    $intersect = [];
                                }

                                if(!empty($intersect)) {
                                    foreach($intersect as $extraFldKey => $extraFldValue) {
                                        $peopleFields[$extraFldValue['fieldName']] = $extraFldValue['fieldValue'];
                                    }
                                }
                            }
                            //people information of new fields ending

                            //organization information of recipient starting
                            if(isset($recipientUserDetailsJsonDecode['organization_fields'])) {
                                $orgFields = json_decode($recipientUserDetailsJsonDecode['organization_fields'], true);
                                foreach($orgFields as $orgFldsKey => $orgFldsValue) {
                                    $orgFldsValue['orgFieldName'] = str_replace('name', 'organization_name', $orgFldsValue['orgFieldName']);
                                    $orgFldsValue['orgFieldName'] = str_replace('org_no', 'organization_no', $orgFldsValue['orgFieldName']);
                                    $orgFldsValue['orgFieldName'] = str_replace('phone', 'organization_phone', $orgFldsValue['orgFieldName']);
                                    $orgFldsValue['orgFieldName'] = str_replace('address', 'organization_address', $orgFldsValue['orgFieldName']);
                                    $orgFldsValue['orgFieldName'] = str_replace('city', 'organization_city', $orgFldsValue['orgFieldName']);
                                    $orgFldsValue['orgFieldName'] = str_replace('zipcode', 'organization_zipcode', $orgFldsValue['orgFieldName']);
                                    $organizationFields[$orgFldsValue['orgFieldName']] = $orgFldsValue['orgFieldValue'];
                                }
                            } else {
                                if(isset($recipientUserDetailsJsonDecode['org_name']) && $recipientUserDetailsJsonDecode['org_name'] != '') {
                                    $organizationFields['organization_name'] = $recipientUserDetailsJsonDecode['org_name'];
                                }
                                if(isset($recipientUserDetailsJsonDecode['org_reg_no']) && $recipientUserDetailsJsonDecode['org_reg_no'] != '') {
                                    $organizationFields['organization_no'] = $recipientUserDetailsJsonDecode['org_reg_no'];
                                }
                                if(isset($recipientUserDetailsJsonDecode['org_mobile']) && $recipientUserDetailsJsonDecode['org_mobile'] != '') {
                                    $organizationFields['organization_phone'] = $recipientUserDetailsJsonDecode['org_mobile'];
                                }
                                if(isset($recipientUserDetailsJsonDecode['org_address']) && $recipientUserDetailsJsonDecode['org_address'] != '') {
                                    $organizationFields['organization_address'] = $recipientUserDetailsJsonDecode['org_address'];
                                }
                                if(isset($recipientUserDetailsJsonDecode['org_city']) && $recipientUserDetailsJsonDecode['org_city'] != '') {
                                    $organizationFields['organization_city'] = $recipientUserDetailsJsonDecode['org_city'];
                                }
                                if(isset($recipientUserDetailsJsonDecode['org_zip']) && $recipientUserDetailsJsonDecode['org_zip'] != '') {
                                    $organizationFields['organization_zipcode'] = $recipientUserDetailsJsonDecode['org_zip'];
                                }
                            }
                            //organization information of recipient ending

                            //organization information of new fields starting
                            if(isset($recipientUserDetailsJsonDecode['org_extra_fields']) && !empty($recipientUserDetailsJsonDecode['org_extra_fields'])) {
                                $organizationFieldsWithoutValue = (isset($recipientUserDetailsJsonDecode['organizationfields']) && !empty($recipientUserDetailsJsonDecode['organizationfields']) ? json_decode($recipientUserDetailsJsonDecode['organizationfields'], true) : []);

                                $orgExtraFields = (isset($recipientUserDetailsJsonDecode['org_extra_fields']) && !empty($recipientUserDetailsJsonDecode['org_extra_fields']) ? json_decode($recipientUserDetailsJsonDecode['org_extra_fields'], true) : []);
                                if($orgExtraFields) {
                                    $intersectOrg = array_uintersect($orgExtraFields, $organizationFieldsWithoutValue, function($val1, $val2) {
                                        return strcmp($val1['fieldName'], $val2['fieldName']);
                                    });
                                    $intersectOrg = array_values($intersectOrg);
                                } else {
                                    $intersectOrg = [];
                                }

                                if(!empty($intersectOrg)) {
                                    foreach($intersectOrg as $orgExtraFldKey => $orgExtraFldValue) {
                                        $organizationFields[$orgExtraFldValue['fieldName']] = $orgExtraFldValue['fieldValue'];
                                    }
                                }
                            }
                            //organization information of new fields ending

                            //organization information of fields which are placed at document starting
                            $content = Tcrypt::decrypter($sentIdsValue['content']);
                            if($content != '') {
                                $html = new \Htmldom($content);
                                foreach($html->find('.text') as $findKey => $findValue) {
                                    //codition for regular contract starting
                                    if(isset($recipientUserDetailsJsonDecode['id']) && $recipientUserDetailsJsonDecode['id'] == $findValue->recipientselectedid) {
                                        if(strpos($findValue->getAttribute('class'), 'peopleNewField') !== false) {
                                            if($findValue->find('h4', 0)) {
                                                $peopleFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                            } else {
                                                if($findValue->find('p', 0)) {
                                                    $peopleFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                                }
                                            }
                                        } if(strpos($findValue->getAttribute('class'), 'organizationNewField') !== false) {
                                            if($findValue->find('h4', 0)) {
                                                $organizationFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                            } else {
                                                if($findValue->find('p', 0)) {
                                                    $organizationFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                                }
                                            }
                                        }
                                        //codition for regular contract ending
                                    } else {
                                        //codition for online contract starting
                                        //if($userRole == $findValue->parent()->parent()->whowillfill) {
                                        if($userRole == $findValue->recipientselected) {
                                            if(strpos($findValue->getAttribute('class'), 'peopleNewField') !== false) {
                                                if($findValue->find('h4', 0)) {
                                                    $peopleFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                                } else {
                                                    //right now paragraph tag is showing and will be replaced by h4 near future starting
                                                    if($findValue->find('p', 0)) {
                                                        $peopleFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                                    }
                                                    //right now paragraph tag is showing and will be replaced by h4 near future ending
                                                }
                                            } if(strpos($findValue->getAttribute('class'), 'organizationNewField') !== false) {
                                                if($findValue->find('h4', 0)) {
                                                    $organizationFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                                } else {
                                                    //right now paragraph tag is showing and will be replaced by h4 near future starting
                                                    if($findValue->find('p', 0)) {
                                                        $organizationFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                                    }
                                                    //right now paragraph tag is showing and will be replaced by h4 near future ending
                                                }
                                            }
                                        }
                                        //codition for online contract ending
                                    }
                                }   //foreach loop condition ends here

                                $dynamicElements = [];
                                foreach($html->find('.template_container') as $temConKey => $temConValue) {
                                    $arrayPush = [];
                                    foreach($temConValue->find('.formElement') as $findKey => $findValue) {
                                        
                                        $elementStyle = $findValue->getAttribute('style');
                                        $arrCSS = $utility->parse_css($elementStyle);
                                        $parentDiv = $findValue->parent()->parent();

                                        //Fixing Position when field is inside the borderbox or textbox START
                                        $addtop = 0;
                                        $addleft = 0;
                                        if(strpos($parentDiv->getAttribute('class'), 'dynamic_border') !== false && strpos($parentDiv->getAttribute('class'), 'insert_box_div') === false) {
                                            $parentCSS = $utility->parse_css($parentDiv->getAttribute('style'));
                                            $addtop = (isset($parentCSS['top']) && $parentCSS['top'] != '' ? round($parentCSS['top']) : 0);
                                            $addleft = (isset($parentCSS['left']) && $parentCSS['left'] != '' ? round($parentCSS['left']) : 0);
                                        } elseif(strpos($parentDiv->getAttribute('class'), 'insert_box_div') !== false && strpos($parentDiv->getAttribute('class'), 'dynamic_border') === false) {
                                            $parentCSS = $utility->parse_css($parentDiv->getAttribute('style'));
                                            $addtop = (isset($parentCSS['top']) && $parentCSS['top'] != '' ? round($parentCSS['top']) : 0);
                                            $addleft = (isset($parentCSS['left']) && $parentCSS['left'] != '' ? round($parentCSS['left']) : 0);
                                        } elseif(strpos($parentDiv->getAttribute('class'), 'insert_box_div') !== false  && strpos($parentDiv->getAttribute('class'), 'dynamic_border') !== false) {
                                            $parentCSS = $utility->parse_css($parentDiv->getAttribute('style'));
                                            $addtop = (isset($parentCSS['top']) && $parentCSS['top'] != '' ? round($parentCSS['top']) : 0);
                                            $addleft = (isset($parentCSS['left']) && $parentCSS['left'] != '' ? round($parentCSS['left']) : 0);
                                        }
                                        //Fixing Position when field is inside the borderbox or textbox END

                                        $topPosition = (isset($arrCSS['top']) && $arrCSS['top'] != '' ? round($arrCSS['top'])+$addtop : 0);
                                        $leftPosition = (isset($arrCSS['left']) && $arrCSS['left'] != '' ? round($arrCSS['left'])+$addleft : 0);
                                        array_push($arrayPush, ['top' => $topPosition, 'left' => $leftPosition, 'dynamic_id' => $findValue->dynamic_id]);

                                    }   //formElement loop ends here
                                    if(!empty($arrayPush)) {
                                        sort($arrayPush);
                                        array_push($dynamicElements, $arrayPush);
                                    }
                                }   //template_container loop ends here

                                foreach($dynamicElements as $eachPageKey => $eachPageValue) {
                                    foreach($eachPageValue as $eachElementKey => $eachElementValue) {
                                        $eachDynamic_id = $eachElementValue['dynamic_id'];
                                        $mainDiv = $html->find('[dynamic_id="'.$eachElementValue['dynamic_id'].'"]', 0);
                                        if(!$mainDiv->find('.text', 0)) {
                                            continue;
                                        }
                                        $findValue = $mainDiv->find('.text', 0);
                                        //getting document text fields
                                        if(strpos($findValue->getAttribute('class'), 'documentField') !== false) {
                                            if($findValue->selectedtype != '0') {
                                                $apiAttributeOrSelectedType = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->selectedtype);
                                                if($parent_id == 10719) {
                                                    $apiAttributeOrSelectedType = str_replace(' ', '_', $apiAttributeOrSelectedType);
                                                }
                                                if($findValue->find('h4', 0) && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                                    $documentFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                                } elseif($findValue->find('p', 0) && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                                    $documentFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('p', 0)->plaintext)));                                                
                                                } elseif(strpos($mainDiv->getAttribute('class'), 'relationDisable') === false && (!isset($documentFields[$findValue->selectedtype]))) {
                                                    //comments below line of code and add this condition with elseif and === false 
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrSelectedType] = '';
                                                }/* elseif(!isset($documentFields[$findValue->selectedtype])) {
                                                    $documentFields[$apiAttributeOrSelectedType] = '';
                                                }

                                                if(strpos($mainDiv->getAttribute('class'), 'relationDisable') !== false && (!isset($documentFields[$findValue->selectedtype]))) {
                                                    $documentFields[$apiAttributeOrSelectedType] = '';
                                                } */
                                            }   //not equal condition ends here
                                        }   //getting document text fields ends here
                                        //getting custom text fields
                                        try {
                                            if(strpos($findValue->getAttribute('class'), 'field_box_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'datepickerfields_new') === false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                                $apiAttributeOrSelectedType = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->selectedtype);
                                                if($parent_id == 10719) {
                                                    $apiAttributeOrSelectedType = str_replace(' ', '_', $apiAttributeOrSelectedType);
                                                }
                                                //comment below line on 5 August 2020 for not show the key if value is empty
                                                //$documentFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                                if(isset($findValue->find('h4', 0)->plaintext) && $findValue->find('h4', 0)->plaintext != '') {
                                                    $documentFields[$apiAttributeOrSelectedType] = trim($findValue->find('h4', 0)->plaintext);
                                                }
                                                if(isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '') {
                                                    $documentFields[$apiAttributeOrSelectedType] = trim($findValue->find('p', 0)->plaintext);
                                                }
                                            }
                                        } catch(\Exception $e) {}
                                        //getting datepicker fields

                                        try {
                                            if(strpos($findValue->getAttribute('class'), 'field_box_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'datepickerfields_new') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                                $apiAttributeOrSelectedType = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->selectedtype);
                                                if($parent_id == 10719) {
                                                    $apiAttributeOrSelectedType = str_replace(' ', '_', $apiAttributeOrSelectedType);
                                                }
                                                //$documentFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                                //comment below line on 5 August 2020 for not show the key if value is empty
                                                //$documentFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                                if(isset($findValue->find('h4', 0)->plaintext) && $findValue->find('h4', 0)->plaintext != '') {
                                                    $documentFields[$apiAttributeOrSelectedType] = trim($findValue->find('h4', 0)->plaintext);
                                                }
                                                if(isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '') {
                                                    $documentFields[$apiAttributeOrSelectedType] = trim($findValue->find('p', 0)->plaintext);
                                                }
                                            }
                                        } catch(\Exception $e) {}

                                        //getting document checkbox elements
                                        if(strpos($findValue->getAttribute('class'), 'documentFieldCheckbox') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                            //all values of checkboxes are showing
                                            $apiAttributeOrFieldLabelName = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->fieldlabelname);
                                            if($parent_id == 10719) {
                                                $apiAttributeOrFieldLabelName = str_replace(' ', '_', $apiAttributeOrFieldLabelName);
                                            }
                                            if($findValue->find('.check_icon', 0) && (strpos($findValue->find('.check_icon', 0)->getAttribute('style'), 'visible') !== false || strpos($findValue->getAttribute('class'), 'isChecked') !== false)) {
                                                $documentFields[$apiAttributeOrFieldLabelName] = 'Yes';
                                            } else {
                                                $documentFields[$apiAttributeOrFieldLabelName] = 'No';
                                            }
                                        }   //getting document checkbox elements ends here
                                        //getting custom checkbox elements
                                        if(strpos($findValue->getAttribute('class'), 'check_box_popupcontainer') !== false && strpos($mainDiv->getAttribute('class'), 'chechBoxCustom') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                            $apiAttributeOrFieldLabelName = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->fieldlabelname);
                                            if($findValue->find('.check_icon', 0) && strpos($findValue->find('.check_icon', 0)->getAttribute('style'), 'visible')) {
                                                $documentFields[$apiAttributeOrFieldLabelName] = 'Yes';
                                            } else {
                                                $documentFields[$apiAttributeOrFieldLabelName] = 'No';
                                            }
                                        }

                                        //getting document droplist elements
                                        $jsonDecodeDropDownValues = (isset($findValue->dropdownvalues) && !empty($findValue->dropdownvalues) ? json_decode(html_entity_decode($findValue->dropdownvalues), true) : []);
                                        $jsonDecodeDropDownAlternativeValues = (isset($findValue->dropdownvalues_alternate) && !empty($findValue->dropdownvalues_alternate) ? json_decode(html_entity_decode($findValue->dropdownvalues_alternate), true) : []);
                                        if(strpos($findValue->getAttribute('class'), 'documentFieldDroplist') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                                            if($parent_id == 10719) {
                                                $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                                            }
                                            if($findValue->find('span.texthere', 0)) {
                                                if(!empty($jsonDecodeDropDownValues) && $findValue->dropdownlabel != trim($findValue->find('span.texthere', 0)->plaintext)) {
                                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('span.texthere', 0)->plaintext))));
                                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->plaintext) && $findValue->find('span.texthere', 0)->plaintext != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                                    }
                                                } elseif(array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('span.texthere', 0)->plaintext))));
                                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->plaintext) && $findValue->find('span.texthere', 0)->plaintext != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                                    }
                                                } else {
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : ''));
                                                    if(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    }
                                                }
                                            } else {
                                                if(!empty($jsonDecodeDropDownValues) && $findValue->dropdownlabel != trim($findValue->find('p', 0)->plaintext)) {
                                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('p', 0)->plaintext))));
                                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = $findValue->find('span.texthere', 0)->selected_altvalue;
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    } elseif(isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('p', 0)->plaintext);
                                                    }
                                                } elseif(array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('p', 0)->plaintext))));
                                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    } elseif(isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('p', 0)->plaintext);
                                                    }
                                                } else {
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : ''));
                                                    if(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    }
                                                }
                                            }
                                            /* if($findValue->find('span.texthere', 0)) {
                                                $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                            } elseif($findValue->find('p', 0)) {
                                                $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('p', 0)->plaintext);
                                            } */
                                        }   //getting document droplist elements ends here
                                        //getting custom droplist elements
                                        if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                                            if($parent_id == 10719) {
                                                $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                                            }
                                            if($findValue->find('span.texthere', 0)) {
                                                if(!empty($jsonDecodeDropDownValues) && $findValue->dropdownlabel != trim($findValue->find('span.texthere', 0)->plaintext)) {
                                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('span.texthere', 0)->plaintext))));
                                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->plaintext) && $findValue->find('span.texthere', 0)->plaintext != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                                    }
                                                } elseif(isset($findValue->find('span.texther', 0)->plaintext) && array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('span.texthere', 0)->plaintext))));
                                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->plaintext) && $findValue->find('span.texthere', 0)->plaintext != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                                    }
                                                } else {
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : ''));
                                                    if(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    }
                                                }
                                            } else {
                                                if(!empty($jsonDecodeDropDownValues) && isset($findValue->dropdownlabel) && isset($findValue->find('span.texthere', 0)->plaintext) && $findValue->dropdownlabel != trim($findValue->find('span.texthere', 0)->plaintext)) {
                                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('p', 0)->plaintext))));
                                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    } elseif(isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('p', 0)->plaintext);
                                                    }
                                                } elseif(isset($findValue->find('span.texther', 0)->plaintext) && array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('p', 0)->plaintext))));
                                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    } elseif(isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('p', 0)->plaintext);
                                                    }
                                                } else {
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : ''));
                                                    if(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    }
                                                }
                                            }
                                            /* if($findValue->find('span.texthere', 0)) {
                                                $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                            } elseif($findValue->find('p', 0)) {
                                                $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('p', 0)->plaintext);
                                            } */
                                        }

                                        //document field droplist with multiple radio button
                                        if(strpos($findValue->getAttribute('class'), 'documentFieldDroplist') !== false && strpos($findValue->getAttribute('class'), 'dropdown_radioList_api') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                                            if($parent_id == 10719) {
                                                $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                                            }
                                            if($findValue->find('.fa-dot-circle-o', 0)) {
                                                //$documentFields[$apiAttributeOrDropDownLabel] = $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext;
                                                $getArrayKey = array_search(trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext), $jsonDecodeDropDownValues);
                                                //comment below line on 5 August 2020 for not show the key if value is empty
                                                //$documentFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? $jsonDecodeDropDownAlternativeValues[$getArrayKey] : $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext);
                                                if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                                    $documentFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                                } elseif(isset($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext) && $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext != '') {
                                                    $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext);
                                                }
                                            } else {
                                                //comment below line on 5 August 2020 for not show the key if value is empty
                                                //$documentFields[$apiAttributeOrDropDownLabel] = '';
                                            }
                                        }
                                        //document field droplist with multiple radio button of custom and me
                                        if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'dropdown_radioList_api') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                                            if($parent_id == 10719) {
                                                $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                                            }
                                            if($findValue->find('.fa-dot-circle-o', 0)) {
                                                //$documentFields[$apiAttributeOrDropDownLabel] = $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext;
                                                $getArrayKey = array_search(trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext), $jsonDecodeDropDownValues);
                                                //comment below line on 5 August 2020 for not show the key if value is empty
                                                //$documentFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? $jsonDecodeDropDownAlternativeValues[$getArrayKey] : $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext);
                                                if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                                    $documentFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                                } elseif(isset($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext) && $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext != '') {
                                                    $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext);
                                                }
                                            } else {
                                                //comment below line on 5 August 2020 for not show the key if value is empty
                                                //$documentFields[$apiAttributeOrDropDownLabel] = '';
                                            }
                                        }
                                        //document field droplist with multiple checkboxes
                                        if(strpos($findValue->getAttribute('class'), 'documentFieldDroplist') !== false && strpos($findValue->getAttribute('class'), 'multi_choice_option') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                                            if($parent_id == 10719) {
                                                $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                                            }
                                            if($findValue->find('.fa-check', 0)) {
                                                $faCheckValues = [];
                                                foreach($findValue->find('.ionIconsCheck') as $checkBoxKey => $checkBoxValue) {
                                                    if(strpos($checkBoxValue->getAttribute('class'), 'fa-check') !== false) {
                                                        $faCheckValues[] = (isset($jsonDecodeDropDownAlternativeValues[$checkBoxKey]) && $jsonDecodeDropDownAlternativeValues[$checkBoxKey] != '' ? $jsonDecodeDropDownAlternativeValues[$checkBoxKey] : $checkBoxValue->parent()->parent()->find('label', 0)->innertext);
                                                    }
                                                }
                                                if(!empty($faCheckValues)) {
                                                    $totalFaCheckValues = count($faCheckValues);
                                                    if($totalFaCheckValues > 1) {
                                                        $faCheckValues = implode(', ' , array_slice($faCheckValues,0,$totalFaCheckValues-1)) . ' and ' . end($faCheckValues);
                                                    } else {
                                                        $faCheckValues = implode(', ' , $faCheckValues);
                                                    }
                                                    $documentFields[$apiAttributeOrDropDownLabel] = $faCheckValues;
                                                }
                                                //$documentFields[$apiAttributeOrDropDownLabel] = $findValue->find('.fa-check', 0)->parent()->parent()->find('label', 0)->innertext;
                                            } else {
                                                //comment below line on 5 August 2020 for not show the key if value is empty
                                                //$documentFields[$apiAttributeOrDropDownLabel] = '';
                                            }
                                        }
                                        //document field droplist with multiple checkboxes of custom and me
                                        if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'multi_choice_option') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                                            if($parent_id == 10719) {
                                                $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                                            }
                                            if($findValue->find('.fa-check', 0)) {
                                                $faCheckValues = [];
                                                foreach($findValue->find('.ionIconsCheck') as $checkBoxKey => $checkBoxValue) {
                                                    if(strpos($checkBoxValue->getAttribute('class'), 'fa-check') !== false) {
                                                        $faCheckValues[] = (isset($jsonDecodeDropDownAlternativeValues[$checkBoxKey]) && $jsonDecodeDropDownAlternativeValues[$checkBoxKey] != '' ? $jsonDecodeDropDownAlternativeValues[$checkBoxKey] : $checkBoxValue->parent()->parent()->find('label', 0)->innertext);
                                                    }
                                                }
                                                if(!empty($faCheckValues)) {
                                                    $totalFaCheckValues = count($faCheckValues);
                                                    if($totalFaCheckValues > 1) {
                                                        $faCheckValues = implode(', ' , array_slice($faCheckValues,0,$totalFaCheckValues-1)) . ' and ' . end($faCheckValues);
                                                    } else {
                                                        $faCheckValues = implode(', ' , $faCheckValues);
                                                    }
                                                    $documentFields[$apiAttributeOrDropDownLabel] = $faCheckValues;
                                                }
                                            } else {
                                                //comment below line on 5 August 2020 for not show the key if value is empty
                                                //$documentFields[$apiAttributeOrDropDownLabel] = '';
                                            }
                                        } //selectcolor_popupcontainer condition ends here
                                    }   //second foreach loop ends here
                                }   //first foreach loop ends here

                                //document tags names showing and its loop starting
                                foreach($html->find('.dynamicTag') as $findTagKey => $findTagValue) {
                                    if(strpos($findTagValue->getAttribute('class'), 'documenttagName') !== false) {
                                        $apiAttributeOrTagName = (isset($findTagValue->apitagattribute) && $findTagValue->apitagattribute != '' ? $findTagValue->apitagattribute : $findTagValue->tagname);
                                        if($parent_id == 10719) {
                                            $apiAttributeOrTagName = str_replace(' ', '_', $apiAttributeOrTagName);
                                        }
                                        $jsonDecodeDropDownValues = (isset($findTagValue->dropdownvalues) && !empty($findTagValue->dropdownvalues) ? json_decode(html_entity_decode($findTagValue->dropdownvalues), true) : []);
                                        $jsonDecodeDropDownAlternativeValues = (isset($findTagValue->dropdownvalues_alternate) && !empty($findTagValue->dropdownvalues_alternate) ? json_decode(html_entity_decode($findTagValue->dropdownvalues_alternate), true) : []);
                
                                        if(strpos($findTagValue->getAttribute('class'), 'documentdroplisttagname') !== false) {
                                            if(isset($findTagValue->dropdownapi) && $findTagValue->dropdownapi != '') {
                                                $documentFields[$apiAttributeOrTagName] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                                            } else {
                                                $tagValuesArray = [];
                                                foreach($jsonDecodeDropDownValues as $dropDownKey => $dropDownValues) {
                                                    if(isset($findTagValue->plaintext) && !empty($findTagValue->plaintext) && isset($dropDownValues) && !empty($dropDownValues)) {
                                                        if(strpos($findTagValue->plaintext, $dropDownValues) > -1) {
                                                            $getArrayKey = array_search(trim($dropDownValues), $jsonDecodeDropDownValues);
                                                            $tagValuesArray[] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && !empty($jsonDecodeDropDownAlternativeValues[$getArrayKey]) ? $jsonDecodeDropDownAlternativeValues[$getArrayKey] : $utility->convertDateMonthNameToInteger($languageId, trim($dropDownValues)));
                                                        } else {
                                                            $documentFields[$apiAttributeOrTagName] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                                                        }
                                                    }
                                                }
                                                $totalTagValuesArray = count($tagValuesArray);
                                                if($totalTagValuesArray > 1) {
                                                    $tagValuesArray = implode(', ' , array_slice($tagValuesArray,0,$totalTagValuesArray-1)) . ' and ' . end($tagValuesArray);
                                                } else {
                                                    $tagValuesArray = implode(', ' , $tagValuesArray);
                                                }
                                                $documentFields[$apiAttributeOrTagName] = $tagValuesArray;
                                            }
                                        } else {
                                            $documentFields[$apiAttributeOrTagName] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                                        }
                                    }
                                }
                                //document tags names showing and its loop ending

                                if($html->find('.billecta_GetBankInfo_h5')) {
                                    foreach($html->find('.billecta_GetBankInfo_h5') as $findBillectaKey => $findBillectaValue) {
                                        if(isset($findBillectaValue->billecta_row)) {
                                            if($html->find('.billecta_row_'.$findBillectaValue->billecta_row)) {
                                                if($findBillectaValue->innertext != '&nbsp;' && $findBillectaValue->innertext != '<br>') {
                                                    $documentFields[$findBillectaValue->innertext] = str_replace(',', ' ', $html->find('.billecta_row_'.$findBillectaValue->billecta_row, 0)->innertext);
                                                }
                                            }
                                        }
                                    }
                                }
                            }   //not empty condition on content ends here
                            //organization information of fields which are placed at document ending

                            //recipient information in details starting
                            if(isset($recipientUserDetailsJsonDecode['details_fields'])) {
                                $detailsFields = json_decode($recipientUserDetailsJsonDecode['details_fields'], true);
                                foreach($detailsFields as $orgFldsKey => $orgFldsValue) {
                                    $details[$orgFldsValue['detailsFieldName']] = $orgFldsValue['detailsFieldValue'];
                                }
                            } else {
                                $details['recipient_role'] = (isset($recipientUserDetailsJsonDecode['recrolename']) && $recipientUserDetailsJsonDecode['recrolename'] != '' ? $recipientUserDetailsJsonDecode['recrolename'] : (isset($recipientUserDetailsJsonDecode['partyname']) && $recipientUserDetailsJsonDecode['partyname'] != '' ? $recipientUserDetailsJsonDecode['partyname'] : ''));
                                if($contractDataValue['role'] == 2) {
                                    $contractDataValue['authentication_method'] = 8;
                                }
                                $details['authentication'] = $utility->authenticationMethodName($contractDataValue['authentication_method']);
                                if(isset($contractDataValue['invitation_type']) && $contractDataValue['invitation_type'] != '') {
                                    $details['invitation_type'] = $utility->invitationTypeName($contractDataValue['invitation_type']);
                                }
                                if($contractDataValue['invitation_order'] != 0) {
                                    $details['invitation_order'] = $contractDataValue['invitation_order'];
                                }
                                if(isset($contractDataValue['offer_confirmation']) && $contractDataValue['offer_confirmation'] != '') {
                                    $details['confirmation'] = $utility->offerConfirmationName($contractDataValue['offer_confirmation']);
                                }
                                $details['id_attachment'] = $utility->idAttachmentName($contractDataValue['id_attachments']);
                            }

                            $details['request_attachment'] = ($contractDataValue['req_attached'] != '' ? 'yes' : 'no');
                            if($contractDataValue['document_read_date'] != '' && $contractDataValue['document_read_date'] != '0000-00-00 00:00:00') {
                                //if($_SERVER['HTTP_HOST'] == 'acceptance.simplesign.io') {
                                    $details['last_viewing_date'] = ($contractDataValue['document_read_date'] != '' ? $utility->changeTimeZone($contractDataValue['document_read_date'], 'Y-m-d H:i:s', 'UTC', $userTimeZone) : '');
                                /* } else {
                                    $details['last_viewing_date'] = ($contractDataValue['document_read_date'] != '' ? $utility->changeTimeZone($contractDataValue['document_read_date'], 'Y-m-d H:i:s', 'UTC', $userTimeZone) : '');
                                } */
                            }
                            //$details['signed_date'] = ($contractDataValue['signed_date'] != '' && $contractDataValue['signed_date'] != '0000-00-00 00:00:00' ? $utility->changeTimeZone($contractDataValue['signed_date'], 'Y-m-d H:i:s', 'UTC', $userTimeZone) : '');
                            $details['signed_date'] = '';
                            if($contractDataValue['signed_date'] != '' && $contractDataValue['signed_date'] != '0000-00-00 00:00:00' && $contractDataValue['offer_status'] == 4 && $contractDataValue['role'] == 1) {
                                //if($_SERVER['HTTP_HOST'] == 'acceptance.simplesign.io') {
                                    $details['signed_date'] = $utility->changeTimeZone($contractDataValue['signed_date'], 'Y-m-d H:i:s', 'UTC', $userTimeZone);
                                /* } else {
                                    $details['signed_date'] = $contractDataValue['signed_date'];
                                } */
                            } elseif($contractDataValue['signed_date'] != '' && $contractDataValue['signed_date'] != '0000-00-00 00:00:00' && $contractDataValue['offer_status'] == 3 && $contractDataValue['role'] == 2) {
                                //if($_SERVER['HTTP_HOST'] == 'acceptance.simplesign.io') {
                                    $details['signed_date'] = $utility->changeTimeZone($contractDataValue['signed_date'], 'Y-m-d H:i:s', 'UTC', $userTimeZone);
                                /* } else {
                                    $details['signed_date'] = $contractDataValue['signed_date'];
                                } */
                            }
                            if($contractDataValue['offer_status'] == 4 && $contractDataValue['forward_status'] == 1 && $contractDataValue['forward_signed'] == 1) {
                                $details['status'] = 'Forwarded to sign';
                            } elseif($contractDataValue['offer_status'] < 4 && $contractDataValue['forward_status'] == 1 && $contractDataValue['forward_signed'] == 0) {
                                $details['status'] = 'Invited to view';
                            } else {
                                $details['status'] = (isset($contractDataValue['offer_status']) != '' ? $utility->offerStatusName($contractDataValue['offer_status']) : '');
                            }
                            if($contractDataValue['forward_user_details'] != '') {
                                $forwardUserDetails = Tcrypt::decrypter($contractDataValue['forward_user_details']);
                                if($forwardUserDetails != '') {
                                    $forwardUserDetailsJsonDecode = json_decode($forwardUserDetails, true);
                                    $forwaredFullName = (isset($forwardUserDetailsJsonDecode['full_name']) && $forwardUserDetailsJsonDecode['full_name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($forwardUserDetailsJsonDecode['full_name'])) : '');
                                    $inviteAndForwardDetails['first_name'] = (isset($forwaredFullName[0]) && $forwaredFullName[0] != '' ? trim($forwaredFullName[0]) : '');
                                    $inviteAndForwardDetails['last_name'] = (isset($forwaredFullName[1]) && $forwaredFullName[1] != '' ? trim($forwaredFullName[1]) : '');
                                    //$inviteAndForwardDetails['email'] = (isset($forwardUserDetailsJsonDecode['email']) && $forwardUserDetailsJsonDecode['email'] != '' ? trim($forwardUserDetailsJsonDecode['email']) : '');
                                    //$inviteAndForwardDetails['mobile'] = (isset($forwardUserDetailsJsonDecode['mobile']) && $forwardUserDetailsJsonDecode['mobile'] != '' ? trim($forwardUserDetailsJsonDecode['mobile']) : '');

                                    /* test condition as per zain suggestion when signing role is forwarded */
                                    /* Setting keys in the object for signature role sender and reciever */
                                    if($contractDataValue['offer_status'] == 4 && $contractDataValue['forward_status'] == 1 && $contractDataValue['forward_signed'] == 1) {
                                        $details['forwarded_signing_role_to'] = $inviteAndForwardDetails['first_name'].' '.$inviteAndForwardDetails['last_name'];
                                    } elseif((($contractDataValue['offer_status'] <= 4 && $contractDataValue['role'] == 1) || ($contractDataValue['offer_status'] == 3 && $contractDataValue['role'] == 2)) && $contractDataValue['forward_status'] == 2 && isset($recipientUserDetailsJsonDecode['forward_to_sign']) && $recipientUserDetailsJsonDecode['forward_to_sign'] == 1) {
                                        $details['invited_to_sign_by'] = $inviteAndForwardDetails['first_name'].' '.$inviteAndForwardDetails['last_name'];
                                    }
                                    //echo ($contractDataValue['forward_status']. ' ' .$recipientUserDetailsJsonDecode['email'].' '.$contractDataValue['forward_signed'].' '.(isset($forwardUserDetailsJsonDecode['invited_to_view']) ? $forwardUserDetailsJsonDecode['invited_to_view'] : "") );echo'<br>';
                                    /* test condition as per zain suggestion when only invited to view */
                                    /* Setting keys in the object for sender and reciever of invitation to view only*/
                                    if($contractDataValue['forward_status'] == 1 && $contractDataValue['forward_signed'] == 0) {
                                        $details['invited_to_view_only'] = $inviteAndForwardDetails['first_name'].' '.$inviteAndForwardDetails['last_name'];
                                    } elseif($contractDataValue['forward_status'] == 2 && isset($recipientUserDetailsJsonDecode['invited_to_view']) && $recipientUserDetailsJsonDecode['invited_to_view'] == 1) {
                                        $details['invited_to_view_only_by'] = $inviteAndForwardDetails['first_name'].' '.$inviteAndForwardDetails['last_name'];
                                    }
                                }
                            }
                            //$details['status'] = (isset($contractDataValue['offer_status']) != '' ? $utility->offerStatusName($contractDataValue['offer_status']) : '');
                            //this is for rejected to show in sender status
                            if($contractDataValue['offer_status'] == 5) {
                                $documentDetails['status'] = $utility->offerStatusName(5);
                            } if($contractDataValue['offer_status'] == 6) {
                                $documentDetails['status'] = $utility->offerStatusName(6);
                            }
                            //recipient information in details ending

                            if(!empty($organizationFields)) {
                                $eachArray = ['people_fields' => $peopleFields, 'organization_fields' => $organizationFields, 'details' => $details];
                            } else {
                                $eachArray = ['people_fields' => $peopleFields, 'details' => $details];
                            }
                            array_push($peoples, $eachArray);
                        }   //getting recipient data ending
                        elseif($contractDataValue['offer_sent_id'] == $eachSentId && $contractDataValue['is_sender'] == 1) {
                            $documentDetails['template_name'] = (isset($sentIdsValue['visible_name']) && $sentIdsValue['visible_name'] != '' ? trim(Tcrypt::decrypter($sentIdsValue['visible_name'])) : trim(Tcrypt::decrypter($sentIdsValue['name'])));
                            $documentDetails['document_id'] = $sentIdsValue['id'];
                            $documentDetails['template_id'] = $sentIdsValue['offer_id'];
                            $documentDetails['language'] = (isset($sentIdsValue['language_id']) && $sentIdsValue['language_id'] != '' ? $utility->languageName($sentIdsValue['language_id']) : 'English');
                            //if($_SERVER['HTTP_HOST'] == 'acceptance.simplesign.io') {
                                $documentDetails['sent_date'] = (isset($sentIdsValue['created_date']) && $sentIdsValue['created_date'] != '' && $sentIdsValue['created_date'] != '0000-00-00 00:00:00' ? $utility->changeTimeZone(trim($sentIdsValue['created_date']), 'Y-m-d H:i:s', 'UTC', $userTimeZone) : '');
                                $documentDetails['signed_date'] = (isset($sentIdsValue['signed_date']) && $sentIdsValue['signed_date'] != '' && $sentIdsValue['signed_date'] != '0000-00-00 00:00:00' ? $utility->changeTimeZone(trim($sentIdsValue['signed_date']), 'Y-m-d H:i:s', 'UTC', $userTimeZone) : '');
                                $documentDetails['due_date'] = (isset($sentIdsValue['due_date']) && $sentIdsValue['due_date'] != '' && $sentIdsValue['due_date'] != '0000-00-00 00:00:00' ? $utility->changeTimeZone(trim(date('Y-m-d', strtotime($sentIdsValue['due_date']))), 'Y-m-d', 'UTC', $userTimeZone) : '');
                            /* } else {
                                $documentDetails['sent_date'] = (isset($sentIdsValue['created_date']) && $sentIdsValue['created_date'] != '' && $sentIdsValue['created_date'] != '0000-00-00 00:00:00' ? $utility->changeTimeZone(trim($sentIdsValue['created_date']), 'Y-m-d H:i:s', 'UTC', $userTimeZone) : '');
                                $documentDetails['signed_date'] = (isset($sentIdsValue['signed_date']) && $sentIdsValue['signed_date'] != '' && $sentIdsValue['signed_date'] != '0000-00-00 00:00:00' ? $utility->changeTimeZone(trim($sentIdsValue['signed_date']), 'Y-m-d H:i:s', 'UTC', $userTimeZone) : '');
                                $documentDetails['due_date'] = (isset($sentIdsValue['due_date']) && $sentIdsValue['due_date'] != '' && $sentIdsValue['due_date'] != '0000-00-00 00:00:00' ? trim(date('Y-m-d', strtotime($sentIdsValue['due_date']))) : '');
                            } */
                            $documentDetails['status'] = (isset($sentIdsValue['offer_status']) ? $utility->offerStatusName($sentIdsValue['offer_status']) : '');
                            
                            //$getAddOnObjectData = settings::where('user_id', $parent_id)->select('new_addon_obj')->first();
                            $markCompleted = Offersent_data::where('sent_id', $eachSentId)->pluck('mark_completed');
                            $multiCaseManagement = Offersent_data::where('sent_id', $eachSentId)->pluck('multi_case_management');
                            $contractTypeId = Offersent_data::where('sent_id', $eachSentId)->pluck('contract_type_id');
                            $markCompletedDate = Offersent_data::where('sent_id', $eachSentId)->pluck('mark_completed_date');
                            $costmargin = "";
                            /* Adding gross margin and total cost in Api response */
                            $costmargin = Offersent_data::where('sent_id', $eachSentId)->whereNotNull('document_cost')->whereNotNull('document_margin')->whereNotNull('document_price')->select('document_price', 'document_cost', 'document_margin')->first();
                            if(!empty($getAddOnObjectData['new_addon_obj'])) {
                                $newAddonObjJesonDecode = json_decode($getAddOnObjectData['new_addon_obj'], true);
                                if(isset($newAddonObjJesonDecode['mark_as_completed_addon']) && $newAddonObjJesonDecode['mark_as_completed_addon'] == 1) {
                                    if((isset($data['task_name']) && $data['task_name'] != '') || (isset($data['task_status']) && $data['task_status'] != '')) {
                                        if(isset($newAddonObjJesonDecode['mark_as_completed_addon_setting']) && !empty($newAddonObjJesonDecode['mark_as_completed_addon_setting'])) {
                                            $markAsCompletedAddonSettingJsonDecode = json_decode($newAddonObjJesonDecode['mark_as_completed_addon_setting'], true);
                                            $multiCaseManagementJsonDecode = (isset($multiCaseManagement) && !empty($multiCaseManagement) ? json_decode($multiCaseManagement, true) : []);
                                            if(isset($markAsCompletedAddonSettingJsonDecode['mark_tasks_array']) && !empty($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'])) {
                                                $numberIncrement = 0;
                                                foreach($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'] as $markAsCompletedAddonSettingJsonDecodeKey => $markAsCompletedAddonSettingJsonDecodeValue) {
                                                    $numberIncrement++;
                                                    if(isset($data['task_status']) && $data['task_status'] != '') {
                                                        if(isset($multiCaseManagementJsonDecode[$numberIncrement]) && !empty($multiCaseManagementJsonDecode[$numberIncrement]) && $multiCaseManagementJsonDecode[$numberIncrement]['status_text'] == $data['task_status'] && isset($markAsCompletedAddonSettingJsonDecodeValue['tasknames']) && !empty($markAsCompletedAddonSettingJsonDecodeValue['tasknames']) && $markAsCompletedAddonSettingJsonDecodeValue['tasknames'] == $data['task_name']) {
                                                            if(in_array($contractTypeId, $markAsCompletedAddonSettingJsonDecodeValue['contract_type_selected']) && (in_array($sentIdsValue['offer_status'], $markAsCompletedAddonSettingJsonDecodeValue['marked_addon_status']) || in_array("", $markAsCompletedAddonSettingJsonDecodeValue['marked_addon_status']))) {
                                                                //in_array condtion for offer_status from offer_sent and in_array('') empty for any which we are showing in the case management add status
                                                                $conditionalText = '';
                                                                if(isset($multiCaseManagementJsonDecode[$numberIncrement]) && !empty($multiCaseManagementJsonDecode[$numberIncrement])) {
                                                                    if(isset($multiCaseManagementJsonDecode[$numberIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numberIncrement]['status_text'] == 'done') {
                                                                        $conditionalText = 'Yes';
                                                                    } elseif(isset($multiCaseManagementJsonDecode[$numberIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numberIncrement]['status_text'] == 'in_process') {
                                                                        $conditionalText = 'In process';
                                                                    } elseif(isset($multiCaseManagementJsonDecode[$numberIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numberIncrement]['status_text'] == 'no') {
                                                                        $conditionalText = 'No';
                                                                    }
                                                                    if(isset($multiCaseManagementJsonDecode[$numberIncrement]['task_no']) && isset($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'][$multiCaseManagementJsonDecode[$numberIncrement]['task_no']])) {
                                                                        $documentDetails[$markAsCompletedAddonSettingJsonDecode['mark_tasks_array'][$multiCaseManagementJsonDecode[$numberIncrement]['task_no']]['tasknames']] = $conditionalText;//$multiCaseManagementJsonDecode[$numberIncrement]['status_text'];
                                                                    } else {
                                                                        if(isset($multiCaseManagementJsonDecode[$numberIncrement]['task_no'])) {
                                                                            $documentDetails[$markAsCompletedAddonSettingJsonDecodeValue['tasknames']] = 'No';
                                                                        }
                                                                    }
                                                                } else {
                                                                    $documentDetails[$markAsCompletedAddonSettingJsonDecodeValue['tasknames']] = 'No';
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if(isset($multiCaseManagementJsonDecode[$numberIncrement]) && !empty($multiCaseManagementJsonDecode[$numberIncrement]) && isset($markAsCompletedAddonSettingJsonDecodeValue['tasknames']) && !empty($markAsCompletedAddonSettingJsonDecodeValue['tasknames']) && $markAsCompletedAddonSettingJsonDecodeValue['tasknames'] == $data['task_name']) {
                                                            if(in_array($contractTypeId, $markAsCompletedAddonSettingJsonDecodeValue['contract_type_selected']) && (in_array($sentIdsValue['offer_status'], $markAsCompletedAddonSettingJsonDecodeValue['marked_addon_status']) || in_array("", $markAsCompletedAddonSettingJsonDecodeValue['marked_addon_status']))) {
                                                                //in_array condtion for offer_status from offer_sent and in_array('') empty for any which we are showing in the case management add status
                                                                $conditionalText = '';
                                                                if(isset($multiCaseManagementJsonDecode[$numberIncrement]) && !empty($multiCaseManagementJsonDecode[$numberIncrement])) {
                                                                    if(isset($multiCaseManagementJsonDecode[$numberIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numberIncrement]['status_text'] == 'done') {
                                                                        $conditionalText = 'Yes';
                                                                    } elseif(isset($multiCaseManagementJsonDecode[$numberIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numberIncrement]['status_text'] == 'in_process') {
                                                                        $conditionalText = 'In process';
                                                                    } elseif(isset($multiCaseManagementJsonDecode[$numberIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numberIncrement]['status_text'] == 'no') {
                                                                        $conditionalText = 'No';
                                                                    }
                                                                    if(isset($multiCaseManagementJsonDecode[$numberIncrement]['task_no']) && isset($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'][$multiCaseManagementJsonDecode[$numberIncrement]['task_no']])) {
                                                                        $documentDetails[$markAsCompletedAddonSettingJsonDecode['mark_tasks_array'][$multiCaseManagementJsonDecode[$numberIncrement]['task_no']]['tasknames']] = $conditionalText;//$multiCaseManagementJsonDecode[$numberIncrement]['status_text'];
                                                                    } else {
                                                                        if(isset($multiCaseManagementJsonDecode[$numberIncrement]['task_no'])) {
                                                                            $documentDetails[$markAsCompletedAddonSettingJsonDecodeValue['tasknames']] = 'No';
                                                                        }
                                                                    }
                                                                } else {
                                                                    $documentDetails[$markAsCompletedAddonSettingJsonDecodeValue['tasknames']] = 'No';
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if(isset($newAddonObjJesonDecode['mark_as_completed_addon_setting']) && !empty($newAddonObjJesonDecode['mark_as_completed_addon_setting'])) {
                                            $markAsCompletedAddonSettingJsonDecode = json_decode($newAddonObjJesonDecode['mark_as_completed_addon_setting'], true);
                                            $multiCaseManagementJsonDecode = (isset($multiCaseManagement) && !empty($multiCaseManagement) ? json_decode($multiCaseManagement, true) : []);
                                            if(isset($markAsCompletedAddonSettingJsonDecode['mark_tasks_array']) && !empty($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'])) {
                                                $numbetIncrement = 0;
                                                $flagForCompletedKey = false;
                                                $completeStatus = 'Not completed';
                                                foreach($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'] as $markAsCompletedAddonSettingJsonDecodeKey => $markAsCompletedAddonSettingJsonDecodeValue) {
                                                    if(in_array($contractTypeId, $markAsCompletedAddonSettingJsonDecodeValue['contract_type_selected']) && (in_array($sentIdsValue['offer_status'], $markAsCompletedAddonSettingJsonDecodeValue['marked_addon_status']) || in_array("", $markAsCompletedAddonSettingJsonDecodeValue['marked_addon_status']))) {
                                                        if(isset($data['task_filter']) && $data['task_filter'] != '' && array_search($markAsCompletedAddonSettingJsonDecodeValue['tasknames'], array_column($taskFilterArray, 'task_name')) === false) {
                                                            continue;
                                                        }
                                                        $numbetIncrement++;
                                                        $conditionalText = '';
                                                        if(isset($multiCaseManagementJsonDecode[$numbetIncrement]) && !empty($multiCaseManagementJsonDecode[$numbetIncrement])) {
                                                            if(isset($multiCaseManagementJsonDecode[$numbetIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numbetIncrement]['status_text'] == 'done') {
                                                                $conditionalText = 'Yes';
                                                            } elseif(isset($multiCaseManagementJsonDecode[$numbetIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numbetIncrement]['status_text'] == 'in_process') {
                                                                $conditionalText = 'In process';
                                                            } elseif(isset($multiCaseManagementJsonDecode[$numbetIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numbetIncrement]['status_text'] == 'no') {
                                                                $conditionalText = 'No';
                                                            }
                                                            if(isset($multiCaseManagementJsonDecode[$numbetIncrement]['task_no']) && isset($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'][$multiCaseManagementJsonDecode[$numbetIncrement]['task_no']])) {
                                                                $documentDetails[$markAsCompletedAddonSettingJsonDecode['mark_tasks_array'][$multiCaseManagementJsonDecode[$numbetIncrement]['task_no']]['tasknames']] = $conditionalText;
                                                                $flagForCompletedKey = true;
                                                            } else {
                                                                if(isset($multiCaseManagementJsonDecode[$numbetIncrement]['task_no']) && $multiCaseManagementJsonDecode[$numbetIncrement]['task_no'] != '') {
                                                                    $documentDetails[$markAsCompletedAddonSettingJsonDecodeValue['tasknames']] = 'No';
                                                                    $flagForCompletedKey = true;
                                                                }
                                                            }
                                                        } else {
                                                            if($markCompleted != 1) {
                                                                $documentDetails[$markAsCompletedAddonSettingJsonDecodeValue['tasknames']] = 'No';
                                                            }
                                                            $flagForCompletedKey = true;
                                                        }
                                                        if(isset($multiCaseManagementJsonDecode[$numbetIncrement]) && !empty($multiCaseManagementJsonDecode[$numbetIncrement]) && isset($multiCaseManagementJsonDecode[$numbetIncrement]['status_activity']) && !empty($multiCaseManagementJsonDecode[$numbetIncrement]['status_activity'])) {
                                                            $flagForCompletedKey = true;
                                                            //if(count($multiCaseManagementJsonDecode) == $isCompleted && $markAsCompletedAddonSettingJsonDecodeKey == count($markAsCompletedAddonSettingJsonDecode['mark_tasks_array']) -1) {
                                                            if($markCompleted == 1) {
                                                                //if($_SERVER['HTTP_HOST'] == 'acceptance.simplesign.io') {
                                                                    $completeStatus = $utility->changeTimeZone($markCompletedDate, 'Y-m-d H:i:s', 'UTC', $userTimeZone);
                                                                /* } else {
                                                                    $completeStatus = $utility->changeTimeZone($markCompletedDate, 'Y-m-d H:i:s', 'UTC', $userTimeZone);
                                                                } */
                                                            }
                                                        }   //status_activity
                                                    }
                                                }
                                                //if(!empty($multiCaseManagementJsonDecode)) {
                                                if(!empty($flagForCompletedKey)) {
                                                    $documentDetails['completed'] = $completeStatus;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            $documentDetails['pdf'] = $domain_name.'avtal/downloadpdf/'.$sentIdsValue['id'].'/'.$uniqueId;
                            $documentDetails['document_url'] = $documentLink;

                            if ($costmargin != "") {
                                if ($costmargin['document_cost'] != "NULL") {
                                    $documentDetails['document_cost'] =  $costmargin['document_cost'];
                                }

                                if ($costmargin['document_margin'] != "NULL") {
                                    $documentDetails['document_margin'] =  $costmargin['document_margin'];
                                }

                                if ($costmargin['document_price'] != "NULL") {
                                    $documentDetails['document_price'] =  $costmargin['document_price'];
                                }
                            }
                        }
                    }   //details foreach loop ends here

                    $responseArray[$sentIdsKey]['peoples'] = $peoples;
                    if(!empty($documentFields)) {
                        //showing alphbats order to show document fields data
                        ksort($documentFields);
                        $responseArray[$sentIdsKey]['document_fields'] = $documentFields;
                    }
                    $responseArray[$sentIdsKey]['sender_details'] = $senderDetails;
                    $responseArray[$sentIdsKey]['account_details'] = $accountDetails;

                    //signeddocuments API
                    $templatetabledata = $this->templateTables($sentIdsValue['id']);
                    foreach ($templatetabledata['producttables'] as $tablekey => $tabledata) {
                        $tablename = $tabledata['table_name'];
                        $tablecurrency = $tabledata['table_currency'];
                        $itemcollection = array();
                        foreach ($tabledata['tableitems'] as $itemkey => $itemdata) {
                            $itemdetails = array();
                            $itemdetails['product name'] = $itemdata['item_name'];
                            if ( isset($data['fromoverview']) && $data['fromoverview'] == 1 ) {
                                $itemdetails[$itemdata['item_name'].' (description)'] = ($itemdata['item_description'] != 'NULL' ? $itemdata['item_description'] : '');
                                $itemdetails[$itemdata['item_name'].' (quantity)'] = $itemdata['item_qty'];
                                $itemdetails[$itemdata['item_name'].' (price)'] = $itemdata['item_price'].' '.$tablecurrency;
                                if ($itemdata['item_discount'] != 0) {
                                    $itemdetails[$itemdata['item_name'].' (discount)'] = $itemdata['item_discount'].' %';
                                }
                                $itemdetails[$itemdata['item_name'].' (cost)'] = $itemdata['item_cost'].' '.$tablecurrency;
                                $itemdetails[$itemdata['item_name'].' (margin)'] = $itemdata['item_margin'].' '.$tablecurrency;
                            } else {
                                $itemdetails['description'] = ($itemdata['item_description'] != 'NULL' ? $itemdata['item_description'] : '');
                                $itemdetails['quantity'] = $itemdata['item_qty'];
                                if ($itemdata['item_discount'] != 0) {
                                    $itemdetails['item_discount'] = $itemdata['item_discount'].'%';
                                }
                                $itemdetails['price'] = $itemdata['item_price'].' '.$tablecurrency;
                                $itemdetails['cost'] = $itemdata['item_cost'].' '.$tablecurrency;
                                $itemdetails['margin'] = $itemdata['item_margin'].' '.$tablecurrency;
                            }
                            array_push($itemcollection, $itemdetails);
                            $responseArray[$sentIdsKey][$tablename] = $itemcollection;
                        }
                    }

                    $responseArray[$sentIdsKey]['document_details'] = $documentDetails;
                } //sent foreach loop ends here
                $updatedIndexData = DB::table('document_indexdata')->whereIn('document_id', $sentIdsForIndexdata)->get();
                if(!empty($updatedIndexData)) {
                    foreach($responseArray as $responseArrayKey => $responseArrayValue) { //loop on main array
                        $documentId = $responseArrayValue['document_details']['document_id'];
                        foreach($responseArrayValue['peoples'] as $peoplesKey => $peoplesValue) {
                            $recRole = $peoplesValue['details']['recipient_role'];
                            foreach($updatedIndexData as $updatedIndexDataKey => $updatedIndexDataValue) {
                                if($updatedIndexDataValue->rec_role == $recRole && $updatedIndexDataValue->document_id == $documentId) {
                                    if(in_array($updatedIndexDataValue->object_type, array_keys($peoplesValue))) {
                                        $orginalFields = json_decode($updatedIndexDataValue->old_field, true);
                                        $newFields = json_decode($updatedIndexDataValue->new_field, true);
                                        $fieldName = array_keys($orginalFields)[0]; // getting field name orginal as it can't be changed from UI
                                        $updatedFieldValue = array_values($newFields)[0]; // getting updated values of that particular field
                                        $responseArray[$responseArrayKey]['peoples'][$peoplesKey][$updatedIndexDataValue->object_type][$fieldName] = $updatedFieldValue;
                                    }
                                }
                            }
                        }
                        foreach($responseArrayValue['document_details'] as $documentDetailsKey => $documentDetailsValue) {
                            foreach($updatedIndexData as $updatedIndexDataKey => $updatedIndexDataValue) {
                                if($updatedIndexDataValue->document_id == $documentId && $updatedIndexDataValue->object_type == 'document_details') {
                                    $orginalFields = json_decode($updatedIndexDataValue->old_field, true);
                                    $newFields = json_decode($updatedIndexDataValue->new_field, true);
                                    $fieldName = array_keys($orginalFields)[0]; // getting field name orginal as it can't be changed from UI
                                    $updatedFieldValue = array_values($newFields)[0]; // getting updated values of that particular field
                                    $responseArray[$responseArrayKey]['document_details'][$fieldName] = $updatedFieldValue;
                                }
                            }
                        }
                    }
                }

                $pagination['totalrecords'] = $totalOfferSentData;
                return response()->json(['status' => 'success', 'result' => $responseArray, 'pagination' => $pagination], 200, ['Content-Type' => 'application/json; charset=UTF-8'], JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
            } else {
                return Response::json(['status' => 'error', 'result' => 'No record(s) found']);
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }

    public function anyGetdocumentinfobystatus() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');
        $template_id = 0;
        $offerSentIds = $caseManagementOfferSentIds = [];

        //access_token validation starting
        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
        //access_token validation ending

        //status validation starting
        $checkingStatusForCondition = '';
        if(isset($data['status']) && $data['status'] != '') {
            $status = $data['status'];
            //status 2 for email open
            if($status == 'processing' || $status == 'Processing') {
                $status = 0;
            } elseif($status == 'delivered' || $status == 'Delivered') {
                $status = 1;
            } elseif($status == 'reviewed' || $status == 'Reviewed') {
                $status = 3;
            } elseif($status == 'signed' || $status == 'Signed') {
                $status = 4;
            } elseif($status == 'rejected' || $status == 'Rejected') {
                $status = 5;
            } else {
                return Response::json(['status' => 'error', 'result' => 'Invalid status']);
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'status is missing']);
        }
        //status validation ending

        $user_id = $utility->getUserIdByAuthToken($access_token);
        $parent_id = $utility->getParent($user_id);
        $userTimeZone = $utility->getUsertimezone($parent_id);
        $getUserAPITimeZone = $utility->getUserAPITimeZone($parent_id);
        $getApiHitCount = Userinfo::where('user_id', $parent_id)->select('hit_count')->first();
        $addupdateapiaccesslogs = $utility->addupdateapiaccesslogs($user_id, 'anyGetdocumentinfobystatus v3', $data, $getApiHitCount['hit_count']);
        if($addupdateapiaccesslogs == 'exceed') {
            $this->apiCallLimitExceedMessage = str_replace('#hitCuntNo', $getApiHitCount['hit_count'], $this->apiCallLimitExceedMessage);
            return Response::json(['status' => 'error', 'result' => $this->apiCallLimitExceedMessage]);
        }

        $subUserId = 0;
        if(isset($data['user_id']) && $data['user_id'] != '') {
            $subUserId = $data['user_id'];
            $checkUser = User::where('id', $subUserId)->where('parent_id', $user_id)->count();
            if(!$checkUser) {
                return Response::json(['status' => 'error', 'result' => 'invalid user_id']);
            }
        }

        if($utility->isParent($user_id) == 1) {
            $allUserIds = $utility->getSubusers($parent_id);
        } else {
            $allUserIds = [$user_id];
        }

        if($subUserId > 0) {
            $allUserIds = [$subUserId];
        }

        $userSettings = $utility->getUserSettings($parent_id);

        if($utility->checkAdminStripe($user_id)) {
            return Response::json(['status' => 'error', 'result' => 'Account is locked make payment in order to continue Simplesign.']);
        }

        $pageLimit = 10;
        if(isset($data['pagelimit']) && $data['pagelimit'] != '') {
            $pageLimit = $data['pagelimit'];
            $data['page_limit'] = $pageLimit;
        } elseif(isset($data['page_limit']) && $data['page_limit'] != '') {
            $data['page_limit'] = $data['page_limit'];
            $pageLimit = $data['page_limit'];
        } elseif(isset($data['document_limit']) && $data['document_limit'] != '') {
            $data['pagelimit'] = $data['document_limit'];
            $pageLimit = $data['document_limit'];
        }
        $currentPage = (isset($data['current_page']) && $data['current_page'] != '' ? $data['current_page'] : 0);
        $skipRecords = $currentPage * $pageLimit;

        $offerSentObject = new Offersent();
        $offerSentDataObject = new Offersent_data();

        $offerSentObject = $offerSentObject->from('offer_sent as ofs')->join('offer_send_details as ofd', 'ofs.id', '=', 'ofd.offer_sent_id');
        if((isset($data['task_name']) && $data['task_name'] != '') || (isset($data['task_status']) && $data['task_status'] != '')) {
            $offerSentObject = $offerSentObject->join('offersent_data as ofsd', 'ofs.id', '=', 'ofsd.sent_id');
        } if((isset($data['task_filter']) && $data['task_filter'] != '') || (isset($data['completed_fromdate']) && $data['completed_fromdate'] != '' || isset($data['completed_todate']) && $data['completed_todate'] != '')) {
            $offerSentObject = $offerSentObject->join('offersent_data as ofsd', 'ofs.id', '=', 'ofsd.sent_id');
        }
        $offerSentObject = $offerSentObject->where('ofd.is_sender', '!=', 1)->groupBy('ofd.offer_sent_id');

        if(isset($data['contract_id']) && $data['contract_id'] != '') {
            $template_id = $data['contract_id'];
            $data['document_id'] = $template_id;
        } elseif(isset($data['document_id']) && $data['document_id'] != '') {
            $data['contract_id'] = $data['document_id'];
            $template_id = $data['document_id'];
        }

        $whereRaw = '(1=1)';
        $fromDate = '';
        $dateTime = new \DateTime();
        if(isset($data['from_date']) && !empty($data['from_date'])) {
            if($dateTime->createFromFormat('Y-m-d', $data['from_date']) !== FALSE) {
                $fromDate = $data['from_date'].' 00:00:00';
            } elseif($dateTime->createFromFormat('Y-m-d-H-i-s', $data['from_date']) !== FALSE) {
                $fromDate = $dateTime->createFromFormat('Y-m-d-H-i-s', $data['from_date'])->format('Y-m-d H:i:s');
            } else {
                return Response::json(['status' => 'error', 'result' => 'from_date format is invalid']);
            }
        } if(isset($data['to_date']) && !empty($data['to_date'])) {
            if($dateTime->createFromFormat('Y-m-d', $data['to_date']) !== FALSE) {
                $toDate = $data['to_date'].' 23:59:59';
            } elseif($dateTime->createFromFormat('Y-m-d-H-i-s', $data['to_date']) !== FALSE) {
                $toDate = $dateTime->createFromFormat('Y-m-d-H-i-s', $data['to_date'])->format('Y-m-d H:i:s');
            } else {
                return Response::json(['status' => 'error', 'result' => 'to_date format is invalid']);
            }
        } elseif($fromDate != '') {
            //elseif used because if user didn't pass to_date so variable just add date value by default
            if($dateTime->createFromFormat('Y-m-d', $fromDate) !== FALSE) {
                $toDate = date('Y-m-d').' 23:59:59';
            } elseif($dateTime->createFromFormat('Y-m-d-H-i-s', $fromDate) !== FALSE) {
                $toDate = date('Y-m-d H:i:s');
            } else {
                $toDate = date('Y-m-d').' 23:59:59';
            }
        }
        if($fromDate != '' && $toDate != '') {
            //if($_SERVER['HTTP_HOST'] == 'acceptance.simplesign.io') {
                $fromDate = $utility->changeTimeZone($fromDate, 'Y-m-d H:i:s', $userTimeZone, 'UTC');
                $toDate = $utility->changeTimeZone($toDate, 'Y-m-d H:i:s', $userTimeZone, 'UTC');
            /* } else {
                $fromDate = $utility->changeTimeZone($fromDate, 'Y-m-d H:i:s', $userTimeZone, 'UTC');
                $toDate = $utility->changeTimeZone($toDate, 'Y-m-d H:i:s', $userTimeZone, 'UTC');
            } */
            
            if($status == 4) {
                $whereRaw = "(";
                $whereRaw .= "(simplesign_ofs.signed_date != '0000-00-00 00:00:00' ";
                $whereRaw .= "AND simplesign_ofs.signed_date BETWEEN '".$fromDate."' AND '".$toDate."') ";
                $whereRaw .= ")";
            } else {
                $whereRaw = "(";
                $whereRaw .= "(simplesign_ofs.last_event != '0000-00-00 00:00:00' ";
                $whereRaw .= "AND simplesign_ofs.last_event BETWEEN '".$fromDate."' AND '".$toDate."') ";
                $whereRaw .= "OR (simplesign_ofs.created_date BETWEEN '".$fromDate."' AND '".$toDate."') ";
                $whereRaw .= ")";
            }
            $offerSentObject = $offerSentObject->whereRaw($whereRaw);
        }

        $getDocumentIdFromExternalDocumentId = $utility->documentExternalId($template_id, $allUserIds);
        if(!empty($getDocumentIdFromExternalDocumentId)) {
            $template_id = $getDocumentIdFromExternalDocumentId;
        }

        $offerSentObject = $offerSentObject->whereIn('ofs.sender_id', $allUserIds);

        //case managment filter starting
        $getAddOnObjectData = settings::where('user_id', $parent_id)->select('new_addon_obj')->first();
        if((isset($data['task_name']) && $data['task_name'] != '') || (isset($data['task_status']) && $data['task_status'] != '')) {
            if($getAddOnObjectData['new_addon_obj'] != '') {
                $newAddonObjJsonDataForCaseManagment = json_decode($getAddOnObjectData['new_addon_obj'], true);
                if(isset($newAddonObjJsonDataForCaseManagment['mark_as_completed_addon']) && $newAddonObjJsonDataForCaseManagment['mark_as_completed_addon'] == 1) {
                    $markAsCompletedAddonSetting = (isset($newAddonObjJsonDataForCaseManagment['mark_as_completed_addon_setting']) && $newAddonObjJsonDataForCaseManagment['mark_as_completed_addon_setting'] != '' ? json_decode($newAddonObjJsonDataForCaseManagment['mark_as_completed_addon_setting'], true) : []);
                    if(!empty($markAsCompletedAddonSetting)) {
                        if(isset($markAsCompletedAddonSetting['mark_tasks_array']) && !empty($markAsCompletedAddonSetting['mark_tasks_array'])) {
                            if(isset($data['task_status']) && ($data['task_status'] == 'yes' || $data['task_status'] == 'Yes')) {
                                $data['task_status'] = 'done';
                            } if(isset($data['task_status']) && ($data['task_status'] == 'in process' || $data['task_status'] == 'in Process' || $data['task_status'] == 'in_process' || $data['task_status'] == 'in_Process' || $data['task_status'] == 'In process' || $data['task_status'] == 'In Process' || $data['task_status'] == 'In_process' || $data['task_status'] == 'In_Process' || $data['task_status'] == 'inprocess' || $data['task_status'] == 'inProcess' || $data['task_status'] == 'Inprocess' || $data['task_status'] == 'inProcess' || $data['task_status'] == 'in-process' || $data['task_status'] == 'in-Process' || $data['task_status'] == 'In-process' || $data['task_status'] == 'In-Process')) {
                                $data['task_status'] = 'in_process';
                            }
                            foreach($markAsCompletedAddonSetting['mark_tasks_array'] as $markTasksArrayKey => $markTasksArrayValue) {
                                if($markTasksArrayValue['tasknames'] == $data['task_name']) {
                                    $index = $markTasksArrayKey;
                                    if(isset($data['task_status']) && $data['task_status'] != '') {
                                        $offerSentObjectNew = $offerSentObject->where('ofsd.multi_case_management', 'like', '%'.($index).'%')->where('ofsd.multi_case_management', 'like', '%'.$data['task_status'].'%');
                                    } else {
                                        $offerSentObjectNew = $offerSentObject->where('ofsd.multi_case_management', 'like', '%'.($index).'%');
                                    }
                                    $offerSentObjectNew = $offerSentObjectNew->select('ofs.id', 'ofs.offer_id', 'ofs.offer_status', 'ofsd.contract_type_id', 'ofsd.multi_case_management')->orderBy('ofs.id', 'desc')->skip($skipRecords)->take($pageLimit)->get()->toArray();
                                    if($offerSentObjectNew) {
                                        foreach($offerSentObjectNew as $offerSentObjectNewKey => $offerSentObjectNewValue) {
                                            if(in_array($offerSentObjectNewValue['contract_type_id'], $markTasksArrayValue['contract_type_selected']) && (in_array($offerSentObjectNewValue['offer_status'], $markTasksArrayValue['marked_addon_status']) || in_array("", $markTasksArrayValue['marked_addon_status']))) {
                                                if($offerSentObjectNewValue['multi_case_management'] != '') {
                                                    $multiCaseManagementJsonDecodeForFilter = json_decode($offerSentObjectNewValue['multi_case_management'], true);
                                                    foreach($multiCaseManagementJsonDecodeForFilter as $multiCaseManagementJsonDecodeForFilterKey => $multiCaseManagementJsonDecodeForFilterValue) {
                                                        if(isset($data['task_status']) && $data['task_status'] != '') {
                                                            if($multiCaseManagementJsonDecodeForFilterValue['status_text'] == $data['task_status'] && isset($multiCaseManagementJsonDecodeForFilterValue['task_no']) && $multiCaseManagementJsonDecodeForFilterValue['task_no'] == $index && $multiCaseManagementJsonDecodeForFilterValue['task_no'] != -1 && !in_array($offerSentObjectNewValue['id'], $caseManagementOfferSentIds)) {
                                                                array_push($caseManagementOfferSentIds, $offerSentObjectNewValue['id']);
                                                            } elseif($multiCaseManagementJsonDecodeForFilterValue['status_text'] == $data['task_status'] && isset($multiCaseManagementJsonDecodeForFilterValue['task_no']) && $multiCaseManagementJsonDecodeForFilterValue['task_no'] == $index && $multiCaseManagementJsonDecodeForFilterValue['task_no'] == -1 && !in_array($offerSentObjectNewValue['id'], $caseManagementOfferSentIds)) {
                                                                array_push($caseManagementOfferSentIds, $offerSentObjectNewValue['id']);
                                                            }
                                                        } else {
                                                            if(isset($multiCaseManagementJsonDecodeForFilterValue['task_no']) && $multiCaseManagementJsonDecodeForFilterValue['task_no'] == $index && $multiCaseManagementJsonDecodeForFilterValue['task_no'] != -1 && !in_array($offerSentObjectNewValue['id'], $caseManagementOfferSentIds)) {
                                                                array_push($caseManagementOfferSentIds, $offerSentObjectNewValue['id']);
                                                            } elseif(isset($multiCaseManagementJsonDecodeForFilterValue['task_no']) && $multiCaseManagementJsonDecodeForFilterValue['task_no'] == $index && $multiCaseManagementJsonDecodeForFilterValue['task_no'] == -1 && !in_array($offerSentObjectNewValue['id'], $caseManagementOfferSentIds)) {
                                                                array_push($caseManagementOfferSentIds, $offerSentObjectNewValue['id']);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                } else {
                    return Response::json(['status' => 'error', 'result' => 'Task management feature is not enabled in your account, Contact Simplesign support for task management activation.']);
                }
            }
            if(count($caseManagementOfferSentIds) > 0) {
                $offerSentObject = $offerSentObject->whereIn('ofs.id', $caseManagementOfferSentIds);
            } else {
                return Response::json(['status' => 'error', 'result' => 'No record(s) found.']);
            }
        } if(isset($data['task_filter']) && $data['task_filter'] != '') {
            $caseManagementOfferSentIds = [];
            if($this->is_JSON($data['task_filter'])) {
                $taskFilter = json_decode($data['task_filter'], true);
                $taskFilterArray = [];
                //If casemanagement column is empty, we don't fetch it with filter, but in UI it shows by default "No" value.
                $valueArray = ['yes', 'no', 'in process', 'in_process', 'inprocess', 'in-process'];
                if($getAddOnObjectData['new_addon_obj'] != '' && !empty($taskFilter)) {
                    $newAddonObjJsonDataForCaseManagment = json_decode($getAddOnObjectData['new_addon_obj'], true);
                    if(isset($newAddonObjJsonDataForCaseManagment['mark_as_completed_addon']) && $newAddonObjJsonDataForCaseManagment['mark_as_completed_addon'] == 1) {
                        $markAsCompletedAddonSetting = (isset($newAddonObjJsonDataForCaseManagment['mark_as_completed_addon_setting']) && $newAddonObjJsonDataForCaseManagment['mark_as_completed_addon_setting'] != '' ? json_decode($newAddonObjJsonDataForCaseManagment['mark_as_completed_addon_setting'], true) : []);
                        if(!empty($markAsCompletedAddonSetting)) {
                            if(isset($markAsCompletedAddonSetting['mark_tasks_array']) && !empty($markAsCompletedAddonSetting['mark_tasks_array'])) {
                                $taskManagementWhere = '';
                                //$multiCaseManagementFurtherFilterIncrementedIndex = 0;
                                foreach($taskFilter as $taskFilterKey => $taskFilterValue) {
                                    $task_index = null;
                                    if(!in_array(strtolower($taskFilterValue), $valueArray)) {
                                        return Response::json(['status' => 'error', 'result' => "value should be yes, no or in_process for $taskFilterKey"]);
                                    }
                                    if(isset($taskFilterValue) && ($taskFilterValue == 'yes' || $taskFilterValue == 'Yes' || $taskFilterValue == 'YES' || $taskFilterValue == 'yEs' || $taskFilterValue == 'yES' || $taskFilterValue == 'YeS' || $taskFilterValue == 'YEs')) {
                                        $taskFilterValue = 'done';
                                    } if(isset($taskFilterValue) && ($taskFilterValue == 'in process' || $taskFilterValue == 'in Process' || $taskFilterValue == 'in_process' || $taskFilterValue == 'in_Process' || $taskFilterValue == 'In process' || $taskFilterValue == 'In Process' || $taskFilterValue == 'In_process' || $taskFilterValue == 'In_Process' || $taskFilterValue == 'inprocess' || $taskFilterValue == 'inProcess' || $taskFilterValue == 'Inprocess' || $taskFilterValue == 'inProcess' || $taskFilterValue == 'in-process' || $taskFilterValue == 'in-Process' || $taskFilterValue == 'In-process' || $taskFilterValue == 'In-Process')) {
                                        $taskFilterValue = 'in_process';
                                    } if(isset($taskFilterValue) && ($taskFilterValue == 'no' || $taskFilterValue == 'No' || $taskFilterValue == 'NO' || $taskFilterValue == 'nO')) {
                                        $taskFilterValue = 'no';
                                    }
                                    foreach($markAsCompletedAddonSetting['mark_tasks_array'] as $markTasksArrayKey => $markTasksArrayValue) {
                                        if($markTasksArrayValue['tasknames'] == $taskFilterKey) {
                                            $contractType = $markTasksArrayValue['contract_type_selected'];
                                            $marked_offer_status = $markTasksArrayValue['marked_addon_status'];
                                            $task_index = $markTasksArrayKey;
                                            if($taskManagementWhere != '') {
                                                $taskManagementWhere .= " AND ";
                                            }
                                            $taskManagementWhere .= " ( ";
                                            $taskManagementWhere .= " JSON_EXTRACT(`simplesign_ofsd`.`multi_case_management`, '$.*.task_no') LIKE '%\"$markTasksArrayKey\"%' AND JSON_EXTRACT(`simplesign_ofsd`.`multi_case_management`, '$.*.status_text') LIKE '%\"$taskFilterValue\"%' ";
                                            if($contractType) {
                                                $taskManagementWhere .= " AND simplesign_ofsd.contract_type_id in (".join(",", $contractType).")  ";
                                            }
                                            if($marked_offer_status && isset($marked_offer_status[0]) && $marked_offer_status[0]) {
                                                $taskManagementWhere .= " AND simplesign_ofs.offer_status in (".join(",", $marked_offer_status).")  ";
                                            }
                                            $taskManagementWhere .= " )";
                                        }
                                    }
                                    if($task_index !== null) {
                                        $taskFilterArray[] = ['task_name' => $taskFilterKey, 'task_val' => $taskFilterValue, 'task_index' => $task_index];
                                    } else {
                                        return Response::json(['status' => 'error', 'result' => "Task filter $taskFilterKey not found"]);
                                    }
                                }

                                //$caseManagementDocumentIds = [];
                                $offerSentObjectForIds = $offerSentObject->whereRaw($taskManagementWhere);
                                $offerSentObjectForIds = $offerSentObjectForIds->select('ofs.id', 'ofs.unique_id', 'ofs.offer_status', 'ofsd.multi_case_management', 'ofsd.contract_type_id')->orderBy('ofs.id', 'desc')->get()->toArray();
                                foreach($offerSentObjectForIds as $offerSentObjectForIdsKey => $offerSentObjectForIdsValue) {
                                    $MatchingStatus = false;
                                    if($offerSentObjectForIdsValue['multi_case_management'] != '') {
                                        $matchingNum = 0;
                                        $multiCaseManagementJsonDecodeForFilter = json_decode($offerSentObjectForIdsValue['multi_case_management'], true);
                                        foreach($multiCaseManagementJsonDecodeForFilter as $taskSKey1 => $taskSVal1) {
                                            foreach($taskFilterArray as $taskFKey1 => $taskFVal1) {
                                                if($taskSVal1['status_text'] == $taskFVal1['task_val'] && isset($taskSVal1['task_no']) && $taskSVal1['task_no'] == $taskFVal1['task_index']) {
                                                    $matchingNum++;
                                                }
                                            }
                                        }
                                        if(count($taskFilterArray) == $matchingNum) {
                                            $MatchingStatus = true;
                                        }
                                    }
                                    if($MatchingStatus) {
                                        //array_push($caseManagementDocumentIds, $offerSentObjectForIdsValue);
                                        array_push($caseManagementOfferSentIds, $offerSentObjectForIdsValue['id']);
                                    }
                                }
                                if(!$offerSentObjectForIds || $taskManagementWhere == '') {
                                    return Response::json(['status' => 'error', 'result' => 'No record(s) found.']);
                                }
                            }
                        }
                    } else {
                        return Response::json(['status' => 'error', 'result' => 'Task management feature is not enabled in your account, Contact Simplesign support for task management activation.']);
                    }
                }
                if(count($caseManagementOfferSentIds) > 0) {
                    $offerSentObject = $offerSentObject->whereIn('ofs.id', $caseManagementOfferSentIds);
                } else {
                    return Response::json(['status' => 'error', 'result' => 'No record(s) found.']);
                }
            } else {
                return Response::json(['status'=>'error','result' => 'Task filter is invalid format, JSON is required']);
            }
        } if(isset($data['completed_fromdate']) && $data['completed_fromdate'] != '') {
            $timeZone = 'UTC';
            $taskFromDate = $taskTodate = $yearMonthDateFormatFrom = $yearMonthDateFormatTo = '';
            if($dateTime->createFromFormat('Y-m-d', $data['completed_fromdate']) !== FALSE) {
                $yearMonthDateFormatFrom = 'Y-m-d';
                $taskFromDate = $dateTime->createFromFormat($yearMonthDateFormatFrom, $data['completed_fromdate'])->format($yearMonthDateFormatFrom);
            } elseif($dateTime->createFromFormat('Y-m-d-H-i-s', $data['completed_fromdate']) !== FALSE) {
                $yearMonthDateFormatFrom = 'Y-m-d H:i:s';
                $taskFromDate = $dateTime->createFromFormat('Y-m-d-H-i-s', $data['completed_fromdate'])->format($yearMonthDateFormatFrom);
            }
            //if($_SERVER['HTTP_HOST'] == 'acceptance.simplesign.io') {
                $taskFromDate = $utility->changeTimeZone($taskFromDate, $yearMonthDateFormatFrom, $userTimeZone, $timeZone);
            /* } else {
                $taskFromDate = $utility->changeTimeZone($taskFromDate, $yearMonthDateFormatFrom, $userTimeZone, $timeZone);
            } */
            if(isset($data['completed_todate']) && $data['completed_todate'] != '') {
                if($dateTime->createFromFormat('Y-m-d', $data['completed_todate']) !== FALSE) {
                    $yearMonthDateFormatTo = 'Y-m-d';
                    $taskTodate = $dateTime->createFromFormat($yearMonthDateFormatTo, $data['completed_todate'])->format($yearMonthDateFormatTo);
                } elseif($dateTime->createFromFormat('Y-m-d-H-i-s', $data['completed_todate']) !== FALSE) {
                    $yearMonthDateFormatTo = 'Y-m-d H:i:s';
                    $taskTodate = $dateTime->createFromFormat('Y-m-d-H-i-s', $data['completed_todate'])->format($yearMonthDateFormatTo);
                }
                //if($_SERVER['HTTP_HOST'] == 'acceptance.simplesign.io') {
                    $taskTodate = $utility->changeTimeZone($taskTodate, $yearMonthDateFormatTo, $userTimeZone, $timeZone);
                /* } else {
                    $taskTodate = $utility->changeTimeZone($taskTodate, $yearMonthDateFormatTo, $userTimeZone, $timeZone);
                } */
            } elseif($taskFromDate != '') {
                //elseif used because if user didn't pass completed_todate so variable just add date value by default
                if($dateTime->createFromFormat('Y-m-d', $taskFromDate) !== FALSE) {
                    $taskTodate = date('Y-m-d').' 23:59:59';
                } elseif($dateTime->createFromFormat('Y-m-d-H-i-s', $taskFromDate) !== FALSE) {
                    $taskTodate = date('Y-m-d H:i:s');
                } else {
                    $taskTodate = date('Y-m-d').' 23:59:59';
                }
            }
            $caseManagementOfferSentIds = [];
            $taskFilterArrayDate = [];
            if($getAddOnObjectData['new_addon_obj'] != '') {
                $newAddonObjJsonDataForCaseManagment = json_decode($getAddOnObjectData['new_addon_obj'], true);
                if(isset($newAddonObjJsonDataForCaseManagment['mark_as_completed_addon']) && $newAddonObjJsonDataForCaseManagment['mark_as_completed_addon'] == 1) {
                    $markAsCompletedAddonSetting = (isset($newAddonObjJsonDataForCaseManagment['mark_as_completed_addon_setting']) && $newAddonObjJsonDataForCaseManagment['mark_as_completed_addon_setting'] != '' ? json_decode($newAddonObjJsonDataForCaseManagment['mark_as_completed_addon_setting'], true) : []);
                    if(!empty($markAsCompletedAddonSetting)) {
                        if(isset($markAsCompletedAddonSetting['mark_tasks_array']) && !empty($markAsCompletedAddonSetting['mark_tasks_array'])) {
                            $taskManagementWhere = '';
                            $task_index = null;
                            foreach($markAsCompletedAddonSetting['mark_tasks_array'] as $markTasksArrayKey => $markTasksArrayValue) {
                                if($markTasksArrayValue['tasknames']) {
                                    $contractType = $markTasksArrayValue['contract_type_selected'];
                                    $marked_offer_status = $markTasksArrayValue['marked_addon_status'];
                                    $task_index = $markTasksArrayKey;
                                    if($taskManagementWhere != '') {
                                        $taskManagementWhere .= " AND ";
                                    }
                                    $taskManagementWhere .= " ( ";
                                    $taskManagementWhere .= " JSON_EXTRACT(`simplesign_ofsd`.`multi_case_management`, '$.*.task_no') LIKE '%\"$markTasksArrayKey\"%' AND JSON_EXTRACT(`simplesign_ofsd`.`multi_case_management`, '$.*.status_text') LIKE '%done%' ";
                                    $taskManagementWhere .= " AND simplesign_ofsd.mark_completed = '1' AND simplesign_ofsd.mark_completed_date BETWEEN '$taskFromDate' AND '$taskTodate' ";
                                    if($contractType) {
                                        $taskManagementWhere .= " AND simplesign_ofsd.contract_type_id in (".join(",", $contractType).")  ";
                                    }
                                    if($marked_offer_status && isset($marked_offer_status[0]) && $marked_offer_status[0]) {
                                        $taskManagementWhere .= " AND simplesign_ofs.offer_status in (".join(",", $marked_offer_status).")  ";
                                    }
                                    $taskManagementWhere .= " )";
                                }
                            }
                            if($task_index !== null) {
                                $taskFilterArrayDate[] = ['task_index' => $task_index];
                            } else {
                                return Response::json(['status' => 'error', 'result' => "Task filter not found"]);
                            }
                            $offerSentObjectForIds = $offerSentObject->whereRaw($taskManagementWhere);
                            $offerSentObjectForIds = $offerSentObjectForIds->select('ofs.sender_id', 'ofs.id', 'ofs.unique_id', 'ofs.offer_status', 'ofsd.multi_case_management', 'ofsd.contract_type_id')->orderBy('ofs.id', 'desc')->get()->toArray();
                            foreach($offerSentObjectForIds as $offerSentObjectForIdsKey => $offerSentObjectForIdsValue) {
                                $MatchingStatus = false;
                                if($offerSentObjectForIdsValue['multi_case_management'] != '') {
                                    $matchingNum = 0;
                                    $multiCaseManagementJsonDecodeForFilter = json_decode($offerSentObjectForIdsValue['multi_case_management'], true);
                                    foreach($multiCaseManagementJsonDecodeForFilter as $taskSKey1 => $taskSVal1) {
                                        foreach($taskFilterArrayDate as $taskFKey1 => $taskFVal1) {
                                            if(isset($taskSVal1['task_no']) && $taskSVal1['task_no'] == $taskFVal1['task_index']) {
                                                $matchingNum++;
                                            }
                                        }
                                    }
                                    if(count($taskFilterArrayDate) == $matchingNum) {
                                        $MatchingStatus = true;
                                    }
                                }
                                if($MatchingStatus) {
                                    array_push($caseManagementOfferSentIds, $offerSentObjectForIdsValue['id']);
                                }
                            }
                            if(!$offerSentObjectForIds || $taskManagementWhere == '') {
                                return Response::json(['status' => 'error', 'result' => 'No record(s) found']);
                            }
                        }
                    }
                } else {
                    return Response::json(['status' => 'error', 'result' => 'Task management feature is not enabled in your account, Contact Simplesign support for task management activation.']);
                }
            }
            if(count($caseManagementOfferSentIds) > 0) {
                $offerSentObject = $offerSentObject->whereIn('ofs.id', $caseManagementOfferSentIds);
            } else {
                return Response::json(['status' => 'error', 'result' => 'No record(s) found']);
            }
        }
        //case managment filter ending

        $columns = ['ofs.id', 'ofd.id AS detail_id', 'ofs.is_draft', 'ofs.offer_id', 'ofs.language_id', 'ofs.timedateformat', 'ofs.visible_name', 'ofs.name', 'ofs.created_date', 'ofs.signed_date', 'ofs.due_days', 'ofs.due_date', 'ofs.reminder_days', 'ofs.offer_status', 'ofs.offer_type', 'ofs.sender_id', 'ofs.external_doc_id'];
        //ofs.timedateformat not indexed, ofs.visible_name not indexed, ofs.name not indexed, ofs.signed_date not indexed, ofs.due_days not indexed, ofs.content not indexed
        if($status == 5) {
            //for rejected
            $offerSentObject = $offerSentObject->where('ofd.offer_status', $status)->where('ofs.offer_type', '!=', 5);
            if($template_id != '' && $template_id != 0) {
                $offerSentObject = $offerSentObject->where('ofs.id', $template_id);
            }
        } elseif($status != 4) {
            //Add this condition if we don't pass signed status then if condition should executes.
            $offerSentObject = $offerSentObject->where('ofd.offer_status', '!=', 5)->where('ofs.offer_status', $status)->where('ofs.offer_type', '!=', 5);
            if($template_id != '' && $template_id != 0) {
                $offerSentObject = $offerSentObject->where('ofs.id', $template_id);
            }
        } else {
            //only for signed documents
            $offerSentObject = $offerSentObject->where('ofd.offer_status', '!=', 5)->where('ofs.offer_status', $status)->where('ofs.offer_type', '!=', 5);
            if($template_id != '' && $template_id != 0) {
                $offerSentObject = $offerSentObject->where('ofs.id', $template_id);
            }

            $offerSentObject = $offerSentObject->orWhere(function ($query) use($allUserIds, $template_id, $whereRaw, $caseManagementOfferSentIds) {
                $query->where('ofs.offer_status', 4)->where('ofd.offer_status', '!=', 5)->where('ofs.offer_type', '=', 5)->whereIn('ofs.sender_id', $allUserIds)->whereRaw($whereRaw);
                if(count($caseManagementOfferSentIds) > 0) {
                    $query = $query->whereIn('ofs.id', $caseManagementOfferSentIds);
                }
                if($template_id != '' && $template_id != 0) {
                    $query = $query->where('ofs.id', $template_id);
                }
            });
        }

        $offerSentObject = $offerSentObject->select($columns);
        if($template_id != '' && $template_id != 0) {
            $offerSentData = $offerSentObject->first();
            if(count($offerSentData)) {
                $offerSentData = array($offerSentData);
            }
        } else {
            $offerSentData = $offerSentObject->orderBy('ofs.id', 'desc')->skip($skipRecords)->take($pageLimit)->get()->toArray();
        }

        if(count($offerSentData) == 0) {
            $offerSentData = [];
        }

        foreach($offerSentData as $sentDataKey => $sentDataValue) {
            array_push($offerSentIds, $sentDataValue['id']);
        }

        //collect content 
        $contentRecords = Offersent::whereIn('id', $offerSentIds)->select('id', 'content')->get()->toArray();
        $contentRecords = collect($contentRecords);

        $selectRaw = "CAST(AES_DECRYPT(simplesign_offer_send_details.user_details,'".env('ENCRYPT_KEY')."','".env('ENCRYPT_IV')."') AS CHAR) as user_details";
        DB::statement(' SET block_encryption_mode = \''.env('ENCRYPT_CIPHER').'\'');

        $contractData = Offersentdetails::whereIn('offer_sent_id', $offerSentIds)->select('offer_send_details.offer_status', DB::raw($selectRaw), 'is_sender', 'offer_send_details.id AS detail_id', 'offer_sent_id', 'req_attached', 'document_read_date', 'signed_date', 'authentication_method', 'role', 'invitation_type', 'invitation_order', 'offer_confirmation', 'id_attachments', 'id', 'unique_id', 'forward_status', 'forward_user_details', 'forward_signed')->get()->toArray();

        if($user_id > 0) {
            if(count($contractData)) {
                $responseArray = $sentIdsForIndexdata = [];
                foreach($offerSentData as $sentIdsKey => $sentIdsValue) {
                    $sentIdsValue['content'] = $contentRecords->where('id', $sentIdsValue['id'])->pluck('content')->first();
                    $eachSentId = $sentIdsValue['id'];
                    $languageId = $sentIdsValue['language_id'];
                    array_push($sentIdsForIndexdata, $sentIdsValue['id']);
                    $peoples = $senderDetails = $documentFields = $accountDetails = $documentDetails = [];
                    foreach($contractData as $contractDataKey => $contractDataValue) {
                        $peopleFields = $organizationFields = $details = $inviteAndForwardDetails = [];
                        $nameExplode = $uniqueId = $documentLink = '';
                        
                        $recipientUserDetailsJsonDecode = json_decode($contractDataValue['user_details'], true);
                        //$peopleFields['detail_id'] = $contractDataValue['detail_id'];
                        //$peopleFields['offer_sent_id'] = $contractDataValue['offer_sent_id'];
                        $userRole = (isset($recipientUserDetailsJsonDecode['recrolename']) && $recipientUserDetailsJsonDecode['recrolename'] != '' ? $recipientUserDetailsJsonDecode['recrolename'] : (isset($recipientUserDetailsJsonDecode['partyname']) && $recipientUserDetailsJsonDecode['partyname'] != '' ? $recipientUserDetailsJsonDecode['partyname'] : ''));

                        if($contractDataValue['offer_sent_id'] == $eachSentId && $contractDataValue['is_sender'] == 1) {
                            //for regular contract sender use full_name key and for online contract sender use first_name key
                            $senderDetails['name'] = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? trim($recipientUserDetailsJsonDecode['full_name']) : (isset($recipientUserDetailsJsonDecode['first_name']) && $recipientUserDetailsJsonDecode['first_name'] != '' ? trim($recipientUserDetailsJsonDecode['first_name']) : ''));
                            $senderDetails['email'] = (isset($recipientUserDetailsJsonDecode['email']) && $recipientUserDetailsJsonDecode['email'] != '' ? trim(preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $recipientUserDetailsJsonDecode['email'])) : '');

                            $userCustomFields = (isset($recipientUserDetailsJsonDecode['user_customfields']) && $recipientUserDetailsJsonDecode['user_customfields'] != '' ? json_decode($recipientUserDetailsJsonDecode['user_customfields'], true) : []);
                            if(!empty($userCustomFields)) {
                                foreach($userCustomFields as $userCustomFldkey => $userCustomFldValue) {
                                    $senderDetails[trim($userCustomFldkey)] = (isset($userCustomFldValue) && $userCustomFldValue != '' ? trim($userCustomFldValue) : '');
                                }
                            }

                            $accountDetails['company'] = (isset($recipientUserDetailsJsonDecode['company']) && $recipientUserDetailsJsonDecode['company'] != '' ? trim($recipientUserDetailsJsonDecode['company']) : '');
                            $accountDetails['reg_no'] = (isset($recipientUserDetailsJsonDecode['reg_no']) && $recipientUserDetailsJsonDecode['reg_no'] != '' ? trim($recipientUserDetailsJsonDecode['reg_no']) : '');
                            $accountDetails['address'] = (isset($recipientUserDetailsJsonDecode['address']) && $recipientUserDetailsJsonDecode['address'] != '' ? trim($recipientUserDetailsJsonDecode['address']) : '');
                            $accountDetails['phone_no'] = (isset($recipientUserDetailsJsonDecode['mobile']) && $recipientUserDetailsJsonDecode['mobile'] != '' ? trim($recipientUserDetailsJsonDecode['mobile']) : (isset($recipientUserDetailsJsonDecode['telephone']) && $recipientUserDetailsJsonDecode['telephone'] != '' ? trim($recipientUserDetailsJsonDecode['telephone']) : ''));
                            $accountDetails['zipcode'] = (isset($recipientUserDetailsJsonDecode['zipcode']) && $recipientUserDetailsJsonDecode['zipcode'] != '' ? trim($recipientUserDetailsJsonDecode['zipcode']) : (isset($recipientUserDetailsJsonDecode['post_code']) && $recipientUserDetailsJsonDecode['post_code'] != '' ? trim($recipientUserDetailsJsonDecode['post_code']) : ''));
                            $accountDetails['city'] = (isset($recipientUserDetailsJsonDecode['city']) && $recipientUserDetailsJsonDecode['city'] != '' ? trim($recipientUserDetailsJsonDecode['city']) : '');

                            $documentLink = $domain_name.'document/view/'.$contractDataValue['detail_id'].'/'.$contractDataValue['unique_id'];
                        }

                        $uniqueId = $contractDataValue['unique_id'];
                        $recipientFieldsRolesTabFields = (isset($recipientUserDetailsJsonDecode['Recipient_fields_roles_tab_fields']) && !empty($recipientUserDetailsJsonDecode['Recipient_fields_roles_tab_fields']) ? json_decode($recipientUserDetailsJsonDecode['Recipient_fields_roles_tab_fields'], true) : '');
                        $recinfoFields = ($recipientFieldsRolesTabFields != '' ? $recipientFieldsRolesTabFields['recinfo_fields'] : '');
                        //getting recipient data starting
                        if($contractDataValue['offer_sent_id'] == $eachSentId && $contractDataValue['is_sender'] == 0) {
                            //for regular contract recipient use full_name key
                            if(isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '') {
                                if((isset($recinfoFields['last_name']) && $recinfoFields['last_name'] == 1) || (isset($recipientUserDetailsJsonDecode['last_name']) && $recipientUserDetailsJsonDecode['last_name'] != '')) {
                                    $nameExplode = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($recipientUserDetailsJsonDecode['full_name'])) : '');
                                    if(isset($recipientUserDetailsJsonDecode['last_name']) && $recipientUserDetailsJsonDecode['last_name'] != '' && isset($nameExplode[1]) && $nameExplode[1] != '' && $nameExplode[1] != $recipientUserDetailsJsonDecode['last_name']) {
                                        $peopleFields['first_name'] = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? $recipientUserDetailsJsonDecode['full_name'] : '');
                                        $peopleFields['last_name'] = (isset($recipientUserDetailsJsonDecode['last_name']) && $recipientUserDetailsJsonDecode['last_name'] != '' ? $recipientUserDetailsJsonDecode['last_name'] : '');
                                    } else {
                                        $peopleFields['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                                        $peopleFields['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                                    }
                                } else {
                                    $nameExplode = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($recipientUserDetailsJsonDecode['full_name'])) : '');
                                    $peopleFields['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                                    $peopleFields['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                                }
                                /* if((isset($recinfoFields['last_name']) && $recinfoFields['last_name'] == 1) || (isset($recipientUserDetailsJsonDecode['last_name']) && $recipientUserDetailsJsonDecode['last_name'] != '')) {
                                    $peopleFields['first_name'] = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? $recipientUserDetailsJsonDecode['full_name'] : '');
                                    $peopleFields['last_name'] = (isset($recipientUserDetailsJsonDecode['last_name']) && $recipientUserDetailsJsonDecode['last_name'] != '' ? $recipientUserDetailsJsonDecode['last_name'] : '');
                                } else {
                                    $nameExplode = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($recipientUserDetailsJsonDecode['full_name'])) : '');
                                    $peopleFields['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                                    $peopleFields['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                                } */
                            } elseif(isset($recipientUserDetailsJsonDecode['name']) && $recipientUserDetailsJsonDecode['name'] != '') {
                                //for online contract recipient use name key
                                $nameExplode = (isset($recipientUserDetailsJsonDecode['name']) && $recipientUserDetailsJsonDecode['name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($recipientUserDetailsJsonDecode['name'])) : '');
                                $peopleFields['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                                $peopleFields['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                            }

                            //recipient information in peopleFields starting
                            $peopleFields['email'] = (isset($recipientUserDetailsJsonDecode['email']) && $recipientUserDetailsJsonDecode['email'] != '' ? trim(preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $recipientUserDetailsJsonDecode['email'])) : '');
                            //$peopleFields['personal_no'] = (isset($recipientUserDetailsJsonDecode['personnr']) && $recipientUserDetailsJsonDecode['personnr'] != '' ? trim($recipientUserDetailsJsonDecode['personnr']) : '');
                            //$peopleFields['personal_no'] = (isset($recipientUserDetailsJsonDecode['personnr']) && $recipientUserDetailsJsonDecode['personnr'] != '' ? (strlen(trim($recipientUserDetailsJsonDecode['personnr'])) == 12 || strlen(trim($recipientUserDetailsJsonDecode['personnr'])) == 13 ? substr(trim($recipientUserDetailsJsonDecode['personnr']), 2) : trim($recipientUserDetailsJsonDecode['personnr'])) : '');
                            if($parent_id == 12665 || $parent_id == 15307) {
                                $peopleFields['personal_no'] = (isset($recipientUserDetailsJsonDecode['personnr']) && $recipientUserDetailsJsonDecode['personnr'] != '' ? (strlen(trim($recipientUserDetailsJsonDecode['personnr'])) == 12 || strlen(trim($recipientUserDetailsJsonDecode['personnr'])) == 13 ? substr(trim($recipientUserDetailsJsonDecode['personnr']), 2) : trim($recipientUserDetailsJsonDecode['personnr'])) : '');
                            } else {
                                $peopleFields['personal_no'] = (isset($recipientUserDetailsJsonDecode['personnr']) && $recipientUserDetailsJsonDecode['personnr'] != '' ? trim($recipientUserDetailsJsonDecode['personnr']) : '');
                            }
                            $peopleFields['mobile'] = (isset($recipientUserDetailsJsonDecode['mobile']) && $recipientUserDetailsJsonDecode['mobile'] != '' ? trim($recipientUserDetailsJsonDecode['mobile']) : '');
                            $peopleFields['address'] = (isset($recipientUserDetailsJsonDecode['address']) && $recipientUserDetailsJsonDecode['address'] != '' ? trim($recipientUserDetailsJsonDecode['address']) : '');
                            $peopleFields['city'] = (isset($recipientUserDetailsJsonDecode['city']) && $recipientUserDetailsJsonDecode['city'] != '' ? trim($recipientUserDetailsJsonDecode['city']) : '');
                            $peopleFields['zipcode'] = (isset($recipientUserDetailsJsonDecode['zipcode']) && $recipientUserDetailsJsonDecode['zipcode'] != '' ? trim($recipientUserDetailsJsonDecode['zipcode']) : (isset($recipientUserDetailsJsonDecode['zip']) && $recipientUserDetailsJsonDecode['zip'] != '' ? trim($recipientUserDetailsJsonDecode['zip']) : ''));
                            //recipient information in peopleFields ending

                            //people information of new fields starting
                            if(isset($recipientUserDetailsJsonDecode['extra_fields']) && !empty($recipientUserDetailsJsonDecode['extra_fields'])) {
                                $recipientFieldsWithoutValue = (isset($recipientUserDetailsJsonDecode['recipientfields']) && !empty($recipientUserDetailsJsonDecode['recipientfields']) ? json_decode($recipientUserDetailsJsonDecode['recipientfields'], true) : []);

                                $extraFields = (isset($recipientUserDetailsJsonDecode['extra_fields']) && !empty($recipientUserDetailsJsonDecode['extra_fields']) ? json_decode($recipientUserDetailsJsonDecode['extra_fields'], true) : []);
                                if($extraFields) {
                                    $intersect = array_uintersect($extraFields, $recipientFieldsWithoutValue, function($val1, $val2) {
                                        return strcmp($val1['fieldName'], $val2['fieldName']);
                                    });
                                    $intersect = array_values($intersect);
                                } else {
                                    $intersect = [];
                                }

                                if(!empty($intersect)) {
                                    foreach($intersect as $extraFldKey => $extraFldValue) {
                                        $peopleFields[$extraFldValue['fieldName']] = $extraFldValue['fieldValue'];
                                    }
                                }
                            }
                            //people information of new fields ending

                            //organization information of recipient starting
                            if(isset($recipientUserDetailsJsonDecode['organization_fields'])) {
                                $orgFields = json_decode($recipientUserDetailsJsonDecode['organization_fields'], true);
                                foreach($orgFields as $orgFldsKey => $orgFldsValue) {
                                    $orgFldsValue['orgFieldName'] = str_replace('name', 'organization_name', $orgFldsValue['orgFieldName']);
                                    $orgFldsValue['orgFieldName'] = str_replace('org_no', 'organization_no', $orgFldsValue['orgFieldName']);
                                    $orgFldsValue['orgFieldName'] = str_replace('phone', 'organization_phone', $orgFldsValue['orgFieldName']);
                                    $orgFldsValue['orgFieldName'] = str_replace('address', 'organization_address', $orgFldsValue['orgFieldName']);
                                    $orgFldsValue['orgFieldName'] = str_replace('city', 'organization_city', $orgFldsValue['orgFieldName']);
                                    $orgFldsValue['orgFieldName'] = str_replace('zipcode', 'organization_zipcode', $orgFldsValue['orgFieldName']);
                                    $organizationFields[$orgFldsValue['orgFieldName']] = $orgFldsValue['orgFieldValue'];
                                }
                            } else {
                                if(isset($recipientUserDetailsJsonDecode['org_name']) && $recipientUserDetailsJsonDecode['org_name'] != '') {
                                    $organizationFields['organization_name'] = $recipientUserDetailsJsonDecode['org_name'];
                                }
                                if(isset($recipientUserDetailsJsonDecode['org_reg_no']) && $recipientUserDetailsJsonDecode['org_reg_no'] != '') {
                                    $organizationFields['organization_no'] = $recipientUserDetailsJsonDecode['org_reg_no'];
                                }
                                if(isset($recipientUserDetailsJsonDecode['org_mobile']) && $recipientUserDetailsJsonDecode['org_mobile'] != '') {
                                    $organizationFields['organization_phone'] = $recipientUserDetailsJsonDecode['org_mobile'];
                                }
                                if(isset($recipientUserDetailsJsonDecode['org_address']) && $recipientUserDetailsJsonDecode['org_address'] != '') {
                                    $organizationFields['organization_address'] = $recipientUserDetailsJsonDecode['org_address'];
                                }
                                if(isset($recipientUserDetailsJsonDecode['org_city']) && $recipientUserDetailsJsonDecode['org_city'] != '') {
                                    $organizationFields['organization_city'] = $recipientUserDetailsJsonDecode['org_city'];
                                }
                                if(isset($recipientUserDetailsJsonDecode['org_zip']) && $recipientUserDetailsJsonDecode['org_zip'] != '') {
                                    $organizationFields['organization_zipcode'] = $recipientUserDetailsJsonDecode['org_zip'];
                                }
                            }
                            //organization information of recipient ending

                            //organization information of new fields starting
                            if(isset($recipientUserDetailsJsonDecode['org_extra_fields']) && !empty($recipientUserDetailsJsonDecode['org_extra_fields'])) {
                                $organizationFieldsWithoutValue = (isset($recipientUserDetailsJsonDecode['organizationfields']) && !empty($recipientUserDetailsJsonDecode['organizationfields']) ? json_decode($recipientUserDetailsJsonDecode['organizationfields'], true) : []);

                                $orgExtraFields = (isset($recipientUserDetailsJsonDecode['org_extra_fields']) && !empty($recipientUserDetailsJsonDecode['org_extra_fields']) ? json_decode($recipientUserDetailsJsonDecode['org_extra_fields'], true) : []);
                                if($orgExtraFields) {
                                    $intersectOrg = array_uintersect($orgExtraFields, $organizationFieldsWithoutValue, function($val1, $val2) {
                                        return strcmp($val1['fieldName'], $val2['fieldName']);
                                    });
                                    $intersectOrg = array_values($intersectOrg);
                                } else {
                                    $intersectOrg = [];
                                }

                                if(!empty($intersectOrg)) {
                                    foreach($intersectOrg as $orgExtraFldKey => $orgExtraFldValue) {
                                        $organizationFields[$orgExtraFldValue['fieldName']] = $orgExtraFldValue['fieldValue'];
                                    }
                                }
                            }
                            //organization information of new fields ending

                            //organization information of fields which are placed at document starting
                            $content = Tcrypt::decrypter($sentIdsValue['content']);
                            if($content != '') {
                                $html = new \Htmldom($content);
                                foreach($html->find('.text') as $findKey => $findValue) {
                                    //codition for regular contract starting
                                    if(isset($recipientUserDetailsJsonDecode['id']) && $recipientUserDetailsJsonDecode['id'] == $findValue->recipientselectedid) {
                                        if(strpos($findValue->getAttribute('class'), 'peopleNewField') !== false) {
                                            if($findValue->find('h4', 0)) {
                                                $peopleFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                            } else {
                                                if($findValue->find('p', 0)) {
                                                    $peopleFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                                }
                                            }
                                        } if(strpos($findValue->getAttribute('class'), 'organizationNewField') !== false) {
                                            if($findValue->find('h4', 0)) {
                                                $organizationFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                            } else {
                                                if($findValue->find('p', 0)) {
                                                    $organizationFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                                }
                                            }
                                        }
                                        //codition for regular contract ending
                                    } else {
                                        //codition for online contract starting
                                        //if($userRole == $findValue->parent()->parent()->whowillfill) {
                                        if($userRole == $findValue->recipientselected) {
                                            if(strpos($findValue->getAttribute('class'), 'peopleNewField') !== false) {
                                                if($findValue->find('h4', 0)) {
                                                    $peopleFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                                } else {
                                                    //right now paragraph tag is showing and will be replaced by h4 near future starting
                                                    if($findValue->find('p', 0)) {
                                                        $peopleFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                                    }
                                                    //right now paragraph tag is showing and will be replaced by h4 near future ending
                                                }
                                            } if(strpos($findValue->getAttribute('class'), 'organizationNewField') !== false) {
                                                if($findValue->find('h4', 0)) {
                                                    $organizationFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                                } else {
                                                    //right now paragraph tag is showing and will be replaced by h4 near future starting
                                                    if($findValue->find('p', 0)) {
                                                        $organizationFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                                    }
                                                    //right now paragraph tag is showing and will be replaced by h4 near future ending
                                                }
                                            }
                                        }
                                        //codition for online contract ending
                                    }
                                }   //foreach loop condition ends here

                                $dynamicElements = [];
                                foreach($html->find('.template_container') as $temConKey => $temConValue) {
                                    $arrayPush = [];
                                    foreach($temConValue->find('.formElement') as $findKey => $findValue) {
                                        
                                        $elementStyle = $findValue->getAttribute('style');
                                        $arrCSS = $utility->parse_css($elementStyle);
                                        $parentDiv = $findValue->parent()->parent();

                                        //Fixing Position when field is inside the borderbox or textbox START
                                        $addtop = 0;
                                        $addleft = 0;
                                        if(strpos($parentDiv->getAttribute('class'), 'dynamic_border') !== false && strpos($parentDiv->getAttribute('class'), 'insert_box_div') === false) {
                                            $parentCSS = $utility->parse_css($parentDiv->getAttribute('style'));
                                            $addtop = (isset($parentCSS['top']) && $parentCSS['top'] != '' ? round($parentCSS['top']) : 0);
                                            $addleft = (isset($parentCSS['left']) && $parentCSS['left'] != '' ? round($parentCSS['left']) : 0);
                                        } elseif(strpos($parentDiv->getAttribute('class'), 'insert_box_div') !== false && strpos($parentDiv->getAttribute('class'), 'dynamic_border') === false) {
                                            $parentCSS = $utility->parse_css($parentDiv->getAttribute('style'));
                                            $addtop = (isset($parentCSS['top']) && $parentCSS['top'] != '' ? round($parentCSS['top']) : 0);
                                            $addleft = (isset($parentCSS['left']) && $parentCSS['left'] != '' ? round($parentCSS['left']) : 0);
                                        } elseif(strpos($parentDiv->getAttribute('class'), 'insert_box_div') !== false  && strpos($parentDiv->getAttribute('class'), 'dynamic_border') !== false) {
                                            $parentCSS = $utility->parse_css($parentDiv->getAttribute('style'));
                                            $addtop = (isset($parentCSS['top']) && $parentCSS['top'] != '' ? round($parentCSS['top']) : 0);
                                            $addleft = (isset($parentCSS['left']) && $parentCSS['left'] != '' ? round($parentCSS['left']) : 0);
                                        }
                                        //Fixing Position when field is inside the borderbox or textbox END

                                        $topPosition = (isset($arrCSS['top']) && $arrCSS['top'] != '' ? round($arrCSS['top'])+$addtop : 0);
                                        $leftPosition = (isset($arrCSS['left']) && $arrCSS['left'] != '' ? round($arrCSS['left'])+$addleft : 0);
                                        array_push($arrayPush, ['top' => $topPosition, 'left' => $leftPosition, 'dynamic_id' => $findValue->dynamic_id]);

                                    }   //formElement loop ends here
                                    if(!empty($arrayPush)) {
                                        sort($arrayPush);
                                        array_push($dynamicElements, $arrayPush);
                                    }
                                }   //template_container loop ends here

                                foreach($dynamicElements as $eachPageKey => $eachPageValue) {
                                    foreach($eachPageValue as $eachElementKey => $eachElementValue) {
                                        $eachDynamic_id = $eachElementValue['dynamic_id'];
                                        $mainDiv = $html->find('[dynamic_id="'.$eachElementValue['dynamic_id'].'"]', 0);
                                        if(!$mainDiv->find('.text', 0)) {
                                            continue;
                                        }
                                        $findValue = $mainDiv->find('.text', 0);
                                        //getting document text fields
                                        if(strpos($findValue->getAttribute('class'), 'documentField') !== false) {
                                            if($findValue->selectedtype != '0') {
                                                $apiAttributeOrSelectedType = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->selectedtype);
                                                if($parent_id == 10719) {
                                                    $apiAttributeOrSelectedType = str_replace(' ', '_', $apiAttributeOrSelectedType);
                                                }
                                                if($findValue->find('h4', 0) && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                                    $documentFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                                } elseif($findValue->find('p', 0) && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                                    $documentFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('p', 0)->plaintext)));
                                                } elseif(strpos($mainDiv->getAttribute('class'), 'relationDisable') === false && (!isset($documentFields[$findValue->selectedtype]))) {
                                                    //comments below line of code and add this condition with elseif and === false
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrSelectedType] = '';
                                                }/* elseif(!isset($documentFields[$findValue->selectedtype])) {
                                                    $documentFields[$apiAttributeOrSelectedType] = '';
                                                }

                                                if(strpos($mainDiv->getAttribute('class'), 'relationDisable') !== false && (!isset($documentFields[$findValue->selectedtype]))) {
                                                    $documentFields[$apiAttributeOrSelectedType] = '';
                                                } */
                                            }   //not equal condition ends here
                                        }   //getting document text fields ends here
                                        //getting custom text fields
                                        try {
                                            if(strpos($findValue->getAttribute('class'), 'field_box_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'datepickerfields_new') === false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                                $apiAttributeOrSelectedType = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->selectedtype);
                                                if($parent_id == 10719) {
                                                    $apiAttributeOrSelectedType = str_replace(' ', '_', $apiAttributeOrSelectedType);
                                                }
                                                //comment below line on 5 August 2020 for not show the key if value is empty
                                                //$documentFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                                if(isset($findValue->find('h4', 0)->plaintext) && $findValue->find('h4', 0)->plaintext != '') {
                                                    $documentFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                                }
                                                if(isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '') {
                                                    $documentFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('p', 0)->plaintext)));
                                                }
                                            }
                                        } catch(\Exception $e) {}

                                        //getting datepicker fields
                                        try {
                                            if(strpos($findValue->getAttribute('class'), 'field_box_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'datepickerfields_new') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                                $apiAttributeOrSelectedType = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->selectedtype);
                                                if($parent_id == 10719) {
                                                    $apiAttributeOrSelectedType = str_replace(' ', '_', $apiAttributeOrSelectedType);
                                                }
                                                //comment below line on 5 August 2020 for not show the key if value is empty
                                                //$documentFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                                if(isset($findValue->find('h4', 0)->plaintext) && $findValue->find('h4', 0)->plaintext !== '') {
                                                    $documentFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                                }
                                                if(isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '') {
                                                    $documentFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('p', 0)->plaintext)));
                                                }
                                            }
                                        } catch(\Exception $e) {}

                                        //getting document checkbox elements
                                        if(strpos($findValue->getAttribute('class'), 'documentFieldCheckbox') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                            //all values of checkboxes are showing
                                            $apiAttributeOrFieldLabelName = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->fieldlabelname);
                                            if($parent_id == 10719) {
                                                $apiAttributeOrFieldLabelName = str_replace(' ', '_', $apiAttributeOrFieldLabelName);
                                            }
                                            if($findValue->find('.check_icon', 0) && (strpos($findValue->find('.check_icon', 0)->getAttribute('style'), 'visible') !== false || strpos($findValue->getAttribute('class'), 'isChecked') !== false)) {
                                                $documentFields[$apiAttributeOrFieldLabelName] = 'Yes';
                                            } else {
                                                $documentFields[$apiAttributeOrFieldLabelName] = 'No';
                                            }
                                        }   //getting document checkbox elements ends here
                                        //getting custom checkbox elements
                                        if(strpos($findValue->getAttribute('class'), 'check_box_popupcontainer') !== false && strpos($mainDiv->getAttribute('class'), 'chechBoxCustom') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                            $apiAttributeOrFieldLabelName = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->fieldlabelname);
                                            if($parent_id == 10719) {
                                                $apiAttributeOrFieldLabelName = str_replace(' ', '_', $apiAttributeOrFieldLabelName);
                                            }
                                            if($findValue->find('.check_icon', 0) && strpos($findValue->find('.check_icon', 0)->getAttribute('style'), 'visible')) {
                                                $documentFields[$apiAttributeOrFieldLabelName] = 'Yes';
                                            } else {
                                                $documentFields[$apiAttributeOrFieldLabelName] = 'No';
                                            }
                                        }

                                        //getting document droplist elements
                                        $jsonDecodeDropDownValues = (isset($findValue->dropdownvalues) && !empty($findValue->dropdownvalues) ? json_decode(html_entity_decode($findValue->dropdownvalues), true) : []);
                                        $jsonDecodeDropDownAlternativeValues = (isset($findValue->dropdownvalues_alternate) && !empty($findValue->dropdownvalues_alternate) ? json_decode(html_entity_decode($findValue->dropdownvalues_alternate), true) : []);
                                        if(strpos($findValue->getAttribute('class'), 'documentFieldDroplist') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                                            if($parent_id == 10719) {
                                                $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                                            }
                                            if($findValue->find('span.texthere', 0)) {
                                                if(!empty($jsonDecodeDropDownValues) && isset($findValue->dropdownlabel) && isset($findValue->find('span.texthere', 0)->plaintext) && $findValue->dropdownlabel != trim($findValue->find('span.texthere', 0)->plaintext)) {
                                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('span.texthere', 0)->plaintext))));
                                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->plaintext) && $findValue->find('span.texthere', 0)->plaintext != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                                    }
                                                } elseif(array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('span.texthere', 0)->plaintext))));
                                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->plaintext) && $findValue->find('span.texthere', 0)->plaintext != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                                    }
                                                } else {
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : ''));
                                                    if(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    }
                                                }
                                            } else {
                                                if(!empty($jsonDecodeDropDownValues) && $findValue->dropdownlabel != trim($findValue->find('p', 0)->plaintext)) {
                                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('p', 0)->plaintext))));
                                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    } elseif(isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('p', 0)->plaintext);
                                                    }
                                                } elseif(array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('p', 0)->plaintext))));
                                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    } elseif(isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('p', 0)->plaintext);
                                                    }
                                                } else {
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : ''));
                                                    if(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    }
                                                }
                                            }
                                        }   //getting document droplist elements ends here
                                        //getting custom droplist elements
                                        if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                                            if($parent_id == 10719) {
                                                $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                                            }
                                            if($findValue->find('span.texthere', 0)) {
                                                if(!empty($jsonDecodeDropDownValues) && $findValue->dropdownlabel != trim($findValue->find('span.texthere', 0)->plaintext)) {
                                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('span.texthere', 0)->plaintext))));
                                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->plaintext) && $findValue->find('span.texthere', 0)->plaintext != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                                    }
                                                } elseif(isset($findValue->find('span.texther', 0)->plaintext) && array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('span.texthere', 0)->plaintext))));
                                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->plaintext) && $findValue->find('span.texthere', 0)->plaintext != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                                    }
                                                } else {
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : ''));
                                                    if(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    }
                                                }
                                            } else {
                                                if(!empty($jsonDecodeDropDownValues) && isset($findValue->dropdownlabel) && isset($findValue->find('span.texthere', 0)->plaintext) && $findValue->dropdownlabel != trim($findValue->find('span.texthere', 0)->plaintext)) {
                                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('p', 0)->plaintext))));
                                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    } elseif(isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('p', 0)->plaintext);
                                                    }
                                                } elseif(isset($findValue->find('span.texther', 0)->plaintext) && array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('p', 0)->plaintext))));
                                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    } elseif(isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('p', 0)->plaintext);
                                                    }
                                                } else {
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : ''));
                                                    if(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    }
                                                }
                                            }
                                        }
                                        //document field droplist with multiple radio button
                                        if(strpos($findValue->getAttribute('class'), 'documentFieldDroplist') !== false && strpos($findValue->getAttribute('class'), 'dropdown_radioList_api') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                                            if($parent_id == 10719) {
                                                $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                                            }
                                            if($findValue->find('.fa-dot-circle-o', 0)) {
                                                //$documentFields[$apiAttributeOrDropDownLabel] = $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext;
                                                $getArrayKey = array_search(trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext), $jsonDecodeDropDownValues);
                                                //$documentFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? $jsonDecodeDropDownAlternativeValues[$getArrayKey] : $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext);
                                                if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                                    $documentFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                                } elseif(isset($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext) && $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext != '') {
                                                    $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext);
                                                }
                                            } else {
                                                //comment below line on 5 August 2020 for not show the key if value is empty
                                                //$documentFields[$apiAttributeOrDropDownLabel] = '';
                                            }
                                        }
                                        //document field droplist with multiple radio button of custom and me
                                        if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'dropdown_radioList_api') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                                            if($parent_id == 10719) {
                                                $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                                            }
                                            if($findValue->find('.fa-dot-circle-o', 0)) {
                                                //$documentFields[$apiAttributeOrDropDownLabel] = $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext;
                                                $getArrayKey = array_search(trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext), $jsonDecodeDropDownValues);
                                                //$documentFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? $jsonDecodeDropDownAlternativeValues[$getArrayKey] : $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext);
                                                if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                                    $documentFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                                } elseif(isset($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext) && $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext != '') {
                                                    $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext);
                                                }
                                            } else {
                                                //comment below line on 5 August 2020 for not show the key if value is empty
                                                //$documentFields[$apiAttributeOrDropDownLabel] = '';
                                            }
                                        }
                                        //document field droplist with multiple checkboxes
                                        if(strpos($findValue->getAttribute('class'), 'documentFieldDroplist') !== false && strpos($findValue->getAttribute('class'), 'multi_choice_option') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                                            if($parent_id == 10719) {
                                                $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                                            }
                                            if($findValue->find('.fa-check', 0)) {
                                                $faCheckValues = [];
                                                foreach($findValue->find('.ionIconsCheck') as $checkBoxKey => $checkBoxValue) {
                                                    if(strpos($checkBoxValue->getAttribute('class'), 'fa-check') !== false) {
                                                        $faCheckValues[] = (isset($jsonDecodeDropDownAlternativeValues[$checkBoxKey]) && $jsonDecodeDropDownAlternativeValues[$checkBoxKey] != '' ? $jsonDecodeDropDownAlternativeValues[$checkBoxKey] : $checkBoxValue->parent()->parent()->find('label', 0)->innertext);
                                                    }
                                                }
                                                if(!empty($faCheckValues)) {
                                                    $totalFaCheckValues = count($faCheckValues);
                                                    if($totalFaCheckValues > 1) {
                                                        $faCheckValues = implode(', ' , array_slice($faCheckValues,0,$totalFaCheckValues-1)) . ' and ' . end($faCheckValues);
                                                    } else {
                                                        $faCheckValues = implode(', ' , $faCheckValues);
                                                    }
                                                    $documentFields[$apiAttributeOrDropDownLabel] = $faCheckValues;
                                                }
                                            } else {
                                                //comment below line on 5 August 2020 for not show the key if value is empty
                                                //$documentFields[$apiAttributeOrDropDownLabel] = '';
                                            }
                                        }
                                        //document field droplist with multiple checkboxes of custom and me
                                        if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'multi_choice_option') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                                            if($parent_id == 10719) {
                                                $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                                            }
                                            if($findValue->find('.fa-check', 0)) {
                                                $faCheckValues = [];
                                                foreach($findValue->find('.ionIconsCheck') as $checkBoxKey => $checkBoxValue) {
                                                    if(strpos($checkBoxValue->getAttribute('class'), 'fa-check') !== false) {
                                                        $faCheckValues[] = (isset($jsonDecodeDropDownAlternativeValues[$checkBoxKey]) && $jsonDecodeDropDownAlternativeValues[$checkBoxKey] != '' ? $jsonDecodeDropDownAlternativeValues[$checkBoxKey] : $checkBoxValue->parent()->parent()->find('label', 0)->innertext);
                                                    }
                                                }
                                                if(!empty($faCheckValues)) {
                                                    $totalFaCheckValues = count($faCheckValues);
                                                    if($totalFaCheckValues > 1) {
                                                        $faCheckValues = implode(', ' , array_slice($faCheckValues,0,$totalFaCheckValues-1)) . ' and ' . end($faCheckValues);
                                                    } else {
                                                        $faCheckValues = implode(', ' , $faCheckValues);
                                                    }
                                                    $documentFields[$apiAttributeOrDropDownLabel] = $faCheckValues;
                                                }
                                            } else {
                                                //comment below line on 5 August 2020 for not show the key if value is empty
                                                //$documentFields[$apiAttributeOrDropDownLabel] = '';
                                            }
                                        } //selectcolor_popupcontainer condition ends here
                                    }   //second foreach loop ends here
                                }   //first foreach loop ends here

                                foreach($html->find('.dynamicTag') as $findTagKey => $findTagValue) {
                                    if(strpos($findTagValue->getAttribute('class'), 'documenttagName') !== false) {
                                        $apiAttributeOrTagName = (isset($findTagValue->apitagattribute) && $findTagValue->apitagattribute != '' ? $findTagValue->apitagattribute : $findTagValue->tagname);
                                        if($parent_id == 10719) {
                                            $apiAttributeOrTagName = str_replace(' ', '_', $apiAttributeOrTagName);
                                        }
                                        $jsonDecodeDropDownValues = (isset($findTagValue->dropdownvalues) && !empty($findTagValue->dropdownvalues) ? json_decode(html_entity_decode($findTagValue->dropdownvalues), true) : []);
                                        $jsonDecodeDropDownAlternativeValues = (isset($findTagValue->dropdownvalues_alternate) && !empty($findTagValue->dropdownvalues_alternate) ? json_decode(html_entity_decode($findTagValue->dropdownvalues_alternate), true) : []);

                                        if(strpos($findTagValue->getAttribute('class'), 'documentdroplisttagname') !== false) {
                                            if(isset($findTagValue->dropdownapi) && $findTagValue->dropdownapi != '') {
                                                $documentFields[$apiAttributeOrTagName] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                                            } else {
                                                $tagValuesArray = [];
                                                foreach($jsonDecodeDropDownValues as $dropDownKey => $dropDownValues) {
                                                    if(isset($findTagValue->plaintext) && !empty($findTagValue->plaintext) && isset($dropDownValues) && !empty($dropDownValues)) {
                                                        if(strpos($findTagValue->plaintext, $dropDownValues) > -1) {
                                                            $getArrayKey = array_search(trim($dropDownValues), $jsonDecodeDropDownValues);
                                                            $tagValuesArray[] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && !empty($jsonDecodeDropDownAlternativeValues[$getArrayKey]) ? $jsonDecodeDropDownAlternativeValues[$getArrayKey] : $utility->convertDateMonthNameToInteger($languageId, trim($dropDownValues)));
                                                        } else {
                                                            $documentFields[$apiAttributeOrTagName] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                                                        }
                                                    }
                                                }
                                                $totalTagValuesArray = count($tagValuesArray);
                                                if($totalTagValuesArray > 1) {
                                                    $tagValuesArray = implode(', ' , array_slice($tagValuesArray,0,$totalTagValuesArray-1)) . ' and ' . end($tagValuesArray);
                                                } else {
                                                    $tagValuesArray = implode(', ' , $tagValuesArray);
                                                }
                                                $documentFields[$apiAttributeOrTagName] = $tagValuesArray;
                                            }
                                        } else {
                                            $documentFields[$apiAttributeOrTagName] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                                        }
                                    }
                                }
                                //document tags names showing and its loop ending

                                if($html->find('.billecta_GetBankInfo_h5')) {
                                    foreach($html->find('.billecta_GetBankInfo_h5') as $findBillectaKey => $findBillectaValue) {
                                        if(isset($findBillectaValue->billecta_row)) {
                                            if($html->find('.billecta_row_'.$findBillectaValue->billecta_row)) {
                                                if($findBillectaValue->innertext != '&nbsp;' && $findBillectaValue->innertext != '<br>') {
                                                    $documentFields[$findBillectaValue->innertext] = str_replace(',', ' ', $html->find('.billecta_row_'.$findBillectaValue->billecta_row, 0)->innertext);
                                                }
                                            }
                                        }
                                    }
                                }
                            }   //not empty condition on content ends here
                            //organization information of fields which are placed at document ending

                            //recipient information in details starting
                            if(isset($recipientUserDetailsJsonDecode['details_fields'])) {
                                $detailsFields = json_decode($recipientUserDetailsJsonDecode['details_fields'], true);
                                foreach($detailsFields as $orgFldsKey => $orgFldsValue) {
                                    $details[$orgFldsValue['detailsFieldName']] = $orgFldsValue['detailsFieldValue'];
                                }
                            } else {
                                $details['recipient_role'] = (isset($recipientUserDetailsJsonDecode['recrolename']) && $recipientUserDetailsJsonDecode['recrolename'] != '' ? $recipientUserDetailsJsonDecode['recrolename'] : (isset($recipientUserDetailsJsonDecode['partyname']) && $recipientUserDetailsJsonDecode['partyname'] != '' ? $recipientUserDetailsJsonDecode['partyname'] : ''));
                                if($contractDataValue['role'] == 2) {
                                    $contractDataValue['authentication_method'] = 8;
                                }
                                $details['authentication'] = $utility->authenticationMethodName($contractDataValue['authentication_method']);
                                if(isset($contractDataValue['invitation_type']) && $contractDataValue['invitation_type'] != '') {
                                    $details['invitation_type'] = $utility->invitationTypeName($contractDataValue['invitation_type']);
                                }
                                if($contractDataValue['invitation_order'] != 0) {
                                    $details['invitation_order'] = $contractDataValue['invitation_order'];
                                }
                                if(isset($contractDataValue['offer_confirmation']) && $contractDataValue['offer_confirmation'] != '') {
                                    $details['confirmation'] = $utility->offerConfirmationName($contractDataValue['offer_confirmation']);
                                }
                                $details['id_attachment'] = $utility->idAttachmentName($contractDataValue['id_attachments']);
                            }

                            $details['request_attachment'] = ($contractDataValue['req_attached'] != '' ? 'yes' : 'no');
                            if($contractDataValue['document_read_date'] != '' && $contractDataValue['document_read_date'] != '0000-00-00 00:00:00') {
                                //if($_SERVER['HTTP_HOST'] == 'acceptance.simplesign.io') {
                                    $details['last_viewing_date'] = ($contractDataValue['document_read_date'] != '' ? $utility->changeTimeZone($contractDataValue['document_read_date'], 'Y-m-d H:i:s', 'UTC', $userTimeZone) : '');
                                /* } else {
                                    $details['last_viewing_date'] = ($contractDataValue['document_read_date'] != '' ? $utility->changeTimeZone($contractDataValue['document_read_date'], 'Y-m-d H:i:s', 'UTC', $userTimeZone) : '');
                                } */
                            }
                            //$details['signed_date'] = ($contractDataValue['signed_date'] != '' && $contractDataValue['signed_date'] != '0000-00-00 00:00:00' ? $utility->changeTimeZone($contractDataValue['signed_date'], 'Y-m-d H:i:s', 'UTC', $userTimeZone) : '');
                            $details['signed_date'] = '';
                            if($contractDataValue['signed_date'] != '' && $contractDataValue['signed_date'] != '0000-00-00 00:00:00' && $contractDataValue['offer_status'] == 4 && $contractDataValue['role'] == 1) {
                                //if($_SERVER['HTTP_HOST'] == 'acceptance.simplesign.io') {
                                    $details['signed_date'] = $utility->changeTimeZone($contractDataValue['signed_date'], 'Y-m-d H:i:s', 'UTC', $userTimeZone);
                                /* } else {
                                    $details['signed_date'] = $contractDataValue['signed_date'];
                                } */
                            } elseif($contractDataValue['signed_date'] != '' && $contractDataValue['signed_date'] != '0000-00-00 00:00:00' && $contractDataValue['offer_status'] == 3 && $contractDataValue['role'] == 2) {
                                //if($_SERVER['HTTP_HOST'] == 'acceptance.simplesign.io') {
                                    $details['signed_date'] = $utility->changeTimeZone($contractDataValue['signed_date'], 'Y-m-d H:i:s', 'UTC', $userTimeZone);
                                /* } else {
                                    $details['signed_date'] = $contractDataValue['signed_date'];
                                } */
                            }
                            if($contractDataValue['offer_status'] == 4 && $contractDataValue['forward_status'] == 1 && $contractDataValue['forward_signed'] == 1) {
                                $details['status'] = 'Forwarded to sign';
                            } elseif($contractDataValue['offer_status'] < 4 && $contractDataValue['forward_status'] == 1 && $contractDataValue['forward_signed'] == 0) {
                                $details['status'] = 'Invited to view';
                            } else {
                                $details['status'] = (isset($contractDataValue['offer_status']) != '' ? $utility->offerStatusName($contractDataValue['offer_status']) : '');
                            }
                            if($contractDataValue['forward_user_details'] != '') {
                                $forwardUserDetails = Tcrypt::decrypter($contractDataValue['forward_user_details']);
                                if($forwardUserDetails != '') {
                                    $forwardUserDetailsJsonDecode = json_decode($forwardUserDetails, true);
                                    $forwaredFullName = (isset($forwardUserDetailsJsonDecode['full_name']) && $forwardUserDetailsJsonDecode['full_name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($forwardUserDetailsJsonDecode['full_name'])) : '');
                                    $inviteAndForwardDetails['first_name'] = (isset($forwaredFullName[0]) && $forwaredFullName[0] != '' ? trim($forwaredFullName[0]) : '');
                                    $inviteAndForwardDetails['last_name'] = (isset($forwaredFullName[1]) && $forwaredFullName[1] != '' ? trim($forwaredFullName[1]) : '');
                                    //$inviteAndForwardDetails['email'] = (isset($forwardUserDetailsJsonDecode['email']) && $forwardUserDetailsJsonDecode['email'] != '' ? trim($forwardUserDetailsJsonDecode['email']) : '');
                                    //$inviteAndForwardDetails['mobile'] = (isset($forwardUserDetailsJsonDecode['mobile']) && $forwardUserDetailsJsonDecode['mobile'] != '' ? trim($forwardUserDetailsJsonDecode['mobile']) : '');

                                    /* test condition as per zain suggestion when signing role is forwarded */
                                    /* Setting keys in the object for signature role sender and reciever */
                                    if($contractDataValue['offer_status'] == 4 && $contractDataValue['forward_status'] == 1 && $contractDataValue['forward_signed'] == 1) {
                                        $details['forwarded_signing_role_to'] = $inviteAndForwardDetails['first_name'].' '.$inviteAndForwardDetails['last_name'];
                                    } elseif((($contractDataValue['offer_status'] <= 4 && $contractDataValue['role'] == 1) || ($contractDataValue['offer_status'] == 3 && $contractDataValue['role'] == 2)) && $contractDataValue['forward_status'] == 2 && isset($recipientUserDetailsJsonDecode['forward_to_sign']) && $recipientUserDetailsJsonDecode['forward_to_sign'] == 1) {
                                        $details['invited_to_sign_by'] = $inviteAndForwardDetails['first_name'].' '.$inviteAndForwardDetails['last_name'];
                                    }
                                    //echo ($contractDataValue['forward_status']. ' ' .$recipientUserDetailsJsonDecode['email'].' '.$contractDataValue['forward_signed'].' '.(isset($forwardUserDetailsJsonDecode['invited_to_view']) ? $forwardUserDetailsJsonDecode['invited_to_view'] : "") );echo'<br>';
                                    /* test condition as per zain suggestion when only invited to view */
                                    /* Setting keys in the object for sender and reciever of invitation to view only*/
                                    if($contractDataValue['forward_status'] == 1 && $contractDataValue['forward_signed'] == 0) {
                                        $details['invited_to_view_only'] = $inviteAndForwardDetails['first_name'].' '.$inviteAndForwardDetails['last_name'];
                                    } elseif($contractDataValue['forward_status'] == 2 && isset($recipientUserDetailsJsonDecode['invited_to_view']) && $recipientUserDetailsJsonDecode['invited_to_view'] == 1) {
                                        $details['invited_to_view_only_by'] = $inviteAndForwardDetails['first_name'].' '.$inviteAndForwardDetails['last_name'];
                                    }
                                }
                            }
                            //$details['status'] = (isset($contractDataValue['offer_status']) != '' ? $utility->offerStatusName($contractDataValue['offer_status']) : '');
                            //this is for rejected to show in sender status
                            //recipient information in details ending

                            if(!empty($organizationFields)) {
                                $eachArray = ['people_fields' => $peopleFields, 'organization_fields' => $organizationFields, 'details' => $details];
                            } else {
                                $eachArray = ['people_fields' => $peopleFields, 'details' => $details];
                            }
                            array_push($peoples, $eachArray);
                        }   //getting recipient data ending
                        elseif($contractDataValue['offer_sent_id'] == $eachSentId && $contractDataValue['is_sender'] == 1) {
                            $documentDetails['template_name'] = (isset($sentIdsValue['visible_name']) && $sentIdsValue['visible_name'] != '' ? trim(Tcrypt::decrypter($sentIdsValue['visible_name'])) : trim(Tcrypt::decrypter($sentIdsValue['name'])));
                            $documentDetails['document_id'] = (!empty($sentIdsValue['external_doc_id']) ? $sentIdsValue['external_doc_id'] : $sentIdsValue['id']);
                            $documentDetails['template_id'] = $sentIdsValue['offer_id'];
                            $documentDetails['language'] = (isset($sentIdsValue['language_id']) && $sentIdsValue['language_id'] != '' ? $utility->languageName($sentIdsValue['language_id']) : 'English');
                            //if($_SERVER['HTTP_HOST'] == 'acceptance.simplesign.io') {
                                $documentDetails['sent_date'] = (isset($sentIdsValue['created_date']) && $sentIdsValue['created_date'] != '' && $sentIdsValue['created_date'] != '0000-00-00 00:00:00' ? $utility->changeTimeZone(trim($sentIdsValue['created_date']), 'Y-m-d H:i:s', 'UTC', $userTimeZone) : '');
                                $documentDetails['signed_date'] = (isset($sentIdsValue['signed_date']) && $sentIdsValue['signed_date'] != '' && $sentIdsValue['signed_date'] != '0000-00-00 00:00:00' ? $utility->changeTimeZone(trim($sentIdsValue['signed_date']), 'Y-m-d H:i:s', 'UTC', $userTimeZone) : '');
                                $documentDetails['due_date'] = (isset($sentIdsValue['due_date']) && $sentIdsValue['due_date'] != '' && $sentIdsValue['due_date'] != '0000-00-00 00:00:00' ? $utility->changeTimeZone(trim(date('Y-m-d', strtotime($sentIdsValue['due_date']))), 'Y-m-d', 'UTC', $userTimeZone) : '');
                            /* } else {
                                $documentDetails['sent_date'] = (isset($sentIdsValue['created_date']) && $sentIdsValue['created_date'] != '' && $sentIdsValue['created_date'] != '0000-00-00 00:00:00' ? $utility->changeTimeZone(trim($sentIdsValue['created_date']), 'Y-m-d H:i:s', 'UTC', $userTimeZone) : '');
                                $documentDetails['signed_date'] = (isset($sentIdsValue['signed_date']) && $sentIdsValue['signed_date'] != '' && $sentIdsValue['signed_date'] != '0000-00-00 00:00:00' ? $utility->changeTimeZone(trim($sentIdsValue['signed_date']), 'Y-m-d H:i:s', 'UTC', $userTimeZone) : '');
                                $documentDetails['due_date'] = (isset($sentIdsValue['due_date']) && $sentIdsValue['due_date'] != '' && $sentIdsValue['due_date'] != '0000-00-00 00:00:00' ? trim(date('Y-m-d', strtotime($sentIdsValue['due_date']))) : '');
                            } */
                            if(isset($data['status']) && ($data['status'] == 'rejected' || $data['status'] == 'Rejected')) {
                                $documentDetails['status'] = 'Rejected';
                            } else {
                                $documentDetails['status'] = (isset($sentIdsValue['offer_status']) ? $utility->offerStatusName($sentIdsValue['offer_status']) : '');
                            }
                            $markCompleted = Offersent_data::where('sent_id', $eachSentId)->pluck('mark_completed');
                            $multiCaseManagement = Offersent_data::where('sent_id', $eachSentId)->pluck('multi_case_management');
                            $contractTypeId = Offersent_data::where('sent_id', $eachSentId)->pluck('contract_type_id');
                            $markCompletedDate = Offersent_data::where('sent_id', $eachSentId)->pluck('mark_completed_date');
                            $costmargin = "";
                            /* Adding gross margin and total cost in Api response */
                            $costmargin = Offersent_data::where('sent_id', $eachSentId)->whereNotNull('document_cost')->whereNotNull('document_margin')->whereNotNull('document_price')->select('document_price', 'document_cost', 'document_margin')->first();
                            if($_SERVER['HTTP_HOST'] == 'beta.simplesign.io') {
                                //$documentDetails['contract_type'] = DB::table('archive_document_types')->where('id', $contractTypeId)->pluck('type_name');
                            }
                            if(!empty($getAddOnObjectData['new_addon_obj'])) {
                                $newAddonObjJesonDecode = json_decode($getAddOnObjectData['new_addon_obj'], true);
                                if(isset($newAddonObjJesonDecode['mark_as_completed_addon']) && $newAddonObjJesonDecode['mark_as_completed_addon'] == 1) {
                                    if((isset($data['task_name']) && $data['task_name'] != '') || (isset($data['task_status']) && $data['task_status'] != '')) {
                                        if(isset($newAddonObjJesonDecode['mark_as_completed_addon_setting']) && !empty($newAddonObjJesonDecode['mark_as_completed_addon_setting'])) {
                                            $markAsCompletedAddonSettingJsonDecode = json_decode($newAddonObjJesonDecode['mark_as_completed_addon_setting'], true);
                                            $multiCaseManagementJsonDecode = (isset($multiCaseManagement) && !empty($multiCaseManagement) ? json_decode($multiCaseManagement, true) : []);
                                            if(isset($markAsCompletedAddonSettingJsonDecode['mark_tasks_array']) && !empty($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'])) {
                                                $numberIncrement = 0;
                                                foreach($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'] as $markAsCompletedAddonSettingJsonDecodeKey => $markAsCompletedAddonSettingJsonDecodeValue) {
                                                    $numberIncrement++;
                                                    if(isset($data['task_status']) && $data['task_status'] != '') {
                                                        if(isset($multiCaseManagementJsonDecode[$numberIncrement]) && !empty($multiCaseManagementJsonDecode[$numberIncrement]) && $multiCaseManagementJsonDecode[$numberIncrement]['status_text'] == $data['task_status'] && isset($markAsCompletedAddonSettingJsonDecodeValue['tasknames']) && !empty($markAsCompletedAddonSettingJsonDecodeValue['tasknames']) && $markAsCompletedAddonSettingJsonDecodeValue['tasknames'] == $data['task_name']) {
                                                            if(in_array($contractTypeId, $markAsCompletedAddonSettingJsonDecodeValue['contract_type_selected']) && (in_array($sentIdsValue['offer_status'], $markAsCompletedAddonSettingJsonDecodeValue['marked_addon_status']) || in_array("", $markAsCompletedAddonSettingJsonDecodeValue['marked_addon_status']))) {
                                                                //in_array condtion for offer_status from offer_sent and in_array('') empty for any which we are showing in the case management add status
                                                                $conditionalText = '';
                                                                if(isset($multiCaseManagementJsonDecode[$numberIncrement]) && !empty($multiCaseManagementJsonDecode[$numberIncrement])) {
                                                                    if(isset($multiCaseManagementJsonDecode[$numberIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numberIncrement]['status_text'] == 'done') {
                                                                        $conditionalText = 'Yes';
                                                                    } elseif(isset($multiCaseManagementJsonDecode[$numberIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numberIncrement]['status_text'] == 'in_process') {
                                                                        $conditionalText = 'In process';
                                                                    } elseif(isset($multiCaseManagementJsonDecode[$numberIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numberIncrement]['status_text'] == 'no') {
                                                                        $conditionalText = 'No';
                                                                    }
                                                                    if(isset($multiCaseManagementJsonDecode[$numberIncrement]['task_no']) && isset($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'][$multiCaseManagementJsonDecode[$numberIncrement]['task_no']])) {
                                                                        $documentDetails[$markAsCompletedAddonSettingJsonDecode['mark_tasks_array'][$multiCaseManagementJsonDecode[$numberIncrement]['task_no']]['tasknames']] = $conditionalText;//$multiCaseManagementJsonDecode[$numberIncrement]['status_text'];
                                                                    } else {
                                                                        if(isset($multiCaseManagementJsonDecode[$numberIncrement]['task_no'])) {
                                                                            $documentDetails[$markAsCompletedAddonSettingJsonDecodeValue['tasknames']] = 'No';
                                                                        }
                                                                    }
                                                                } else {
                                                                    $documentDetails[$markAsCompletedAddonSettingJsonDecodeValue['tasknames']] = 'No';
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if(isset($multiCaseManagementJsonDecode[$numberIncrement]) && !empty($multiCaseManagementJsonDecode[$numberIncrement]) && isset($markAsCompletedAddonSettingJsonDecodeValue['tasknames']) && !empty($markAsCompletedAddonSettingJsonDecodeValue['tasknames']) && $markAsCompletedAddonSettingJsonDecodeValue['tasknames'] == $data['task_name']) {
                                                            if(in_array($contractTypeId, $markAsCompletedAddonSettingJsonDecodeValue['contract_type_selected']) && (in_array($sentIdsValue['offer_status'], $markAsCompletedAddonSettingJsonDecodeValue['marked_addon_status']) || in_array("", $markAsCompletedAddonSettingJsonDecodeValue['marked_addon_status']))) {
                                                                //in_array condtion for offer_status from offer_sent and in_array('') empty for any which we are showing in the case management add status
                                                                $conditionalText = '';
                                                                if(isset($multiCaseManagementJsonDecode[$numberIncrement]) && !empty($multiCaseManagementJsonDecode[$numberIncrement])) {
                                                                    if(isset($multiCaseManagementJsonDecode[$numberIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numberIncrement]['status_text'] == 'done') {
                                                                        $conditionalText = 'Yes';
                                                                    } elseif(isset($multiCaseManagementJsonDecode[$numberIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numberIncrement]['status_text'] == 'in_process') {
                                                                        $conditionalText = 'In process';
                                                                    } elseif(isset($multiCaseManagementJsonDecode[$numberIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numberIncrement]['status_text'] == 'no') {
                                                                        $conditionalText = 'No';
                                                                    }
                                                                    if(isset($multiCaseManagementJsonDecode[$numberIncrement]['task_no']) && isset($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'][$multiCaseManagementJsonDecode[$numberIncrement]['task_no']])) {
                                                                        $documentDetails[$markAsCompletedAddonSettingJsonDecode['mark_tasks_array'][$multiCaseManagementJsonDecode[$numberIncrement]['task_no']]['tasknames']] = $conditionalText;//$multiCaseManagementJsonDecode[$numberIncrement]['status_text'];
                                                                    } else {
                                                                        if(isset($multiCaseManagementJsonDecode[$numberIncrement]['task_no'])) {
                                                                            $documentDetails[$markAsCompletedAddonSettingJsonDecodeValue['tasknames']] = 'No';
                                                                        }
                                                                    }
                                                                } else {
                                                                    $documentDetails[$markAsCompletedAddonSettingJsonDecodeValue['tasknames']] = 'No';
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if(isset($newAddonObjJesonDecode['mark_as_completed_addon_setting']) && !empty($newAddonObjJesonDecode['mark_as_completed_addon_setting'])) {
                                            $markAsCompletedAddonSettingJsonDecode = json_decode($newAddonObjJesonDecode['mark_as_completed_addon_setting'], true);
                                            $multiCaseManagementJsonDecode = (isset($multiCaseManagement) && !empty($multiCaseManagement) ? json_decode($multiCaseManagement, true) : []);
                                            if(isset($markAsCompletedAddonSettingJsonDecode['mark_tasks_array']) && !empty($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'])) {
                                                $numberIncrement = 0;
                                                $flagForCompletedKey = false;
                                                $completeStatus = 'Not completed';
                                                foreach($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'] as $markAsCompletedAddonSettingJsonDecodeKey => $markAsCompletedAddonSettingJsonDecodeValue) {
                                                    if(in_array($contractTypeId, $markAsCompletedAddonSettingJsonDecodeValue['contract_type_selected']) && (in_array($sentIdsValue['offer_status'], $markAsCompletedAddonSettingJsonDecodeValue['marked_addon_status']) || in_array("", $markAsCompletedAddonSettingJsonDecodeValue['marked_addon_status']))) {
                                                        //in_array condtion for offer_status from offer_sent and in_array('') empty for any which we are showing in the case management add status
                                                        if(isset($data['task_filter']) && $data['task_filter'] != '' && array_search($markAsCompletedAddonSettingJsonDecodeValue['tasknames'], array_column($taskFilterArray, 'task_name')) === false) {
                                                            continue;
                                                        }
                                                        $numberIncrement++;
                                                        $conditionalText = '';
                                                        if(isset($multiCaseManagementJsonDecode[$numberIncrement]) && !empty($multiCaseManagementJsonDecode[$numberIncrement])) {
                                                            if(isset($multiCaseManagementJsonDecode[$numberIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numberIncrement]['status_text'] == 'done') {
                                                                $conditionalText = 'Yes';
                                                            } elseif(isset($multiCaseManagementJsonDecode[$numberIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numberIncrement]['status_text'] == 'in_process') {
                                                                $conditionalText = 'In process';
                                                            } elseif(isset($multiCaseManagementJsonDecode[$numberIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numberIncrement]['status_text'] == 'no') {
                                                                $conditionalText = 'No';
                                                            }
                                                            if(isset($multiCaseManagementJsonDecode[$numberIncrement]['task_no']) && isset($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'][$multiCaseManagementJsonDecode[$numberIncrement]['task_no']])) {
                                                                $documentDetails[$markAsCompletedAddonSettingJsonDecode['mark_tasks_array'][$multiCaseManagementJsonDecode[$numberIncrement]['task_no']]['tasknames']] = $conditionalText;
                                                            } else {
                                                                if(isset($multiCaseManagementJsonDecode[$numberIncrement]['task_no']) && $multiCaseManagementJsonDecode[$numberIncrement]['task_no'] != '') {
                                                                    $documentDetails[$markAsCompletedAddonSettingJsonDecodeValue['tasknames']] = 'No';
                                                                    $flagForCompletedKey = true;
                                                                }
                                                            }
                                                        } else {
                                                            //this is showing if users does not change the process
                                                            if($markCompleted != 1) {
                                                                $documentDetails[$markAsCompletedAddonSettingJsonDecodeValue['tasknames']] = 'No';
                                                            }
                                                            $flagForCompletedKey = true;
                                                        }
                                                        if(isset($multiCaseManagementJsonDecode[$numberIncrement]) && !empty($multiCaseManagementJsonDecode[$numberIncrement]) && isset($multiCaseManagementJsonDecode[$numberIncrement]['status_activity']) && !empty($multiCaseManagementJsonDecode[$numberIncrement]['status_activity'])) {
                                                            $flagForCompletedKey = true;
                                                            //if(count($multiCaseManagementJsonDecode) == $isCompleted && $markAsCompletedAddonSettingJsonDecodeKey == count($markAsCompletedAddonSettingJsonDecode['mark_tasks_array']) -1) {
                                                            if($markCompleted == 1) {
                                                                //if($_SERVER['HTTP_HOST'] == 'acceptance.simplesign.io') {
                                                                    $completeStatus = $utility->changeTimeZone($markCompletedDate, 'Y-m-d H:i:s', 'UTC', $userTimeZone);
                                                                /* } else {
                                                                    $completeStatus = $utility->changeTimeZone($markCompletedDate, 'Y-m-d H:i:s', 'UTC', $userTimeZone);
                                                                } */
                                                            }
                                                        }   //status_activity
                                                    }
                                                }
                                                //if(!empty($multiCaseManagementJsonDecode)) {
                                                if(!empty($flagForCompletedKey)) {
                                                    $documentDetails['completed'] = $completeStatus;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            $documentDetails['pdf'] = $domain_name.'avtal/downloadpdf/'.$sentIdsValue['id'].'/'.$uniqueId;
                            $documentDetails['document_url'] = $documentLink;

                            if ($costmargin != "") {
                                if ($costmargin['document_cost'] != "NULL") {
                                    $documentDetails['document_cost'] =  $costmargin['document_cost'];
                                }

                                if ($costmargin['document_margin'] != "NULL") {
                                    $documentDetails['document_margin'] =  $costmargin['document_margin'];
                                }

                                if ($costmargin['document_price'] != "NULL") {
                                    $documentDetails['document_price'] =  $costmargin['document_price'];
                                }
                            }
                        }
                    }   //details foreach loop ends here

                    $responseArray[$sentIdsKey]['peoples'] = $peoples;
                    if(!empty($documentFields)) {
                        //showing alphbats order to show document fields data
                        ksort($documentFields);
                        $responseArray[$sentIdsKey]['document_fields'] = $documentFields;
                    }
                    $responseArray[$sentIdsKey]['sender_details'] = $senderDetails;
                    $responseArray[$sentIdsKey]['account_details'] = $accountDetails;

                    //getdocumentinfobystatus API
                    $templatetabledata = $this->templateTables($sentIdsValue['id']);
                    foreach ($templatetabledata['producttables'] as $tablekey => $tabledata) {
                        $tablename = $tabledata['table_name'];
                        $tablecurrency = $tabledata['table_currency'];
                        $itemcollection = array();
                        foreach ($tabledata['tableitems'] as $itemkey => $itemdata) {
                            $itemdetails = array();
                            $itemdetails['product name'] = $itemdata['item_name'];
                            if ( isset($data['fromoverview']) && $data['fromoverview'] == 1 ) {
                                $itemdetails[$itemdata['item_name'].' (description)'] = ($itemdata['item_description'] != 'NULL' ? $itemdata['item_description'] : '');
                                $itemdetails[$itemdata['item_name'].' (quantity)'] = $itemdata['item_qty'];
                                $itemdetails[$itemdata['item_name'].' (price)'] = $itemdata['item_price'].' '.$tablecurrency;
                                if ($itemdata['item_discount'] != 0) {
                                    $itemdetails[$itemdata['item_name'].' (discount)'] = $itemdata['item_discount'].' %';
                                }
                                $itemdetails[$itemdata['item_name'].' (cost)'] = $itemdata['item_cost'].' '.$tablecurrency;
                                $itemdetails[$itemdata['item_name'].' (margin)'] = $itemdata['item_margin'].' '.$tablecurrency;
                            } else {
                                $itemdetails['description'] = ($itemdata['item_description'] != 'NULL' ? $itemdata['item_description'] : '');
                                $itemdetails['quantity'] = $itemdata['item_qty'];
                                if ($itemdata['item_discount'] != 0) {
                                    $itemdetails['item_discount'] = $itemdata['item_discount'].'%';
                                }
                                $itemdetails['price'] = $itemdata['item_price'].' '.$tablecurrency;
                                $itemdetails['cost'] = $itemdata['item_cost'].' '.$tablecurrency;
                                $itemdetails['margin'] = $itemdata['item_margin'].' '.$tablecurrency;
                            }
                            array_push($itemcollection, $itemdetails);
                            $responseArray[$sentIdsKey][$tablename] = $itemcollection;
                        }
                    }

                    $responseArray[$sentIdsKey]['document_details'] = $documentDetails;
                } //sent foreach loop ends here
                $updatedIndexData = DB::table('document_indexdata')->whereIn('document_id', $sentIdsForIndexdata)->get();
                if(!empty($updatedIndexData)) {
                    foreach($responseArray as $responseArrayKey => $responseArrayValue) { //loop on main array
                        $documentId = $responseArrayValue['document_details']['document_id'];
                        foreach($responseArrayValue['peoples'] as $peoplesKey => $peoplesValue) {
                            $recRole = $peoplesValue['details']['recipient_role'];
                            foreach($updatedIndexData as $updatedIndexDataKey => $updatedIndexDataValue) {
                                if($updatedIndexDataValue->rec_role == $recRole && $updatedIndexDataValue->document_id == $documentId) {
                                    if(in_array($updatedIndexDataValue->object_type, array_keys($peoplesValue))) {
                                        $orginalFields = json_decode($updatedIndexDataValue->old_field, true);
                                        $newFields = json_decode($updatedIndexDataValue->new_field, true);
                                        $fieldName = array_keys($orginalFields)[0]; // getting field name orginal as it can't be changed from UI
                                        $updatedFieldValue = array_values($newFields)[0]; // getting updated values of that particular field
                                        $responseArray[$responseArrayKey]['peoples'][$peoplesKey][$updatedIndexDataValue->object_type][$fieldName] = $updatedFieldValue;
                                    }
                                }
                            }
                        }
                        foreach($responseArrayValue['document_details'] as $documentDetailsKey => $documentDetailsValue) {
                            foreach($updatedIndexData as $updatedIndexDataKey => $updatedIndexDataValue) {
                                if($updatedIndexDataValue->document_id == $documentId && $updatedIndexDataValue->object_type == 'document_details') {
                                    $orginalFields = json_decode($updatedIndexDataValue->old_field, true);
                                    $newFields = json_decode($updatedIndexDataValue->new_field, true);
                                    $fieldName = array_keys($orginalFields)[0]; // getting field name orginal as it can't be changed from UI
                                    $updatedFieldValue = array_values($newFields)[0]; // getting updated values of that particular field
                                    $responseArray[$responseArrayKey]['document_details'][$fieldName] = $updatedFieldValue;
                                }
                            }
                        }
                    }
                }
                return response()->json(['status' => 'success', 'result' => $responseArray], 200, ['Content-Type' => 'application/json; charset=UTF-8'], JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
            } else {
                return Response::json(['status' => 'error', 'result' => 'No record(s) found']);
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }

    public function anyGetdocumentinfobystatuscurrentlyworking() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');
        $template_id = 0;
        $offerSentIds = $caseManagementOfferSentIds = [];

        //access_token validation starting
        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
        //access_token validation ending

        //status validation starting
        $checkingStatusForCondition = '';
        if(isset($data['status']) && $data['status'] != '') {
            $status = $data['status'];
            //status 2 for email open
            if($status == 'processing' || $status == 'Processing') {
                $status = 0;
            } elseif($status == 'delivered' || $status == 'Delivered') {
                $status = 1;
            } elseif($status == 'reviewed' || $status == 'Reviewed') {
                $status = 3;
            } elseif($status == 'signed' || $status == 'Signed') {
                $status = 4;
            } elseif($status == 'rejected' || $status == 'Rejected') {
                $status = 5;
            } else {
                return Response::json(['status' => 'error', 'result' => 'Invalid status']);
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'status is missing']);
        }
        //status validation ending

        $user_id = $utility->getUserIdByAuthToken($access_token);
        $parent_id = $utility->getParent($user_id);
        $userTimeZone = $utility->getUsertimezone($parent_id);
        $getApiHitCount = Userinfo::where('user_id', $parent_id)->select('hit_count')->first();
        $addupdateapiaccesslogs = $utility->addupdateapiaccesslogs($user_id, 'anyGetdocumentinfobystatus v3', $data, $getApiHitCount['hit_count']);
        if($addupdateapiaccesslogs == 'exceed') {
            $this->apiCallLimitExceedMessage = str_replace('#hitCuntNo', $getApiHitCount['hit_count'], $this->apiCallLimitExceedMessage);
            return Response::json(['status' => 'error', 'result' => $this->apiCallLimitExceedMessage]);
        }

        $subUserId = 0;
        if(isset($data['user_id']) && $data['user_id'] != '') {
            $subUserId = $data['user_id'];
            $checkUser = User::where('id', $subUserId)->where('parent_id', $user_id)->count();
            if(!$checkUser) {
                return Response::json(['status' => 'error', 'result' => 'invalid user_id']);
            }
        }

        if($utility->isParent($user_id) == 1) {
            $allUserIds = $utility->getSubusers($parent_id);
        } else {
            $allUserIds = [$user_id];
        }

        if($subUserId > 0) {
            $allUserIds = [$subUserId];
        }

        $userSettings = $utility->getUserSettings($parent_id);

        if($utility->checkAdminStripe($user_id)) {
            return Response::json(['status' => 'error', 'result' => 'Account is locked make payment in order to continue Simplesign.']);
        }

        $pageLimit = 10;
        if(isset($data['pagelimit']) && $data['pagelimit'] != '') {
            $pageLimit = $data['pagelimit'];
            $data['page_limit'] = $pageLimit;
        } elseif(isset($data['page_limit']) && $data['page_limit'] != '') {
            $data['page_limit'] = $data['page_limit'];
            $pageLimit = $data['page_limit'];
        } elseif(isset($data['document_limit']) && $data['document_limit'] != '') {
            $data['pagelimit'] = $data['document_limit'];
            $pageLimit = $data['document_limit'];
        }
        $currentPage = (isset($data['current_page']) && $data['current_page'] != '' ? $data['current_page'] : 0);
        $skipRecords = $currentPage * $pageLimit;

        $offerSentObject = new Offersent();
        $offerSentDataObject = new Offersent_data();

        $offerSentObject = $offerSentObject->from('offer_sent as ofs')->join('offer_send_details as ofd', 'ofs.id', '=', 'ofd.offer_sent_id');
        if((isset($data['task_name']) && $data['task_name'] != '') || (isset($data['task_status']) && $data['task_status'] != '')) {
            $offerSentObject = $offerSentObject->join('offersent_data as ofsd', 'ofs.id', '=', 'ofsd.sent_id');
        } if(isset($data['task_filter']) && $data['task_filter'] != '') {
            $offerSentObject = $offerSentObject->join('offersent_data as ofsd', 'ofs.id', '=', 'ofsd.sent_id');
        }
        $offerSentObject = $offerSentObject->where('ofd.is_sender', '!=', 1)->groupBy('ofd.offer_sent_id');

        if(isset($data['contract_id']) && $data['contract_id'] != '') {
            $template_id = $data['contract_id'];
            $data['document_id'] = $template_id;
        } elseif(isset($data['document_id']) && $data['document_id'] != '') {
            $data['contract_id'] = $data['document_id'];
            $template_id = $data['document_id'];
        }

        $whereRaw = '(1=1)';
        $fromDate = '';
        $dateTime = new \DateTime();
        if(isset($data['from_date']) && !empty($data['from_date'])) {
            if($dateTime->createFromFormat('Y-m-d', $data['from_date']) !== FALSE) {
                $fromDate = $data['from_date'].' 00:00:00';
            } elseif($dateTime->createFromFormat('Y-m-d-H-i-s', $data['from_date']) !== FALSE) {
                $fromDate = $dateTime->createFromFormat('Y-m-d-H-i-s', $data['from_date'])->format('Y-m-d H:i:s');
            } else {
                return Response::json(['status' => 'error', 'result' => 'from_date format is invalid']);
            }
        } if(isset($data['to_date']) && !empty($data['to_date'])) {
            if($dateTime->createFromFormat('Y-m-d', $data['to_date']) !== FALSE) {
                $toDate = $data['to_date'].' 23:59:59';
            } elseif($dateTime->createFromFormat('Y-m-d-H-i-s', $data['to_date']) !== FALSE) {
                $toDate = $dateTime->createFromFormat('Y-m-d-H-i-s', $data['to_date'])->format('Y-m-d H:i:s');
            } else {
                return Response::json(['status' => 'error', 'result' => 'to_date format is invalid']);
            }
        } elseif($fromDate != '') {
            //elseif used because if user didn't pass to_date so variable just add date value by default
            if($dateTime->createFromFormat('Y-m-d', $fromDate) !== FALSE) {
                $toDate = date('Y-m-d').' 23:59:59';
            } elseif($dateTime->createFromFormat('Y-m-d-H-i-s', $fromDate) !== FALSE) {
                $toDate = date('Y-m-d H:i:s');
            } else {
                $toDate = date('Y-m-d').' 23:59:59';
            }
        }
        if($fromDate != '' && $toDate != '') {
            $fromDate = $utility->changeTimeZone($fromDate, 'Y-m-d H:i:s', $userTimeZone, 'UTC');
            $toDate = $utility->changeTimeZone($toDate, 'Y-m-d H:i:s', $userTimeZone, 'UTC');
            
            if($status == 4) {
                $whereRaw = "(";
                $whereRaw .= "(simplesign_ofs.signed_date != '0000-00-00 00:00:00' ";
                $whereRaw .= "AND simplesign_ofs.signed_date BETWEEN '".$fromDate."' AND '".$toDate."') ";
                $whereRaw .= ")";
            } else {
                $whereRaw = "(";
                $whereRaw .= "(simplesign_ofs.last_event != '0000-00-00 00:00:00' ";
                $whereRaw .= "AND simplesign_ofs.last_event BETWEEN '".$fromDate."' AND '".$toDate."') ";
                $whereRaw .= "OR (simplesign_ofs.created_date BETWEEN '".$fromDate."' AND '".$toDate."') ";
                $whereRaw .= ")";
            }
            $offerSentObject = $offerSentObject->whereRaw($whereRaw);
        }

        $getDocumentIdFromExternalDocumentId = $utility->documentExternalId($template_id, $allUserIds);
        if(!empty($getDocumentIdFromExternalDocumentId)) {
            $template_id = $getDocumentIdFromExternalDocumentId;
        }

        $offerSentObject = $offerSentObject->whereIn('ofs.sender_id', $allUserIds);

        //case managment filter starting
        $getAddOnObjectData = settings::where('user_id', $parent_id)->select('new_addon_obj')->first();
        if((isset($data['task_name']) && $data['task_name'] != '') || (isset($data['task_status']) && $data['task_status'] != '')) {
            if($getAddOnObjectData['new_addon_obj'] != '') {
                $newAddonObjJsonDataForCaseManagment = json_decode($getAddOnObjectData['new_addon_obj'], true);
                if(isset($newAddonObjJsonDataForCaseManagment['mark_as_completed_addon']) && $newAddonObjJsonDataForCaseManagment['mark_as_completed_addon'] == 1) {
                    $markAsCompletedAddonSetting = (isset($newAddonObjJsonDataForCaseManagment['mark_as_completed_addon_setting']) && $newAddonObjJsonDataForCaseManagment['mark_as_completed_addon_setting'] != '' ? json_decode($newAddonObjJsonDataForCaseManagment['mark_as_completed_addon_setting'], true) : []);
                    if(!empty($markAsCompletedAddonSetting)) {
                        if(isset($markAsCompletedAddonSetting['mark_tasks_array']) && !empty($markAsCompletedAddonSetting['mark_tasks_array'])) {
                            if(isset($data['task_status']) && ($data['task_status'] == 'yes' || $data['task_status'] == 'Yes' || $data['task_status'] == 'YES' || $data['task_status'] == 'yEs' || $data['task_status'] == 'YeS' || $data['task_status'] == 'YEs')) {
                                $data['task_status'] = 'done';
                            } if(isset($data['task_status']) && ($data['task_status'] == 'in process' || $data['task_status'] == 'in Process' || $data['task_status'] == 'in_process' || $data['task_status'] == 'in_Process' || $data['task_status'] == 'In process' || $data['task_status'] == 'In Process' || $data['task_status'] == 'In_process' || $data['task_status'] == 'In_Process' || $data['task_status'] == 'inprocess' || $data['task_status'] == 'inProcess' || $data['task_status'] == 'Inprocess' || $data['task_status'] == 'inProcess' || $data['task_status'] == 'in-process' || $data['task_status'] == 'in-Process' || $data['task_status'] == 'In-process' || $data['task_status'] == 'In-Process')) {
                                $data['task_status'] = 'in_process';
                            } if(isset($data['task_status']) && ($data['task_status'] == 'no' || $data['task_status'] == 'No' || $data['task_status'] == 'NO' || $data['task_status'] == 'nO')) {
                                $data['task_status'] = 'no';
                            }
                            $caseManagementTaskName = explode('|', $data['task_name']);
                            foreach($markAsCompletedAddonSetting['mark_tasks_array'] as $markTasksArrayKey => $markTasksArrayValue) {
                                foreach($caseManagementTaskName as $caseManagementTaskNameKey => $caseManagementTaskNameValue) {
                                    if($markTasksArrayValue['tasknames'] == $caseManagementTaskNameValue) {
                                        $index = $markTasksArrayKey;
                                        if(isset($data['task_status']) && $data['task_status'] != '') {
                                            $offerSentObjectNew = $offerSentObject->where('ofsd.multi_case_management', 'like', '%'.($index).'%')->where('ofsd.multi_case_management', 'like', '%'.$data['task_status'].'%');
                                        } else {
                                            $offerSentObjectNew = $offerSentObject->where('ofsd.multi_case_management', 'like', '%'.($index).'%');
                                        }
                                        $offerSentObjectNew = $offerSentObjectNew->select('ofs.id', 'ofs.offer_id', 'ofs.offer_status', 'ofsd.contract_type_id', 'ofsd.multi_case_management')->orderBy('ofs.id', 'desc')->skip($skipRecords)->take($pageLimit)->get()->toArray();
                                        if($offerSentObjectNew) {
                                            foreach($offerSentObjectNew as $offerSentObjectNewKey => $offerSentObjectNewValue) {
                                                if(in_array($offerSentObjectNewValue['contract_type_id'], $markTasksArrayValue['contract_type_selected']) && (in_array($offerSentObjectNewValue['offer_status'], $markTasksArrayValue['marked_addon_status']) || in_array("", $markTasksArrayValue['marked_addon_status']))) {
                                                    if($offerSentObjectNewValue['multi_case_management'] != '') {
                                                        $multiCaseManagementJsonDecodeForFilter = json_decode($offerSentObjectNewValue['multi_case_management'], true);
                                                        foreach($multiCaseManagementJsonDecodeForFilter as $multiCaseManagementJsonDecodeForFilterKey => $multiCaseManagementJsonDecodeForFilterValue) {
                                                            if(isset($data['task_status']) && $data['task_status'] != '') {
                                                                if($multiCaseManagementJsonDecodeForFilterValue['status_text'] == $data['task_status'] && isset($multiCaseManagementJsonDecodeForFilterValue['task_no']) && $multiCaseManagementJsonDecodeForFilterValue['task_no'] == $index && $multiCaseManagementJsonDecodeForFilterValue['task_no'] != -1 && !in_array($offerSentObjectNewValue['id'], $caseManagementOfferSentIds)) {
                                                                    array_push($caseManagementOfferSentIds, $offerSentObjectNewValue['id']);
                                                                } elseif($multiCaseManagementJsonDecodeForFilterValue['status_text'] == $data['task_status'] && isset($multiCaseManagementJsonDecodeForFilterValue['task_no']) && $multiCaseManagementJsonDecodeForFilterValue['task_no'] == $index && $multiCaseManagementJsonDecodeForFilterValue['task_no'] == -1 && !in_array($offerSentObjectNewValue['id'], $caseManagementOfferSentIds)) {
                                                                    array_push($caseManagementOfferSentIds, $offerSentObjectNewValue['id']);
                                                                }
                                                            } else {
                                                                if(isset($multiCaseManagementJsonDecodeForFilterValue['task_no']) && $multiCaseManagementJsonDecodeForFilterValue['task_no'] == $index && $multiCaseManagementJsonDecodeForFilterValue['task_no'] != -1 && !in_array($offerSentObjectNewValue['id'], $caseManagementOfferSentIds)) {
                                                                    array_push($caseManagementOfferSentIds, $offerSentObjectNewValue['id']);
                                                                } elseif(isset($multiCaseManagementJsonDecodeForFilterValue['task_no']) && $multiCaseManagementJsonDecodeForFilterValue['task_no'] == $index && $multiCaseManagementJsonDecodeForFilterValue['task_no'] == -1 && !in_array($offerSentObjectNewValue['id'], $caseManagementOfferSentIds)) {
                                                                    array_push($caseManagementOfferSentIds, $offerSentObjectNewValue['id']);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                } else {
                    return Response::json(['status' => 'error', 'result' => 'Task management feature is not enabled in your account, Contact Simplesign support for Case management activation.']);
                }
            }
            if(count($caseManagementOfferSentIds) > 0) {
                $offerSentObject = $offerSentObject->whereIn('ofs.id', $caseManagementOfferSentIds);
            } else {
                return Response::json(['status' => 'error', 'result' => 'No record(s) found.']);
            }
        } if(isset($data['task_filter']) && $data['task_filter'] != '') {
            $caseManagementOfferSentIds = [];
            if($this->is_JSON($data['task_filter'])) {
                $taskFilter = json_decode($data['task_filter'], true);
                $taskFilterArray = [];
                //If casemanagement column is empty, we don't fetch it with filter, but in UI it shows by default "No" value.
                $valueArray = ['yes', 'no', 'in process', 'in_process', 'inprocess', 'in-process'];
                if($getAddOnObjectData['new_addon_obj'] != '' && !empty($taskFilter)) {
                    $newAddonObjJsonDataForCaseManagment = json_decode($getAddOnObjectData['new_addon_obj'], true);
                    if(isset($newAddonObjJsonDataForCaseManagment['mark_as_completed_addon']) && $newAddonObjJsonDataForCaseManagment['mark_as_completed_addon'] == 1) {
                        $markAsCompletedAddonSetting = (isset($newAddonObjJsonDataForCaseManagment['mark_as_completed_addon_setting']) && $newAddonObjJsonDataForCaseManagment['mark_as_completed_addon_setting'] != '' ? json_decode($newAddonObjJsonDataForCaseManagment['mark_as_completed_addon_setting'], true) : []);
                        if(!empty($markAsCompletedAddonSetting)) {
                            if(isset($markAsCompletedAddonSetting['mark_tasks_array']) && !empty($markAsCompletedAddonSetting['mark_tasks_array'])) {
                                $taskManagementWhere = '';
                                //$multiCaseManagementFurtherFilterIncrementedIndex = 0;
                                foreach($taskFilter as $taskFilterKey => $taskFilterValue) {
                                    $task_index = null;
                                    if(!in_array(strtolower($taskFilterValue), $valueArray)) {
                                        return Response::json(['status' => 'error', 'result' => "value should be yes, no or in_process for $taskFilterKey"]);
                                    }
                                    if(isset($taskFilterValue) && ($taskFilterValue == 'yes' || $taskFilterValue == 'Yes' || $taskFilterValue == 'YES' || $taskFilterValue == 'yEs' || $taskFilterValue == 'yES' || $taskFilterValue == 'YeS' || $taskFilterValue == 'YEs')) {
                                        $taskFilterValue = 'done';
                                    } if(isset($taskFilterValue) && ($taskFilterValue == 'in process' || $taskFilterValue == 'in Process' || $taskFilterValue == 'in_process' || $taskFilterValue == 'in_Process' || $taskFilterValue == 'In process' || $taskFilterValue == 'In Process' || $taskFilterValue == 'In_process' || $taskFilterValue == 'In_Process' || $taskFilterValue == 'inprocess' || $taskFilterValue == 'inProcess' || $taskFilterValue == 'Inprocess' || $taskFilterValue == 'inProcess' || $taskFilterValue == 'in-process' || $taskFilterValue == 'in-Process' || $taskFilterValue == 'In-process' || $taskFilterValue == 'In-Process')) {
                                        $taskFilterValue = 'in_process';
                                    } if(isset($taskFilterValue) && ($taskFilterValue == 'no' || $taskFilterValue == 'No' || $taskFilterValue == 'NO' || $taskFilterValue == 'nO')) {
                                        $taskFilterValue = 'no';
                                    }
                                    foreach($markAsCompletedAddonSetting['mark_tasks_array'] as $markTasksArrayKey => $markTasksArrayValue) {
                                        if($markTasksArrayValue['tasknames'] == $taskFilterKey) {
                                            $contractType = $markTasksArrayValue['contract_type_selected'];
                                            $marked_offer_status = $markTasksArrayValue['marked_addon_status'];
                                            $task_index = $markTasksArrayKey;
                                            if($taskManagementWhere != '') {
                                                $taskManagementWhere .= " AND ";
                                            }
                                            $taskManagementWhere .= " ( ";
                                            $taskManagementWhere .= " JSON_EXTRACT(`simplesign_ofsd`.`multi_case_management`, '$.*.task_no') LIKE '%\"$markTasksArrayKey\"%' AND JSON_EXTRACT(`simplesign_ofsd`.`multi_case_management`, '$.*.status_text') LIKE '%\"$taskFilterValue\"%' ";
                                            if($contractType) {
                                                $taskManagementWhere .= " AND simplesign_ofsd.contract_type_id in (".join(",", $contractType).")  ";
                                            }
                                            if($marked_offer_status && isset($marked_offer_status[0]) && $marked_offer_status[0]) {
                                                $taskManagementWhere .= " AND simplesign_ofs.offer_status in (".join(",", $marked_offer_status).")  ";
                                            }
                                            $taskManagementWhere .= " )";
                                        }
                                    }
                                    if($task_index !== null) {
                                        $taskFilterArray[] = ['task_name' => $taskFilterKey, 'task_val' => $taskFilterValue, 'task_index' => $task_index];
                                    } else {
                                        return Response::json(['status' => 'error', 'result' => "Task filter $taskFilterKey not found"]);
                                    }
                                }

                                //$caseManagementDocumentIds = [];
                                $offerSentObjectForIds = $offerSentObject->whereRaw($taskManagementWhere);
                                $offerSentObjectForIds = $offerSentObjectForIds->select('ofs.id', 'ofs.unique_id', 'ofs.offer_status', 'ofsd.multi_case_management', 'ofsd.contract_type_id')->orderBy('ofs.id', 'desc')->get()->toArray();
                                foreach($offerSentObjectForIds as $offerSentObjectForIdsKey => $offerSentObjectForIdsValue) {
                                    $MatchingStatus = false;
                                    if($offerSentObjectForIdsValue['multi_case_management'] != '') {
                                        $matchingNum = 0;
                                        $multiCaseManagementJsonDecodeForFilter = json_decode($offerSentObjectForIdsValue['multi_case_management'], true);
                                        foreach($multiCaseManagementJsonDecodeForFilter as $taskSKey1 => $taskSVal1) {
                                            foreach($taskFilterArray as $taskFKey1 => $taskFVal1) {
                                                if($taskSVal1['status_text'] == $taskFVal1['task_val'] && isset($taskSVal1['task_no']) && $taskSVal1['task_no'] == $taskFVal1['task_index']) {
                                                    $matchingNum++;
                                                }
                                            }
                                        }
                                        if(count($taskFilterArray) == $matchingNum) {
                                            $MatchingStatus = true;
                                        }
                                    }
                                    if($MatchingStatus) {
                                        //array_push($caseManagementDocumentIds, $offerSentObjectForIdsValue);
                                        array_push($caseManagementOfferSentIds, $offerSentObjectForIdsValue['id']);
                                    }
                                }
                                if(!$offerSentObjectForIds || $taskManagementWhere == '') {
                                    return Response::json(['status' => 'error', 'result' => 'No record(s) found.']);
                                }
                            }
                        }
                    } else {
                        return Response::json(['status' => 'error', 'result' => 'Task management feature is not enabled in your account, Contact Simplesign support for task management activation.']);
                    }
                }
                if(count($caseManagementOfferSentIds) > 0) {
                    $offerSentObject = $offerSentObject->whereIn('ofs.id', $caseManagementOfferSentIds);
                } else {
                    return Response::json(['status' => 'error', 'result' => 'No record(s) found.']);
                }
            } else {
                return Response::json(['status'=>'error','result' => 'Task filter is invalid format, JSON is required']);
            }
        }
        //case managment filter ending

        //$columns = ['ofs.id', 'ofs.is_draft', 'ofs.offer_id', 'ofs.language_id', 'ofs.timedateformat', 'ofs.visible_name', 'ofs.name', 'ofs.created_date', 'ofs.signed_date', 'ofs.due_days', 'ofs.due_date', 'ofs.reminder_days', 'ofs.offer_status', 'ofs.offer_type', 'ofs.sender_id', 'ofs.content', 'ofs.external_doc_id', 'ofsd.multi_case_management'];
        $columns = ['ofs.id', 'ofs.is_draft', 'ofs.offer_id', 'ofs.language_id', 'ofs.timedateformat', 'ofs.visible_name', 'ofs.name', 'ofs.created_date', 'ofs.signed_date', 'ofs.due_days', 'ofs.due_date', 'ofs.reminder_days', 'ofs.offer_status', 'ofs.offer_type', 'ofs.sender_id', 'ofs.content', 'ofs.external_doc_id', 'ofs.unique_id'];
        if($status == 5) {
            //for rejected
            $offerSentObject = $offerSentObject->where('ofd.offer_status', $status)->where('ofs.offer_type', '!=', 5)->select($columns);
            if($template_id != '' && $template_id != 0) {
                $offerSentObject = $offerSentObject->where('ofs.id', $template_id);
            }
        } elseif($status != 4) {
            //Add this condition if we don't pass signed status then if condition should executes.
            $offerSentObject = $offerSentObject->where('ofd.offer_status', '!=', 5)->where('ofs.offer_status', $status)->where('ofs.offer_type', '!=', 5);
            if($template_id != '' && $template_id != 0) {
                $offerSentObject = $offerSentObject->where('ofs.id', $template_id);
            }
        } else {
            //only for signed documents
            $offerSentObject = $offerSentObject->where('ofd.offer_status', '!=', 5)->where('ofs.offer_status', $status)->where('ofs.offer_type', '!=', 5);
            if($template_id != '' && $template_id != 0) {
                $offerSentObject = $offerSentObject->where('ofs.id', $template_id);
            }

            $offerSentObject = $offerSentObject->orWhere(function ($query) use($allUserIds, $template_id, $whereRaw, $caseManagementOfferSentIds) {
            $query->where('ofs.offer_status', 4)->where('ofd.offer_status', '!=', 5)->where('ofs.offer_type', '=', 5)->whereIn('ofs.sender_id', $allUserIds)->whereRaw($whereRaw);
            if(count($caseManagementOfferSentIds) > 0) {
                $query = $query->whereIn('ofs.id', $caseManagementOfferSentIds);
            }
            if($template_id != '' && $template_id != 0) {
                $query = $query->where('ofs.id', $template_id);
            }
            })->select($columns);
        }

        if($template_id != '' && $template_id != 0) {
            $offerSentData = $offerSentObject->first();
            if(count($offerSentData)) {
                $offerSentData = array($offerSentData);
            }
        } else {
            $offerSentData = $offerSentObject->orderBy('ofs.id', 'desc')->skip($skipRecords)->take($pageLimit)->get()->toArray();
        }

        if(count($offerSentData) == 0) {
            $offerSentData = [];
        }
        
        foreach($offerSentData as $sentDataKey => $sentDataValue) {
            array_push($offerSentIds, $sentDataValue['id']);
        }

        $selectRaw = "CAST(AES_DECRYPT(simplesign_offer_send_details.user_details,'".env('ENCRYPT_KEY')."','".env('ENCRYPT_IV')."') AS CHAR) as user_details";
        DB::statement(' SET block_encryption_mode = \''.env('ENCRYPT_CIPHER').'\'');

        $contractData = Offersentdetails::whereIn('offer_sent_id', $offerSentIds)->select('offer_send_details.offer_status', DB::raw($selectRaw), 'is_sender', 'offer_send_details.id AS detail_id', 'offer_sent_id', 'req_attached', 'document_read_date', 'signed_date', 'authentication_method', 'role', 'invitation_type', 'invitation_order', 'offer_confirmation', 'id_attachments', 'id', 'unique_id')->get()->toArray();

        if($user_id > 0) {
            if(count($contractData)) {
                $responseArray = [];
                foreach($offerSentData as $sentIdsKey => $sentIdsValue) {
                    $eachSentId = $sentIdsValue['id'];
                    $languageId = $sentIdsValue['language_id'];
                    $sendUniqueId = $sentIdsValue['unique_id'];
                    $peoples = $senderDetails = $documentFields = $accountDetails = $documentDetails = [];
                    foreach($contractData as $contractDataKey => $contractDataValue) {
                        $peopleFields = $organizationFields = $details = [];
                        $nameExplode = $uniqueId = $documentLink = '';
                        
                        $recipientUserDetailsJsonDecode = json_decode($contractDataValue['user_details'], true);
                        //$peopleFields['detail_id'] = $contractDataValue['detail_id'];
                        //$peopleFields['offer_sent_id'] = $contractDataValue['offer_sent_id'];
                        $userRole = (isset($recipientUserDetailsJsonDecode['recrolename']) && $recipientUserDetailsJsonDecode['recrolename'] != '' ? $recipientUserDetailsJsonDecode['recrolename'] : (isset($recipientUserDetailsJsonDecode['partyname']) && $recipientUserDetailsJsonDecode['partyname'] != '' ? $recipientUserDetailsJsonDecode['partyname'] : ''));

                        if($contractDataValue['offer_sent_id'] == $eachSentId && $contractDataValue['is_sender'] == 1) {
                        //for regular contract sender use full_name key and for online contract sender use first_name key
                            $senderDetails['name'] = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? trim($recipientUserDetailsJsonDecode['full_name']) : (isset($recipientUserDetailsJsonDecode['first_name']) && $recipientUserDetailsJsonDecode['first_name'] != '' ? trim($recipientUserDetailsJsonDecode['first_name']) : ''));
                            $senderDetails['email'] = (isset($recipientUserDetailsJsonDecode['email']) && $recipientUserDetailsJsonDecode['email'] != '' ? trim(preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $recipientUserDetailsJsonDecode['email'])) : '');

                            $userCustomFields = (isset($recipientUserDetailsJsonDecode['user_customfields']) && $recipientUserDetailsJsonDecode['user_customfields'] != '' ? json_decode($recipientUserDetailsJsonDecode['user_customfields'], true) : []);
                            if(!empty($userCustomFields)) {
                                foreach($userCustomFields as $userCustomFldkey => $userCustomFldValue) {
                                    $senderDetails[trim($userCustomFldkey)] = (isset($userCustomFldValue) && $userCustomFldValue != '' ? trim($userCustomFldValue) : '');
                                }
                            }

                            $accountDetails['company'] = (isset($recipientUserDetailsJsonDecode['company']) && $recipientUserDetailsJsonDecode['company'] != '' ? trim($recipientUserDetailsJsonDecode['company']) : '');
                            $accountDetails['reg_no'] = (isset($recipientUserDetailsJsonDecode['reg_no']) && $recipientUserDetailsJsonDecode['reg_no'] != '' ? trim($recipientUserDetailsJsonDecode['reg_no']) : '');
                            $accountDetails['address'] = (isset($recipientUserDetailsJsonDecode['address']) && $recipientUserDetailsJsonDecode['address'] != '' ? trim($recipientUserDetailsJsonDecode['address']) : '');
                            $accountDetails['phone_no'] = (isset($recipientUserDetailsJsonDecode['mobile']) && $recipientUserDetailsJsonDecode['mobile'] != '' ? trim($recipientUserDetailsJsonDecode['mobile']) : (isset($recipientUserDetailsJsonDecode['telephone']) && $recipientUserDetailsJsonDecode['telephone'] != '' ? trim($recipientUserDetailsJsonDecode['telephone']) : ''));
                            $accountDetails['zipcode'] = (isset($recipientUserDetailsJsonDecode['zipcode']) && $recipientUserDetailsJsonDecode['zipcode'] != '' ? trim($recipientUserDetailsJsonDecode['zipcode']) : (isset($recipientUserDetailsJsonDecode['post_code']) && $recipientUserDetailsJsonDecode['post_code'] != '' ? trim($recipientUserDetailsJsonDecode['post_code']) : ''));
                            $accountDetails['city'] = (isset($recipientUserDetailsJsonDecode['city']) && $recipientUserDetailsJsonDecode['city'] != '' ? trim($recipientUserDetailsJsonDecode['city']) : '');

                            $documentLink = $domain_name.'document/view/'.$contractDataValue['detail_id'].'/'.$contractDataValue['unique_id'];
                        }

                        $uniqueId = $contractDataValue['unique_id'];
                        $recipientFieldsRolesTabFields = (isset($recipientUserDetailsJsonDecode['Recipient_fields_roles_tab_fields']) && !empty($recipientUserDetailsJsonDecode['Recipient_fields_roles_tab_fields']) ? json_decode($recipientUserDetailsJsonDecode['Recipient_fields_roles_tab_fields'], true) : '');
                        $recinfoFields = ($recipientFieldsRolesTabFields != '' ? $recipientFieldsRolesTabFields['recinfo_fields'] : '');
                        //getting recipient data starting
                        if($contractDataValue['offer_sent_id'] == $eachSentId && $contractDataValue['is_sender'] == 0) {
                            //for regular contract recipient use full_name key
                            if(isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '') {
                                if((isset($recinfoFields['last_name']) && $recinfoFields['last_name'] == 1) || (isset($recipientUserDetailsJsonDecode['last_name']) && $recipientUserDetailsJsonDecode['last_name'] != '')) {
                                    $peopleFields['first_name'] = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? $recipientUserDetailsJsonDecode['full_name'] : '');
                                    $peopleFields['last_name'] = (isset($recipientUserDetailsJsonDecode['last_name']) && $recipientUserDetailsJsonDecode['last_name'] != '' ? $recipientUserDetailsJsonDecode['last_name'] : '');
                                } else {
                                    $nameExplode = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($recipientUserDetailsJsonDecode['full_name'])) : '');
                                    $peopleFields['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                                    $peopleFields['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                                }
                            } elseif(isset($recipientUserDetailsJsonDecode['name']) && $recipientUserDetailsJsonDecode['name'] != '') {
                                //for online contract recipient use name key
                                $nameExplode = (isset($recipientUserDetailsJsonDecode['name']) && $recipientUserDetailsJsonDecode['name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($recipientUserDetailsJsonDecode['name'])) : '');
                                $peopleFields['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                                $peopleFields['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                            }

                            //recipient information in peopleFields starting
                            $peopleFields['email'] = (isset($recipientUserDetailsJsonDecode['email']) && $recipientUserDetailsJsonDecode['email'] != '' ? trim(preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $recipientUserDetailsJsonDecode['email'])) : '');
                            //$peopleFields['personal_no'] = (isset($recipientUserDetailsJsonDecode['personnr']) && $recipientUserDetailsJsonDecode['personnr'] != '' ? trim($recipientUserDetailsJsonDecode['personnr']) : '');
                            $peopleFields['personal_no'] = (isset($recipientUserDetailsJsonDecode['personnr']) && $recipientUserDetailsJsonDecode['personnr'] != '' ? (strlen(trim($recipientUserDetailsJsonDecode['personnr'])) == 12 || strlen(trim($recipientUserDetailsJsonDecode['personnr'])) == 13 ? substr(trim($recipientUserDetailsJsonDecode['personnr']), 2) : trim($recipientUserDetailsJsonDecode['personnr'])) : '');
                            $peopleFields['mobile'] = (isset($recipientUserDetailsJsonDecode['mobile']) && $recipientUserDetailsJsonDecode['mobile'] != '' ? trim($recipientUserDetailsJsonDecode['mobile']) : '');
                            $peopleFields['address'] = (isset($recipientUserDetailsJsonDecode['address']) && $recipientUserDetailsJsonDecode['address'] != '' ? trim($recipientUserDetailsJsonDecode['address']) : '');
                            $peopleFields['city'] = (isset($recipientUserDetailsJsonDecode['city']) && $recipientUserDetailsJsonDecode['city'] != '' ? trim($recipientUserDetailsJsonDecode['city']) : '');
                            $peopleFields['zipcode'] = (isset($recipientUserDetailsJsonDecode['zipcode']) && $recipientUserDetailsJsonDecode['zipcode'] != '' ? trim($recipientUserDetailsJsonDecode['zipcode']) : (isset($recipientUserDetailsJsonDecode['zip']) && $recipientUserDetailsJsonDecode['zip'] != '' ? trim($recipientUserDetailsJsonDecode['zip']) : ''));
                            //recipient information in peopleFields ending

                            //people information of new fields starting
                            if(isset($recipientUserDetailsJsonDecode['extra_fields']) && !empty($recipientUserDetailsJsonDecode['extra_fields'])) {
                                $recipientFieldsWithoutValue = (isset($recipientUserDetailsJsonDecode['recipientfields']) && !empty($recipientUserDetailsJsonDecode['recipientfields']) ? json_decode($recipientUserDetailsJsonDecode['recipientfields'], true) : []);

                                $extraFields = (isset($recipientUserDetailsJsonDecode['extra_fields']) && !empty($recipientUserDetailsJsonDecode['extra_fields']) ? json_decode($recipientUserDetailsJsonDecode['extra_fields'], true) : []);
                                if($extraFields) {
                                    $intersect = array_uintersect($extraFields, $recipientFieldsWithoutValue, function($val1, $val2) {
                                        return strcmp($val1['fieldName'], $val2['fieldName']);
                                    });
                                    $intersect = array_values($intersect);
                                } else {
                                    $intersect = [];
                                }

                                if(!empty($intersect)) {
                                    foreach($intersect as $extraFldKey => $extraFldValue) {
                                        $peopleFields[$extraFldValue['fieldName']] = $extraFldValue['fieldValue'];
                                    }
                                }
                            }
                            //people information of new fields ending

                            //organization information of recipient starting
                            if(isset($recipientUserDetailsJsonDecode['organization_fields'])) {
                                $orgFields = json_decode($recipientUserDetailsJsonDecode['organization_fields'], true);
                                foreach($orgFields as $orgFldsKey => $orgFldsValue) {
                                    $orgFldsValue['orgFieldName'] = str_replace('name', 'organization_name', $orgFldsValue['orgFieldName']);
                                    $orgFldsValue['orgFieldName'] = str_replace('org_no', 'organization_no', $orgFldsValue['orgFieldName']);
                                    $orgFldsValue['orgFieldName'] = str_replace('phone', 'organization_phone', $orgFldsValue['orgFieldName']);
                                    $orgFldsValue['orgFieldName'] = str_replace('address', 'organization_address', $orgFldsValue['orgFieldName']);
                                    $orgFldsValue['orgFieldName'] = str_replace('city', 'organization_city', $orgFldsValue['orgFieldName']);
                                    $orgFldsValue['orgFieldName'] = str_replace('zipcode', 'organization_zipcode', $orgFldsValue['orgFieldName']);
                                    $organizationFields[$orgFldsValue['orgFieldName']] = $orgFldsValue['orgFieldValue'];
                                }
                            } else {
                                if(isset($recipientUserDetailsJsonDecode['org_name']) && $recipientUserDetailsJsonDecode['org_name'] != '') {
                                    $organizationFields['organization_name'] = $recipientUserDetailsJsonDecode['org_name'];
                                }
                                if(isset($recipientUserDetailsJsonDecode['org_reg_no']) && $recipientUserDetailsJsonDecode['org_reg_no'] != '') {
                                    $organizationFields['organization_no'] = $recipientUserDetailsJsonDecode['org_reg_no'];
                                }
                                if(isset($recipientUserDetailsJsonDecode['org_mobile']) && $recipientUserDetailsJsonDecode['org_mobile'] != '') {
                                    $organizationFields['organization_phone'] = $recipientUserDetailsJsonDecode['org_mobile'];
                                }
                                if(isset($recipientUserDetailsJsonDecode['org_address']) && $recipientUserDetailsJsonDecode['org_address'] != '') {
                                    $organizationFields['organization_address'] = $recipientUserDetailsJsonDecode['org_address'];
                                }
                                if(isset($recipientUserDetailsJsonDecode['org_city']) && $recipientUserDetailsJsonDecode['org_city'] != '') {
                                    $organizationFields['organization_city'] = $recipientUserDetailsJsonDecode['org_city'];
                                }
                                if(isset($recipientUserDetailsJsonDecode['org_zip']) && $recipientUserDetailsJsonDecode['org_zip'] != '') {
                                    $organizationFields['organization_zipcode'] = $recipientUserDetailsJsonDecode['org_zip'];
                                }
                            }
                            //organization information of recipient ending

                            //organization information of new fields starting
                            if(isset($recipientUserDetailsJsonDecode['org_extra_fields']) && !empty($recipientUserDetailsJsonDecode['org_extra_fields'])) {
                                $organizationFieldsWithoutValue = (isset($recipientUserDetailsJsonDecode['organizationfields']) && !empty($recipientUserDetailsJsonDecode['organizationfields']) ? json_decode($recipientUserDetailsJsonDecode['organizationfields'], true) : []);

                                $orgExtraFields = (isset($recipientUserDetailsJsonDecode['org_extra_fields']) && !empty($recipientUserDetailsJsonDecode['org_extra_fields']) ? json_decode($recipientUserDetailsJsonDecode['org_extra_fields'], true) : []);
                                if($orgExtraFields) {
                                    $intersectOrg = array_uintersect($orgExtraFields, $organizationFieldsWithoutValue, function($val1, $val2) {
                                        return strcmp($val1['fieldName'], $val2['fieldName']);
                                    });
                                    $intersectOrg = array_values($intersectOrg);
                                } else {
                                    $intersectOrg = [];
                                }

                                if(!empty($intersectOrg)) {
                                    foreach($intersectOrg as $orgExtraFldKey => $orgExtraFldValue) {
                                        $organizationFields[$orgExtraFldValue['fieldName']] = $orgExtraFldValue['fieldValue'];
                                    }
                                }
                            }
                            //organization information of new fields ending

                            //organization information of fields which are placed at document starting
                            $content = Tcrypt::decrypter($sentIdsValue['content']);
                            if($content != '') {
                                $html = new \Htmldom($content);
                                foreach($html->find('.text') as $findKey => $findValue) {
                                    //codition for regular contract starting
                                    if(isset($recipientUserDetailsJsonDecode['id']) && $recipientUserDetailsJsonDecode['id'] == $findValue->recipientselectedid) {
                                        if(strpos($findValue->getAttribute('class'), 'peopleNewField') !== false) {
                                            if($findValue->find('h4', 0)) {
                                                $peopleFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                            } else {
                                                if($findValue->find('p', 0)) {
                                                    $peopleFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                                }
                                            }
                                        } if(strpos($findValue->getAttribute('class'), 'organizationNewField') !== false) {
                                            if($findValue->find('h4', 0)) {
                                                $organizationFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                            } else {
                                                if($findValue->find('p', 0)) {
                                                    $organizationFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                                }
                                            }
                                        }
                                        //codition for regular contract ending
                                    } else {
                                        //codition for online contract starting
                                        if($userRole == $findValue->parent()->parent()->whowillfill) {
                                            if(strpos($findValue->getAttribute('class'), 'peopleNewField') !== false) {
                                                if($findValue->find('h4', 0)) {
                                                    $peopleFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                                } else {
                                                    //right now paragraph tag is showing and will be replaced by h4 near future starting
                                                    if($findValue->find('p', 0)) {
                                                        $peopleFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                                    }
                                                    //right now paragraph tag is showing and will be replaced by h4 near future ending
                                                }
                                            } if(strpos($findValue->getAttribute('class'), 'organizationNewField') !== false) {
                                                if($findValue->find('h4', 0)) {
                                                    $organizationFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                                } else {
                                                    //right now paragraph tag is showing and will be replaced by h4 near future starting
                                                    if($findValue->find('p', 0)) {
                                                        $organizationFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                                    }
                                                    //right now paragraph tag is showing and will be replaced by h4 near future ending
                                                }
                                            }
                                        }
                                        //codition for online contract ending
                                    }
                                }   //foreach loop condition ends here

                                $dynamicElements = [];
                                foreach($html->find('.template_container') as $temConKey => $temConValue) {
                                    $arrayPush = [];
                                    foreach($temConValue->find('.formElement') as $findKey => $findValue) {
                                        
                                        $elementStyle = $findValue->getAttribute('style');
                                        $arrCSS = $utility->parse_css($elementStyle);
                                        $parentDiv = $findValue->parent()->parent();

                                        //Fixing Position when field is inside the borderbox or textbox START
                                        $addtop = 0;
                                        $addleft = 0;
                                        if(strpos($parentDiv->getAttribute('class'), 'dynamic_border') !== false && strpos($parentDiv->getAttribute('class'), 'insert_box_div') === false) {
                                            $parentCSS = $utility->parse_css($parentDiv->getAttribute('style'));
                                            $addtop = (isset($parentCSS['top']) && $parentCSS['top'] != '' ? round($parentCSS['top']) : 0);
                                            $addleft = (isset($parentCSS['left']) && $parentCSS['left'] != '' ? round($parentCSS['left']) : 0);
                                        } elseif(strpos($parentDiv->getAttribute('class'), 'insert_box_div') !== false && strpos($parentDiv->getAttribute('class'), 'dynamic_border') === false) {
                                            $parentCSS = $utility->parse_css($parentDiv->getAttribute('style'));
                                            $addtop = (isset($parentCSS['top']) && $parentCSS['top'] != '' ? round($parentCSS['top']) : 0);
                                            $addleft = (isset($parentCSS['left']) && $parentCSS['left'] != '' ? round($parentCSS['left']) : 0);
                                        } elseif(strpos($parentDiv->getAttribute('class'), 'insert_box_div') !== false  && strpos($parentDiv->getAttribute('class'), 'dynamic_border') !== false) {
                                            $parentCSS = $utility->parse_css($parentDiv->getAttribute('style'));
                                            $addtop = (isset($parentCSS['top']) && $parentCSS['top'] != '' ? round($parentCSS['top']) : 0);
                                            $addleft = (isset($parentCSS['left']) && $parentCSS['left'] != '' ? round($parentCSS['left']) : 0);
                                        }
                                        //Fixing Position when field is inside the borderbox or textbox END

                                        $topPosition = (isset($arrCSS['top']) && $arrCSS['top'] != '' ? round($arrCSS['top'])+$addtop : 0);
                                        $leftPosition = (isset($arrCSS['left']) && $arrCSS['left'] != '' ? round($arrCSS['left'])+$addleft : 0);
                                        array_push($arrayPush, ['top' => $topPosition, 'left' => $leftPosition, 'dynamic_id' => $findValue->dynamic_id]);

                                    }   //formElement loop ends here
                                    if(!empty($arrayPush)) {
                                        sort($arrayPush);
                                        array_push($dynamicElements, $arrayPush);
                                    }
                                }   //template_container loop ends here

                                foreach($dynamicElements as $eachPageKey => $eachPageValue) {
                                    foreach($eachPageValue as $eachElementKey => $eachElementValue) {
                                        $eachDynamic_id = $eachElementValue['dynamic_id'];
                                        $mainDiv = $html->find('[dynamic_id="'.$eachElementValue['dynamic_id'].'"]', 0);
                                        if(!$mainDiv->find('.text', 0)) {
                                            continue;
                                        }
                                        $findValue = $mainDiv->find('.text', 0);
                                        //getting document text fields
                                        if(strpos($findValue->getAttribute('class'), 'documentField') !== false) {
                                            if($findValue->selectedtype != '0') {
                                                $apiAttributeOrSelectedType = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->selectedtype);
                                                if($parent_id == 10719) {
                                                    $apiAttributeOrSelectedType = str_replace(' ', '_', $apiAttributeOrSelectedType);
                                                }
                                                if($findValue->find('h4', 0) && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                                    $documentFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                                } elseif($findValue->find('p', 0) && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                                    $documentFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('p', 0)->plaintext)));
                                                } elseif(strpos($mainDiv->getAttribute('class'), 'relationDisable') === false && (!isset($documentFields[$findValue->selectedtype]))) {
                                                    //comments below line of code and add this condition with elseif and === false
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrSelectedType] = '';
                                                }/* elseif(!isset($documentFields[$findValue->selectedtype])) {
                                                    $documentFields[$apiAttributeOrSelectedType] = '';
                                                }

                                                if(strpos($mainDiv->getAttribute('class'), 'relationDisable') !== false && (!isset($documentFields[$findValue->selectedtype]))) {
                                                    $documentFields[$apiAttributeOrSelectedType] = '';
                                                } */
                                            }   //not equal condition ends here
                                        }   //getting document text fields ends here
                                        //getting custom text fields
                                        try {
                                            if(strpos($findValue->getAttribute('class'), 'field_box_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'datepickerfields_new') === false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                                $apiAttributeOrSelectedType = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->selectedtype);
                                                if($parent_id == 10719) {
                                                    $apiAttributeOrSelectedType = str_replace(' ', '_', $apiAttributeOrSelectedType);
                                                }
                                                //comment below line on 5 August 2020 for not show the key if value is empty
                                                //$documentFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                                if(isset($findValue->find('h4', 0)->plaintext) && $findValue->find('h4', 0)->plaintext != '') {
                                                    $documentFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                                }
                                            }
                                        } catch(\Exception $e) {}

                                        //getting datepicker fields
                                        try {
                                            if(strpos($findValue->getAttribute('class'), 'field_box_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'datepickerfields_new') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                                $apiAttributeOrSelectedType = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->selectedtype);
                                                if($parent_id == 10719) {
                                                    $apiAttributeOrSelectedType = str_replace(' ', '_', $apiAttributeOrSelectedType);
                                                }
                                                //comment below line on 5 August 2020 for not show the key if value is empty
                                                //$documentFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                                if(isset($findValue->find('h4', 0)->plaintext) && $findValue->find('h4', 0)->plaintext !== '') {
                                                    $documentFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                                }
                                            }
                                        } catch(\Exception $e) {}

                                        //getting document checkbox elements
                                        if(strpos($findValue->getAttribute('class'), 'documentFieldCheckbox') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                            //all values of checkboxes are showing
                                            $apiAttributeOrFieldLabelName = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->fieldlabelname);
                                            if($parent_id == 10719) {
                                                $apiAttributeOrFieldLabelName = str_replace(' ', '_', $apiAttributeOrFieldLabelName);
                                            }
                                            if(strpos($findValue->find('.check_icon', 0)->getAttribute('style'), 'visible') !== false || strpos($findValue->getAttribute('class'), 'isChecked') !== false) {
                                                $documentFields[$apiAttributeOrFieldLabelName] = 'Yes';
                                            } else {
                                                $documentFields[$apiAttributeOrFieldLabelName] = 'No';
                                            }
                                        }   //getting document checkbox elements ends here
                                        //getting custom checkbox elements
                                        if(strpos($findValue->getAttribute('class'), 'check_box_popupcontainer') !== false && strpos($mainDiv->getAttribute('class'), 'chechBoxCustom') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                            $apiAttributeOrFieldLabelName = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->fieldlabelname);
                                            if($parent_id == 10719) {
                                                $apiAttributeOrFieldLabelName = str_replace(' ', '_', $apiAttributeOrFieldLabelName);
                                            }
                                            if(strpos($findValue->find('.check_icon', 0)->getAttribute('style'), 'visible')) {
                                                $documentFields[$apiAttributeOrFieldLabelName] = 'Yes';
                                            } else {
                                                $documentFields[$apiAttributeOrFieldLabelName] = 'No';
                                            }
                                        }

                                        //getting document droplist elements
                                        $jsonDecodeDropDownValues = (isset($findValue->dropdownvalues) && !empty($findValue->dropdownvalues) ? json_decode(html_entity_decode($findValue->dropdownvalues), true) : []);
                                        $jsonDecodeDropDownAlternativeValues = (isset($findValue->dropdownvalues_alternate) && !empty($findValue->dropdownvalues_alternate) ? json_decode(html_entity_decode($findValue->dropdownvalues_alternate), true) : []);
                                        if(strpos($findValue->getAttribute('class'), 'documentFieldDroplist') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                                            if($parent_id == 10719) {
                                                $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                                            }
                                            if($findValue->find('span.texthere', 0)) {
                                                if(!empty($jsonDecodeDropDownValues) && $findValue->dropdownlabel != trim($findValue->find('span.texthere', 0)->plaintext)) {
                                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('span.texthere', 0)->plaintext))));
                                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->plaintext) && $findValue->find('span.texthere', 0)->plaintext != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                                    }
                                                } elseif(array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('span.texthere', 0)->plaintext))));
                                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->plaintext) && $findValue->find('span.texthere', 0)->plaintext != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                                    }
                                                } else {
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : ''));
                                                    if(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    }
                                                }
                                            } else {
                                                if(!empty($jsonDecodeDropDownValues) && $findValue->dropdownlabel != trim($findValue->find('p', 0)->plaintext)) {
                                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('p', 0)->plaintext))));
                                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    } elseif(isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('p', 0)->plaintext);
                                                    }
                                                } elseif(array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('p', 0)->plaintext))));
                                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    } elseif(isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('p', 0)->plaintext);
                                                    }
                                                } else {
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : ''));
                                                    if(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    }
                                                }
                                            }
                                        }   //getting document droplist elements ends here
                                        //getting custom droplist elements
                                        if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                                            if($parent_id == 10719) {
                                                $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                                            }
                                            if($findValue->find('span.texthere', 0)) {
                                                if(!empty($jsonDecodeDropDownValues) && $findValue->dropdownlabel != trim($findValue->find('span.texthere', 0)->plaintext)) {
                                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('span.texthere', 0)->plaintext))));
                                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->plaintext) && $findValue->find('span.texthere', 0)->plaintext != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                                    }
                                                } elseif(isset($findValue->find('span.texther', 0)->plaintext) && array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('span.texthere', 0)->plaintext))));
                                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->plaintext) && $findValue->find('span.texthere', 0)->plaintext != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                                    }
                                                } else {
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : ''));
                                                    if(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    }
                                                }
                                            } else {
                                                if(!empty($jsonDecodeDropDownValues) && $findValue->dropdownlabel != trim($findValue->find('span.texthere', 0)->plaintext)) {
                                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('p', 0)->plaintext))));
                                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    } elseif(isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('p', 0)->plaintext);
                                                    }
                                                } elseif(isset($findValue->find('span.texther', 0)->plaintext) && array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('p', 0)->plaintext))));
                                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    } elseif(isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('p', 0)->plaintext);
                                                    }
                                                } else {
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : ''));
                                                    if(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    }
                                                }
                                            }
                                        }
                                        //document field droplist with multiple radio button
                                        if(strpos($findValue->getAttribute('class'), 'documentFieldDroplist') !== false && strpos($findValue->getAttribute('class'), 'dropdown_radioList_api') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                                            if($parent_id == 10719) {
                                                $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                                            }
                                            if($findValue->find('.fa-dot-circle-o', 0)) {
                                                //$documentFields[$apiAttributeOrDropDownLabel] = $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext;
                                                $getArrayKey = array_search(trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext), $jsonDecodeDropDownValues);
                                                //$documentFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? $jsonDecodeDropDownAlternativeValues[$getArrayKey] : $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext);
                                                if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                                    $documentFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                                } elseif(isset($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext) && $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext != '') {
                                                    $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext);
                                                }
                                            } else {
                                                //comment below line on 5 August 2020 for not show the key if value is empty
                                                //$documentFields[$apiAttributeOrDropDownLabel] = '';
                                            }
                                        }
                                        //document field droplist with multiple radio button of custom and me
                                        if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'dropdown_radioList_api') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                                            if($parent_id == 10719) {
                                                $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                                            }
                                            if($findValue->find('.fa-dot-circle-o', 0)) {
                                                //$documentFields[$apiAttributeOrDropDownLabel] = $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext;
                                                $getArrayKey = array_search(trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext), $jsonDecodeDropDownValues);
                                                //$documentFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? $jsonDecodeDropDownAlternativeValues[$getArrayKey] : $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext);
                                                if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                                    $documentFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                                } elseif(isset($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext) && $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext != '') {
                                                    $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext);
                                                }
                                            } else {
                                                //comment below line on 5 August 2020 for not show the key if value is empty
                                                //$documentFields[$apiAttributeOrDropDownLabel] = '';
                                            }
                                        }
                                        //document field droplist with multiple checkboxes
                                        if(strpos($findValue->getAttribute('class'), 'documentFieldDroplist') !== false && strpos($findValue->getAttribute('class'), 'multi_choice_option') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                                            if($parent_id == 10719) {
                                                $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                                            }
                                            if($findValue->find('.fa-check', 0)) {
                                                $faCheckValues = [];
                                                foreach($findValue->find('.ionIconsCheck') as $checkBoxKey => $checkBoxValue) {
                                                    if(strpos($checkBoxValue->getAttribute('class'), 'fa-check') !== false) {
                                                        $faCheckValues[] = (isset($jsonDecodeDropDownAlternativeValues[$checkBoxKey]) && $jsonDecodeDropDownAlternativeValues[$checkBoxKey] != '' ? $jsonDecodeDropDownAlternativeValues[$checkBoxKey] : $checkBoxValue->parent()->parent()->find('label', 0)->innertext);
                                                    }
                                                }
                                                if(!empty($faCheckValues)) {
                                                    $totalFaCheckValues = count($faCheckValues);
                                                    if($totalFaCheckValues > 1) {
                                                        $faCheckValues = implode(', ' , array_slice($faCheckValues,0,$totalFaCheckValues-1)) . ' and ' . end($faCheckValues);
                                                    } else {
                                                        $faCheckValues = implode(', ' , $faCheckValues);
                                                    }
                                                    $documentFields[$apiAttributeOrDropDownLabel] = $faCheckValues;
                                                }
                                                //$documentFields[$apiAttributeOrDropDownLabel] = $findValue->find('.fa-check', 0)->parent()->parent()->find('label', 0)->innertext;
                                            } else {
                                                //comment below line on 5 August 2020 for not show the key if value is empty
                                                //$documentFields[$apiAttributeOrDropDownLabel] = '';
                                            }
                                        }
                                        //document field droplist with multiple checkboxes of custom and me
                                        if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'multi_choice_option') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                                            if($parent_id == 10719) {
                                                $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                                            }
                                            if($findValue->find('.fa-check', 0)) {
                                                $faCheckValues = [];
                                                foreach($findValue->find('.ionIconsCheck') as $checkBoxKey => $checkBoxValue) {
                                                    if(strpos($checkBoxValue->getAttribute('class'), 'fa-check') !== false) {
                                                        $faCheckValues[] = (isset($jsonDecodeDropDownAlternativeValues[$checkBoxKey]) && $jsonDecodeDropDownAlternativeValues[$checkBoxKey] != '' ? $jsonDecodeDropDownAlternativeValues[$checkBoxKey] : $checkBoxValue->parent()->parent()->find('label', 0)->innertext);
                                                    }
                                                }
                                                if(!empty($faCheckValues)) {
                                                    $totalFaCheckValues = count($faCheckValues);
                                                    if($totalFaCheckValues > 1) {
                                                        $faCheckValues = implode(', ' , array_slice($faCheckValues,0,$totalFaCheckValues-1)) . ' and ' . end($faCheckValues);
                                                    } else {
                                                        $faCheckValues = implode(', ' , $faCheckValues);
                                                    }
                                                    $documentFields[$apiAttributeOrDropDownLabel] = $faCheckValues;
                                                }
                                            } else {
                                                //comment below line on 5 August 2020 for not show the key if value is empty
                                                //$documentFields[$apiAttributeOrDropDownLabel] = '';
                                            }
                                        } //selectcolor_popupcontainer condition ends here
                                    }   //second foreach loop ends here
                                }   //first foreach loop ends here

                                foreach($html->find('.dynamicTag') as $findTagKey => $findTagValue) {
                                    if(strpos($findTagValue->getAttribute('class'), 'documenttagName') !== false) {
                                        $apiAttributeOrTagName = (isset($findTagValue->apitagattribute) && $findTagValue->apitagattribute != '' ? $findTagValue->apitagattribute : $findTagValue->tagname);
                                        if($parent_id == 10719) {
                                            $apiAttributeOrTagName = str_replace(' ', '_', $apiAttributeOrTagName);
                                        }
                                        $jsonDecodeDropDownValues = (isset($findTagValue->dropdownvalues) && !empty($findTagValue->dropdownvalues) ? json_decode(html_entity_decode($findTagValue->dropdownvalues), true) : []);
                                        $jsonDecodeDropDownAlternativeValues = (isset($findTagValue->dropdownvalues_alternate) && !empty($findTagValue->dropdownvalues_alternate) ? json_decode(html_entity_decode($findTagValue->dropdownvalues_alternate), true) : []);

                                        if(strpos($findTagValue->getAttribute('class'), 'documentdroplisttagname') !== false) {
                                            if(isset($findTagValue->dropdownapi) && $findTagValue->dropdownapi != '') {
                                                $documentFields[$apiAttributeOrTagName] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, trim($findTagValue->plaintext)) : '');
                                            } else {
                                                $tagValuesArray = [];
                                                foreach($jsonDecodeDropDownValues as $dropDownKey => $dropDownValues) {
                                                    if(isset($findTagValue->plaintext) && !empty($findTagValue->plaintext) && isset($dropDownValues) && !empty($dropDownValues)) {
                                                        if(strpos($findTagValue->plaintext, $dropDownValues) > -1) {
                                                            $getArrayKey = array_search(trim($dropDownValues), $jsonDecodeDropDownValues);
                                                            $tagValuesArray[] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && !empty($jsonDecodeDropDownAlternativeValues[$getArrayKey]) ? $jsonDecodeDropDownAlternativeValues[$getArrayKey] : $utility->convertDateMonthNameToInteger($languageId, trim($dropDownValues)));
                                                        } else {
                                                            $documentFields[$apiAttributeOrTagName] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, trim($findTagValue->plaintext)) : '');
                                                        }
                                                    }
                                                }
                                                $totalTagValuesArray = count($tagValuesArray);
                                                if($totalTagValuesArray > 1) {
                                                    $tagValuesArray = implode(', ' , array_slice($tagValuesArray,0,$totalTagValuesArray-1)) . ' and ' . end($tagValuesArray);
                                                } else {
                                                    $tagValuesArray = implode(', ' , $tagValuesArray);
                                                }
                                                $documentFields[$apiAttributeOrTagName] = $tagValuesArray;
                                            }
                                        } else {
                                            $documentFields[$apiAttributeOrTagName] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, trim($findTagValue->plaintext)) : '');
                                        }
                                    }
                                }
                                //document tags names showing and its loop ending

                                if($html->find('.billecta_GetBankInfo_h5')) {
                                    foreach($html->find('.billecta_GetBankInfo_h5') as $findBillectaKey => $findBillectaValue) {
                                        if(isset($findBillectaValue->billecta_row)) {
                                            if($html->find('.billecta_row_'.$findBillectaValue->billecta_row)) {
                                                if($findBillectaValue->innertext != '&nbsp;' && $findBillectaValue->innertext != '<br>') {
                                                    $documentFields[$findBillectaValue->innertext] = str_replace(',', ' ', $html->find('.billecta_row_'.$findBillectaValue->billecta_row, 0)->innertext);
                                                }
                                            }
                                        }
                                    }
                                }

                            }   //not empty condition on content ends here
                            //organization information of fields which are placed at document ending

                            //recipient information in details starting
                            if(isset($recipientUserDetailsJsonDecode['details_fields'])) {
                                $detailsFields = json_decode($recipientUserDetailsJsonDecode['details_fields'], true);
                                foreach($detailsFields as $orgFldsKey => $orgFldsValue) {
                                    $details[$orgFldsValue['detailsFieldName']] = $orgFldsValue['detailsFieldValue'];
                                }
                            } else {
                                $details['recipient_role'] = (isset($recipientUserDetailsJsonDecode['recrolename']) && $recipientUserDetailsJsonDecode['recrolename'] != '' ? $recipientUserDetailsJsonDecode['recrolename'] : (isset($recipientUserDetailsJsonDecode['partyname']) && $recipientUserDetailsJsonDecode['partyname'] != '' ? $recipientUserDetailsJsonDecode['partyname'] : ''));
                                if($contractDataValue['role'] == 2) {
                                    $contractDataValue['authentication_method'] = 8;
                                }
                                $details['authentication'] = $utility->authenticationMethodName($contractDataValue['authentication_method']);
                                if(isset($contractDataValue['invitation_type']) && $contractDataValue['invitation_type'] != '') {
                                    $details['invitation_type'] = $utility->invitationTypeName($contractDataValue['invitation_type']);
                                }
                                if($contractDataValue['invitation_order'] != 0) {
                                    $details['invitation_order'] = $contractDataValue['invitation_order'];
                                }
                                if(isset($contractDataValue['offer_confirmation']) && $contractDataValue['offer_confirmation'] != '') {
                                    $details['confirmation'] = $utility->offerConfirmationName($contractDataValue['offer_confirmation']);
                                }
                                $details['id_attachment'] = $utility->idAttachmentName($contractDataValue['id_attachments']);
                            }

                            $details['request_attachment'] = ($contractDataValue['req_attached'] != '' ? 'yes' : 'no');
                            if($contractDataValue['document_read_date'] != '' && $contractDataValue['document_read_date'] != '0000-00-00 00:00:00') {
                                $details['last_viewing_date'] = ($contractDataValue['document_read_date'] != '' ? $utility->changeTimeZone($contractDataValue['document_read_date'], 'Y-m-d H:i:s', 'UTC', $userTimeZone) : '');
                            }
                            $details['signed_date'] = ($contractDataValue['signed_date'] != '' && $contractDataValue['signed_date'] != '0000-00-00 00:00:00' ? $utility->changeTimeZone($contractDataValue['signed_date'], 'Y-m-d H:i:s', 'UTC', $userTimeZone) : '');
                            $details['status'] = (isset($contractDataValue['offer_status']) != '' ? $utility->offerStatusName($contractDataValue['offer_status']) : '');

                            if(!empty($organizationFields)) {
                                $eachArray = ['people_fields' => $peopleFields, 'organization_fields' => $organizationFields, 'details' => $details];
                            } else {
                                $eachArray = ['people_fields' => $peopleFields, 'details' => $details];
                            }
                            array_push($peoples, $eachArray);
                        }   //getting recipient data ending
                        elseif($contractDataValue['offer_sent_id'] == $eachSentId && $contractDataValue['is_sender'] == 1) {
                            $documentDetails['template_name'] = (isset($sentIdsValue['visible_name']) && $sentIdsValue['visible_name'] != '' ? trim(Tcrypt::decrypter($sentIdsValue['visible_name'])) : trim(Tcrypt::decrypter($sentIdsValue['name'])));
                            $documentDetails['document_id'] = (!empty($sentIdsValue['external_doc_id']) ? $sentIdsValue['external_doc_id'] : $sentIdsValue['id']);
                            $documentDetails['template_id'] = $sentIdsValue['offer_id'];
                            $documentDetails['language'] = (isset($sentIdsValue['language_id']) && $sentIdsValue['language_id'] != '' ? $utility->languageName($sentIdsValue['language_id']) : 'English');
                            $documentDetails['sent_date'] = (isset($sentIdsValue['created_date']) && $sentIdsValue['created_date'] != '' && $sentIdsValue['created_date'] != '0000-00-00 00:00:00' ? $utility->changeTimeZone(trim($sentIdsValue['created_date']), 'Y-m-d H:i:s', 'UTC', $userTimeZone) : '');
                            $documentDetails['signed_date'] = (isset($sentIdsValue['signed_date']) && $sentIdsValue['signed_date'] != '' && $sentIdsValue['signed_date'] != '0000-00-00 00:00:00' ? $utility->changeTimeZone(trim($sentIdsValue['signed_date']), 'Y-m-d H:i:s', 'UTC', $userTimeZone) : '');
                            $documentDetails['due_date'] = (isset($sentIdsValue['due_date']) && $sentIdsValue['due_date'] != '' && $sentIdsValue['due_date'] != '0000-00-00 00:00:00' ? trim(date('Y-m-d', strtotime($sentIdsValue['due_date']))) : '');
                            if(isset($data['status']) && ($data['status'] == 'rejected' || $data['status'] == 'Rejected')) {
                                $documentDetails['status'] = 'Rejected';
                            } else {
                                $documentDetails['status'] = (isset($sentIdsValue['offer_status']) ? $utility->offerStatusName($sentIdsValue['offer_status']) : '');
                            }
                            $markCompleted = Offersent_data::where('sent_id', $eachSentId)->pluck('mark_completed');
                            $multiCaseManagement = Offersent_data::where('sent_id', $eachSentId)->pluck('multi_case_management');
                            $contractTypeId = Offersent_data::where('sent_id', $eachSentId)->pluck('contract_type_id');
                            if($_SERVER['HTTP_HOST'] == 'beta.simplesign.io') {
                                //$documentDetails['contract_type'] = DB::table('archive_document_types')->where('id', $contractTypeId)->pluck('type_name');
                                $documentDetails['sent_unique_id'] = $sendUniqueId;
                            }
                            if(!empty($getAddOnObjectData['new_addon_obj'])) {
                                $newAddonObjJesonDecode = json_decode($getAddOnObjectData['new_addon_obj'], true);
                                if(isset($newAddonObjJesonDecode['mark_as_completed_addon']) && $newAddonObjJesonDecode['mark_as_completed_addon'] == 1) {
                                    if((isset($data['task_name']) && $data['task_name'] != '') || (isset($data['task_status']) && $data['task_status'] != '')) {
                                        if(isset($newAddonObjJesonDecode['mark_as_completed_addon_setting']) && !empty($newAddonObjJesonDecode['mark_as_completed_addon_setting'])) {
                                            $markAsCompletedAddonSettingJsonDecode = json_decode($newAddonObjJesonDecode['mark_as_completed_addon_setting'], true);
                                            $multiCaseManagementJsonDecode = (isset($multiCaseManagement) && !empty($multiCaseManagement) ? json_decode($multiCaseManagement, true) : []);
                                            if(isset($markAsCompletedAddonSettingJsonDecode['mark_tasks_array']) && !empty($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'])) {
                                                $numberIncrement = 0;
                                                $caseManagementTaskName = explode('|', $data['task_name']);
                                                foreach($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'] as $markAsCompletedAddonSettingJsonDecodeKey => $markAsCompletedAddonSettingJsonDecodeValue) {
                                                    $numberIncrement++;
                                                    foreach($caseManagementTaskName as $caseManagementTaskNameKey => $caseManagementTaskNameValue) {
                                                        if(isset($data['task_status']) && $data['task_status'] != '') {
                                                            if(isset($multiCaseManagementJsonDecode[$numberIncrement]) && !empty($multiCaseManagementJsonDecode[$numberIncrement]) && $multiCaseManagementJsonDecode[$numberIncrement]['status_text'] == $data['task_status'] && isset($markAsCompletedAddonSettingJsonDecodeValue['tasknames']) && !empty($markAsCompletedAddonSettingJsonDecodeValue['tasknames']) && $markAsCompletedAddonSettingJsonDecodeValue['tasknames'] == $caseManagementTaskNameValue) {
                                                                if(in_array($contractTypeId, $markAsCompletedAddonSettingJsonDecodeValue['contract_type_selected']) && (in_array($sentIdsValue['offer_status'], $markAsCompletedAddonSettingJsonDecodeValue['marked_addon_status']) || in_array("", $markAsCompletedAddonSettingJsonDecodeValue['marked_addon_status']))) {
                                                                    //in_array condtion for offer_status from offer_sent and in_array('') empty for any which we are showing in the case management add status
                                                                    $conditionalText = '';
                                                                    if(isset($multiCaseManagementJsonDecode[$numberIncrement]) && !empty($multiCaseManagementJsonDecode[$numberIncrement])) {
                                                                        if(isset($multiCaseManagementJsonDecode[$numberIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numberIncrement]['status_text'] == 'done') {
                                                                            $conditionalText = 'Yes';
                                                                        } elseif(isset($multiCaseManagementJsonDecode[$numberIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numberIncrement]['status_text'] == 'in_process') {
                                                                            $conditionalText = 'In process';
                                                                        } elseif(isset($multiCaseManagementJsonDecode[$numberIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numberIncrement]['status_text'] == 'no') {
                                                                            $conditionalText = 'No';
                                                                        }
                                                                        if(isset($multiCaseManagementJsonDecode[$numberIncrement]['task_no']) && isset($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'][$multiCaseManagementJsonDecode[$numberIncrement]['task_no']])) {
                                                                            $documentDetails[$markAsCompletedAddonSettingJsonDecode['mark_tasks_array'][$multiCaseManagementJsonDecode[$numberIncrement]['task_no']]['tasknames']] = $conditionalText;//$multiCaseManagementJsonDecode[$numberIncrement]['status_text'];
                                                                        } else {
                                                                            if(isset($multiCaseManagementJsonDecode[$numberIncrement]['task_no'])) {
                                                                                $documentDetails[$markAsCompletedAddonSettingJsonDecodeValue['tasknames']] = 'No';
                                                                            }
                                                                        }
                                                                    } else {
                                                                        $documentDetails[$markAsCompletedAddonSettingJsonDecodeValue['tasknames']] = 'No';
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if(isset($multiCaseManagementJsonDecode[$numberIncrement]) && !empty($multiCaseManagementJsonDecode[$numberIncrement]) && isset($markAsCompletedAddonSettingJsonDecodeValue['tasknames']) && !empty($markAsCompletedAddonSettingJsonDecodeValue['tasknames']) && $markAsCompletedAddonSettingJsonDecodeValue['tasknames'] == $caseManagementTaskNameValue) {
                                                                if(in_array($contractTypeId, $markAsCompletedAddonSettingJsonDecodeValue['contract_type_selected']) && (in_array($sentIdsValue['offer_status'], $markAsCompletedAddonSettingJsonDecodeValue['marked_addon_status']) || in_array("", $markAsCompletedAddonSettingJsonDecodeValue['marked_addon_status']))) {
                                                                    //in_array condtion for offer_status from offer_sent and in_array('') empty for any which we are showing in the case management add status
                                                                    $conditionalText = '';
                                                                    if(isset($multiCaseManagementJsonDecode[$numberIncrement]) && !empty($multiCaseManagementJsonDecode[$numberIncrement])) {
                                                                        if(isset($multiCaseManagementJsonDecode[$numberIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numberIncrement]['status_text'] == 'done') {
                                                                            $conditionalText = 'Yes';
                                                                        } elseif(isset($multiCaseManagementJsonDecode[$numberIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numberIncrement]['status_text'] == 'in_process') {
                                                                            $conditionalText = 'In process';
                                                                        } elseif(isset($multiCaseManagementJsonDecode[$numberIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numberIncrement]['status_text'] == 'no') {
                                                                            $conditionalText = 'No';
                                                                        }
                                                                        if(isset($multiCaseManagementJsonDecode[$numberIncrement]['task_no']) && isset($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'][$multiCaseManagementJsonDecode[$numberIncrement]['task_no']])) {
                                                                            $documentDetails[$markAsCompletedAddonSettingJsonDecode['mark_tasks_array'][$multiCaseManagementJsonDecode[$numberIncrement]['task_no']]['tasknames']] = $conditionalText;//$multiCaseManagementJsonDecode[$numberIncrement]['status_text'];
                                                                        } else {
                                                                            if(isset($multiCaseManagementJsonDecode[$numberIncrement]['task_no'])) {
                                                                                $documentDetails[$markAsCompletedAddonSettingJsonDecodeValue['tasknames']] = 'No';
                                                                            }
                                                                        }
                                                                    } else {
                                                                        $documentDetails[$markAsCompletedAddonSettingJsonDecodeValue['tasknames']] = 'No';
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if(isset($newAddonObjJesonDecode['mark_as_completed_addon_setting']) && !empty($newAddonObjJesonDecode['mark_as_completed_addon_setting'])) {
                                            $markAsCompletedAddonSettingJsonDecode = json_decode($newAddonObjJesonDecode['mark_as_completed_addon_setting'], true);
                                            $multiCaseManagementJsonDecode = (isset($multiCaseManagement) && !empty($multiCaseManagement) ? json_decode($multiCaseManagement, true) : []);
                                            if(isset($markAsCompletedAddonSettingJsonDecode['mark_tasks_array']) && !empty($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'])) {
                                                $numberIncrement = 0;
                                                foreach($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'] as $markAsCompletedAddonSettingJsonDecodeKey => $markAsCompletedAddonSettingJsonDecodeValue) {
                                                    //in_array condtion for offer_status from offer_sent and in_array('') empty for any status which we are showing in the case management add status
                                                    if(in_array($contractTypeId, $markAsCompletedAddonSettingJsonDecodeValue['contract_type_selected']) && (in_array($sentIdsValue['offer_status'], $markAsCompletedAddonSettingJsonDecodeValue['marked_addon_status']) || in_array("", $markAsCompletedAddonSettingJsonDecodeValue['marked_addon_status']))) {
                                                        if(isset($data['task_filter']) && $data['task_filter'] != '' && array_search($markAsCompletedAddonSettingJsonDecodeValue['tasknames'], array_column($taskFilterArray, 'task_name')) === false) {
                                                            continue;
                                                        }
                                                        $numberIncrement++;
                                                        $conditionalText = '';
                                                        if(isset($multiCaseManagementJsonDecode[$numberIncrement]) && !empty($multiCaseManagementJsonDecode[$numberIncrement])) {
                                                            if(isset($multiCaseManagementJsonDecode[$numberIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numberIncrement]['status_text'] == 'done') {
                                                                $conditionalText = 'Yes';
                                                            } elseif(isset($multiCaseManagementJsonDecode[$numberIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numberIncrement]['status_text'] == 'in_process') {
                                                                $conditionalText = 'In process';
                                                            } elseif(isset($multiCaseManagementJsonDecode[$numberIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numberIncrement]['status_text'] == 'no') {
                                                                $conditionalText = 'No';
                                                            }
                                                            if(isset($multiCaseManagementJsonDecode[$numberIncrement]['task_no']) && isset($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'][$multiCaseManagementJsonDecode[$numberIncrement]['task_no']])) {
                                                                $documentDetails[$markAsCompletedAddonSettingJsonDecode['mark_tasks_array'][$multiCaseManagementJsonDecode[$numberIncrement]['task_no']]['tasknames']] = $conditionalText;//$multiCaseManagementJsonDecode[$numberIncrement]['status_text'];
                                                            } else {
                                                                if(isset($multiCaseManagementJsonDecode[$numberIncrement]['task_no'])) {
                                                                    $documentDetails[$markAsCompletedAddonSettingJsonDecodeValue['tasknames']] = 'No';
                                                                }
                                                            }
                                                        } else {
                                                            //this is showing if users does not change the process
                                                            $documentDetails[$markAsCompletedAddonSettingJsonDecodeValue['tasknames']] = 'No';
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            $documentDetails['pdf'] = $domain_name.'avtal/downloadpdf/'.$sentIdsValue['id'].'/'.$uniqueId;
                            $documentDetails['document_url'] = $documentLink;
                        }
                    }   //details foreach loop ends here
                    $responseArray[$sentIdsKey]['peoples'] = $peoples;
                    if(!empty($documentFields)) {
                        //showing alphbats order to show document fields data
                        ksort($documentFields);
                        $responseArray[$sentIdsKey]['document_fields'] = $documentFields;
                    }
                    $responseArray[$sentIdsKey]['sender_details'] = $senderDetails;
                    $responseArray[$sentIdsKey]['account_details'] = $accountDetails;
                    $responseArray[$sentIdsKey]['document_details'] = $documentDetails;
                } //sent foreach loop ends here
                return response()->json(['status' => 'success', 'result' => $responseArray], 200, ['Content-Type' => 'application/json; charset=UTF-8'], JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
            } else {
                return Response::json(['status' => 'error', 'result' => 'No record(s) found']);
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }

    public function anyGetdocumentinfobystatusnew() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');

        //access_token validation starting
        if(isset($data['access_token'])) {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
        //access_token validation ending

        //status validation starting
        if(isset($data['status']) && $data['status'] != '') {
            $status = $data['status'];
            if($status == 'processing' || $status == 'Processing') {
                $status = 0;
            } elseif($status == 'delivered' || $status == 'Delivered') {
                $status = 1;
            } elseif($status == 'reviewed' || $status == 'Reviewed') {
                $status = 3;
            } elseif($status == 'signed' || $status == 'Signed') {
                $status = 4;
            } elseif($status == 'rejected' || $status == 'Rejected') {
                $status = 5;
            } else {
                return Response::json(['status' => 'error', 'result' => 'Invalid status']);
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'status is missing']);
        }
        //status validation ending

        $user_id = $utility->getUserIdByAuthToken($access_token);
        $parent_id = $utility->getParent($user_id);
        $userSettings = $utility->getUserSettings($parent_id);

        if($utility->checkAdminStripe($user_id)) {
            return Response::json(['status' => 'error', 'result' => 'Account is locked make payment in order to continue Simplesign']);
        }

        $pageLimit = (isset($data['pagelimit']) && $data['pagelimit'] != '' ? $data['pagelimit'] : 10);
        $currentPage = (isset($data['current_page']) && $data['current_page'] != '' ? $data['current_page'] : 0);
        $skipRecords = $currentPage * $pageLimit;

        $offerSentObject = new Offersent();
        if(isset($data['contract_id']) && !empty($data['contract_id'])) {
            $offerSentObject = $offerSentObject->where('id', $data['contract_id']);
        }
        $offerSentData = $offerSentObject->where('offer_status', $status)->select('id', 'language_id', 'visible_name', 'name', 'created_date', 'signed_date', 'due_days', 'reminder_days', 'offer_status', 'offer_type', 'sender_id', 'content')->where('offer_status', '!=', 7)->where('sender_id', $user_id)->orderBy('id', 'desc')->skip($skipRecords)->take($pageLimit)->get()->toArray();
        $offerSentIds = [];
        foreach($offerSentData as $sentDataKey => $sentDataValue) {
            array_push($offerSentIds, $sentDataValue['id']);
        }

        $selectRaw = "CAST(AES_DECRYPT(simplesign_offer_send_details.user_details,'".env('ENCRYPT_KEY')."','".env('ENCRYPT_IV')."') AS CHAR) as user_details";
        DB::statement(' SET block_encryption_mode = \''.env('ENCRYPT_CIPHER').'\'');

        $contractData = Offersentdetails::whereIn('offer_sent_id', $offerSentIds)->select('offer_send_details.offer_status', DB::raw($selectRaw), 'is_sender', 'offer_send_details.id AS detail_id', 'offer_sent_id', 'req_attached', 'document_read_date', 'signed_date', 'authentication_method', 'role', 'invitation_type', 'invitation_order', 'offer_confirmation', 'id_attachments', 'id', 'offer_sent_id', 'unique_id')->get()->toArray();

        //DB::enableQueryLog();
        //print_r(DB::getQueryLog());
        if($contractData) {
            $responseArray = [];
            foreach($offerSentData as $sentIdsKey => $sentIdsValue) {
                $eachSentId = $sentIdsValue['id'];
                $peoples = $senderDetails = $documentFields = $contractDetails = [];
                foreach($contractData as $contractDataKey => $contractDataValue) {
                    $peopleFields = $organizationFields = $details = [];
                    $nameExplode = '';

                    $recipientUserDetailsJsonDecode = json_decode($contractDataValue['user_details'], true);
                    $peopleFields['detail_id'] = $contractDataValue['detail_id'];
                    $peopleFields['offer_sent_id'] = $contractDataValue['offer_sent_id'];

                    $userRole = (isset($recipientUserDetailsJsonDecode['recrolename']) && $recipientUserDetailsJsonDecode['recrolename'] != '' ? $recipientUserDetailsJsonDecode['recrolename'] : (isset($recipientUserDetailsJsonDecode['partyname']) && $recipientUserDetailsJsonDecode['partyname'] != '' ? $recipientUserDetailsJsonDecode['partyname'] : ''));

                    //basic information of recipient starting
                    if($contractDataValue['offer_sent_id'] == $eachSentId && $contractDataValue['is_sender'] == 0) {
                        if(isset($recipientUserDetailsJsonDecode['name']) && $recipientUserDetailsJsonDecode['name'] != '') {                        
                            $nameExplode = (isset($recipientUserDetailsJsonDecode['name']) && $recipientUserDetailsJsonDecode['name'] != '' ? explode(' ', $recipientUserDetailsJsonDecode['name']) : '');
                            $peopleFields['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                            $peopleFields['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                        }
                    } if($contractDataValue['offer_sent_id'] == $eachSentId && $contractDataValue['is_sender'] == 1) {
                        if(isset($recipientUserDetailsJsonDecode['first_name']) && $recipientUserDetailsJsonDecode['first_name'] != '') {
                            $peopleFields['name'] = (isset($recipientUserDetailsJsonDecode['first_name']) && $recipientUserDetailsJsonDecode['first_name'] != '' ? trim($recipientUserDetailsJsonDecode['first_name']) : '');
                        }
                    }

                    if(isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '') {
                        $nameExplode = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? explode(' ', trim($recipientUserDetailsJsonDecode['full_name'])) : '');
                        $peopleFields['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                        $peopleFields['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                    }
                    $peopleFields['email'] = (isset($recipientUserDetailsJsonDecode['email']) && $recipientUserDetailsJsonDecode['email'] != '' ? trim(preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $recipientUserDetailsJsonDecode['email'])) : '');
                    $peopleFields['personal_no'] = (isset($recipientUserDetailsJsonDecode['personnr']) && $recipientUserDetailsJsonDecode['personnr'] != '' ? trim($recipientUserDetailsJsonDecode['personnr']) : '');
                    $peopleFields['mobile'] = (isset($recipientUserDetailsJsonDecode['mobile']) && $recipientUserDetailsJsonDecode['mobile'] != '' ? trim($recipientUserDetailsJsonDecode['mobile']) : '');
                    $peopleFields['address'] = (isset($recipientUserDetailsJsonDecode['address']) && $recipientUserDetailsJsonDecode['address'] != '' ? trim($recipientUserDetailsJsonDecode['address']) : '');
                    $peopleFields['city'] = (isset($recipientUserDetailsJsonDecode['city']) && $recipientUserDetailsJsonDecode['city'] != '' ? trim($recipientUserDetailsJsonDecode['city']) : '');
                    $peopleFields['zipcode'] = (isset($recipientUserDetailsJsonDecode['zipcode']) && $recipientUserDetailsJsonDecode['zipcode'] != '' ? trim($recipientUserDetailsJsonDecode['zipcode']) : (isset($recipientUserDetailsJsonDecode['zip']) && $recipientUserDetailsJsonDecode['zip'] != '' ? trim($recipientUserDetailsJsonDecode['zip']) : ''));
                    //basic information of recipient ending

                    $contractDetails['document_name'] = ($sentIdsValue['visible_name'] != '' ? Tcrypt::decrypter($sentIdsValue['visible_name']) : Tcrypt::decrypter($sentIdsValue['name']));
                    $contractDetails['contract_language'] = $utility->languageName($sentIdsValue['language_id']);
                    $contractDetails['sent_date'] = ($sentIdsValue['created_date'] != '' && $sentIdsValue['created_date'] != '0000-00-00 00:00:00' ? $sentIdsValue['created_date'] : '');
                    $contractDetails['signed_date'] = ($sentIdsValue['signed_date'] != '' && $sentIdsValue['signed_date'] != '0000-00-00 00:00:00' ? $sentIdsValue['signed_date'] : '');
                    $contractDetails['contract_due_days'] = ($sentIdsValue['due_days'] != '' ? $sentIdsValue['due_days'] : '');
                    $contractDetails['contract_reminder_days'] = ($sentIdsValue['reminder_days'] != '' ? $sentIdsValue['reminder_days'] : '');
                    $contractDetails['contract_status'] = $utility->offerStatusName($sentIdsValue['offer_status']);
                    $contractDetails['pdf'] = $domain_name.'avtal/downloadpdf/'.$eachSentId.'/'.$contractDataValue['unique_id'];

                    if($contractDataValue['offer_sent_id'] == $eachSentId && $contractDataValue['is_sender'] == 1) {
                        $peopleFields['company'] = (isset($recipientUserDetailsJsonDecode['company']) && $recipientUserDetailsJsonDecode['company'] != '' ? trim($recipientUserDetailsJsonDecode['company']) : '');
                        $peopleFields['phone_no'] = (isset($recipientUserDetailsJsonDecode['telephone']) && $recipientUserDetailsJsonDecode['telephone'] != '' ? trim($recipientUserDetailsJsonDecode['telephone']) : '');
                        $peopleFields['zipcode'] = (isset($recipientUserDetailsJsonDecode['post_code']) && $recipientUserDetailsJsonDecode['post_code'] != '' ? trim($recipientUserDetailsJsonDecode['post_code']) : '');
                        $peopleFields['reg_no'] = ($peopleFields['personal_no'] == '' && isset($recipientUserDetailsJsonDecode['reg_no']) ? trim($recipientUserDetailsJsonDecode['reg_no']) : '');

                        unset($peopleFields['personal_no']);
                        unset($peopleFields['mobile']);
                        $senderDetails = $peopleFields;
                        $extraFieldsData = Userinfo::where('user_id', $sentIdsValue['sender_id'])->pluck('extra_fields_data');
                        $userCustomFields = (isset($recipientUserDetailsJsonDecode['user_customfields']) && $recipientUserDetailsJsonDecode['user_customfields'] != '' ? json_decode($recipientUserDetailsJsonDecode['user_customfields'], true) : []);
                        if(!empty($userCustomFields)) {
                            foreach($userCustomFields as $userCustomFldkey => $userCustomFldValue) {
                                $senderDetails[trim($userCustomFldkey)] = (isset($userCustomFldValue) && $userCustomFldValue != '' ? trim($userCustomFldValue) : '');
                            }
                        }
                    } elseif($contractDataValue['offer_sent_id'] == $eachSentId && $contractDataValue['is_sender'] == 0) {

                        //people information of new fields starting
                        if(isset($recipientUserDetailsJsonDecode['extra_fields']) && !empty($recipientUserDetailsJsonDecode['extra_fields'])) {
                            $recipientFieldsWithoutValue = (isset($recipientUserDetailsJsonDecode['recipientfields']) && !empty($recipientUserDetailsJsonDecode['recipientfields']) ? json_decode($recipientUserDetailsJsonDecode['recipientfields'], true) : []);

                            $extraFields = (isset($recipientUserDetailsJsonDecode['extra_fields']) && !empty($recipientUserDetailsJsonDecode['extra_fields']) ? json_decode($recipientUserDetailsJsonDecode['extra_fields'], true) : []);

                            $intersect = array_uintersect($extraFields, $recipientFieldsWithoutValue, function($val1, $val2) {
                                return strcmp($val1['fieldName'], $val2['fieldName']);
                            });

                            $intersect = array_values($intersect);
                            if(!empty($intersect)) {
                                foreach($intersect as $extraFldKey => $extraFldValue) {
                                    $peopleFields[$extraFldValue['fieldName']] = $extraFldValue['fieldValue'];
                                }
                            }
                        }
                        //people information of new fields ending
                        if(isset($recipientUserDetailsJsonDecode['organization_fields'])) {
                            $orgFields = json_decode($recipientUserDetailsJsonDecode['organization_fields'], true);
                            foreach($orgFields as $orgFldsKey => $orgFldsValue) {
                                $orgFldsValue['orgFieldName'] = str_replace('name', 'organization_name', $orgFldsValue['orgFieldName']);
                                $orgFldsValue['orgFieldName'] = str_replace('org_no', 'organization_no', $orgFldsValue['orgFieldName']);
                                $orgFldsValue['orgFieldName'] = str_replace('phone', 'organization_phone', $orgFldsValue['orgFieldName']);
                                $orgFldsValue['orgFieldName'] = str_replace('address', 'organization_address', $orgFldsValue['orgFieldName']);
                                $orgFldsValue['orgFieldName'] = str_replace('city', 'organization_city', $orgFldsValue['orgFieldName']);
                                $orgFldsValue['orgFieldName'] = str_replace('zipcode', 'organization_zipcode', $orgFldsValue['orgFieldName']);
                                $organizationFields[$orgFldsValue['orgFieldName']] = $orgFldsValue['orgFieldValue'];
                            }
                        } else {
                            if(isset($recipientUserDetailsJsonDecode['org_name']) && $recipientUserDetailsJsonDecode['org_name'] != '') {
                                $organizationFields['organization_name'] = $recipientUserDetailsJsonDecode['org_name'];
                            }
                            if(isset($recipientUserDetailsJsonDecode['org_reg_no']) && $recipientUserDetailsJsonDecode['org_reg_no'] != '') {
                                $organizationFields['organization_no'] = $recipientUserDetailsJsonDecode['org_reg_no'];
                            }
                            if(isset($recipientUserDetailsJsonDecode['org_mobile']) && $recipientUserDetailsJsonDecode['org_mobile'] != '') {
                                $organizationFields['organization_phone'] = $recipientUserDetailsJsonDecode['org_mobile'];
                            }
                            if(isset($recipientUserDetailsJsonDecode['org_address']) && $recipientUserDetailsJsonDecode['org_address'] != '') {
                                $organizationFields['organization_address'] = $recipientUserDetailsJsonDecode['org_address'];
                            }
                            if(isset($recipientUserDetailsJsonDecode['org_city']) && $recipientUserDetailsJsonDecode['org_city'] != '') {
                                $organizationFields['organization_city'] = $recipientUserDetailsJsonDecode['org_city'];
                            }
                            if(isset($recipientUserDetailsJsonDecode['org_zip']) && $recipientUserDetailsJsonDecode['org_zip'] != '') {
                                $organizationFields['organization_zipcode'] = $recipientUserDetailsJsonDecode['org_zip'];
                            }
                        }

                        //organization information of new fields starting
                        if(isset($recipientUserDetailsJsonDecode['org_extra_fields']) && !empty($recipientUserDetailsJsonDecode['org_extra_fields'])) {
                            $orgExtraFields = json_decode($recipientUserDetailsJsonDecode['org_extra_fields'], true);
                            if(!empty($orgExtraFields)) {
                                foreach($orgExtraFields as $orgExtraFldKey => $orgExtraFldValue) {
                                    $organizationFields[$orgExtraFldValue['fieldName']] = $orgExtraFldValue['fieldValue'];
                                }
                            }
                        }
                        //organization information of new fields ending

                        //organization information of fields which are placed at document starting
                        $content = Tcrypt::decrypter($sentIdsValue['content']);
                        if($content != '') {
                            $html = new \Htmldom($content);
                            foreach($html->find('.text') as $findKey => $findValue) {
                                //codition for regular contract starting
                                if(isset($recipientUserDetailsJsonDecode['id']) && $recipientUserDetailsJsonDecode['id'] == $findValue->recipientselectedid) {
                                    if(strpos($findValue->getAttribute('class'), 'peopleNewField') !== false) {
                                        if($findValue->find('h4', 0)) {
                                            $peopleFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                        }
                                    } if(strpos($findValue->getAttribute('class'), 'organizationNewField') !== false) {
                                        if($findValue->find('h4', 0)) {
                                            $organizationFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                        }
                                    }
                                    //codition for regular contract ending
                                } else {
                                    //codition for online contract starting
                                    
                                    if($userRole == $findValue->parent()->parent()->whowillfill) {
                                        if(strpos($findValue->getAttribute('class'), 'peopleNewField') !== false) {
                                            if($findValue->find('h4', 0)) {
                                                $peopleFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                            } else {
                                            //right now paragraph tag is showing and will be replaced by h4 near future starting
                                                if($findValue->find('p', 0)) {
                                                    $peopleFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                                }
                                                //right now paragraph tag is showing and will be replaced by h4 near future ending
                                            }
                                        } if(strpos($findValue->getAttribute('class'), 'organizationNewField') !== false) {
                                            if($findValue->find('h4', 0)) {
                                                $organizationFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                            } else {
                                            //right now paragraph tag is showing and will be replaced by h4 near future starting
                                                if($findValue->find('p', 0)) {
                                                    $organizationFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                                }
                                                //right now paragraph tag is showing and will be replaced by h4 near future ending
                                            }
                                        }
                                    }
                                    //codition for online contract ending
                                }

                                //getting document text fields
                                if(strpos($findValue->getAttribute('class'), 'documentField') !== false) {
                                    if($findValue->selectedtype != '0') {
                                        if($findValue->find('h4', 0) && strpos($findValue->parent()->parent()->getAttribute('class'), 'relationDisable') === false) {
                                            $documentFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                        } elseif($findValue->find('p', 0) && strpos($findValue->parent()->parent()->getAttribute('class'), 'relationDisable') === false) {
                                            $documentFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                        } elseif(!isset($documentFields[$findValue->selectedtype])) {
                                            $documentFields[$findValue->selectedtype] = '';
                                        }

                                        if(strpos($findValue->parent()->parent()->getAttribute('class'), 'relationDisable') !== false && (!isset($documentFields[$findValue->selectedtype]))) {
                                            $documentFields[$findValue->selectedtype] = '';
                                        }
                                    }   //not equal condition ends here
                                }   //getting document text fields ends here
                                //getting custom text fields
                                if(strpos($findValue->getAttribute('class'), 'field_box_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'datepickerfields_new') === false) {
                                    $documentFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                }
                                //getting datepicker fields
                                if(strpos($findValue->getAttribute('class'), 'field_box_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'datepickerfields_new') !== false && $findValue->recipientselected == 'Me') {
                                    $documentFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                }
                                //getting document checkbox elements
                                if(strpos($findValue->getAttribute('class'), 'documentFieldCheckbox') !== false) {
                                    //all values of checkboxes are showing
                                    if(strpos($findValue->find('.check_icon', 0)->getAttribute('style'), 'visible') !== false || strpos($findValue->getAttribute('class'), 'isChecked') !== false) {
                                        $documentFields[$findValue->fieldlabelname] = 'Yes';
                                    } else {
                                        $documentFields[$findValue->fieldlabelname] = 'No';
                                    }
                                }   //getting document checkbox elements ends here
                                //getting custom checkbox elements
                                if(strpos($findValue->getAttribute('class'), 'check_box_popupcontainer') !== false && strpos($findValue->parent()->parent()->getAttribute('class'), 'chechBoxCustom') !== false && $findValue->recipientselected == 'Me') {
                                    if(strpos($findValue->find('.check_icon', 0)->getAttribute('style'), 'visible')) {
                                        $documentFields[$findValue->fieldlabelname] = 'Yes';
                                    } else {
                                        $documentFields[$findValue->fieldlabelname] = 'No';
                                    }
                                }
                                //getting document droplist elements
                                if(strpos($findValue->getAttribute('class'), 'documentFieldDroplist') !== false) {
                                    if($findValue->find('span.texthere', 0)) {
                                        $documentFields[$findValue->dropdownlabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                    }
                                }   //getting document droplist elements ends here
                                //getting custom droplist elements
                                if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && $findValue->recipientselected == 'Me') {
                                    $documentFields[$findValue->dropdownlabel] = trim($findValue->find('span.texthere', 0)->plaintext);//trim($findValue->find('h4', 0)->plaintext);
                                }
                            }   //html text foreach loop ends here

                            //document tags names showing and its loop starting
                            foreach($html->find('.dynamicTag') as $findTagKey => $findTagValue) {
                                if(strpos($findTagValue->getAttribute('class'), 'documenttagName') !== false) {
                                    $documentFields[$findTagValue->tagname] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? trim($findTagValue->plaintext) : '');
                                }
                            }
                            //document tags names showing and its loop ending
                        }   //content not equal to empty condition ends here
                        //organization information of fields which are placed at document ending

                        if(isset($recipientUserDetailsJsonDecode['details_fields'])) {
                            $detailsFields = json_decode($recipientUserDetailsJsonDecode['details_fields'], true);
                            foreach($detailsFields as $orgFldsKey => $orgFldsValue) {
                                $details[$orgFldsValue['detailsFieldName']] = $orgFldsValue['detailsFieldValue'];
                            }
                        } else {
                            $details['recipient_role'] = (isset($recipientUserDetailsJsonDecode['recrolename']) && $recipientUserDetailsJsonDecode['recrolename'] != '' ? $recipientUserDetailsJsonDecode['recrolename'] : (isset($recipientUserDetailsJsonDecode['partyname']) && $recipientUserDetailsJsonDecode['partyname'] != '' ? $recipientUserDetailsJsonDecode['partyname'] : ''));
                            if($contractDataValue['role'] == 2) {
                                $contractDataValue['authentication_method'] = 8;
                            }
                            $details['authentication'] = $utility->authenticationMethodName($contractDataValue['authentication_method']);
                            if(isset($contractDataValue['invitation_type']) && $contractDataValue['invitation_type'] != '') {
                                $details['invitation_type'] = $utility->invitationTypeName($contractDataValue['invitation_type']);
                            }
                            if($contractDataValue['invitation_order'] != 0) {
                                $details['invitation_order'] = $contractDataValue['invitation_order'];
                            }
                            if(isset($contractDataValue['offer_confirmation']) && $contractDataValue['offer_confirmation'] != '') {
                                $details['confirmation'] = $utility->offerConfirmationName($contractDataValue['offer_confirmation']);
                            }
                            $details['id_attachment'] = $utility->idAttachmentName($contractDataValue['id_attachments']);
                        }

                        $details['request_attachment'] = ($contractDataValue['req_attached'] != '' ? 'yes' : 'no');
                        if($contractDataValue['document_read_date'] != '' && $contractDataValue['document_read_date'] != '0000-00-00 00:00:00') {
                            $details['last_viewing_date'] = ($contractDataValue['document_read_date'] != '' ? $contractDataValue['document_read_date'] : '');
                        }
                        $details['signed_date'] = ($contractDataValue['signed_date'] != '' && $contractDataValue['signed_date'] != '0000-00-00 00:00:00' ? $contractDataValue['signed_date'] : '');
                        $details['status'] = (isset($contractDataValue['offer_status']) != '' ? $utility->offerStatusName($contractDataValue['offer_status']) : '');

                        if(!empty($organizationFields)) {
                            $eachArray = ['people_fields' => $peopleFields, 'organization_fields' => $organizationFields, 'details' => $details];
                        } else {
                            $eachArray = ['people_fields' => $peopleFields, 'details' => $details];
                        }
                        array_push($peoples, $eachArray);
                    }
                }

                $responseArray[$sentIdsKey]['peoples'] = $peoples;
                if(!empty($documentFields)) {
                    $responseArray[$sentIdsKey]['document_fields'] = $documentFields;
                }
                $responseArray[$sentIdsKey]['sender_details'] = $senderDetails;
                $responseArray[$sentIdsKey]['document_details'] = $contractDetails;
            }

            return response()->json(['status' => 'success', 'result' => $responseArray], 200, ['Content-Type' => 'application/json; charset=UTF-8'], JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
        } else {
            return Response::json(['status' => 'error', 'result' => 'No record(s) found']);
        }
    }
    
    public function getGetdocumentinfobystatusxml() {
        //header('Content-type: text/xml');
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');

        //access_token validation starting
        if(isset($data['access_token'])) {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
        //access_token validation ending

        //status validation starting
        if(isset($data['status']) && $data['status'] != '') {
            $status = $data['status'];
            if($status == 'processing' || $status == 'Processing') {
                $status = 0;
            } elseif($status == 'delivered' || $status == 'Delivered') {
                $status = 1;
            } elseif($status == 'open' || $status == 'Open') {
                $status = 2;
            } elseif($status == 'reviewed' || $status == 'Reviewed') {
                $status = 3;
            } elseif($status == 'signed' || $status == 'Signed') {
                $status = 4;
            } elseif($status == 'rejected' || $status == 'Rejected') {
                $status = 5;
            } elseif($status == 'interepted' || $status == 'Interepted') {
                $status = 6;
            } elseif($status == 'draft' || $status == 'Draft') {
                $status = 7;
            } else {
                return Response::json(['status' => 'error', 'result' => 'invalid status']);
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'status is missing']);
        }
        //status validation ending

        $user_id = $utility->getUserIdByAuthToken($access_token);
        $parent_id = $utility->getParent($user_id);
        $userSettings = $utility->getUserSettings($parent_id);
        $getApiHitCount = Userinfo::where('user_id', $parent_id)->select('hit_count')->first();
        $addupdateapiaccesslogs = $utility->addupdateapiaccesslogs($user_id, 'getGetdocumentinfobystatusxml v3', $data, $getApiHitCount['hit_count']);
        if($addupdateapiaccesslogs == 'exceed') {
            $this->apiCallLimitExceedMessage = str_replace('#hitCuntNo', $getApiHitCount['hit_count'], $this->apiCallLimitExceedMessage);
            return Response::json(['status' => 'error', 'result' => $this->apiCallLimitExceedMessage]);
        }

        if($utility->checkAdminStripe($user_id)) {
            return Response::json(['status' => 'error', 'result' => 'Account is locked make payment in order to continue Simplesign']);
        }

        $pageLimit = (isset($data['pagelimit']) && $data['pagelimit'] != '' ? $data['pagelimit'] : 10);
        $currentPage = (isset($data['current_page']) && $data['current_page'] != '' ? $data['current_page'] : 0);
        $skipRecords = $currentPage * $pageLimit;
        
        $offerSentObject = new Offersent();
        if(isset($data['contract_id']) && !empty($data['contract_id'])) {
            $offerSentObject = $offerSentObject->where('id', $data['contract_id']);
        }
        $offerSentData = $offerSentObject->where('offer_status', $status)->select('id', 'language_id', 'visible_name', 'name', 'created_date', 'signed_date', 'due_days', 'reminder_days', 'offer_status', 'offer_type', 'content', 'sender_id')->where('sender_id', $user_id)->orderBy('id', 'desc')->skip($skipRecords)->take($pageLimit)->get()->toArray();
        $offerSentIds = [];
        foreach($offerSentData as $sentDataKey => $sentDataValue) {
            array_push($offerSentIds, $sentDataValue['id']);
        }

        $selectRaw = "CAST(AES_DECRYPT(simplesign_offer_send_details.user_details,'".env('ENCRYPT_KEY')."','".env('ENCRYPT_IV')."') AS CHAR) as user_details";
        DB::statement(' SET block_encryption_mode = \''.env('ENCRYPT_CIPHER').'\'');

        $contractData = Offersentdetails::whereIn('offer_sent_id', $offerSentIds)->select('offer_send_details.offer_status', DB::raw($selectRaw), 'is_sender', 'offer_send_details.id AS detail_id', 'offer_sent_id', 'req_attached', 'document_read_date', 'authentication_method', 'invitation_type', 'invitation_order', 'offer_confirmation', 'id_attachments', 'id', 'offer_sent_id', 'unique_id')->get()->toArray();

        //DB::enableQueryLog();
        //print_r(DB::getQueryLog());
        if($contractData) {
            $responseArray = [];
            foreach($offerSentData as $sentIdsKey => $sentIdsValue) {
                $eachSentId = $sentIdsValue['id'];
                $content = Tcrypt::decrypter($sentIdsValue['content']);
                $peoples = $senderDetails = $contractDetails = $documentFieldsFromContent = [];
                foreach($contractData as $contractDataKey => $contractDataValue) {
                    $peopleFields = $organizationFields = $details = [];

                    $recipientUserDetailsJsonDecode = json_decode($contractDataValue['user_details'], true);
                    //$peopleFields['detail_id'] = $contractDataValue['detail_id'];
                    //$peopleFields['offer_sent_id'] = $contractDataValue['offer_sent_id'];
                    $peopleFields['name'] = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? $recipientUserDetailsJsonDecode['full_name'] : (isset($recipientUserDetailsJsonDecode['first_name']) ? $recipientUserDetailsJsonDecode['first_name'] : (isset($recipientUserDetailsJsonDecode['name']) ? $recipientUserDetailsJsonDecode['name'] : '')));
                    $peopleFields['email'] = (isset($recipientUserDetailsJsonDecode['email']) && $recipientUserDetailsJsonDecode['email'] != '' ? preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $recipientUserDetailsJsonDecode['email']) : '');
                    $peopleFields['personal_no'] = (isset($recipientUserDetailsJsonDecode['personal_no']) && $recipientUserDetailsJsonDecode['personal_no'] != '' ? $recipientUserDetailsJsonDecode['personal_no'] : '');
                    $peopleFields['mobile'] = (isset($recipientUserDetailsJsonDecode['mobile']) && $recipientUserDetailsJsonDecode['mobile'] != '' ? $recipientUserDetailsJsonDecode['mobile'] : '');
                    $peopleFields['address'] = (isset($recipientUserDetailsJsonDecode['address']) && $recipientUserDetailsJsonDecode['address'] != '' ? $recipientUserDetailsJsonDecode['address'] : '');
                    $peopleFields['city'] = (isset($recipientUserDetailsJsonDecode['city']) && $recipientUserDetailsJsonDecode['city'] != '' ? $recipientUserDetailsJsonDecode['city'] : '');
                    $peopleFields['zipcode'] = (isset($recipientUserDetailsJsonDecode['zipcode']) && $recipientUserDetailsJsonDecode['zipcode'] != '' ? $recipientUserDetailsJsonDecode['zipcode'] : '');

                    $contractDetails['document_name'] = ($sentIdsValue['visible_name'] != '' ? Tcrypt::decrypter($sentIdsValue['visible_name']) : Tcrypt::decrypter($sentIdsValue['name']));
                    $contractDetails['contract_language'] = $utility->languageName($sentIdsValue['language_id']);
                    $contractDetails['sent_date'] = ($sentIdsValue['created_date'] != '' && $sentIdsValue['created_date'] != '0000-00-00 00:00:00' ? $sentIdsValue['created_date'] : '');
                    $contractDetails['signed_date'] = ($sentIdsValue['signed_date'] != '' && $sentIdsValue['signed_date'] != '0000-00-00 00:00:00' ? $sentIdsValue['signed_date'] : '');
                    $contractDetails['contract_status'] = $utility->offerStatusName($sentIdsValue['offer_status']);
                    $contractURL = $domain_name.'avtal/downloadpdf/'.$eachSentId.'/'.$contractDataValue['unique_id'];
                    if($status == 4) {
                        $contractDetails['signed_pdf'] = $contractURL;
                    } else {
                        $contractDetails['contract_pdf'] = $contractURL;
                    }
                    
                    if($contractDataValue['offer_sent_id'] == $eachSentId && $contractDataValue['is_sender'] == 1) {
                        $peopleFields['company'] = (isset($recipientUserDetailsJsonDecode['company']) && $recipientUserDetailsJsonDecode['company'] != '' ? $recipientUserDetailsJsonDecode['company'] : '');
                        $peopleFields['phone_no'] = (isset($recipientUserDetailsJsonDecode['telephone']) && $recipientUserDetailsJsonDecode['telephone'] != '' ? $recipientUserDetailsJsonDecode['telephone'] : '');
                        $peopleFields['zipcode'] = (isset($recipientUserDetailsJsonDecode['post_code']) && $recipientUserDetailsJsonDecode['post_code'] != '' ? $recipientUserDetailsJsonDecode['post_code'] : '');
                        $peopleFields['reg_no'] = ($peopleFields['personal_no'] == '' && isset($recipientUserDetailsJsonDecode['reg_no']) ? $recipientUserDetailsJsonDecode['reg_no'] : '');

                        unset($peopleFields['personal_no']);
                        unset($peopleFields['mobile']);
                        $senderDetails = $peopleFields;
                        $extraFieldsData = Userinfo::where('user_id', $sentIdsValue['sender_id'])->pluck('extra_fields_data');
                        if($extraFieldsData != '') {
                            $extraFieldsDataJsonDecode = json_decode($extraFieldsData, true);
                            foreach($extraFieldsDataJsonDecode as $decodekey => $decodeValue) {
                                $senderDetails[$decodekey] = (isset($decodeValue) && $decodeValue != '' ? $decodeValue : '');
                            }
                        }
                    } elseif($contractDataValue['offer_sent_id'] == $eachSentId && $contractDataValue['is_sender'] == 0) {

                        if(isset($recipientUserDetailsJsonDecode['extanddoc_fields'])) {
                            $extAndDocFields = json_decode($recipientUserDetailsJsonDecode['extanddoc_fields'], true);
                            foreach($extAndDocFields as $extAndDocFldsKey => $extAndDocFldsValue) {
                                $peopleFields[$extAndDocFldsValue['extAndDocFieldName']] = $extAndDocFldsValue['extAndDocFieldValue'];
                            }
                        } else {
                            if(isset($recipientUserDetailsJsonDecode['extra_fields'])) {
                                $extraFields = (isset($recipientUserDetailsJsonDecode['extra_fields']) ? json_decode($recipientUserDetailsJsonDecode['extra_fields'], true) : '');
                                if($extraFields != '') {
                                    foreach($extraFields as $extraFieldsKey => $extraFieldsValue) {
                                        $peopleFields[$extraFieldsValue['fieldName']] = $extraFieldsValue['fieldValue'];
                                    }
                                }
                            }
                        }

                        if(isset($recipientUserDetailsJsonDecode['organization_fields'])) {
                            $orgFields = json_decode($recipientUserDetailsJsonDecode['organization_fields'], true);
                            foreach($orgFields as $orgFldsKey => $orgFldsValue) {
                                /*$orgFldsValue['orgFieldName'] = str_replace('org', 'organization', $orgFldsValue['orgFieldName']);*/
                                $orgFldsValue['orgFieldName'] = str_replace('name', 'organization_name', $orgFldsValue['orgFieldName']);
                                $orgFldsValue['orgFieldName'] = str_replace('org_no', 'organization_no', $orgFldsValue['orgFieldName']);
                                $orgFldsValue['orgFieldName'] = str_replace('phone', 'organization_phone', $orgFldsValue['orgFieldName']);
                                $orgFldsValue['orgFieldName'] = str_replace('address', 'organization_address', $orgFldsValue['orgFieldName']);
                                $orgFldsValue['orgFieldName'] = str_replace('city', 'organization_city', $orgFldsValue['orgFieldName']);
                                $orgFldsValue['orgFieldName'] = str_replace('zipcode', 'organization_zipcode', $orgFldsValue['orgFieldName']);
                                $organizationFields[$orgFldsValue['orgFieldName']] = $orgFldsValue['orgFieldValue'];
                            }
                        } else {
                            //$organizationFields['organization_name'] = (isset($recipientUserDetailsJsonDecode['org_name']) && $recipientUserDetailsJsonDecode['org_name'] != '' ? $recipientUserDetailsJsonDecode['org_name'] : '');
                            $organizationFields['organization_name'] = (isset($recipientUserDetailsJsonDecode['org_name']) && $recipientUserDetailsJsonDecode['org_name'] != '' ? $recipientUserDetailsJsonDecode['org_name'] : '');
                            //$organizationFields['organization_no'] = (isset($recipientUserDetailsJsonDecode['org_reg_no']) && $recipientUserDetailsJsonDecode['org_reg_no'] != '' ? $recipientUserDetailsJsonDecode['org_reg_no'] : '');
                            $organizationFields['organization_no'] = (isset($recipientUserDetailsJsonDecode['org_reg_no']) && $recipientUserDetailsJsonDecode['org_reg_no'] != '' ? $recipientUserDetailsJsonDecode['org_reg_no'] : '');
                            //$organizationFields['organization_phone'] = (isset($recipientUserDetailsJsonDecode['org_mobile']) && $recipientUserDetailsJsonDecode['org_mobile'] != '' ? $recipientUserDetailsJsonDecode['org_mobile'] : '');
                            $organizationFields['organization_phone'] = (isset($recipientUserDetailsJsonDecode['org_mobile']) && $recipientUserDetailsJsonDecode['org_mobile'] != '' ? $recipientUserDetailsJsonDecode['org_mobile'] : '');
                            //$organizationFields['organization_address'] = (isset($recipientUserDetailsJsonDecode['org_address']) && $recipientUserDetailsJsonDecode['org_address'] != '' ? $recipientUserDetailsJsonDecode['org_address'] : '');
                            $organizationFields['organization_address'] = (isset($recipientUserDetailsJsonDecode['org_address']) && $recipientUserDetailsJsonDecode['org_address'] != '' ? $recipientUserDetailsJsonDecode['org_address'] : '');
                            //$organizationFields['organization_city'] = (isset($recipientUserDetailsJsonDecode['org_city']) && $recipientUserDetailsJsonDecode['org_city'] != '' ? $recipientUserDetailsJsonDecode['org_city'] : '');
                            $organizationFields['organization_city'] = (isset($recipientUserDetailsJsonDecode['org_city']) && $recipientUserDetailsJsonDecode['org_city'] != '' ? $recipientUserDetailsJsonDecode['org_city'] : '');
                            //$organizationFields['organization_zipcode'] = (isset($recipientUserDetailsJsonDecode['org_zip']) && $recipientUserDetailsJsonDecode['org_zip'] != '' ? $recipientUserDetailsJsonDecode['org_zip'] : '');
                            $organizationFields['organization_zipcode'] = (isset($recipientUserDetailsJsonDecode['org_zip']) && $recipientUserDetailsJsonDecode['org_zip'] != '' ? $recipientUserDetailsJsonDecode['org_zip'] : '');
                        }

                        if(isset($recipientUserDetailsJsonDecode['details_fields'])) {
                            $detailsFields = json_decode($recipientUserDetailsJsonDecode['details_fields'], true);
                            foreach($detailsFields as $orgFldsKey => $orgFldsValue) {
                                $details[$orgFldsValue['detailsFieldName']] = $orgFldsValue['detailsFieldValue'];
                            }
                        } else {
                            $details['recipient_role'] = (isset($recipientUserDetailsJsonDecode['recrolename']) && $recipientUserDetailsJsonDecode['recrolename'] != '' ? $recipientUserDetailsJsonDecode['recrolename'] : '');
                            $details['authentication'] = $utility->authenticationMethodName($contractDataValue['authentication_method']);
                            $details['invitation_type'] = $utility->invitationTypeName($contractDataValue['invitation_type']);
                            $details['invitation_order'] = $contractDataValue['invitation_order'];
                            $details['confirmation'] = $utility->offerConfirmationName($contractDataValue['offer_confirmation']);
                            $details['id_attachment'] = $utility->idAttachmentName($contractDataValue['id_attachments']);
                        }

                        $details['signing_status'] = $utility->offerStatusName($contractDataValue['offer_status']);
                        $details['request_attachment'] = ($contractDataValue['req_attached'] != '' ? $contractDataValue['req_attached'] : '');
                        
                        $eachArray = ['people_fields' => $peopleFields, 'organization_fields' => $organizationFields, 'details' => $details];
                        array_push($peoples, $eachArray);
                    }
                }

                $html = new \Htmldom($content);
                foreach($html->find('.text') as $findKey => $findValue) {
                    if(strpos($findValue->getAttribute('class'), 'documentFieldText') !== false) {
                        $documentFieldsFromContent[$findValue->getAttribute('selectedtype')] = (isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '' ? $findValue->find('p', 0)->plaintext : '');
                    }
                }
                
                $responseArray['document'][$sentIdsKey]['people'] = $peoples;
                $responseArray['document'][$sentIdsKey]['document_fields'] = $documentFieldsFromContent;
                $responseArray['document'][$sentIdsKey]['sender_details'] = $senderDetails;
                $responseArray['document'][$sentIdsKey]['document_details'] = $contractDetails;
            }
            
            $xmlClassInitialization = new \SimpleXMLElement("<?xml version=\"1.0\" encoding=\"UTF-8\"?><result></result>");
            $utility->arrayDataToXML($responseArray, $xmlClassInitialization);
            $xmlFileName = public_path().'/uploads/temp/'.$contractDataValue['offer_sent_id'].'_'.$contractDetails['document_name'].'.xml';
            $xmlFile = $xmlClassInitialization->asXML($xmlFileName);
            return response()->download($xmlFileName)->deleteFileAfterSend(true);
        } else {
            return Response::json(['status' => 'error', 'result' => 'No record(s) found']);
        }
    }

    public function getGetdocumentinfoxml(Request $request) {
        $data = $request->all();//Input::all();
        $utility = new Utility();
        $domain_name = asset('/');
        //setMajorDB();

        //access_token validation starting
        if(isset($data['access_token'])) {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
        $get_ftp_path = (isset($data['get_ftp_path']) && $data['get_ftp_path'] == 1 ? true : false);
        //access_token validation ending

        //document id validation starting
        if(isset($data['document_id']) && $data['document_id'] != '') {
            $documentId = $data['document_id'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'document_id is missing']);
        }
        //document id validation ending

        $user_id = $utility->getUserIdByAuthToken($access_token);
        $parent_id = $utility->getParent($user_id);
        $getApiHitCount = Userinfo::where('user_id', $parent_id)->select('hit_count')->first();
        $addupdateapiaccesslogs = $utility->addupdateapiaccesslogs($user_id, 'getGetdocumentinfoxml v3', $data, $getApiHitCount['hit_count']);
        if($addupdateapiaccesslogs == 'exceed') {
            $this->apiCallLimitExceedMessage = str_replace('#hitCuntNo', $getApiHitCount['hit_count'], $this->apiCallLimitExceedMessage);
            return Response::json(['status' => 'error', 'result' => $this->apiCallLimitExceedMessage]);
        }
        if($utility->isParent($user_id) == 1) {
            $allUserIds = $utility->getSubusers($parent_id);
        } else {
            $allUserIds = [$user_id];
        }
        $userSettings = $utility->getUserSettings($parent_id);

        if($utility->checkAdminStripe($parent_id)) {
            return Response::json(['status' => 'error', 'result' => 'Account is locked make payment in order to continue Simplesign']);
        }

        $pageLimit = (isset($data['pagelimit']) && $data['pagelimit'] != '' ? $data['pagelimit'] : 10);
        $currentPage = (isset($data['current_page']) && $data['current_page'] != '' ? $data['current_page'] : 0);
        $skipRecords = $currentPage * $pageLimit;

        $offerSentData = Offersent::where('id', $documentId)->select('id', 'offer_id', 'language_id', 'visible_name', 'name', 'created_date', 'signed_date', 'due_days', 'reminder_days', 'offer_status', 'offer_type', 'content', 'sender_id', 'unique_id', 'user_details')->whereIn('sender_id', $allUserIds)->orderBy('id', 'desc')->skip($skipRecords)->take($pageLimit)->get()->toArray();
        //print_rj($offerSentData, 1);
        $offerSentIds = [];
        foreach($offerSentData as $sentDataKey => $sentDataValue) {
            array_push($offerSentIds, $sentDataValue['id']);
        }

        $selectRaw = "CAST(AES_DECRYPT(simplesign_offer_send_details.user_details,'".env('ENCRYPT_KEY')."','".env('ENCRYPT_IV')."') AS CHAR) as user_details";
        DB::statement(' SET block_encryption_mode = \''.env('ENCRYPT_CIPHER').'\'');

        $contractData = Offersentdetails::whereIn('offer_sent_id', $offerSentIds)->select('offer_send_details.offer_status', DB::raw($selectRaw), 'is_sender', 'offer_send_details.id AS detail_id', 'offer_sent_id', 'req_attached', 'document_read_date', 'authentication_method', 'invitation_type', 'invitation_order', 'offer_confirmation', 'id_attachments', 'id', 'unique_id')->get()->toArray();
        //print_rj($contractData, 1);

        //DB::enableQueryLog();
        //print_r(DB::getQueryLog());
        //Old code removed from this function on 24 May 2019 and adding checkboxes in document fields
        if($contractData) {
            $responseArray = [];
            foreach($offerSentData as $sentIdsKey => $sentIdsValue) {
                $eachSentId = $sentIdsValue['id'];
                $languageId = $sentIdsValue['language_id'];
                $content = Tcrypt::decrypter($sentIdsValue['content']);
                $peoples = $senderDetails = $contractDetails = $documentFieldsFromContent = [];
                foreach($contractData as $contractDataKey => $contractDataValue) {
                    $peopleFields = $organizationFields = $details = [];
                    //recipient user details
                    $recipientUserDetailsJsonDecode = json_decode($contractDataValue['user_details'], true);
                    //sender user details
                    $senderUserDetails = json_decode($sentIdsValue['user_details'], true);
                    //$peopleFields['detail_id'] = $contractDataValue['detail_id'];
                    //$peopleFields['offer_sent_id'] = $contractDataValue['offer_sent_id'];
                    $peopleFields['name'] = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? $recipientUserDetailsJsonDecode['full_name'] : (isset($recipientUserDetailsJsonDecode['first_name']) ? $recipientUserDetailsJsonDecode['first_name'] : (isset($recipientUserDetailsJsonDecode['name']) ? $recipientUserDetailsJsonDecode['name'] : '')));
                    $peopleFields['email'] = (isset($recipientUserDetailsJsonDecode['email']) && $recipientUserDetailsJsonDecode['email'] != '' ? preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $recipientUserDetailsJsonDecode['email']) : '');
                    $peopleFields['personal_no'] = (isset($recipientUserDetailsJsonDecode['personal_no']) && $recipientUserDetailsJsonDecode['personal_no'] != '' ? $recipientUserDetailsJsonDecode['personal_no'] : (isset($recipientUserDetailsJsonDecode['personnr']) && $recipientUserDetailsJsonDecode['personnr'] != '' ? $recipientUserDetailsJsonDecode['personnr'] : ''));
                    $peopleFields['mobile'] = (isset($recipientUserDetailsJsonDecode['mobile']) && $recipientUserDetailsJsonDecode['mobile'] != '' ? $recipientUserDetailsJsonDecode['mobile'] : '');
                    $peopleFields['address'] = (isset($recipientUserDetailsJsonDecode['address']) && $recipientUserDetailsJsonDecode['address'] != '' ? $recipientUserDetailsJsonDecode['address'] : '');
                    $peopleFields['city'] = (isset($recipientUserDetailsJsonDecode['city']) && $recipientUserDetailsJsonDecode['city'] != '' ? $recipientUserDetailsJsonDecode['city'] : '');
                    $peopleFields['zipcode'] = (isset($recipientUserDetailsJsonDecode['zipcode']) && $recipientUserDetailsJsonDecode['zipcode'] != '' ? $recipientUserDetailsJsonDecode['zipcode'] : (isset($recipientUserDetailsJsonDecode['zip']) && $recipientUserDetailsJsonDecode['zip'] != '' ? $recipientUserDetailsJsonDecode['zip'] : ''));

                    $contractDetails['document_name'] = ($sentIdsValue['visible_name'] != '' ? Tcrypt::decrypter($sentIdsValue['visible_name']) : Tcrypt::decrypter($sentIdsValue['name']));
                    $contractDetails['contract_language'] = $utility->languageName($sentIdsValue['language_id']);
                    $contractDetails['sent_date'] = ($sentIdsValue['created_date'] != '' && $sentIdsValue['created_date'] != '0000-00-00 00:00:00' ? $sentIdsValue['created_date'] : '');
                    $contractDetails['signed_date'] = ($sentIdsValue['signed_date'] != '' && $sentIdsValue['signed_date'] != '0000-00-00 00:00:00' ? $sentIdsValue['signed_date'] : '');
                    $contractDetails['template_id'] = ($sentIdsValue['offer_id'] != '' ? $sentIdsValue['offer_id'] : '');
                    
                    $contractDetails['contract_status'] = $utility->offerStatusName($sentIdsValue['offer_status']);
                    $contractDetails['document_no'] = $sentIdsValue['unique_id'];

                    $contractURL = $domain_name.'avtal/downloadpdf/'.$eachSentId.'/'.$contractDataValue['unique_id'];
                    if($sentIdsValue['offer_status'] == 4) {
                        $contractDetails['signed_pdf'] = $contractURL;
                    } else {
                        $contractDetails['document_pdf'] = $contractURL;
                    }

                    $contractName = str_replace(' ','_',$contractDetails['document_name']);
                    $contractName = $utility->FixSpecialChar($contractName);
                    $contractName = trim($contractName);
                    $senderFirstName = (isset($senderUserDetails['first_name']) && $senderUserDetails['first_name'] != '' ? '#'.$senderUserDetails['first_name'] : '');
                    $file_name = $contractName.$senderFirstName.'#'.$sentIdsValue['unique_id'];
                    $contractDetails['FileName'] = $file_name;

                    if($contractDataValue['offer_sent_id'] == $eachSentId && $contractDataValue['is_sender'] == 1) {
                        //print_rj($senderUserDetails);
                        $peopleFields['company'] = (isset($recipientUserDetailsJsonDecode['company']) && $recipientUserDetailsJsonDecode['company'] != '' ? $recipientUserDetailsJsonDecode['company'] : '');
                        $peopleFields['phone_no'] = (isset($recipientUserDetailsJsonDecode['telephone']) && $recipientUserDetailsJsonDecode['telephone'] != '' ? $recipientUserDetailsJsonDecode['telephone'] : '');
                        $peopleFields['zipcode'] = (isset($recipientUserDetailsJsonDecode['post_code']) && $recipientUserDetailsJsonDecode['post_code'] != '' ? $recipientUserDetailsJsonDecode['post_code'] : '');
                        $peopleFields['reg_no'] = ($peopleFields['personal_no'] == '' && isset($recipientUserDetailsJsonDecode['reg_no']) ? $recipientUserDetailsJsonDecode['reg_no'] : '');

                        unset($peopleFields['personal_no']);
                        unset($peopleFields['mobile']);
                        $senderDetails = $peopleFields;
                        $extraFieldsData = Userinfo::where('user_id', $sentIdsValue['sender_id'])->pluck('extra_fields_data');
                        if($extraFieldsData != '') {
                            $extraFieldsDataJsonDecode = json_decode($extraFieldsData, true);
                            foreach($extraFieldsDataJsonDecode as $decodekey => $decodeValue) {
                                $senderDetails[$decodekey] = (isset($decodeValue) && $decodeValue != '' ? $decodeValue : '');
                            }
                        }
                    } elseif($contractDataValue['offer_sent_id'] == $eachSentId && $contractDataValue['is_sender'] == 0) {
                        //print_rj($recipientUserDetailsJsonDecode);
                        if(isset($recipientUserDetailsJsonDecode['extanddoc_fields'])) {
                            $extAndDocFields = json_decode($recipientUserDetailsJsonDecode['extanddoc_fields'], true);
                            foreach($extAndDocFields as $extAndDocFldsKey => $extAndDocFldsValue) {
                                $extAndDocFldsValue['extAndDocFieldName'] = str_replace(' / ', ' ', $extAndDocFldsValue['extAndDocFieldName']);
                                $extAndDocFldsValue['extAndDocFieldName'] = str_replace(', ', ' ', $extAndDocFldsValue['extAndDocFieldName']);
                                $extAndDocFldsValue['extAndDocFieldName'] = str_replace('/', '-', $extAndDocFldsValue['extAndDocFieldName']);
                                $extAndDocFldsValue['extAndDocFieldName'] = str_replace(' + ', ' ', $extAndDocFldsValue['extAndDocFieldName']);
                                $extAndDocFldsValue['extAndDocFieldName'] = str_replace('+', ' ', $extAndDocFldsValue['extAndDocFieldName']);
                                $extAndDocFldsValue['extAndDocFieldName'] = str_replace('(', '', $extAndDocFldsValue['extAndDocFieldName']);
                                $extAndDocFldsValue['extAndDocFieldName'] = str_replace(')', '', $extAndDocFldsValue['extAndDocFieldName']);
                                $peopleFields[$extAndDocFldsValue['extAndDocFieldName']] = $extAndDocFldsValue['extAndDocFieldValue'];
                            }
                        } else {
                            if(isset($recipientUserDetailsJsonDecode['extra_fields'])) {
                                $extraFields = (isset($recipientUserDetailsJsonDecode['extra_fields']) ? json_decode($recipientUserDetailsJsonDecode['extra_fields'], true) : '');
                                if($extraFields != '') {
                                    foreach($extraFields as $extraFieldsKey => $extraFieldsValue) {
                                        $extraFieldsValue['fieldName'] = str_replace(' / ', ' ', $extraFieldsValue['fieldName']);
                                        $extraFieldsValue['fieldName'] = str_replace(', ', ' ', $extraFieldsValue['fieldName']);
                                        $extraFieldsValue['fieldName'] = str_replace('/', '-', $extraFieldsValue['fieldName']);
                                        $extraFieldsValue['fieldName'] = str_replace(' + ', ' ', $extraFieldsValue['fieldName']);
                                        $extraFieldsValue['fieldName'] = str_replace('+', ' ', $extraFieldsValue['fieldName']);
                                        $extraFieldsValue['fieldName'] = str_replace('(', '', $extraFieldsValue['fieldName']);
                                        $extraFieldsValue['fieldName'] = str_replace(')', '', $extraFieldsValue['fieldName']);
                                        $peopleFields[$extraFieldsValue['fieldName']] = $extraFieldsValue['fieldValue'];
                                    }
                                }
                            }
                        }

                        if(isset($recipientUserDetailsJsonDecode['organization_fields'])) {
                            $orgFields = json_decode($recipientUserDetailsJsonDecode['organization_fields'], true);
                            foreach($orgFields as $orgFldsKey => $orgFldsValue) {
                                //$orgFldsValue['orgFieldName'] = str_replace('org', 'organization', $orgFldsValue['orgFieldName']);
                                $orgFldsValue['orgFieldName'] = str_replace('name', 'organization_name', $orgFldsValue['orgFieldName']);
                                $orgFldsValue['orgFieldName'] = str_replace('org_no', 'organization_no', $orgFldsValue['orgFieldName']);
                                $orgFldsValue['orgFieldName'] = str_replace('phone', 'organization_phone', $orgFldsValue['orgFieldName']);
                                $orgFldsValue['orgFieldName'] = str_replace('address', 'organization_address', $orgFldsValue['orgFieldName']);
                                $orgFldsValue['orgFieldName'] = str_replace('city', 'organization_city', $orgFldsValue['orgFieldName']);
                                $orgFldsValue['orgFieldName'] = str_replace('zipcode', 'organization_zipcode', $orgFldsValue['orgFieldName']);
                                $organizationFields[$orgFldsValue['orgFieldName']] = $orgFldsValue['orgFieldValue'];
                            }
                        } else {
                            $organizationFields['organization_name'] = (isset($recipientUserDetailsJsonDecode['org_name']) && $recipientUserDetailsJsonDecode['org_name'] != '' ? $recipientUserDetailsJsonDecode['org_name'] : '');
                            $organizationFields['organization_no'] = (isset($recipientUserDetailsJsonDecode['org_reg_no']) && $recipientUserDetailsJsonDecode['org_reg_no'] != '' ? $recipientUserDetailsJsonDecode['org_reg_no'] : '');
                            $organizationFields['organization_phone'] = (isset($recipientUserDetailsJsonDecode['org_mobile']) && $recipientUserDetailsJsonDecode['org_mobile'] != '' ? $recipientUserDetailsJsonDecode['org_mobile'] : '');
                            $organizationFields['organization_address'] = (isset($recipientUserDetailsJsonDecode['org_address']) && $recipientUserDetailsJsonDecode['org_address'] != '' ? $recipientUserDetailsJsonDecode['org_address'] : '');
                            $organizationFields['organization_city'] = (isset($recipientUserDetailsJsonDecode['org_city']) && $recipientUserDetailsJsonDecode['org_city'] != '' ? $recipientUserDetailsJsonDecode['org_city'] : '');
                            $organizationFields['organization_zipcode'] = (isset($recipientUserDetailsJsonDecode['org_zip']) && $recipientUserDetailsJsonDecode['org_zip'] != '' ? $recipientUserDetailsJsonDecode['org_zip'] : '');
                        }

                        if(isset($recipientUserDetailsJsonDecode['details_fields'])) {
                            $detailsFields = json_decode($recipientUserDetailsJsonDecode['details_fields'], true);
                            foreach($detailsFields as $orgFldsKey => $orgFldsValue) {
                                $details[$orgFldsValue['detailsFieldName']] = $orgFldsValue['detailsFieldValue'];
                            }
                        } else {
                            $details['recipient_role'] = (isset($recipientUserDetailsJsonDecode['recrolename']) && $recipientUserDetailsJsonDecode['recrolename'] != '' ? $recipientUserDetailsJsonDecode['recrolename'] : '');
                            $details['authentication'] = $utility->authenticationMethodName($contractDataValue['authentication_method']);
                            $details['invitation_type'] = $utility->invitationTypeName($contractDataValue['invitation_type']);
                            $details['invitation_order'] = $contractDataValue['invitation_order'];
                            $details['confirmation'] = $utility->offerConfirmationName($contractDataValue['offer_confirmation']);
                            $details['id_attachment'] = $utility->idAttachmentName($contractDataValue['id_attachments']);
                        }

                        $details['signing_status'] = $utility->offerStatusName($contractDataValue['offer_status']);
                        $details['request_attachment'] = ($contractDataValue['req_attached'] != '' ? $contractDataValue['req_attached'] : '');

                        //$eachArray = ['people_fields' => $peopleFields, 'organization_fields' => $organizationFields, 'details' => $details];
                        $eachArray = ['people_fields' => $peopleFields, 'details' => $details];
                        array_push($peoples, $eachArray);
                    }
                }
                
                $html = new \Htmldom($content);
                foreach($html->find('.text') as $findKey => $findValue) {
                    if(strpos($findValue->getAttribute('class'), 'documentFieldText') !== false) {
                        $findValue->selectedtype = str_replace(' / ', ' ', $findValue->selectedtype);
                        $findValue->selectedtype = str_replace(', ', ' ', $findValue->selectedtype);
                        $findValue->selectedtype = str_replace('/', '-', $findValue->selectedtype);
                        $findValue->selectedtype = str_replace(' + ', ' ', $findValue->selectedtype);
                        $findValue->selectedtype = str_replace('+', ' ', $findValue->selectedtype);
                        $findValue->selectedtype = str_replace('(', '', $findValue->selectedtype);
                        $findValue->selectedtype = str_replace(')', '', $findValue->selectedtype);
                        $findValue->selectedtype = str_replace('?', '_', $findValue->selectedtype);

                        if($findValue->find('h4', 0)) {
                            if(strpos($findValue->find('h4', 0)->plaintext, 'SEK') !== false) {
                                $findValue->find('h4', 0)->plaintext = str_replace('SEK', '', $findValue->find('h4', 0)->plaintext);
                            }
                            $documentFieldsFromContent[$findValue->selectedtype] = (isset($findValue->find('h4', 0)->plaintext) && $findValue->find('h4', 0)->plaintext != '' ? $findValue->find('h4', 0)->plaintext : '');
                        } elseif($findValue->find('p', 0)) {
                            if(strpos($findValue->find('p', 0)->plaintext, 'SEK') !== false) {
                                $findValue->find('p', 0)->plaintext = str_replace('SEK', '', $findValue->find('p', 0)->plaintext);
                            }
                            $documentFieldsFromContent[$findValue->selectedtype] = (isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '' ? $findValue->find('p', 0)->plaintext : '');
                        } else {
                            $documentFieldsFromContent[$findValue->selectedtype] = '';
                        }
                    }
                    
                    //getting custom text fields
                    try {
                        if(strpos($findValue->getAttribute('class'), 'field_box_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'datepickerfields_new') === false) {
                            $findValue->selectedtype = str_replace(' / ', ' ', $findValue->selectedtype);
                            $findValue->selectedtype = str_replace(', ', ' ', $findValue->selectedtype);
                            $findValue->selectedtype = str_replace('/', '-', $findValue->selectedtype);
                            $findValue->selectedtype = str_replace(' + ', ' ', $findValue->selectedtype);
                            $findValue->selectedtype = str_replace('+', ' ', $findValue->selectedtype);
                            $findValue->selectedtype = str_replace('(', '', $findValue->selectedtype);
                            $findValue->selectedtype = str_replace(')', '', $findValue->selectedtype);
                            $findValue->selectedtype = str_replace('?', '_', $findValue->selectedtype);
                            $documentFieldsFromContent[$findValue->selectedtype] = (isset($findValue->find('h4', 0)->plaintext) && $findValue->find('h4', 0)->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, trim($findValue->find('h4', 0)->plaintext)) : '');
                        }
                    } catch(\Exception $e) {}
                    //getting datepicker fields
                    try {
                        if(strpos($findValue->getAttribute('class'), 'field_box_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'datepickerfields_new') !== false && $findValue->recipientselected == 'Me') {
                            $findValue->selectedtype = str_replace(' / ', ' ', $findValue->selectedtype);
                            $findValue->selectedtype = str_replace(', ', ' ', $findValue->selectedtype);
                            $findValue->selectedtype = str_replace('/', '-', $findValue->selectedtype);
                            $findValue->selectedtype = str_replace(' + ', ' ', $findValue->selectedtype);
                            $findValue->selectedtype = str_replace('+', ' ', $findValue->selectedtype);
                            $findValue->selectedtype = str_replace('(', '', $findValue->selectedtype);
                            $findValue->selectedtype = str_replace(')', '', $findValue->selectedtype);
                            $findValue->selectedtype = str_replace('?', '_', $findValue->selectedtype);
                            $documentFieldsFromContent[$findValue->selectedtype] = (isset($findValue->find('h4', 0)->plaintext) && $findValue->find('h4', 0)->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, trim($findValue->find('h4', 0)->plaintext)) : '');
                        }
                    } catch(\Exception $e) {}
                        
                    //getting document checkbox elements
                    if(strpos($findValue->getAttribute('class'), 'documentFieldCheckbox') !== false) {
                        $findValue->fieldlabelname = str_replace(' / ', ' ', $findValue->fieldlabelname);
                        $findValue->fieldlabelname = str_replace(', ', ' ', $findValue->fieldlabelname);
                        $findValue->fieldlabelname = str_replace('/', '-', $findValue->fieldlabelname);
                        $findValue->fieldlabelname = str_replace(' + ', ' ', $findValue->fieldlabelname);
                        $findValue->fieldlabelname = str_replace('+', ' ', $findValue->fieldlabelname);
                        $findValue->fieldlabelname = str_replace('(', '', $findValue->fieldlabelname);
                        $findValue->fieldlabelname = str_replace(')', '', $findValue->fieldlabelname);
                        $findValue->fieldlabelname = str_replace('?', '_', $findValue->fieldlabelname);
                        //all values of checkboxes are showing
                        if((strpos($findValue->getAttribute('class'), 'check_icon') !== false && strpos($findValue->find('.check_icon', 0)->getAttribute('style'), 'visible') !== false) || strpos($findValue->getAttribute('class'), 'isChecked') !== false) {
                            $documentFieldsFromContent[$findValue->fieldlabelname] = 'Yes';
                        } else {
                            $documentFieldsFromContent[$findValue->fieldlabelname] = 'No';
                        }
                    }   //getting document checkbox elements ends here
                    //getting custom checkbox elements
                    if(strpos($findValue->getAttribute('class'), 'check_box_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'chechBoxCustom') !== false && $findValue->recipientselected == 'Me') {
                        $findValue->fieldlabelname = str_replace(' / ', ' ', $findValue->fieldlabelname);
                        $findValue->fieldlabelname = str_replace(', ', ' ', $findValue->fieldlabelname);
                        $findValue->fieldlabelname = str_replace('/', '-', $findValue->fieldlabelname);
                        $findValue->fieldlabelname = str_replace(' + ', ' ', $findValue->fieldlabelname);
                        $findValue->fieldlabelname = str_replace('+', ' ', $findValue->fieldlabelname);
                        $findValue->fieldlabelname = str_replace('(', '', $findValue->fieldlabelname);
                        $findValue->fieldlabelname = str_replace(')', '', $findValue->fieldlabelname);
                        $findValue->fieldlabelname = str_replace('?', '_', $findValue->fieldlabelname);
                        if(strpos($findValue->getAttribute('class'), 'check_icon') !== false && strpos($findValue->find('.check_icon', 0)->getAttribute('style'), 'visible')) {
                            $documentFieldsFromContent[$findValue->fieldlabelname] = 'Yes';
                        } else {
                            $documentFieldsFromContent[$findValue->fieldlabelname] = 'No';
                        }
                    }   //getting custom checkbox elements ends here
                    //getting document droplist elements
                    if(strpos($findValue->getAttribute('class'), 'documentFieldDroplist') !== false) {
                        $findValue->dropdownlabel = str_replace(' / ', ' ', $findValue->dropdownlabel);
                        $findValue->dropdownlabel = str_replace(', ', ' ', $findValue->dropdownlabel);
                        $findValue->dropdownlabel = str_replace('/', '-', $findValue->dropdownlabel);
                        $findValue->dropdownlabel = str_replace(' + ', ' ', $findValue->dropdownlabel);
                        $findValue->dropdownlabel = str_replace('+', ' ', $findValue->dropdownlabel);
                        $findValue->dropdownlabel = str_replace('(', '', $findValue->dropdownlabel);
                        $findValue->dropdownlabel = str_replace(')', '', $findValue->dropdownlabel);
                        $findValue->dropdownlabel = str_replace('?', '_', $findValue->dropdownlabel);
                        if($findValue->find('i.fa-dot-circle-o', 0)) {
                            $documentFieldsFromContent[$findValue->dropdownlabel] = ($findValue->find('i.fa-dot-circle-o', 0)->nextSibling()->plaintext != '' ? trim($findValue->find('i.fa-dot-circle-o', 0)->nextSibling()->plaintext) : '');//(isset($findValue->find('i.fa-dot-circle-o', 0)->nextSibling()->plaintext) && $findValue->find('i.fa-dot-circle-o', 0)->nextSibling()->plaintext != '' trim($findValue->find('i.fa-dot-circle-o', 0)->nextSibling()->plaintext) : '');
                        } elseif($findValue->find('span.texthere', 0)) {
                            //this line of code has issue
                            $documentFieldsFromContent[$findValue->dropdownlabel] = (isset($findValue->find('span.texthere', 0)->plaintext) && $findValue->find('span.texthere', 0)->plaintext != '' ? trim($findValue->find('span.texthere', 0)->plaintext) : '');
                        } elseif($findValue->find('p', 0)) {
                            $documentFieldsFromContent[$findValue->dropdownlabel] = (isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '' ? trim($findValue->find('p', 0)->plaintext) : '');
                        }
                    }   //getting document droplist elements ends here
                    if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && $findValue->recipientselected == 'Me') {
                        $findValue->dropdownlabel = str_replace(' / ', ' ', $findValue->dropdownlabel);
                        $findValue->dropdownlabel = str_replace(', ', ' ', $findValue->dropdownlabel);
                        $findValue->dropdownlabel = str_replace('/', '-', $findValue->dropdownlabel);
                        $findValue->dropdownlabel = str_replace(' + ', ' ', $findValue->dropdownlabel);
                        $findValue->dropdownlabel = str_replace('+', ' ', $findValue->dropdownlabel);
                        $findValue->dropdownlabel = str_replace('(', '', $findValue->dropdownlabel);
                        $findValue->dropdownlabel = str_replace(')', '', $findValue->dropdownlabel);
                        $findValue->dropdownlabel = str_replace('?', '_', $findValue->dropdownlabel);
                        if($findValue->find('i.fa-dot-circle-o', 0)) {
                            $documentFieldsFromContent[$findValue->dropdownlabel] = (isset($findValue->find('i.fa-dot-circle-o', 0)->nextSibling()->plaintext) && $findValue->find('i.fa-dot-circle-o', 0)->nextSibling()->plaintext != '' ? trim($findValue->find('i.fa-dot-circle-o', 0)->nextSibling()->plaintext) : '');
                        } elseif($findValue->find('span.texthere', 0)) {
                            $documentFieldsFromContent[$findValue->dropdownlabel] = (isset($findValue->find('span.texthere', 0)->plaintext) && $findValue->find('span.texthere', 0)->plaintext != '' ? trim($findValue->find('span.texthere', 0)->plaintext) : '');
                        } elseif($findValue->find('p', 0)) {
                            $documentFieldsFromContent[$findValue->dropdownlabel] = (isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '' ? trim($findValue->find('p', 0)->plaintext) : '');
                        }
                    }
                    
                    //document tags names showing and its loop starting
                    foreach($html->find('.dynamicTag') as $findTagKey => $findTagValue) {
                        if(strpos($findTagValue->getAttribute('class'), 'documenttagName') !== false || strpos($findTagValue->getAttribute('class'), 'userCustomTagName') !== false) {
                            //$docFields[$findTagValue->tagname] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? trim($findTagValue->plaintext) : '');
                            $documentTagName = '';
                            if(isset($findTagValue->tagname)) {
                                $findTagValue->tagname = str_replace(' ', '_', $findTagValue->tagname);
                                $findTagValue->tagname = str_replace('(', '', $findTagValue->tagname);
                                $findTagValue->tagname = str_replace(')', '', $findTagValue->tagname);
                                $findTagValue->tagname = str_replace('?', '_', $findTagValue->tagname);
                                $documentTagName = $findTagValue->tagname;
                            } if($findTagValue->dropdownlabel) {
                                $findTagValue->dropdownlabel = str_replace(' ', '_', $findTagValue->dropdownlabel);
                                $findTagValue->dropdownlabel = str_replace('(', '', $findTagValue->dropdownlabel);
                                $findTagValue->dropdownlabel = str_replace(')', '', $findTagValue->dropdownlabel);
                                $findTagValue->dropdownlabel = str_replace('?', '_', $findTagValue->dropdownlabel);
                                $documentTagName = $findTagValue->dropdownlabel;
                            } if($findTagValue->fieldlabelname) {
                                $findTagValue->fieldlabelname = str_replace(' ', '_', $findTagValue->fieldlabelname);
                                $findTagValue->fieldlabelname = str_replace('(', '', $findTagValue->fieldlabelname);
                                $findTagValue->fieldlabelname = str_replace(')', '', $findTagValue->fieldlabelname);
                                $findTagValue->fieldlabelname = str_replace('?', '_', $findTagValue->fieldlabelname);
                                $documentTagName = $findTagValue->fieldlabelname;
                            }
                            if(isset($findTagValue->plaintext) && $findTagValue->plaintext != '' && strpos($findTagValue->plaintext, 'SEK') !== false) {
                                $findTagValue->plaintext = str_replace('SEK', '', $findTagValue->plaintext);
                            }
                            $documentFieldsFromContent[$documentTagName] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, trim($findTagValue->plaintext)) : '');
                        }
                    }
                    //document tags names showing and its loop ending
                }   //foreach loop ends here


                $products = [];
                if ($parent_id != 16474) {
                    $productNo = 0;
                    //for new garda template starting
                    foreach($html->find('.general_calculation_table') as $productTableKey => $productTableValue) {
                        $headings = [];
                        foreach($productTableValue->find('th') as $thKey => $thValue) {
                            if(strpos($thValue->getAttribute('class'), 'hide') !== false) {
                                continue;
                            }
                            $headings[] = trim(strip_tags($thValue->innertext));
                        }
                        foreach($productTableValue->find('.item_row') as $itemRowKey => $itemRowValue) {
                            $productNo++;
                            $productDetails = [];
                            $productDetails[trim(strip_tags($headings[0]))] = trim(strip_tags($itemRowValue->find('.item_name', 0)->find('.tableTitleTd', 0)->innertext));
                            $productIndex = 1;
                            foreach($itemRowValue->find('td') as $tdKey => $tdValue) {
                                if(strpos($tdValue->getAttribute('class'), 'hide') !== false) {
                                    continue;
                                } if($tdKey <= 4) {
                                    continue;
                                }
                                $percent = $currency = '';
                                if(strpos($tdValue->getAttribute('class'), 'item_discount1') !== false || strpos($tdValue->getAttribute('class'), 'item_tax1') !== false) {
                                    //$percent = '%';
                                } if(strpos($tdValue->getAttribute('class'), 'item_price') !== false || strpos($tdValue->getAttribute('class'), 'item_total') !== false) {
                                    //$currency = $productTableValue->selectedcurrency;
                                } if(isset($headings[$productIndex])) {
                                    $productDetails[trim(strip_tags($headings[$productIndex]))] = trim(strip_tags(str_replace('&nbsp;', ' ', $tdValue->innertext)).($currency != '' ? ' '.$currency : '').($percent != '' ? ' '.$percent : ''));
                                    $productIndex++;
                                }
                            }
                            $products['product#'.$productNo] = $productDetails;
                        }
                    }
                    //for new garda template ending
    
                    foreach($html->find('#garda_calculation_table tr') as $fKey => $fndVal) {
                        $product = ['name' => '', 'quantity' => '', 'kampanj' => '', 'price' => '', 'finance' => ''];
                        if($fndVal->find('.item_name span', 0)) {
                            $product['name'] = trim($fndVal->find('.item_name span', 0)->plaintext);
                            if(strtolower($product['name']) == 'select') {
                                continue;
                            }
                            //$documentFieldsFromContent['product'.$fKey.'_name'] = trim($fndVal->find('.item_name span', 0)->plaintext);
                        } if($fndVal->find('.item_quantity', 0)) {
                            $product['quantity'] = trim(str_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $fndVal->find('.item_quantity', 0)->plaintext));
                        } if($fndVal->find('.item_discount', 0)) {
                            $product['kampanj'] = trim($fndVal->find('.item_discount', 0)->plaintext);
                        } if($fndVal->find('.item_total', 0)) {
                            $product['price'] = trim($fndVal->find('.item_total', 0)->plaintext);
                        } if($fndVal->find('.item_check', 0)) {
                            $product['finance'] = ($fndVal->find('.wb-check', 0) ? 'YES' : 'NO');
                        }
                        if($product['name'] != '' && $product['quantity'] != '' && $product['kampanj'] != '' && $product['price'] != '' && $product['finance'] != '') {
                            $products['product#'.$fKey] = $product;
                        }
                    }
                }

                if($html->find('.total_wo_check_price', 0)) {
                    $documentFieldsFromContent['total_kontant_sum'] = trim($html->find('.total_wo_check_price', 0)->innertext);
                } if($html->find('.total_w_check_price', 0)) {
                    $documentFieldsFromContent['wasa_kredit_sum'] = trim($html->find('.total_w_check_price', 0)->innertext);
                } if($html->find('.total_monthly_cost_price', 0)) {
                    $documentFieldsFromContent['månadskostnad'] = trim($html->find('.total_monthly_cost_price', 0)->innertext);
                } if($html->find('.textbox_for_everyone', 0)) {
                    $textboxForEveryone = trim(strip_tags($html->find('.textbox_for_everyone', 0)->innertext, '<br><div>'));
                    $textboxForEveryone = preg_replace("/<div[^>]*?>/", "", $textboxForEveryone);
                    $textboxForEveryone = str_replace("</div>", "\n", $textboxForEveryone);
                    $documentFieldsFromContent['övrigt'] = strip_tags($textboxForEveryone);
                }

                //unset variable based on Yes or NO starting
                if((isset($documentFieldsFromContent['Ja tack till finansiering med Wasa']) && $documentFieldsFromContent['Ja tack till finansiering med Wasa'] == 'No') || (isset($documentFieldsFromContent['ja_tack_till_finansiering_med_wasa']) && $documentFieldsFromContent['ja_tack_till_finansiering_med_wasa'] == 'No') || (isset($documentFieldsFromContent['Ja_tack_till_finansiering_med_Wasa']) && $documentFieldsFromContent['Ja_tack_till_finansiering_med_Wasa'] == 'No')) {
                    if(isset($documentFieldsFromContent['Återbetalningstid_antal_månader'])) {
                        unset($documentFieldsFromContent['Återbetalningstid_antal_månader']);
                    } if(isset($documentFieldsFromContent['Återbetalningstid antal månader'])) {
                        unset($documentFieldsFromContent['Återbetalningstid antal månader']);
                    }
                }
                //unset variable based on Yes or NO ending

                $responseArray['document']['people'] = $peoples;
                $responseArray['document']['document_fields'] = $documentFieldsFromContent;
                $responseArray['document']['sender_details'] = $senderDetails;
                $responseArray['document']['document_details'] = $contractDetails;
                if(count($products)){
                    $responseArray['document']['products'] = $products;
                }
            }

            if(isset($data['print_data']) && $data['print_data'] == 'print') {
                print_rj($responseArray, 1);
            }

            $xmlClassInitialization = new \SimpleXMLElement("<?xml version=\"1.0\" encoding=\"UTF-8\"?><result></result>");
            $utility->arrayDataToXML($responseArray, $xmlClassInitialization);
            //filter file name starting
            $contractName = str_replace(' ','_',$contractDetails['document_name']);
            $contractName = $utility->FixSpecialChar($contractName);
            $contractName = trim($contractName);
            $file_name = $contractDataValue['offer_sent_id'].'_'.$contractName.'.xml';
            //filter file name ending
            $xmlFileName = public_path().'/uploads/temp/'.$file_name;
            $xmlFile = $xmlClassInitialization->asXML($xmlFileName);
            $downloadURL = $domain_name.'uploads/temp/'.$file_name;
            if($get_ftp_path) {
                return ['file_path' => $xmlFileName, 'file_name' => $file_name];
            }else{
                return response()->download($xmlFileName)->deleteFileAfterSend(true);
            }
            //download URL, ftp path
            //return Response::json(['status' => 'success', 'result' => ['downloadURL' => $downloadURL, 'ftpPath' => $xmlFileName]]);
        } else {
            return Response::json(['status' => 'error', 'result' => 'No record(s) found']);
        }
    }
    /**
     * Send contract with saved templates
     * @return type
     */
    public function postSendwithdraft()
    {
        $data = Input::all();
        $utility = new Utility();
        if(isset($data['access_token'])){
                $access_token = $data['access_token'];
        }else{
                return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
        if(!isset($data['draft_id']) || empty($data['draft_id'])){
            return Response::json(['status'=>'error','result' =>'draft_id is missing']);
        }else{
            $offerSentId = $data['draft_id'];
        }
        if(!isset($data['signers']) || empty($data['signers'])){
                return Response::json(['status'=>'error','result' =>'Signers email is missing']);
        }
        $recipientlist = $data['signers'];
        $recipients = explode("|", $recipientlist);
        foreach($recipients as $recipient){
            if(!filter_var($recipient, FILTER_VALIDATE_EMAIL)){
                return Response::json(['status'=>'error','result' =>'one or more signers email is invalid']);
            }
        }
        if(!isset($data['name']) || empty($data['name'])){
            return Response::json(['status'=>'error','result' =>'Signers name is missing']);
        }
        $whereSent['id']= $offerSentId;
        $user_id = $utility->getUserIdByAuthToken($access_token);
        $parent_id = $utility->getParent($user_id);
        $getApiHitCount = Userinfo::where('user_id', $parent_id)->select('hit_count')->first();
        $addupdateapiaccesslogs = $utility->addupdateapiaccesslogs($user_id, 'postSendwithdraft v3', $data, $getApiHitCount['hit_count']);
        if($addupdateapiaccesslogs == 'exceed') {
            $this->apiCallLimitExceedMessage = str_replace('#hitCuntNo', $getApiHitCount['hit_count'], $this->apiCallLimitExceedMessage);
            return Response::json(['status' => 'error', 'result' => $this->apiCallLimitExceedMessage]);
        }
        $contract = $utility->getItem("offer_sent",$whereSent);
        if(!empty($contract)){
            if(isset($data['visible_name'])){
                $offerData['visible_name'] = $data['visible_name'];
                $offerData['name'] = $data['visible_name'];
            }else{
                $offerData['visible_name'] = $contract->visible_name;
                $offerData['name'] = $contract->name;
            }

            if(isset($data['language_id'])){
                $offerData['language_id'] = $data['language_id'];
            }else{
                $language = Userinfo::where('user_id', '=', $user_id)->select('language')->first();
                $offerData['language_id'] = ($contract->language_id == '' ? $language['language'] : $contract->language_id);
            }

            if(isset($data['due_date'])){
                $offerData['due_date'] = $data['due_date'];
            }else{
                $offerData['due_date'] = $contract->due_date;
            }

            if(isset($data['reminder_date'])){
                $offerData['reminder_date'] = $data['reminder_date'];
            }else{
                $offerData['reminder_date'] = $contract->reminder_date;
            }


            if(isset($data['invitation_message'])){
                $offerData['invitation_message'] = $data['invitation_message'];
            }else{
                $offerData['invitation_message'] = $contract->invitation_message; 
            }

            if(isset($data['confirmation_message'])){
                $offerData['confirmation_message'] = $data['confirmation_message'];
            }else{
                $offerData['confirmation_message'] = $contract->confirmation_message;  
            }

            $whereSent['id']= $offerSentId;
            $offerData['offer_status'] = 0;
            $utility->updateItem("offer_sent",$whereSent,$offerData);

            $status = $this->sendcontract($offerSentId,$data,$user_id,$offerData['visible_name'],$offerData['invitation_message'],$offerData['language_id']);
            if($status){

                $offerArray['offer_status'] = 0;
                $utility->updateItem("offer_sent",$whereSent,$offerArray);
                return Response::json(['status'=>'success','result' =>'contract sent successfully','contract_id'=>$offerSentId]);
            }else if($status==0){
                return Response::json(['status'=>'success','result' =>'Your are not paid user, Please upgrade your account for send contract']);
            }
        }else{
            return Response::json(['status'=>'error','message' =>'Draft id is not exist']);
        }
        
    }
    
    public function sendcontract($offerSentid,$data,$user_id,$visible_name,$invitation_message,$lang,$signing_url="",$extraFields="",$organizationField="") {
        $domain_name =  asset('/');
        $utility = new Utility();
        $mymailer = new mymailer();
        $sentcontract = new sendcontractController();
        /*offer add in sent details*/
        $isTemplate = (isset($data['template_id']) && $data['template_id'] != '' ? true : false);
        $userdata = $utility->getParentDetails($user_id);

        $recipients = json_decode($data['recipients'],true);

        $LinkedOfferSentId = (isset($data['linkedoffersentid']) && $data['linkedoffersentid'] != '' ? $data['linkedoffersentid'] : '');

        // getting info and manipulating about super user and normal user starting
        $sender_company = (isset($data["sender_company"]) && !empty($data["sender_company"]) ? $data["sender_company"] : $userdata->company);
        $userArrar['full_name'] = $userdata->full_name;
        $userArrar['email'] = $userdata->email;
        $userArrar['company'] = $sender_company;
        $userArrar['reg_no'] = (isset($data["sender_reg_no"]) && !empty($data["sender_reg_no"]) ? $data["sender_reg_no"] : $userdata->reg_no);
        $userArrar['address'] = (isset($data["sender_address"]) && !empty($data["sender_address"]) ? $data["sender_address"] : $userdata->address);
        $userArrar['telephone'] = (isset($data["sender_telephone"]) && !empty($data["sender_telephone"]) ? $data["sender_telephone"] : $userdata->telephone);
        $userArrar['post_code'] = (isset($data["sender_post_code"]) && !empty($data["sender_post_code"]) ? $data["sender_post_code"] : $userdata->post_code);
        $userArrar['city'] = (isset($data["sender_city"]) && !empty($data["sender_city"]) ? $data["sender_city"] : $userdata->city);
        // getting info and manipulating about super user and normal user ending

        //add this variable in beta condition
        $sign_date=date("Y-m-d H:i:s");
        $sign_ip = $_SERVER['REMOTE_ADDR'];
        $recpid = 0;
        $is_sender = 1;
        $invitation_order = 1;
        $status=4;
        $uniqidSender = uniqid();
        $confirmation=$role=$id_attachment=$authentication=$pin_code=$invitation_type=$paypal_amount = 0;
        $senderOfferDetailId = $sentcontract->addOffersentdetails($offerSentid,$recpid,$status,$sign_date,$sign_ip,$userArrar,$is_sender,$userArrar['email'],$userdata->full_name,$sender_company,$invitation_order,$uniqidSender,'',$confirmation,$role,$id_attachment,$authentication,$paypal_amount,$pin_code,$invitation_type);

        /*get user signature */
        $whereu['id'] = $user_id;
        $userData = $utility->getItem("users_login",$whereu);
        if($userData->parent_id == 0) {
            if($userData->payment_version == 2){
                $userData->monthly_signature = $userData->users_signatures;
            }
            $isPaid = $userData->is_paid;
            $signatureLeft = $userData->monthly_signature;
        } else {
            $whereu['id'] = $userData->parent_id;
            $userData = $utility->getItem("users_login",$whereu);
            if($userData->payment_version == 2){
                $userData->monthly_signature = $userData->users_signatures;
            }
            $isPaid = $userData->is_paid;
            $signatureLeft = $userData->monthly_signature;
        }
        
        $RecipientNum = 0;
        foreach($recipients as $key => $recipient){
            $recipientDetails = array();
            $EncryptrecipientDetails = array();
            if(isset($recipient) && $recipient != "") {
                $whererecipient['email'] = Tcrypt::encrypter($recipient['email']);
                $whererecipient['registerby'] = $user_id;
                $recipientDetails = $utility->getItem("customers",$whererecipient);
                unset($recipientDetails->last_name);
                if(empty($recipientDetails)){
                    $recipientDetails['full_name'] = $recipient['name'];
                    if(isset($recipient['reg_no']) && $recipient['reg_no'] != ''){
                        $recipientDetails['reg_no'] = $recipient['reg_no'];
                    }
                    //adding Personal No, with separate key for BankID
                    if(isset($recipient['personal_no']) && $recipient['personal_no'] != ''){
                        $recipientDetails['personal_no'] = $recipient['personal_no'];
                    }

                    $recipientDetails['email'] = $recipient['email'];
                    $recipientDetails['registerby'] = $user_id;
                    //added mobile number starting
                    $recipientDetails['mobile'] = (isset($recipient['mobile']) && !empty($recipient['mobile']) ? $recipient['mobile'] : "");
                    $EncryptrecipientDetails['mobile'] = (isset($recipient['mobile']) && !empty($recipient['mobile']) ? $recipient['mobile'] : "");

                    $recipientDetails['zip'] = (isset($recipient['zip']) && !empty($recipient['zip']) ? $recipient['zip'] : "");
                    $EncryptrecipientDetails['zip'] = (isset($recipient['zip']) && !empty($recipient['zip']) ? $recipient['zip'] : "");

                    $recipientDetails['city'] = (isset($recipient['city']) && !empty($recipient['city']) ? $recipient['city'] : "");
                    $EncryptrecipientDetails['city'] = (isset($recipient['city']) && !empty($recipient['city']) ? $recipient['city'] : "");
                    $recipientDetails['address'] = (isset($recipient['address']) && !empty($recipient['address']) ? $recipient['address'] : "");
                    $EncryptrecipientDetails['address'] = (isset($recipient['address']) && !empty($recipient['address']) ? $recipient['address'] : "");

                    $EncryptrecipientDetails['company'] = (isset($recipient['company']) && $recipient['company'] != ''? Tcrypt::encrypter($recipient['company']) : '');
                    
                    //added mobile number ending
                    $EncryptrecipientDetails['full_name'] = Tcrypt::encrypter($recipient['name']);
                    $EncryptrecipientDetails['email'] = Tcrypt::encrypter($recipient['email']);
                    $EncryptrecipientDetails['registerby'] = $user_id;
                    $recReturnId = $utility->addItem("customers",$EncryptrecipientDetails);
                    $recipientDetails['id'] = $recReturnId;
                }else{
                    $recipientDetails = (array)$recipientDetails;
                    $recipientDetails['company'] = (isset($recipientDetails['company']) && $recipientDetails['company'] != ''? Tcrypt::decrypter($recipientDetails['company']) : '');
                    $recipientDetails['full_name'] = $recipient['name'];
                    if(isset($recipient['reg_no']) && $recipient['reg_no'] != ''){
                        $recipientDetails['reg_no'] = $recipient['reg_no'];
                    }
                    //adding Personal No, with separate key for BankID
                    if(isset($recipient['personal_no']) && $recipient['personal_no'] != ''){
                        $recipientDetails['personal_no'] = $recipient['personal_no'];
                    }

                    $recipientDetails['email'] = $recipient['email'];
                    $recipientDetails['registerby'] = $user_id;
                    //added mobile number starting
                    $recipientDetails['mobile'] = (isset($recipient['mobile']) && !empty($recipient['mobile']) ? $recipient['mobile'] : "");
                     $recipientDetails['zip'] = (isset($recipient['zip']) && !empty($recipient['zip']) ? $recipient['zip'] : "");

                     $recipientDetails['city'] = (isset($recipient['city']) && !empty($recipient['city']) ? $recipient['city'] : "");
                     $recipientDetails['address'] = (isset($recipient['address']) && !empty($recipient['address']) ? $recipient['address'] : "");
                    //added mobile number ending
                }
                
                if(isset($recipient['mobile'])) {
                    $mobileno = $recipient['mobile'];
                } elseif(isset($recipientDetails['mobile'])) {
                    $mobileno = $recipientDetails['mobile'];
                } else {
                    $mobileno = '';
                }
                $recpid = (isset($recipientDetails['id']) && $recipientDetails['id'] != '' ? $recipientDetails['id'] : $recReturnId);   
                
                $fullname = isset($recipientDetails['full_name']) ? $recipientDetails['full_name'] : $signersNameArray[$key];   
                $reciver_email = isset($recipient['email']) ? $recipient['email'] : '';   
                //$mobileno = isset($recipientDetails['mobile']) ? $recipientDetails['mobile'] : isset($signersMobileArray[$key]) ?  $signersMobileArray[$key]:'';
                $company = isset($recipientDetails['company']) ? $recipientDetails['company'] : '';
                $invitation_order = isset($recipient['invitation_order']) ? $recipient['invitation_order'] : 1;
                $confirmation = isset($recipient['confirmation']) ? $recipient['confirmation'] : 1;
                $role = isset($recipient['role']) ? $recipient['role'] : 1;
                $id_attachment = isset($recipient['id_attachment']) ? $recipient['id_attachment'] : 0;
                $invitation_type = isset($recipient['invitation_type']) ? $recipient['invitation_type'] : 1;
                $authentication = isset($recipient['authentication']) ? $recipient['authentication'] : 1;

                $recipientDetails['authentication'] = $authentication;
                $recipientDetails['role'] = $role;
                
                $user_details = $recipientDetails;

                //For Adding Recipients Data in Template HTML (RJ) START
                $RecipientNum++;
                if($isTemplate) {
                    $sentData = Offersent::where('id', $offerSentid)->select('content')->first();
                    if($sentData) {
                        $OfferHTML = (isset($sentData['content']) && $sentData['content'] != '' ? Tcrypt::decrypter($sentData['content']) : '');
                        $updatedHTML = $this->setRecipientsInContent($OfferHTML, $user_details, $RecipientNum, $LinkedOfferSentId);
                        //pre defined values code starting
                        if(isset($data['recipients']) && $data['recipients'] != '') {
                            //$updatedHTML = $this->setCustomFieldValues(($updatedHTML != '' ? $updatedHTML : $OfferHTML), $data, $user_details, $RecipientNum);
                        }
                        //pre defined values code ending
                        if($updatedHTML != '') {
                            $updatedHTML = Tcrypt::encrypter($updatedHTML);
                            Offersent::where('id', $offerSentid)->update(['content'=>$updatedHTML]);
                        }
                    }
                }
                //For Adding Recipients Data in Template HTML (RJ) END

                $is_sender = 0;
                $status = 0;
                $sign_ip='';
                $sign_date = '';
                $uniqid = uniqid();
                
                if($invitation_order == 1){
                    $status = 1;
                }
        
                //check authentication via pic code
                $pin_code = 0;
                if($authentication == 4){
                    $pin_code = rand ( 10000 , 99999 );
                }

                if($isPaid == 0) {
                    if($signatureLeft >=1) {
                        $offerDetailId = $sentcontract->addOffersentdetails($offerSentid,$recpid,$status,$sign_date,$sign_ip,$user_details,$is_sender,$reciver_email,$fullname,$company,$invitation_order,$uniqid,  '',$confirmation,$role,$id_attachment,$authentication,$paypal_amount,$pin_code,$invitation_type);
                        if(!$utility->isSuperuser($user_id)) {
                            $signatureLeft--;
                        }
                    } else {
                        return 0;
                    }
                } else {
                    $offerDetailId = $sentcontract->addOffersentdetails($offerSentid,$recpid,$status,$sign_date,$sign_ip,$user_details,$is_sender,$reciver_email,$fullname,$company,$invitation_order,$uniqid,  '',$confirmation,$role,$id_attachment,$authentication,$paypal_amount,$pin_code,$invitation_type);
                }
                
                if($signing_url==1) {
                    //$signUrl= $domain_name.'offer/view/'.$offerDetailId.'/'.$uniqid;
                    $signUrl= $domain_name.'document/view/'.$offerDetailId.'/'.$uniqid;
                    return $signUrl;

                }
                
                if($invitation_order == 1) {
                    if($invitation_type == 1 ||  $invitation_type ==2 ) {
                        //exec("nohup lynx -dump $domain_name/api/v2/sendcontract/sendcontractnotification/$offerSentid/$offerDetailId > /dev/null 2>&1 &");
                        $sentcontract->getSendcontractnotification($offerSentid,$offerDetailId);
                        if($invitation_type == 2 ) {
                            $message = "";
                            if(isset($data["invitation_sms"]) && $data["invitation_sms"] != "") {
                                $recnamename = explode(' ', $recipient['name']);
                                $invitationSMSMessage = $data["invitation_sms"];
                                $invitationSMSMessage = str_replace("{rec_name}", $recipient['name'], $invitationSMSMessage);
                                $invitationSMSMessage = str_replace("{rec_firstname}", $recnamename[0], $invitationSMSMessage);
                                $invitationSMSMessage = str_replace("{full_name}", $userdata->full_name, $invitationSMSMessage);
                                $invitationSMSMessage = str_replace("{document_name}", $visible_name, $invitationSMSMessage);
                                $invitationSMSMessage = str_replace("{offer_url}", ($domain_name.'document/view/'.$offerDetailId.'/'.$uniqid), $invitationSMSMessage);
                                $message .= $invitationSMSMessage;
                            } else {
                                $message .= 'Hi '.$userdata->full_name . ' has sent you contract. ';
                                $message .= 'Review  contract  by click the link below. ' . ($domain_name.'document/view/'.$offerDetailId.'/'.$uniqid);
                            }
                            $utility->sendsms($mobileno,$message);
                            //added new code starting
                            $parentId = $utility->getParent($user_id);
                            $utility->updateSentsms($parentId);
                            //added new code ending
                            //add sms logs starting
                            $smsLogsData = array(
                                "user_id" => $user_id,
                                "offer_sent_id" => $offerSentid,
                                "offersent_detail_id" => $offerDetailId,
                                "phone_number" => $mobileno,
                                "message" => $message,
                                "section_name" => "Invitation SMS through API"
                            );
                            $utility->addItem("sms_logs", $smsLogsData);
                            //add sms logs ending
                        }
                    }

                    if($invitation_type == 4) {
                        $parties['partyname'] = $fullname;
                        $parties['offerDetailId'] = $offerDetailId;
                        $parties['uniqid'] = $uniqid;
                        array_push($meetingArray, $parties);
                    }
                    
                    //if($authentication == 4 ) {
                        //$message = 'Your PIN for'.$visible_name.' is '.$pin_code;
                        //$utility->sendsms($mobileno,$message);
                    //}
                }
                
                if($invitation_type == 3) {
                    $offer_url =  $domain_name.'document/view/'.$offerDetailId.'/'.$uniqid;
                    $posDetails['user_id'] = $user_id;
                    $posDetails['offer_url'] = $offer_url;
                    $posDetails['offer_id'] = $offerSentid;
                    $posDetails['sent_detail_id'] = $offerDetailId;
                    $posDetails['invitation_order'] = $invitation_order;
                    $utility->addItem("pushed_ipad",$posDetails);
                    $utility->createThumbnail($offerSentid);
                }
            }
        }//recipients loop end
        if($userData->payment_version == 2) {
            $userobj['users_signatures'] = $signatureLeft;
        } else {
            $userobj['monthly_signature'] = $signatureLeft;
        }
        
        //added by (MS) for change status from saved to trail starting
        $userobj['savedfrom_contract'] = 0;
        //added by (MS) for change status from saved to trail ending
        $utility->updateItem("users_login",$whereu,$userobj);
        return $offerSentid;
    }

    public function sendcontractnew($offerSentid,$data,$user_id,$visible_name,$invitation_message,$lang,$signing_url="",$extraFields="",$organizationField="",$templateFlag='',$iframeURL='') {
        // recipientDetailsEncrypt print_rj($data, 1);
        $domain_name =  asset('/');
        $utility = new Utility();
        $mymailer = new mymailer();
        $sentcontract = new sendcontractController();
        /*offer add in sent details*/
        $isTemplate = (isset($data['template_id']) && $data['template_id'] != '' ? true : false);
        $templateId = (isset($data['template_id']) && $data['template_id'] != '' ? $data['template_id'] : '');
        $userdata = $utility->getParentDetails($user_id);
        $getTranslation = $utility->GeneralTranslations($lang);
        $parent_id = $utility->getParent($user_id);
        $parentSettings = settings::where('user_id', $parent_id)->select('webhook_settings')->first();
        $getDocumentLanguage = Offersent::where('id', $offerSentid)->select('language_id')->first();
        $languageId = '';
        if(isset($getDocumentLanguage) && $getDocumentLanguage != '') {
            $languageId = $getDocumentLanguage['language_id'];
        } else {
            $languageId = $lang;
        }

        $recipients = json_decode($data['recipients'], true);
        $LinkedOfferSentId = (isset($data['linkedoffersentid']) && $data['linkedoffersentid'] != '' ? $data['linkedoffersentid'] : '');

        //getting info and manipulating about super user and normal user starting
        $sender_company = (isset($data["sender_company"]) && !empty($data["sender_company"]) ? $data["sender_company"] : $userdata->company);
        $userArrar['full_name'] = $userdata->full_name;
        $userArrar['email'] = $userdata->email;
        $userArrar['company'] = $sender_company;
        $userArrar['reg_no'] = (isset($data["sender_reg_no"]) && !empty($data["sender_reg_no"]) ? $data["sender_reg_no"] : $userdata->reg_no);
        $userArrar['address'] = (isset($data["sender_address"]) && !empty($data["sender_address"]) ? $data["sender_address"] : $userdata->address);
        $userArrar['telephone'] = (isset($data["sender_telephone"]) && !empty($data["sender_telephone"]) ? $data["sender_telephone"] : $userdata->telephone);
        $userArrar['post_code'] = (isset($data["sender_post_code"]) && !empty($data["sender_post_code"]) ? $data["sender_post_code"] : $userdata->post_code);
        $userArrar['city'] = (isset($data["sender_city"]) && !empty($data["sender_city"]) ? $data["sender_city"] : $userdata->city);
        // getting info and manipulating about super user and normal user ending

        //add this variable in beta condition
        $sign_date=date("Y-m-d H:i:s");
        $sign_ip = $_SERVER['REMOTE_ADDR'];
        $recpid = 0;
        $is_sender = 1;
        $invitation_order = 1;
        $status=4;
        $uniqidSender = uniqid();
        $confirmation=$role=$id_attachment=$authentication=$pin_code=$invitation_type=$paypal_amount = 0;
        $senderOfferDetailId = $sentcontract->addOffersentdetails($offerSentid,$recpid,$status,$sign_date,$sign_ip,$userArrar,$is_sender,$userArrar['email'],$userdata->full_name,$sender_company,$invitation_order,$uniqidSender,'',$confirmation,$role,$id_attachment,$authentication,$paypal_amount,$pin_code,$invitation_type);

        /*get user signature */
        $whereu['id'] = $user_id;
        $userData = $utility->getItem("users_login", $whereu);
        if($userData->parent_id == 0) {
            $isPaid = $userData->is_paid;
            if($userData->payment_version == 2){
                $userData->monthly_signature = $userData->users_signatures;    
            }
            $signatureLeft = $userData->monthly_signature;
        } else {
            $whereu['id'] = $userData->parent_id;
            $userData = $utility->getItem("users_login", $whereu);
            $isPaid = $userData->is_paid;
            if($userData->payment_version == 2){
                $userData->monthly_signature = $userData->users_signatures;    
            }
            $signatureLeft = $userData->monthly_signature;
        }

        //manuiplation of document fields starting
        if(isset($data['documentfields']) && !empty($data['documentfields'])) {
            $documents = json_decode($data['documentfields'], true);
            $documentArray = [];
            foreach($documents as $docKey => $docValue) {
                $documentFieldsArray = [];
                foreach($docValue['document_fields'] as $docFldKey => $docFldValue) {
                    array_push($documentFieldsArray, array('documentFieldName' => $docFldKey, 'documentFieldValue' => $docFldValue));
                }
            }
            $documentArray = json_encode($documentFieldsArray);
        }
        //manuiplation of document fields ending

        //document key password protected document starting
        $viewingDownloadingDataArray = [];
        $sendPasswordWithSMS = $sendSetPassword = '';
        if(isset($data['document_key']) && !empty($data['document_key'])) {
            $documentKey = json_decode($data['document_key'], true);
            $viewingDownloading = $sendSetPasswordHint = '';
            if(isset($documentKey['type']) && $documentKey['type'] == 'password' && isset($documentKey['send_with_sms']) && $documentKey['send_with_sms'] == 'yes') {
                $sendPasswordWithSMS = 'sndpas';
            } if(isset($documentKey['type']) && $documentKey['type'] == 'password') {
                $sendSetPassword = (isset($documentKey['set_password']) ? $documentKey['set_password'] : '');
            } if(isset($documentKey['type']) && $documentKey['type'] == 'password' && isset($documentKey['set_password_hint']) && $documentKey['set_password_hint'] != '') {
                $sendSetPasswordHint = (isset($documentKey['set_password_hint']) ? $documentKey['set_password_hint'] : '');
            }
            if(isset($documentKey['type']) && $documentKey['type'] == 'password') {
                $viewingDownloading = 1;
            } elseif(isset($documentKey['type']) && $documentKey['type'] == 'pinviasms') {
                $viewingDownloading = 2;
                $viewingDownloadingDataArray['pinCode'] = $utility->randomString(4, "0123456789");
            } elseif(isset($documentKey['type']) && $documentKey['type'] == 'bankid') {
                $viewingDownloading = 3;
            }
            $viewingDownloadingDataArray['activeAuthentication'] = 1;
            $viewingDownloadingDataArray['viewingDownloading'] = $viewingDownloading;
            $viewingDownloadingDataArray['sendPasswordWithSMS'] = $sendPasswordWithSMS;
            $viewingDownloadingDataArray['sendSetPassword'] = $sendSetPassword;
            $viewingDownloadingDataArray['sendSetPasswordHint'] = $sendSetPasswordHint;
            $viewingDownloadingDataArray['fromWhere'] = 'global';
        }
        //document key password protected document ending

        //new function
        $RecipientNum = 0;
        $signUrl = $pushWebHookDetails = [];
        $getRecSettings = 1;
        foreach($recipients as $key => $recipient) {
            $recipientDetails = $specificCustomDetailsArray = array();
            $EncryptrecipientDetails = array();
            $orgArray = array();
            if(isset($recipient) && $recipient != "") {
                $extraAndDocumentFields = $organizationArray = $detailsArray = array();
                $recipientRoleNew = $signingMethods = '';

                //manuiplation of people fields array for extra and document fields starting
                $recipientKeys = array('name', 'email', 'personal_no', 'mobile', 'address', 'city', 'zipcode');
                if(isset($recipient['people_fields'])) {
                    $extAndDocFldsArray = array();
                    foreach($recipient['people_fields'] as $pepleFldKey => $pepleFldValue) {
                        if(!in_array($pepleFldKey, $recipientKeys)) {
                            array_push($extAndDocFldsArray, array('extAndDocFieldName' => $pepleFldKey, 'extAndDocFieldValue' => $pepleFldValue));
                        }
                    }
                    $extraAndDocumentFields = json_encode($extAndDocFldsArray);
                }
                //manuiplation of people fields array for extra and document fields ending
                //manuiplation of organization fields starting

                if(isset($recipient['organization_fields'])) {
                    
                    foreach($recipient['organization_fields'] as $orgKey => $orgValue) {
                        //commment this line when work will be completed in sendtemplate starting
                        //$orgKey = str_replace('organization', 'org', $orgKey);
                        //commment this line when work will be completed in sendtemplate ending
                        array_push($orgArray, array('orgFieldName' => $orgKey, 'orgFieldValue' => $orgValue));
                    }
                    $organizationArray = json_encode($orgArray);
                }
                //manuiplation of organization fields ending
                //manuiplation of details fields starting
                if(isset($recipient['details'])) {
                    $detArray = array();
                    foreach($recipient['details'] as $detailsKey => $detailsValue) {
                        array_push($detArray, array('detailsFieldName' => $detailsKey, 'detailsFieldValue' => $detailsValue));
                    }
                    $detailsArray = json_encode($detArray);
                }
                //manuiplation of details fields ending
                //new function
                $organizationName = (isset($recipient['organization_fields']['name']) && $recipient['organization_fields']['name'] != '' ? $recipient['organization_fields']['name'] : '');
                $recipient['people_fields']['email'] = preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $recipient['people_fields']['email']);
                $whererecipient['email'] = Tcrypt::encrypter($recipient['people_fields']['email']);
                $whererecipient['registerby'] = $user_id;
                $recipientDetails = $utility->getItem("customers",$whererecipient);
                unset($recipientDetails->last_name);
                if(empty($recipientDetails)) {

                    //$recipientDetails this variable is for user_details column for insert recipients info
                    $recipientDetails['registerby'] = $user_id;
                    $recipientDetails['email'] = $recipient['people_fields']['email'];
                    $recipientDetails['full_name'] = $recipient['people_fields']['name'];
                    $recipientDetails['first_name'] = $recipient['people_fields']['name'];
                    $recipientDetails['personnr'] = (isset($recipient['people_fields']['personal_no']) && $recipient['people_fields']['personal_no'] != '' ? $recipient['people_fields']['personal_no'] : '');
                    $recipientDetails['mobile'] = (isset($recipient['people_fields']['mobile']) && !empty($recipient['people_fields']['mobile']) ? $recipient['people_fields']['mobile'] : "");
                    //we've both keys zip and zipcode one of them is new and other one is old
                    $recipientDetails['zipcode'] = (isset($recipient['people_fields']['zipcode']) && !empty($recipient['people_fields']['zipcode']) ? $recipient['people_fields']['zipcode'] : "");
                    $recipientDetails['zip'] = (isset($recipient['people_fields']['zipcode']) && !empty($recipient['people_fields']['zipcode']) ? $recipient['people_fields']['zipcode'] : "");
                    $recipientDetails['city'] = (isset($recipient['people_fields']['city']) && !empty($recipient['people_fields']['city']) ? $recipient['people_fields']['city'] : "");
                    $recipientDetails['address'] = (isset($recipient['people_fields']['address']) && !empty($recipient['people_fields']['address']) ? $recipient['people_fields']['address'] : "");
                    $recipientDetails['company'] = $organizationName;

                    if(isset($recipient['organization_fields']['org_no']) && $recipient['organization_fields']['org_no'] != ''){
                        $recipientDetails['reg_no'] = $recipient['organization_fields']['org_no'];
                    }
                    //update organization and linked with recipient starting
                    if($organizationName != '') {
                        $getOrganization = Organizations::where('registerby', $user_id)->where('name', Tcrypt::encrypter($organizationName))->select('id')->first();
                        if($getOrganization) {
                            $EncryptrecipientDetails['organization_id'] = $getOrganization['id'];
                        } else {
                            $orgNo = (isset($recipient['organization_fields']['org_no']) && $recipient['organization_fields']['org_no'] != '' ? $recipient['organization_fields']['org_no'] : '');
                            $orgPhone = (isset($recipient['organization_fields']['phone']) && $recipient['organization_fields']['phone'] != '' ? $recipient['organization_fields']['phone'] : '');
                            $orgAddress = (isset($recipient['organization_fields']['address']) && $recipient['organization_fields']['address'] != '' ? $recipient['organization_fields']['address'] : '');
                            $orgCity = (isset($recipient['organization_fields']['city']) && $recipient['organization_fields']['city'] != '' ? $recipient['organization_fields']['city'] : '');
                            $orgZipCode = (isset($recipient['organization_fields']['zipcode']) && $recipient['organization_fields']['zipcode'] != '' ? $recipient['organization_fields']['zipcode'] : '');
                            $getOrganizationId = Organizations::insertGetId(['name' => Tcrypt::encrypter($organizationName), 'reg_no' => $orgNo, 'address' => $orgAddress, 'mobile' => $orgPhone, 'zip' => $orgZipCode, 'city' => $orgCity]);
                            $EncryptrecipientDetails['organization_id'] = $getOrganizationId;
                        }
                        //insert organization fields into user_details object starting
                        if($EncryptrecipientDetails['organization_id'] != '') {
                            $recipientDetails['org_name'] = (isset($organizationName) && $organizationName != '' ? $organizationName : '');
                            $recipientDetails['org_reg_no'] = (isset($getOrganization['reg_no']) && $getOrganization['reg_no'] != '' ? $getOrganization['reg_no'] : (isset($orgNo) && $orgNo != '' ? $orgNo : ''));
                            $recipientDetails['org_mobile'] = (isset($getOrganization['mobile']) && $getOrganization['mobile'] != '' ? $getOrganization['mobile'] : (isset($orgPhone) && $orgPhone != '' ? $orgPhone : ''));
                            $recipientDetails['org_address'] = (isset($getOrganization['address']) && $getOrganization['address'] != '' ? $getOrganization['address'] : (isset($orgAddress) && $orgAddress != '' ? $orgAddress : ''));
                            $recipientDetails['org_city'] = (isset($getOrganization['city']) && $getOrganization['city'] != '' ? $getOrganization['city'] : (isset($orgCity) && $orgCity != '' ? $orgCity : ''));
                            $recipientDetails['org_zip'] = (isset($getOrganization['zip']) && $getOrganization['zip'] != '' ? $getOrganization['zip'] : (isset($orgZipCode) && $orgZipCode != '' ? $orgZipCode : ''));
                            $recipientDetails['org_id'] = ($EncryptrecipientDetails['organization_id'] != '' ? $EncryptrecipientDetails['organization_id'] : '');
                        }
                        //insert organization fields into user_details object ending
                    }
                    //update organization and linked with recipient ending

                    $EncryptrecipientDetails['email'] = Tcrypt::encrypter($recipient['people_fields']['email']);
                    $EncryptrecipientDetails['full_name'] = Tcrypt::encrypter($recipient['people_fields']['name']);
                    $EncryptrecipientDetails['mobile'] = (isset($recipient['people_fields']['mobile']) && !empty($recipient['people_fields']['mobile']) ? $recipient['people_fields']['mobile'] : "");
                    $EncryptrecipientDetails['zip'] = (isset($recipient['people_fields']['zipcode']) && !empty($recipient['people_fields']['zipcode']) ? $recipient['people_fields']['zipcode'] : "");
                    $EncryptrecipientDetails['city'] = (isset($recipient['people_fields']['city']) && !empty($recipient['people_fields']['city']) ? $recipient['people_fields']['city'] : "");
                    $EncryptrecipientDetails['address'] = (isset($recipient['people_fields']['address']) && !empty($recipient['people_fields']['address']) ? $recipient['people_fields']['address'] : "");
                    $EncryptrecipientDetails['company'] = ($organizationName != '' ? Tcrypt::encrypter($organizationName) : '');
                    $EncryptrecipientDetails['registerby'] = $user_id;
                    $recReturnId = $utility->addItem("customers", $EncryptrecipientDetails);
                    $recipientDetails['id'] = $recReturnId;
                } else {
                    $recipientDetails = (array)$recipientDetails;
                    
                    //$recipientDetails this variable is for user_details column for insert recipients info
                    $recipientDetails['registerby'] = $user_id;
                    $recipientDetails['email'] = $recipient['people_fields']['email'];
                    $recipientDetails['full_name'] = $recipient['people_fields']['name'];
                    $recipientDetails['first_name'] = $recipient['people_fields']['name'];
                    $recipientDetails['recipient_role'] = (isset($recipient['details']['recipient_role']) && $recipient['details']['recipient_role'] != '' ? $recipient['details']['recipient_role'] : '');
                    //adding Personal No, with separate key for BankID
                    $recipientDetails['personnr'] = (isset($recipient['people_fields']['personal_no']) && $recipient['people_fields']['personal_no'] != '' ? $recipient['people_fields']['personal_no'] : (isset($recipientDetails['personnr']) && $recipientDetails['personnr'] != '' ? $recipientDetails['personnr'] : ''));
                    $recipientDetails['mobile'] = (isset($recipient['people_fields']['mobile']) && $recipient['people_fields']['mobile'] != '' ? $recipient['people_fields']['mobile'] : (isset($recipientDetails['mobile']) && $recipientDetails['mobile'] != '' ? $recipientDetails['mobile'] : ''));
                    //we've both keys zip and zipcode one of them is new and other one is old
                    $recipientDetails['zipcode'] = (isset($recipient['people_fields']['zipcode']) && $recipient['people_fields']['zipcode'] != '' ? $recipient['people_fields']['zipcode'] : (isset($recipientDetails['zip']) && $recipientDetails['zip'] != '' ? $recipientDetails['zip'] : ''));
                    $recipientDetails['zip'] = (isset($recipient['people_fields']['zipcode']) && $recipient['people_fields']['zipcode'] != '' ? $recipient['people_fields']['zipcode'] : (isset($recipientDetails['zip']) && $recipientDetails['zip'] != '' ? $recipientDetails['zip'] : ''));
                    $recipientDetails['city'] = (isset($recipient['people_fields']['city']) && $recipient['people_fields']['city'] != '' ? $recipient['people_fields']['city'] : (isset($recipientDetails['city']) && $recipientDetails['city'] != '' ? $recipientDetails['city'] : ''));
                    $recipientDetails['address'] = (isset($recipient['people_fields']['address']) && $recipient['people_fields']['address'] != '' ? $recipient['people_fields']['address'] : (isset($recipientDetails['address']) && $recipientDetails['address'] != '' ? $recipientDetails['address'] : ''));

                    if(isset($recipient['organization_fields']['org_no']) && $recipient['organization_fields']['org_no'] != ''){
                        $recipientDetails['reg_no'] = (isset($recipient['organization_fields']['org_no']) && $recipient['organization_fields']['org_no'] != '' ? $recipient['organization_fields']['org_no'] : (isset($recipientDetails['reg_no']) && $recipientDetails['reg_no'] != '' ? $recipientDetails['reg_no'] : ''));
                    } if(isset($recipientDetails['company']) && $recipientDetails['company'] != '') {
                        $recipientDetails['company'] = (isset($recipient['organization_fields']['name']) && $recipient['organization_fields']['name'] != '' ? $recipient['organization_fields']['name'] : Tcrypt::decrypter($recipientDetails['company']));
                    } else {
                        $recipientDetails['company'] = (isset($recipient['organization_fields']['name']) && $recipient['organization_fields']['name'] != '' ? $recipient['organization_fields']['name'] : '');
                    }

                    $recipientDetailsEncrypt['email'] = (isset($recipient['people_fields']['email']) && !empty($recipient['people_fields']['email']) ? Tcrypt::encrypter($recipient['people_fields']['email']) : '');
                    $recipientDetailsEncrypt['full_name'] = (isset($recipient['people_fields']['name']) && !empty($recipient['people_fields']['name']) ? Tcrypt::encrypter($recipient['people_fields']['name']) : '');

                    //changing if condition to ternary condition starting
                    $recipientDetailsEncrypt['company'] = ($organizationName != '' ? Tcrypt::encrypter($organizationName) : (isset($recipientDetails['company']) && $recipientDetails['company'] != '' ? $recipientDetails['company'] : ''));
                    $recipientDetailsEncrypt['mobile'] = (isset($recipient['people_fields']['mobile']) && $recipient['people_fields']['mobile'] != '' ? $recipient['people_fields']['mobile'] : (isset($recipientDetails['mobile']) && $recipientDetails['mobile'] != '' ? $recipientDetails['mobile'] : ''));
                    $recipientDetailsEncrypt['zip'] = (isset($recipient['people_fields']['zipcode']) && $recipient['people_fields']['zipcode'] != '' ? $recipient['people_fields']['zipcode'] : (isset($recipientDetails['zip']) && $recipientDetails['zip'] != '' ? $recipientDetails['zip'] : ''));
                    $recipientDetailsEncrypt['city'] = (isset($recipient['people_fields']['city']) && $recipient['people_fields']['city'] != '' ? $recipient['people_fields']['city'] : (isset($recipientDetails['city']) && $recipientDetails['city'] != '' ? $recipientDetails['city'] : ''));
                    $recipientDetailsEncrypt['address'] = (isset($recipient['people_fields']['address']) && $recipient['people_fields']['address'] != '' ? $recipient['people_fields']['address'] : (isset($recipientDetails['address']) && $recipientDetails['address'] != '' ? $recipientDetails['address'] : ''));
                    $recipientDetailsEncrypt['reg_no'] = (isset($recipient['organization_fields']['org_no']) && $recipient['organization_fields']['org_no'] != '' ? $recipient['organization_fields']['org_no'] : (isset($recipientDetails['reg_no']) && $recipientDetails['reg_no'] != '' ? $recipientDetails['reg_no'] : ''));
                    $recipientDetailsEncrypt['personnr'] = (isset($recipient['people_fields']['personal_no']) && $recipient['people_fields']['personal_no'] != '' ? $recipient['people_fields']['personal_no'] : (isset($recipientDetails['personnr']) && $recipientDetails['personnr'] != '' ? $recipientDetails['personnr'] : ''));
                    //changing if condition to ternary condition ending
                    
                    /* if($organizationName != '') { 
                        $recipientDetailsEncrypt['company'] = Tcrypt::encrypter($organizationName);
                    } if(isset($recipient['people_fields']['mobile']) && !empty($recipient['people_fields']['mobile'])) {
                        $recipientDetailsEncrypt['mobile'] = $recipient['people_fields']['mobile'];
                    } if(isset($recipient['people_fields']['zipcode']) && !empty($recipient['people_fields']['zipcode'])) {
                        $recipientDetailsEncrypt['zip'] = $recipient['people_fields']['zipcode'];
                    } if(isset($recipient['people_fields']['city']) && !empty($recipient['people_fields']['city'])) {
                        $recipientDetailsEncrypt['city'] = $recipient['people_fields']['city'];
                    } if(isset($recipient['people_fields']['address']) && !empty($recipient['people_fields']['address'])) {
                        $recipientDetailsEncrypt['address'] = $recipient['people_fields']['address'];
                    } if(isset($recipient['organization_fields']['org_no']) && !empty($recipient['organization_fields']['org_no'])) {
                        $recipientDetailsEncrypt['reg_no'] = $recipient['organization_fields']['org_no'];
                    } if(isset($recipient['people_fields']['personal_no']) && !empty($recipient['people_fields']['personal_no'])) {
                        $recipientDetailsEncrypt['personnr'] = $recipient['people_fields']['personal_no'];
                    } */
                    if($organizationName != '') {
                        $getOrganization = Organizations::where('registerby', $user_id)->where('name', Tcrypt::encrypter($organizationName))->select('id', 'name', 'reg_no', 'address', 'mobile', 'zip', 'city')->first();
                        if($getOrganization) {
                            $EncryptrecipientDetails['organization_id'] = $getOrganization['id'];
                            //insert organization fields into user_details object starting
                            if($EncryptrecipientDetails['organization_id'] != '') {
                                $recipientDetails['org_name'] = ($getOrganization['name'] != '' ? Tcrypt::decrypter($getOrganization['name']) : '');
                                $recipientDetails['org_reg_no'] = ($getOrganization['reg_no'] != '' ? $getOrganization['reg_no'] : '');
                                $recipientDetails['org_mobile'] = ($getOrganization['mobile'] != '' ? $getOrganization['mobile'] : '');
                                $recipientDetails['org_address'] = ($getOrganization['address'] != '' ? $getOrganization['address'] : '');
                                $recipientDetails['org_city'] = ($getOrganization['city'] != '' ? $getOrganization['city'] : '');
                                $recipientDetails['org_zip'] = ($getOrganization['zip'] != '' ? $getOrganization['zip'] : '');
                                $recipientDetails['org_id'] = ($getOrganization['id'] != '' ? $getOrganization['id'] : '');
                            }
                            //insert organization fields into user_details object ending
                        } else {
                            //15940 sendtemplate
                            $orgNo = (isset($recipient['organization_fields']['org_no']) && $recipient['organization_fields']['org_no'] != '' ? $recipient['organization_fields']['org_no'] : '');
                            $orgPhone = (isset($recipient['organization_fields']['phone']) && $recipient['organization_fields']['phone'] != '' ? $recipient['organization_fields']['phone'] : '');
                            $orgAddress = (isset($recipient['organization_fields']['address']) && $recipient['organization_fields']['address'] != '' ? $recipient['organization_fields']['address'] : '');
                            $orgCity = (isset($recipient['organization_fields']['city']) && $recipient['organization_fields']['city'] != '' ? $recipient['organization_fields']['city'] : '');
                            $orgZipCode = (isset($recipient['organization_fields']['zipcode']) && $recipient['organization_fields']['zipcode'] != '' ? $recipient['organization_fields']['zipcode'] : '');
                            $getOrganizationId = Organizations::insertGetId(['name' => Tcrypt::encrypter($organizationName), 'reg_no' => $orgNo, 'address' => $orgAddress, 'mobile' => $orgPhone, 'zip' => $orgZipCode, 'city' => $orgCity]);
                            $recipientDetails['org_name'] = (isset($recipient['organization_fields']['name']) && $recipient['organization_fields']['name'] != '' ? $recipient['organization_fields']['name'] : '');
                            $recipientDetails['org_reg_no'] = $orgNo;
                            $recipientDetails['org_mobile'] = $orgPhone;
                            $recipientDetails['org_address'] = $orgAddress;
                            $recipientDetails['org_city'] = $orgCity;
                            $recipientDetails['org_zip'] = $orgZipCode;
                            $recipientDetails['org_id'] = $getOrganizationId;
                        }
                    }
                    $whereUpdate['id'] = $recipientDetails['id'];
                    $whereUpdate['registerby'] = $user_id;
                    $utility->updateItem("customers",$whereUpdate,$recipientDetailsEncrypt);
                }

                $recipientRoleNew = (isset($recipient['details']['recipient_role']) && $recipient['details']['recipient_role'] != '' ? $recipient['details']['recipient_role'] : '');

                //extra, organization and document fields code starting
                if(isset($extraAndDocumentFields) && !empty($extraAndDocumentFields)) {
                    $recipientDetails['extanddoc_fields'] = $extraAndDocumentFields;
                } if(isset($organizationArray) && !empty($organizationArray)) {
                    $recipientDetails['organization_fields'] = $organizationArray;
                } if(isset($detailsArray) && !empty($detailsArray)) {
                    $recipientDetails['details_fields'] = $detailsArray;
                } if(isset($documentArray) && !empty($documentArray)) {
                    $recipientDetails['document_fields'] = $documentArray;
                }
                //extra, organization and document fields code ending
                
                if(isset($recipient['people_fields']['mobile'])) {
                    $mobileno = $recipient['people_fields']['mobile'];
                } elseif(isset($recipientDetails['mobile'])) {
                    $mobileno = $recipientDetails['mobile'];
                } else {
                    $mobileno = '';
                }

                $recpid = (isset($recipientDetails['id']) && $recipientDetails['id'] != '' ? $recipientDetails['id'] : $recReturnId);

                $fullname = isset($recipientDetails['full_name']) ? $recipientDetails['full_name'] : $signersNameArray[$key];
                $recipient['people_fields']['email'] = preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $recipient['people_fields']['email']);

                $reciver_email = isset($recipient['people_fields']['email']) ? $recipient['people_fields']['email'] : '';
                $company = (isset($recipientDetails['company']) && $recipientDetails['company'] != '' ? $recipientDetails['company'] : (isset($recipient['organization_fields']['name']) && $recipient['organization_fields']['name'] != '' ? $recipient['organization_fields']['name'] : ''));

                //invitation_type (invitation_through) 1 for email, 2 for email & sms, 3 for pos, 4 for in meeting
                //invitation_order defualt value is 1
                //confirmation (offer_confirmation) 1 for email & 2 for email & sms
                //authentication 1 for regular signature, 2 for paypal, 3 for bankID & 4 for pin via sms
                //role old one was like 1 for sign & 2 for review/new one is like Manager, CEO, User & so on
                //id_attachment 0 for no request & 1 for attachment
                //New code according to data manuiplation stating
                $invitation_type = $invitation_order = $confirmation = $authentication = 1;
                $id_attachment = 0;
                if(isset($recipient['details']['invitation_type'])) {
                    if($recipient['details']['invitation_type'] == 'email' || $recipient['details']['invitation_type'] == 'Email' || $recipient['details']['invitation_type'] == 'EMAIL') {
                        $invitation_type = 1;
                    } elseif($recipient['details']['invitation_type'] == 'email and sms' || $recipient['details']['invitation_type'] == 'Email And SMS' || $recipient['details']['invitation_type'] == 'EMAIL AND SMS' || $recipient['details']['invitation_type'] == 'email & sms' || $recipient['details']['invitation_type'] == 'Email & SMS' || $recipient['details']['invitation_type'] == 'EMAIL & SMS') {
                        $invitation_type = 2;
                    } elseif($recipient['details']['invitation_type'] == 'sms' || $recipient['details']['invitation_type'] == 'SMS') {
                        $invitation_type = 6;
                    } elseif($recipient['details']['invitation_type'] == 'pos' || $recipient['details']['invitation_type'] == 'POS' || $recipient['details']['invitation_type'] == 'Pos') {
                        $invitation_type = 3;
                    } elseif($recipient['details']['invitation_type'] == 'in meeting' || $recipient['details']['invitation_type'] == 'In Meeting' || $recipient['details']['invitation_type'] == 'IN MEETING' || $recipient['details']['invitation_type'] == 'in-meeting' || $recipient['details']['invitation_type'] == 'In-Meeting' || $recipient['details']['invitation_type'] == 'IN-MEETING') {
                        $invitation_type = 4;
                    }
                } if(isset($recipient['details']['invitation_order']) && $recipient['details']['invitation_order'] != '') {
                    $invitation_order = $recipient['details']['invitation_order'];
                } if(isset($recipient['details']['confirmation'])) {
                    if($recipient['details']['confirmation'] == 'email' || $recipient['details']['confirmation'] == 'Email' || $recipient['details']['confirmation'] == 'EMAIL') {
                        $confirmation = 1;
                    } elseif($recipient['details']['confirmation'] == 'email and sms' || $recipient['details']['confirmation'] == 'Email And SMS' || $recipient['details']['confirmation'] == 'EMAIL AND SMS' || $recipient['details']['confirmation'] == 'email & sms' || $recipient['details']['confirmation'] == 'Email & SMS' || $recipient['details']['confirmation'] == 'EMAIL & SMS') {
                        $confirmation = 2;
                    } elseif($recipient['details']['confirmation'] == 'No confirmation' || $recipient['details']['confirmation'] == 'no confirmation' || $recipient['details']['confirmation'] == 'NO CONFIRMATION' || $recipient['details']['confirmation'] == 'no_confirmation' || $recipient['details']['confirmation'] == 'no-confirmation' || $recipient['details']['confirmation'] == 'NO_CONFIRMATION' || $recipient['details']['confirmation'] == 'NO-CONFIRMATION') {
                        $confirmation = 3;
                    }
                } if(isset($recipient['details']['authentication'])) {
                    if($recipient['details']['authentication'] == 'regular signature' || $recipient['details']['authentication'] == 'Regular Signature' || $recipient['details']['authentication'] == 'REGULAR SIGNATURE') {
                        $authentication = 1;
                        $signingMethods = 'E-signature';
                    } elseif($recipient['details']['authentication'] == 'paypal' || $recipient['details']['authentication'] == 'Paypal' || $recipient['details']['authentication'] == 'PAYPAL' || $recipient['details']['authentication'] == 'pay pal' || $recipient['details']['authentication'] == 'Pay Pal' || $recipient['details']['authentication'] == 'PAY PAL') {
                        $authentication = 2;
                    } elseif($recipient['details']['authentication'] == 'bankID' || $recipient['details']['authentication'] == 'BankID' || $recipient['details']['authentication'] == 'BANKID') {
                        $authentication = 3;
                        $signingMethods = 'BankID';
                    } elseif($recipient['details']['authentication'] == 'NorwegianBankID' || $recipient['details']['authentication'] == 'Norwegian BankID' || $recipient['details']['authentication'] == 'NORWEGIANBANKID' || $recipient['details']['authentication'] == 'norwegian bankid' || $recipient['details']['authentication'] == 'norwegianbankid') {
                        $authentication = 9;
                        $signingMethods = 'Norwegian BankID';
                    } elseif($recipient['details']['authentication'] == 'DanishBankID' || $recipient['details']['authentication'] == 'Danish BankID' || $recipient['details']['authentication'] == 'DANISHBANKID' || $recipient['details']['authentication'] == 'danish bankid' || $recipient['details']['authentication'] == 'danishbankid') {
                        $authentication = 10;
                        $signingMethods = 'Danish BankID';
                    } elseif($recipient['details']['authentication'] == 'FinnishBankID' || $recipient['details']['authentication'] == 'Finnish BankID' || $recipient['details']['authentication'] == 'FINNISHBANKID' || $recipient['details']['authentication'] == 'finnish bankid' || $recipient['details']['authentication'] == 'finnishbankid') {
                        $authentication = 11;
                        $signingMethods = 'Finnish BankID';
                    } elseif($recipient['details']['authentication'] == 'pin via sms' || $recipient['details']['authentication'] == 'Pin Via SMS' || $recipient['details']['authentication'] == 'PIN VIA SMS') {
                        $authentication = 4;
                        $signingMethods = 'PIN via SMS';
                    } elseif($recipient['details']['authentication'] == 'attest' || $recipient['details']['authentication'] == 'at test' || $recipient['details']['authentication'] == 'Attest' || $recipient['details']['authentication'] == 'At test') {
                        $signingMethods = 'Attest';
                        if(!isset($recipient['people_fields']['role'])) {
                            $recipient['people_fields']['role'] = 2;
                            $authentication = 1;
                        }
                    } elseif($recipient['details']['authentication'] == 'view only' || $recipient['details']['authentication'] == 'viewonly' || $recipient['details']['authentication'] == 'View Only' || $recipient['details']['authentication'] == 'ViewOnly' || $recipient['details']['authentication'] == 'Viewonly') {
                        $authentication = 6;
                        $signingMethods = 'Read only';
                    }
                } if(isset($recipient['details']['id_attachment'])) {
                    if($recipient['details']['id_attachment'] == 'yes' || $recipient['details']['id_attachment'] == 'Yes' || $recipient['details']['id_attachment'] == 'YES') {
                        $id_attachment = 1;
                    } elseif($recipient['details']['id_attachment'] == 'no' || $recipient['details']['id_attachment'] == 'No' || $recipient['details']['id_attachment'] == 'NO') {
                        $id_attachment = 0;
                    }
                }
                //senddocument function
                $role = (isset($recipient['people_fields']['role']) ? $recipient['people_fields']['role'] : 1);
                $recipientDetails['authentication'] = $authentication;
                $recipientDetails['invitation_order'] = $invitation_order;
                $recipientDetails['getrecsettings'] = $getRecSettings;
                $recipientDetails['invitation_type'] = $invitation_type;
                $recipientDetails['id_attachment'] = $id_attachment;
                $recipientDetails['confirmation'] = $confirmation;
                $recipientDetails['recrolename'] = $recipientRoleNew;
                $recipientDetails['tab_components'] = $recipientRoleNew;
                $recipientRolesData = Recipient_fields_roles::where('userid', $parent_id)->where('tab_components', $recipientRoleNew)->where('offer_doc_id', 0)->select('colorcode')->first();
                $recipientDetails['colorcode'] = $recipientRolesData['colorcode'];
                $recipientDetails['role'] = $role;
                //New code according to data manuiplation ending

                /*$invitation_order = isset($recipient['invitation_order']) ? $recipient['invitation_order'] : 1;
                $confirmation = isset($recipient['confirmation']) ? $recipient['confirmation'] : 1;
                $role = isset($recipient['role']) ? $recipient['role'] : 1;
                $id_attachment = isset($recipient['id_attachment']) ? $recipient['id_attachment'] : 0;
                $invitation_type = isset($recipient['invitation_type']) ? $recipient['invitation_type'] : 1;
                $authentication = isset($recipient['authentication']) ? $recipient['authentication'] : 1;*/
                
                $user_details = $recipientDetails;

                //For Adding Recipients Data in Template HTML (RJ) START
                $RecipientNum++;
                if($templateFlag) {
                    $sentData = Offersent::where('id', $offerSentid)->select('content')->first();
                    if($sentData) {
                        $OfferHTML = (isset($sentData['content']) && $sentData['content'] != '' ? Tcrypt::decrypter($sentData['content']) : '');
                        //postSenddocument
                        $updatedHTML = $this->setRecipientsInContentNewDocument($OfferHTML, $user_details, $RecipientNum, $LinkedOfferSentId, str_replace(' ', '', ucfirst(strtolower(trim($recipientRoleNew)))), $fullname, $data, $languageId);

                        //pre defined values code starting
                        //if(isset($data['autofill_fields']) && $data['autofill_fields'] != '') {
                        if(isset($data['recipients']) && $data['recipients'] != '') {
                            //$updatedHTML = $this->setCustomFieldValues(($updatedHTML != '' ? $updatedHTML : $OfferHTML), $data, $user_details, $RecipientNum);
                        }
                        //pre defined values code ending
                        if($updatedHTML != '') {
                            $updatedHTML = Tcrypt::encrypter($updatedHTML);
                            $offerSentContentUpdate = Offersent::where('id', $offerSentid)->update(['content'=>$updatedHTML]);
                        }
                    }
                }
                //For Adding Recipients Data in Template HTML (RJ) END

                $is_sender = 0;
                $status = 0;
                $sign_ip='';
                $sign_date = '';
                $uniqid = uniqid();

                if($invitation_order == 1) {
                    $status = 1;
                }

                //check authentication via pic code
                $pin_code = 0;
                if($authentication == 4 && $iframeURL != 1) {
                    $pin_code = rand(10000, 99999);
                }

                if($isPaid == 0) {
                    if($signatureLeft >= 1) {
                        $offerDetailId = $sentcontract->addOffersentdetails($offerSentid,$recpid,$status,$sign_date,$sign_ip,$user_details,$is_sender,$reciver_email,$fullname,$company,$invitation_order,$uniqid,  '',$confirmation,$role,$id_attachment,$authentication,$paypal_amount,$pin_code,$invitation_type);
                        if(!$utility->isSuperuser($user_id)) {
                            if($authentication == 9 || $authentication == 10 || $authentication == 11) {
                                $signatureLeft = $signatureLeft-2;
                            } else {
                                $signatureLeft--;
                            }
                            //$signatureLeft--;
                        }
                    } else {
                        return 0;
                    }
                } else {
                    $offerDetailId = $sentcontract->addOffersentdetails($offerSentid,$recpid,$status,$sign_date,$sign_ip,$user_details,$is_sender,$reciver_email,$fullname,$company,$invitation_order,$uniqid,  '',$confirmation,$role,$id_attachment,$authentication,$paypal_amount,$pin_code,$invitation_type);
                }

                if(!empty($viewingDownloadingDataArray)) {
                    Offersentdetails::where('id', $offerDetailId)->update(['viewing_downloading' => json_encode($viewingDownloadingDataArray)]);
                }

                $firstname = $user_details['full_name'];
                $lastname = "";

                if(preg_match('/\s/',$user_details['full_name']) > 0) {
                    $lastname = substr($user_details['full_name'], strrpos($user_details['full_name'], ' ') + 1);
                    $divdedname = explode(" ", $user_details['full_name']);
                    $firstname = array_slice($divdedname, 0, -1);
                    $firstname = implode(" ", $firstname);
                    $lastname = end($divdedname);
                }

                $recipientDetailsWebHook = array();
                $recipientDetailsWebHook['id'] = $user_details['id'];
                $recipientDetailsWebHook['first_name'] = $firstname;
                $recipientDetailsWebHook['last_name'] = $lastname;
                $recipientDetailsWebHook['email'] = $user_details['email'];
                $recipientDetailsWebHook['company'] = (isset($user_details['company']) && $user_details['company'] != '' ? $user_details['company'] : '');
                $recipientDetailsWebHook['reg_no'] = (isset($user_details['reg_no']) && $user_details['reg_no'] != '' ? $user_details['reg_no'] : '');
                $recipientDetailsWebHook['personnr'] = (isset($user_details['personnr']) && $user_details['personnr'] != '' ? $user_details['personnr'] : '');
                $recipientDetailsWebHook['mobile'] = (isset($user_details['mobile']) && $user_details['mobile'] != '' ? $user_details['mobile'] : '');
                $recipientDetailsWebHook['address'] = (isset($user_details['address']) && $user_details['address'] != '' ? $user_details['address'] : '');
                $recipientDetailsWebHook['city'] = (isset($user_details['city']) && $user_details['city'] != '' ? $user_details['city'] : '');
                $recipientDetailsWebHook['zipcode'] = (isset($user_details['zipcode']) && $user_details['zipcode'] != '' ? $user_details['zipcode'] : '');
                $recipientDetailsWebHook['signing_method'] = $signingMethods;
                array_push($pushWebHookDetails, $recipientDetailsWebHook);
                
                if($signing_url == 1) {
                    $signUrl[] = $domain_name.'document/view/'.$offerDetailId.'/'.$uniqid;
                }

                $parentId = $utility->getParent($user_id);
                $totalRemSMS = $utility->checkRemainingSMS($parentId);
                if($invitation_order == 1) {
                    //send document key password via SMS starting
                    if(isset($sendPasswordWithSMS) && $sendPasswordWithSMS == 'sndpas') {
                        $sendPasswordText = $sendSetPassword;
                        $sendPasswordTextMessage = $getTranslation[1039]." ".$sendPasswordText;
                        $utility->sendsms($mobileno, urldecode($sendPasswordTextMessage));
                        $utility->updateSentsms($parentId);
                        $viewingAndDownloadingSMSLogsData = array(
                            "user_id" => $user_id,
                            "offer_sent_id" => $offerSentid,
                            "offersent_detail_id" => $offerDetailId,
                            "phone_number" => $mobileno,
                            "message" => $sendPasswordTextMessage,
                            "section_name" => "Viewing And Downloading"
                        );
                        $utility->addItem("sms_logs", $viewingAndDownloadingSMSLogsData);
                        if(!$utility->isSuperuser($user_id)) {
                            $whereUserLogin['id'] = $parentId;
                            $updateRemainingSMS['total_remaing_sms'] = $totalRemSMS-1;
                            $utility->updateItem('users_login', $whereUserLogin, $updateRemainingSMS);
                        }
                    }
                    //send document key password via SMS ending
                    if($invitation_type == 1 ||  $invitation_type == 2 || $invitation_type == 6) {
                        //exec("nohup lynx -dump $domain_name/api/v2/sendcontract/sendcontractnotification/$offerSentid/$offerDetailId > /dev/null 2>&1 &");
                        if($signing_url != 1 && $iframeURL != 1 && $invitation_type != 6) {
                            $sentcontract->getSendcontractnotification($offerSentid,$offerDetailId);
                        }
                       
                        if(($invitation_type == 2 || $invitation_type == 6) && $iframeURL != 1) {
                            if($totalRemSMS > 0) {
                                $message = "";
                                if((isset($data["invitation_sms"]) && $data["invitation_sms"] != "") || (isset($data["invitation_message"]) && $data["invitation_message"] != "")) {
                                    $recnamename = explode(' ', $recipient['people']['name']);
                                    $invitationSMSMessage = (isset($data["invitation_sms"]) && $data["invitation_sms"] != '' ? $data["invitation_sms"] : (isset($data["invitation_message"]) && $data["invitation_message"] != '' ? $data["invitation_message"] : ''));
                                    if(strpos($invitationSMSMessage, '{rec_name}') !== false || strpos($invitationSMSMessage, '{rec_firstname}') !== false || strpos($invitationSMSMessage, '{full_name}') !== false || strpos($invitationSMSMessage, '{document_name}') !== false || strpos($invitationSMSMessage, '{offer_url}') !== false) {
                                        $invitationSMSMessage = str_replace("{rec_name}", $recipient['people']['name'], $invitationSMSMessage);
                                        $invitationSMSMessage = str_replace("{rec_firstname}", $recnamename[0], $invitationSMSMessage);
                                        $invitationSMSMessage = str_replace("{full_name}", $userdata->full_name, $invitationSMSMessage);
                                        $invitationSMSMessage = str_replace("{document_name}", $visible_name, $invitationSMSMessage);
                                        $invitationSMSMessage = str_replace("{offer_url}", ($domain_name.'document/view/'.$offerDetailId.'/'.$uniqid), $invitationSMSMessage);
                                    } else {
                                        $invitationSMSMessage = str_replace("[recipient.fullname]", $recipient['people']['name'], $invitationSMSMessage);
                                        $invitationSMSMessage = str_replace("[recipient.firstname]", $recnamename[0], $invitationSMSMessage);
                                        $invitationSMSMessage = str_replace(["[Me.name]", "[me.name]"], [$userdata->full_name, $userdata->full_name], $invitationSMSMessage);
                                        $invitationSMSMessage = str_replace("[document_name]", $visible_name, $invitationSMSMessage);
                                        $invitationSMSMessage = str_replace("[offer_url]", ($domain_name.'document/view/'.$offerDetailId.'/'.$uniqid), $invitationSMSMessage);
                                    }

                                    $message .= $invitationSMSMessage;
                                } else {
                                    $message .= $getTranslation[318].' '.$userdata->full_name.',%0a';
                                    $message .= $userdata->full_name.' '.$getTranslation[463].': '.$visible_name.'.%0a '.$getTranslation[786].':%0a'.($domain_name.'document/view/'.$offerDetailId.'/'.$uniqid);
                                }
                                $utility->sendsms($mobileno,urldecode($message));
                                //added new code starting
                                $utility->updateSentsms($parentId);
                                //added new code ending
                                //add sms logs starting
                                $smsLogsData = array(
                                    "user_id" => $user_id,
                                    "offer_sent_id" => $offerSentid,
                                    "offersent_detail_id" => $offerDetailId,
                                    "phone_number" => $mobileno,
                                    "message" => $message,
                                    "section_name" => "Invitation SMS through API"
                                );
                                $utility->addItem("sms_logs", $smsLogsData);
                                //add sms logs ending
                                if(!$utility->isSuperuser($user_id)) {
                                    $whereUserLogin['id'] = $parentId;
                                    $updateRemainingSMS['total_remaing_sms'] = $totalRemSMS-1;
                                    $utility->updateItem('users_login', $whereUserLogin, $updateRemainingSMS);
                                }
                            }
                        }   //invitation type 2 ends here
                    }

                    if($invitation_type == 4 && $iframeURL != 1) {
                        $parties['partyname'] = $fullname;
                        $parties['offerDetailId'] = $offerDetailId;
                        $parties['uniqid'] = $uniqid;
                        array_push($meetingArray, $parties);
                    }
                } if($invitation_type == 3 && $iframeURL != 1) {
                    $offer_url =  $domain_name.'document/view/'.$offerDetailId.'/'.$uniqid;
                    $posDetails['user_id'] = $user_id;
                    $posDetails['offer_url'] = $offer_url;
                    $posDetails['offer_id'] = $offerSentid;
                    $posDetails['sent_detail_id'] = $offerDetailId;
                    $posDetails['invitation_order'] = $invitation_order;
                    $utility->addItem("pushed_ipad",$posDetails);
                    $utility->createThumbnail($offerSentid);
                }
            }
            $getRecSettings++;
        }//recipients loop end

        if($parentSettings['webhook_settings'] != NULL) {
            try {
                $webhooksettings = json_decode($parentSettings['webhook_settings'], true);
                if(isset($webhooksettings['for_senddoc']) && $webhooksettings['for_senddoc'] == 1) {
                    $sign_date = date("Y-m-d H:i:s");
                    $sign_ip = (isset($_SERVER['REMOTE_ADDR']) && $_SERVER['REMOTE_ADDR'] != '' ? $_SERVER['REMOTE_ADDR'] : '');

                    $offerSendDetailsOfSender = Offersentdetails::where(["offer_sent_id" => $offerSentid, 'is_sender' => 1])->select('id', 'unique_id')->first();
                    $senderdetailsArray = array();
                    $senderdetailsArray["first_name"] = $userArrar["full_name"];
                    $senderdetailsArray["last_name"] = (isset($userArrar["last_name"]) && $userArrar["last_name"]!= '' ? $userArrar["last_name"] : '');
                    $senderdetailsArray["company"] = (isset($userArrar["company"]) && $userArrar["company"] != '' ? $userArrar["company"] : '');
                    $senderdetailsArray["email"] = $userArrar["email"];
                    $senderdetailsArray["reg_no"] = (isset($userArrar["reg_no"]) ? $userArrar["reg_no"] : '');
                    $senderdetailsArray["address"] = (isset($userArrar["address"]) ? $userArrar["address"] : '');
                    $senderdetailsArray["telephone"] = (isset($userArrar["telephone"]) ? $userArrar["telephone"] : '');
                    $senderdetailsArray["post_code"] = (isset($userArrar["post_code"]) ? $userArrar["post_code"] : '');
                    $senderdetailsArray["city"] = (isset($userArrar["city"]) ? $userArrar["city"] : '');
                    $senderdetailsArray["id"] = $userdata->user_id;
                    
                    //document details array
                    $doc_detaildata = array();
                    $doc_detaildata['document_sentID'] = $offerSentid;
                    $doc_detaildata['document_name'] = $visible_name;
                    $doc_detaildata['document_sent_date'] = $sign_date;
                    $doc_detaildata['document_status'] = 'sent';
                    $doc_detaildata['document_url'] = $domain_name.'document/view/'.$offerSendDetailsOfSender['id'].'/'.$offerSendDetailsOfSender['unique_id'];
                    
                    //main array to send to webhook
                    $doc_data = array();
                    
                    $doc_data['document_details'] = $doc_detaildata;
                    $doc_data['sender_details'] = $senderdetailsArray;
                    $doc_data['recipient_details'] = $pushWebHookDetails;

                    //added by me (MS) 11 June 2020 
                    $getUsersData = User::where('id', $user_id)->select('super_access_token')->first();
                    $externalData = [];
                    $externalData['document_id'] = $offerSentid;
                    $externalData['access_token'] = $getUsersData['super_access_token'];
                    $externalData['external_response'] = 1;
                    $getResponseOfSpecificDocumentDetail = $this->getSpecificdocumentdetail($externalData);
                    if(isset($webhooksettings['webhook_templates']) && !empty($webhooksettings['webhook_templates']) && $templateId != '') {
                        if(in_array($templateId, $webhooksettings['webhook_templates'])) {
                            $utility->postSenddatatowebhook($webhooksettings['webhook_URL'], $getResponseOfSpecificDocumentDetail->getData());
                        }
                    } else {
                        $utility->postSenddatatowebhook($webhooksettings['webhook_URL'], $getResponseOfSpecificDocumentDetail->getData());
                    }
                    $addupdateapiaccesslogs = $utility->addupdateapiaccesslogs($user_id, 'webhook/senddocument', $getResponseOfSpecificDocumentDetail->getData(), -1);
                    //added by me (MS) 11 June 2020 ending
                }
            } catch (\Exception $e) {
            }// catche ends
        }

        if($userData->payment_version == 2) {
            $userobj['users_signatures'] = $signatureLeft;
        } else {
            $userobj['monthly_signature'] = $signatureLeft;
        }
        
        //added by (MS) for change status from saved to trail starting
        $userobj['savedfrom_contract'] = 0;
        //added by (MS) for change status from saved to trail ending
        $utility->updateItem("users_login",$whereu,$userobj);
        //19-july-2019 starting

        if(!empty($signUrl)) {
            return $signUrl;
        } else {
            return $offerSentid;
        }
        //19-july-2019 ending
        //return $offerSentid;
    }

    public function sendcontractnewtest($offerSentid,$data,$user_id,$visible_name,$invitation_message,$lang,$signing_url="",$extraFields="",$organizationField="",$templateFlag='',$iframeURL='') {
        $domain_name =  asset('/');
        $utility = new Utility();
        $mymailer = new mymailer();
        $sentcontract = new sendcontractController();
        /*offer add in sent details recipientDetailsEncrypt*/
        $isTemplate = (isset($data['template_id']) && $data['template_id'] != '' ? true : false);
        $templateId = (isset($data['template_id']) && $data['template_id'] != '' ? $data['template_id'] : '');
        $userdata = $utility->getParentDetails($user_id);
        $getTranslation = $utility->GeneralTranslations($lang);
        $parent_id = $utility->getParent($user_id);
        $parentSettings = settings::where('user_id', $parent_id)->select('webhook_settings')->first();

        $recipients = json_decode($data['sympa_data'], true);
        $LinkedOfferSentId = (isset($data['linkedoffersentid']) && $data['linkedoffersentid'] != '' ? $data['linkedoffersentid'] : '');

        //getting info and manipulating about super user and normal user starting
        $sender_company = (isset($data["sender_company"]) && !empty($data["sender_company"]) ? $data["sender_company"] : $userdata->company);
        $userArrar['full_name'] = $userdata->full_name;
        $userArrar['email'] = $userdata->email;
        $userArrar['company'] = $sender_company;
        $userArrar['reg_no'] = (isset($data["sender_reg_no"]) && !empty($data["sender_reg_no"]) ? $data["sender_reg_no"] : $userdata->reg_no);
        $userArrar['address'] = (isset($data["sender_address"]) && !empty($data["sender_address"]) ? $data["sender_address"] : $userdata->address);
        $userArrar['telephone'] = (isset($data["sender_telephone"]) && !empty($data["sender_telephone"]) ? $data["sender_telephone"] : $userdata->telephone);
        $userArrar['post_code'] = (isset($data["sender_post_code"]) && !empty($data["sender_post_code"]) ? $data["sender_post_code"] : $userdata->post_code);
        $userArrar['city'] = (isset($data["sender_city"]) && !empty($data["sender_city"]) ? $data["sender_city"] : $userdata->city);
        // getting info and manipulating about super user and normal user ending

        //add this variable in beta condition
        $sign_date=date("Y-m-d H:i:s");
        $sign_ip = $_SERVER['REMOTE_ADDR'];
        $recpid = 0;
        $is_sender = 1;
        $invitation_order = 1;
        $status=4;
        $uniqidSender = uniqid();
        $confirmation=$role=$id_attachment=$authentication=$pin_code=$invitation_type=$paypal_amount = 0;
        $senderOfferDetailId = $sentcontract->addOffersentdetails($offerSentid,$recpid,$status,$sign_date,$sign_ip,$userArrar,$is_sender,$userArrar['email'],$userdata->full_name,$sender_company,$invitation_order,$uniqidSender,'',$confirmation,$role,$id_attachment,$authentication,$paypal_amount,$pin_code,$invitation_type);

        /*get user signature */
        $whereu['id'] = $user_id;
        $userData = $utility->getItem("users_login", $whereu);
        if($userData->parent_id == 0) {
            $isPaid = $userData->is_paid;
            if($userData->payment_version == 2){
                $userData->monthly_signature = $userData->users_signatures;    
            }
            $signatureLeft = $userData->monthly_signature;
        } else {
            $whereu['id'] = $userData->parent_id;
            $userData = $utility->getItem("users_login", $whereu);
            $isPaid = $userData->is_paid;
            if($userData->payment_version == 2){
                $userData->monthly_signature = $userData->users_signatures;    
            }
            $signatureLeft = $userData->monthly_signature;
        }

        //manuiplation of document fields starting
        if(isset($data['documentfields']) && !empty($data['documentfields'])) {
            $documents = json_decode($data['documentfields'], true);
            $documentArray = [];
            foreach($documents as $docKey => $docValue) {
                $documentFieldsArray = [];
                foreach($docValue['document_fields'] as $docFldKey => $docFldValue) {
                    array_push($documentFieldsArray, array('documentFieldName' => $docFldKey, 'documentFieldValue' => $docFldValue));
                }
            }
            $documentArray = json_encode($documentFieldsArray);
        }
        //manuiplation of document fields ending

        //new function
        $RecipientNum = 0;
        $signUrl = $pushWebHookDetails = [];  //19-July-2019
        foreach($recipients['Signers'] as $key => $recipient) {
            $recipientDetails = $specificCustomDetailsArray = array();
            $EncryptrecipientDetails = array();
            if(isset($recipient) && !empty($recipient)) {
                $extraAndDocumentFields = $organizationArray = $detailsArray = array();
                $recipientRoleNew = $signingMethods = '';

                //manuiplation of people fields array for extra and document fields starting
                $recipientKeys = array('name', 'email', 'personal_no', 'mobile', 'address', 'city', 'zipcode');
                if(isset($recipient['people_fields']) && !empty($recipient['people_fields'])) {
                    $extAndDocFldsArray = array();
                    foreach($recipient['people_fields'] as $pepleFldKey => $pepleFldValue) {
                        if(!in_array($pepleFldKey, $recipientKeys)) {
                            array_push($extAndDocFldsArray, array('extAndDocFieldName' => $pepleFldKey, 'extAndDocFieldValue' => $pepleFldValue));
                        }
                    }
                    $extraAndDocumentFields = json_encode($extAndDocFldsArray);
                }
                //manuiplation of people fields array for extra and document fields ending
                //manuiplation of organization fields starting
                if(isset($recipient['organization_fields']) && !empty($recipient['organization_fields'])) {
                    $orgArray = array();
                    foreach($recipient['organization_fields'] as $orgKey => $orgValue) {
                        //commment this line when work will be completed in sendtemplate starting
                        //$orgKey = str_replace('organization', 'org', $orgKey);
                        //commment this line when work will be completed in sendtemplate ending
                        array_push($orgArray, array('orgFieldName' => $orgKey, 'orgFieldValue' => $orgValue));
                    }
                    $organizationArray = json_encode($orgArray);
                }
                //manuiplation of organization fields ending
                //manuiplation of details fields starting
                if(isset($recipient['details']) && !empty($recipient['details'])) {
                    $detArray = array();
                    foreach($recipient['details'] as $detailsKey => $detailsValue) {
                        array_push($detArray, array('detailsFieldName' => $detailsKey, 'detailsFieldValue' => $detailsValue));
                    }
                    $detailsArray = json_encode($detArray);
                }
                //manuiplation of details fields ending
                //new function
                $organizationName = (isset($recipient['organization_fields']['name']) && $recipient['organization_fields']['name'] != '' ? $recipient['organization_fields']['name'] : '');
                $recipient['Email'] = preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $recipient['Email']);
                $whererecipient['email'] = Tcrypt::encrypter($recipient['Email']);
                $whererecipient['registerby'] = $user_id;
                $recipientDetails = $utility->getItem("customers", $whererecipient);
                unset($recipientDetails->last_name);
                if(empty($recipientDetails)) {

                    $recipientDetails['registerby'] = $user_id;
                    $recipientDetails['email'] = $recipient['Email'];
                    $recipientDetails['full_name'] = $recipient['Name'];
                    $recipientDetails['personnr'] = (isset($recipient['people_fields']['personal_no']) && $recipient['people_fields']['personal_no'] != '' ? $recipient['people_fields']['personal_no'] : '');
                    $recipientDetails['mobile'] = (isset($recipient['people_fields']['mobile']) && !empty($recipient['people_fields']['mobile']) ? $recipient['people_fields']['mobile'] : "");
                    //we've both keys zip and zipcode one of them is new and other one is old
                    $recipientDetails['zipcode'] = (isset($recipient['people_fields']['zipcode']) && !empty($recipient['people_fields']['zipcode']) ? $recipient['people_fields']['zipcode'] : "");
                    $recipientDetails['zip'] = (isset($recipient['people_fields']['zipcode']) && !empty($recipient['people_fields']['zipcode']) ? $recipient['people_fields']['zipcode'] : "");
                    $recipientDetails['city'] = (isset($recipient['people_fields']['city']) && !empty($recipient['people_fields']['city']) ? $recipient['people_fields']['city'] : "");
                    $recipientDetails['address'] = (isset($recipient['people_fields']['address']) && !empty($recipient['people_fields']['address']) ? $recipient['people_fields']['address'] : "");
                    $recipientDetails['company'] = $organizationName;

                    if(isset($recipient['organization_fields']['org_no']) && $recipient['organization_fields']['org_no'] != '') {
                        $recipientDetails['reg_no'] = $recipient['organization_fields']['org_no'];
                    }
                    //update organization and linked with recipient starting
                    if($organizationName != '') {
                        $getOrganization = Organizations::where('registerby', $user_id)->where('name', Tcrypt::encrypter($organizationName))->select('id')->first();
                        if($getOrganization) {
                            $EncryptrecipientDetails['organization_id'] = $getOrganization['id'];
                        } else {
                            $orgNo = (isset($recipient['organization_fields']['org_no']) && $recipient['organization_fields']['org_no'] != '' ? $recipient['organization_fields']['org_no'] : '');
                            $orgPhone = (isset($recipient['organization_fields']['phone']) && $recipient['organization_fields']['phone'] != '' ? $recipient['organization_fields']['phone'] : '');
                            $orgAddress = (isset($recipient['organization_fields']['address']) && $recipient['organization_fields']['address'] != '' ? $recipient['organization_fields']['address'] : '');
                            $orgCity = (isset($recipient['organization_fields']['city']) && $recipient['organization_fields']['city'] != '' ? $recipient['organization_fields']['city'] : '');
                            $orgZipCode = (isset($recipient['organization_fields']['zipcode']) && $recipient['organization_fields']['zipcode'] != '' ? $recipient['organization_fields']['zipcode'] : '');
                            $getOrganizationId = Organizations::insertGetId(['name' => Tcrypt::encrypter($organizationName), 'reg_no' => $orgNo, 'address' => $orgAddress, 'mobile' => $orgPhone, 'zip' => $orgZipCode, 'city' => $orgCity]);
                            $EncryptrecipientDetails['organization_id'] = $getOrganizationId;
                        }
                        //insert organization fields into user_details object starting
                        if($EncryptrecipientDetails['organization_id'] != '') {
                            $recipientDetails['org_name'] = (isset($organizationName) && $organizationName != '' ? $organizationName : '');
                            $recipientDetails['org_reg_no'] = (isset($orgNo) && $orgNo != '' ? $orgNo : '');
                            $recipientDetails['org_mobile'] = (isset($orgPhone) && $orgPhone != '' ? $orgPhone : '');
                            $recipientDetails['org_address'] = (isset($orgAddress) && $orgAddress != '' ? $orgAddress : '');
                            $recipientDetails['org_city'] = (isset($orgCity) && $orgCity != '' ? $orgCity : '');
                            $recipientDetails['org_zip'] = (isset($orgZipCode) && $orgZipCode != '' ? $orgZipCode : '');
                            $recipientDetails['org_id'] = ($EncryptrecipientDetails['organization_id'] != '' ? $EncryptrecipientDetails['organization_id'] : '');
                        }
                        //insert organization fields into user_details object ending
                    }
                    //update organization and linked with recipient ending

                    $EncryptrecipientDetails['email'] = Tcrypt::encrypter($recipient['Email']);
                    $EncryptrecipientDetails['full_name'] = Tcrypt::encrypter($recipient['Name']);
                    $EncryptrecipientDetails['mobile'] = (isset($recipient['people_fields']['mobile']) && !empty($recipient['people_fields']['mobile']) ? $recipient['people_fields']['mobile'] : "");
                    $EncryptrecipientDetails['zip'] = (isset($recipient['people_fields']['zipcode']) && !empty($recipient['people_fields']['zipcode']) ? $recipient['people_fields']['zipcode'] : "");
                    $EncryptrecipientDetails['city'] = (isset($recipient['people_fields']['city']) && !empty($recipient['people_fields']['city']) ? $recipient['people_fields']['city'] : "");
                    $EncryptrecipientDetails['address'] = (isset($recipient['people_fields']['address']) && !empty($recipient['people_fields']['address']) ? $recipient['people_fields']['address'] : "");
                    $EncryptrecipientDetails['company'] = ($organizationName != '' ? Tcrypt::encrypter($organizationName) : '');
                    $EncryptrecipientDetails['registerby'] = $user_id;
                    $recReturnId = $utility->addItem("customers", $EncryptrecipientDetails);
                    $recipientDetails['id'] = $recReturnId;
                } else {
                    $recipientDetails = (array)$recipientDetails;
                    $recipientDetails['registerby'] = $user_id;
                    $recipientDetails['email'] = $recipient['Email'];
                    $recipientDetails['full_name'] = $recipient['Name'];
                    $recipientDetails['recipient_role'] = (isset($recipient['details']['recipient_role']) && $recipient['details']['recipient_role'] != '' ? $recipient['details']['recipient_role'] : '');
                    //adding Personal No, with separate key for BankID
                    $recipientDetails['personnr'] = (isset($recipient['people_fields']['personal_no']) && $recipient['people_fields']['personal_no'] != '' ? $recipient['people_fields']['personal_no'] : '');
                    $recipientDetails['mobile'] = (isset($recipient['people_fields']['mobile']) && $recipient['people_fields']['mobile'] != '' ? $recipient['people_fields']['mobile'] : '');
                    //we've both keys zip and zipcode one of them is new and other one is old
                    $recipientDetails['zipcode'] = (isset($recipient['people_fields']['zipcode']) && $recipient['people_fields']['zipcode'] != '' ? $recipient['people_fields']['zipcode'] : '');
                    $recipientDetails['zip'] = (isset($recipient['people_fields']['zipcode']) && $recipient['people_fields']['zipcode'] != '' ? $recipient['people_fields']['zipcode'] : '');
                    $recipientDetails['city'] = (isset($recipient['people_fields']['city']) && $recipient['people_fields']['city'] != '' ? $recipient['people_fields']['city'] : '');
                    $recipientDetails['address'] = (isset($recipient['people_fields']['address']) && $recipient['people_fields']['address'] != '' ? $recipient['people_fields']['address'] : '');

                    if(isset($recipient['organization_fields']['org_no']) && $recipient['organization_fields']['org_no'] != ''){
                        $recipientDetails['reg_no'] = $recipient['organization_fields']['org_no'];
                    } if(isset($recipientDetails['company']) && $recipientDetails['company'] != '') {
                        $recipientDetails['company'] = Tcrypt::decrypter($recipientDetails['company']);
                    } else {
                        $recipientDetails['company'] = $organizationName;
                    }

                    $recipientDetailsEncrypt['email'] = (isset($recipient['Email']) && !empty($recipient['Email']) ? Tcrypt::encrypter($recipient['Email']) : '');
                    $recipientDetailsEncrypt['full_name'] = (isset($recipient['Name']) && !empty($recipient['Name']) ? Tcrypt::encrypter($recipient['Name']) : '');
                    
                    if($organizationName != '') {
                        $recipientDetailsEncrypt['company'] = Tcrypt::encrypter($organizationName);
                    } if(isset($recipient['people_fields']['mobile']) && !empty($recipient['people_fields']['mobile'])) {
                        $recipientDetailsEncrypt['mobile'] = $recipient['people_fields']['mobile'];
                    } if(isset($recipient['people_fields']['zipcode']) && !empty($recipient['people_fields']['zipcode'])) {
                        $recipientDetailsEncrypt['zip'] = $recipient['people_fields']['zipcode'];
                    } if(isset($recipient['people_fields']['city']) && !empty($recipient['people_fields']['city'])) {
                        $recipientDetailsEncrypt['city'] = $recipient['people_fields']['city'];
                    } if(isset($recipient['people_fields']['address']) && !empty($recipient['people_fields']['address'])) {
                        $recipientDetailsEncrypt['address'] = $recipient['people_fields']['address'];
                    } if(isset($recipient['organization_fields']['org_no']) && !empty($recipient['organization_fields']['org_no'])) {
                        $recipientDetailsEncrypt['reg_no'] = $recipient['organization_fields']['org_no'];
                    } if(isset($recipient['people_fields']['personal_no']) && !empty($recipient['people_fields']['personal_no'])) {
                        $recipientDetailsEncrypt['personnr'] = $recipient['people_fields']['personal_no'];
                    }
                    if($organizationName != '') {
                        $getOrganization = Organizations::where('registerby', $user_id)->where('name', Tcrypt::encrypter($organizationName))->select('id', 'name', 'reg_no', 'address', 'mobile', 'zip', 'city')->first();
                        if($getOrganization) {
                            $EncryptrecipientDetails['organization_id'] = $getOrganization['id'];
                            //insert organization fields into user_details object starting
                            if($EncryptrecipientDetails['organization_id'] != '') {
                                $recipientDetails['org_name'] = ($getOrganization['name'] != '' ? Tcrypt::decrypter($getOrganization['name']) : '');
                                $recipientDetails['org_reg_no'] = ($getOrganization['reg_no'] != '' ? $getOrganization['reg_no'] : '');
                                $recipientDetails['org_mobile'] = ($getOrganization['mobile'] != '' ? $getOrganization['mobile'] : '');
                                $recipientDetails['org_address'] = ($getOrganization['address'] != '' ? $getOrganization['address'] : '');
                                $recipientDetails['org_city'] = ($getOrganization['city'] != '' ? $getOrganization['city'] : '');
                                $recipientDetails['org_zip'] = ($getOrganization['zip'] != '' ? $getOrganization['zip'] : '');
                                $recipientDetails['org_id'] = ($getOrganization['id'] != '' ? $getOrganization['id'] : '');
                            }
                            //insert organization fields into user_details object ending
                        }
                    }
                    $whereUpdate['id'] = $recipientDetails['id'];
                    $whereUpdate['registerby'] = $user_id;
                    $utility->updateItem("customers",$whereUpdate,$recipientDetailsEncrypt);
                }

                $recipientRoleNew = (isset($recipient['details']['recipient_role']) && $recipient['details']['recipient_role'] != '' ? $recipient['details']['recipient_role'] : '');

                //extra, organization and document fields code starting
                if(isset($extraAndDocumentFields) && !empty($extraAndDocumentFields)) {
                    $recipientDetails['extanddoc_fields'] = $extraAndDocumentFields;
                } if(isset($organizationArray) && !empty($organizationArray)) {
                    $recipientDetails['organization_fields'] = $organizationArray;
                } if(isset($detailsArray) && !empty($detailsArray)) {
                    $recipientDetails['details_fields'] = $detailsArray;
                } if(isset($documentArray) && !empty($documentArray)) {
                    $recipientDetails['document_fields'] = $documentArray;
                }
                //extra, organization and document fields code ending
                
                $mobileno = '';
                /* if(isset($recipient['people_fields']['mobile'])) {
                    $mobileno = $recipient['people_fields']['mobile'];
                } elseif(isset($recipientDetails['mobile'])) {
                    $mobileno = $recipientDetails['mobile'];
                } else {
                    $mobileno = '';
                } */

                $recpid = (isset($recipientDetails['id']) && $recipientDetails['id'] != '' ? $recipientDetails['id'] : $recReturnId);

                $fullname = isset($recipientDetails['full_name']) ? $recipientDetails['full_name'] : $signersNameArray[$key];
                $recipient['Email'] = preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $recipient['Email']);

                $reciver_email = isset($recipient['Email']) ? $recipient['Email'] : '';
                $company = (isset($recipientDetails['company']) && $recipientDetails['company'] != '' ? $recipientDetails['company'] : (isset($recipient['organization_fields']['name']) && $recipient['organization_fields']['name'] != '' ? $recipient['organization_fields']['name'] : ''));

                //invitation_type (invitation_through) 1 for email, 2 for email & sms, 3 for pos, 4 for in meeting
                //invitation_order defualt value is 1
                //confirmation (offer_confirmation) 1 for email & 2 for email & sms
                //authentication 1 for regular signature, 2 for paypal, 3 for bankID & 4 for pin via sms
                //role old one was like 1 for sign & 2 for review/new one is like Manager, CEO, User & so on
                //id_attachment 0 for no request & 1 for attachment
                //New code according to data manuiplation stating
                $invitation_type = $invitation_order = $confirmation = $authentication = 1;
                $id_attachment = 0;
                if(isset($recipient['details']['invitation_type'])) {
                    if($recipient['details']['invitation_type'] == 'email' || $recipient['details']['invitation_type'] == 'Email' || $recipient['details']['invitation_type'] == 'EMAIL') {
                        $invitation_type = 1;
                    } elseif($recipient['details']['invitation_type'] == 'email and sms' || $recipient['details']['invitation_type'] == 'Email And SMS' || $recipient['details']['invitation_type'] == 'EMAIL AND SMS' || $recipient['details']['invitation_type'] == 'email & sms' || $recipient['details']['invitation_type'] == 'Email & SMS' || $recipient['details']['invitation_type'] == 'EMAIL & SMS') {
                        $invitation_type = 2;
                    } elseif($recipient['details']['invitation_type'] == 'pos' || $recipient['details']['invitation_type'] == 'POS' || $recipient['details']['invitation_type'] == 'Pos') {
                        $invitation_type = 3;
                    } elseif($recipient['details']['invitation_type'] == 'in meeting' || $recipient['details']['invitation_type'] == 'In Meeting' || $recipient['details']['invitation_type'] == 'IN MEETING' || $recipient['details']['invitation_type'] == 'in-meeting' || $recipient['details']['invitation_type'] == 'In-Meeting' || $recipient['details']['invitation_type'] == 'IN-MEETING') {
                        $invitation_type = 4;
                    }
                } if(isset($recipient['details']['invitation_order'])) {
                    $invitation_order = $recipient['details']['invitation_order'];
                } if(isset($recipient['details']['confirmation'])) {
                    if($recipient['details']['confirmation'] == 'email' || $recipient['details']['confirmation'] == 'Email' || $recipient['details']['confirmation'] == 'EMAIL') {
                        $confirmation = 1;
                    } elseif($recipient['details']['confirmation'] == 'email and sms' || $recipient['details']['confirmation'] == 'Email And SMS' || $recipient['details']['confirmation'] == 'EMAIL AND SMS' || $recipient['details']['confirmation'] == 'email & sms' || $recipient['details']['confirmation'] == 'Email & SMS' || $recipient['details']['confirmation'] == 'EMAIL & SMS') {
                        $confirmation = 2;
                    }
                } if(isset($recipient['details']['authentication'])) {
                    if($recipient['details']['authentication'] == 'regular signature' || $recipient['details']['authentication'] == 'Regular Signature' || $recipient['details']['authentication'] == 'REGULAR SIGNATURE') {
                        $authentication = 1;
                        $signingMethods = 'E-signature';
                    } elseif($recipient['details']['authentication'] == 'paypal' || $recipient['details']['authentication'] == 'Paypal' || $recipient['details']['authentication'] == 'PAYPAL' || $recipient['details']['authentication'] == 'pay pal' || $recipient['details']['authentication'] == 'Pay Pal' || $recipient['details']['authentication'] == 'PAY PAL') {
                        $authentication = 2;
                    } elseif($recipient['details']['authentication'] == 'bankID' || $recipient['details']['authentication'] == 'BankID' || $recipient['details']['authentication'] == 'BANKID') {
                        $authentication = 3;
                        $signingMethods = 'BankID';
                    } elseif($recipient['details']['authentication'] == 'pin via sms' || $recipient['details']['authentication'] == 'Pin Via SMS' || $recipient['details']['authentication'] == 'PIN VIA SMS') {
                        $authentication = 4;
                        $signingMethods = 'PIN via SMS';
                    } elseif($recipient['details']['authentication'] == 'attest' || $recipient['details']['authentication'] == 'at test' || $recipient['details']['authentication'] == 'Attest' || $recipient['details']['authentication'] == 'At test') {
                        $signingMethods = 'Attest';
                        if(!isset($recipient['people_fields']['role'])) {
                            $recipient['people_fields']['role'] = 2;
                            $authentication = 1;
                        }
                    } elseif($recipient['details']['authentication'] == 'view only' || $recipient['details']['authentication'] == 'viewonly' || $recipient['details']['authentication'] == 'View Only' || $recipient['details']['authentication'] == 'ViewOnly' || $recipient['details']['authentication'] == 'Viewonly') {
                        $authentication = 6;
                        $signingMethods = 'Read only';
                    }
                } if(isset($recipient['details']['id_attachment'])) {
                    if($recipient['details']['id_attachment'] == 'yes' || $recipient['details']['id_attachment'] == 'Yes' || $recipient['details']['id_attachment'] == 'YES') {
                        $id_attachment = 1;
                    } elseif($recipient['details']['id_attachment'] == 'no' || $recipient['details']['id_attachment'] == 'No' || $recipient['details']['id_attachment'] == 'NO') {
                        $id_attachment = 0;
                    }
                }
                if(isset($recipient['BankId']) && !empty($recipient['BankId']) && $recipient['BankId'] == 1) {
                    $authentication = 3;
                }
                //working on senddocument function
                $role = (isset($recipient['people_fields']['role']) ? $recipient['people_fields']['role'] : 1);
                $recipientDetails['authentication'] = $authentication;
                $recipientDetails['role'] = $role;
                //New code according to data manuiplation ending

                $user_details = $recipientDetails;
                //For Adding Recipients Data in Template HTML (RJ) START
                $RecipientNum++;
                if($templateFlag) {
                    $sentData = Offersent::where('id', $offerSentid)->select('content')->first();
                    if($sentData) {
                        $OfferHTML = (isset($sentData['content']) && $sentData['content'] != '' ? Tcrypt::decrypter($sentData['content']) : '');
                        $updatedHTML = $this->setRecipientsInContentNewDocument($OfferHTML, $user_details, $RecipientNum, $LinkedOfferSentId, str_replace(' ', '', ucfirst(strtolower(trim($recipientRoleNew)))), $fullname, $data);

                        //pre defined values code starting
                        //if(isset($data['autofill_fields']) && $data['autofill_fields'] != '') {
                        if(isset($data['recipients']) && $data['recipients'] != '') {
                            //$updatedHTML = $this->setCustomFieldValues(($updatedHTML != '' ? $updatedHTML : $OfferHTML), $data, $user_details, $RecipientNum);
                        }
                        //pre defined values code ending
                        if($updatedHTML != '') {
                            $updatedHTML = Tcrypt::encrypter($updatedHTML);
                            $offerSentContentUpdate = Offersent::where('id', $offerSentid)->update(['content'=>$updatedHTML]);
                        }
                    }
                }
                //For Adding Recipients Data in Template HTML (RJ) END

                $is_sender = 0;
                $status = 0;
                $sign_ip='';
                $sign_date = '';
                $uniqid = uniqid();

                if($invitation_order == 1) {
                    $status = 1;
                }

                //check authentication via pic code
                $pin_code = 0;
                if($authentication == 4 && $iframeURL != 1) {
                    $pin_code = rand(10000, 99999);
                }

                if($isPaid == 0) {
                    if($signatureLeft >= 1) {
                        $offerDetailId = $sentcontract->addOffersentdetails($offerSentid,$recpid,$status,$sign_date,$sign_ip,$user_details,$is_sender,$reciver_email,$fullname,$company,$invitation_order,$uniqid,  '',$confirmation,$role,$id_attachment,$authentication,$paypal_amount,$pin_code,$invitation_type);
                        if(!$utility->isSuperuser($user_id)) {
                            $signatureLeft--;
                        }
                    } else {
                        return 0;
                    }
                } else {
                    $offerDetailId = $sentcontract->addOffersentdetails($offerSentid,$recpid,$status,$sign_date,$sign_ip,$user_details,$is_sender,$reciver_email,$fullname,$company,$invitation_order,$uniqid,  '',$confirmation,$role,$id_attachment,$authentication,$paypal_amount,$pin_code,$invitation_type);
                }
                
                if($signing_url == 1) {
                    $signUrl[] = $domain_name.'document/view/'.$offerDetailId.'/'.$uniqid;
                }

                if($invitation_order == 1) {
                    if($invitation_type == 1 ||  $invitation_type == 2){
                        //exec("nohup lynx -dump $domain_name/api/v2/sendcontract/sendcontractnotification/$offerSentid/$offerDetailId > /dev/null 2>&1 &");
                        if($signing_url != 1 && $iframeURL != 1) {
                            $sentcontract->getSendcontractnotification($offerSentid,$offerDetailId);
                        }
                       
                        if($invitation_type == 2 && $iframeURL != 1) {
                        //if(isset($recipient['SMS']) && !empty($recipient['SMS']) && $recipient['SMS'] == 2 && $iframeURL != 1) {
                            $parentId = $utility->getParent($user_id);
                            $totalRemSMS = $utility->checkRemainingSMS($parentId);
                            if($totalRemSMS > 0 && isset($recipient['SMS']) && !empty($recipient['SMS'])) {
                                $message = "";
                                if((isset($data["invitation_sms"]) && $data["invitation_sms"] != "") || (isset($data["invitation_message"]) && $data["invitation_message"] != "")) {
                                    $recnamename = explode(' ', ['Name']);
                                    $invitationSMSMessage = (isset($data["invitation_sms"]) && $data["invitation_sms"] != '' ? $data["invitation_sms"] : (isset($data["invitation_message"]) && $data["invitation_message"] != '' ? $data["invitation_message"] : ''));
                                    if(strpos($invitationSMSMessage, '{rec_name}') !== false || strpos($invitationSMSMessage, '{rec_firstname}') !== false || strpos($invitationSMSMessage, '{full_name}') !== false || strpos($invitationSMSMessage, '{document_name}') !== false || strpos($invitationSMSMessage, '{offer_url}') !== false) {
                                        $invitationSMSMessage = str_replace("{rec_name}", ['Name'], $invitationSMSMessage);
                                        $invitationSMSMessage = str_replace("{rec_firstname}", $recnamename[0], $invitationSMSMessage);
                                        $invitationSMSMessage = str_replace("{full_name}", $userdata->full_name, $invitationSMSMessage);
                                        $invitationSMSMessage = str_replace("{document_name}", $visible_name, $invitationSMSMessage);
                                        $invitationSMSMessage = str_replace("{offer_url}", ($domain_name.'document/view/'.$offerDetailId.'/'.$uniqid), $invitationSMSMessage);
                                    } else {
                                        $invitationSMSMessage = str_replace("[recipient.fullname]", ['Name'], $invitationSMSMessage);
                                        $invitationSMSMessage = str_replace("[recipient.firstname]", $recnamename[0], $invitationSMSMessage);
                                        $invitationSMSMessage = str_replace(["[Me.name]", "[me.name]"], [$userdata->full_name, $userdata->full_name], $invitationSMSMessage);
                                        $invitationSMSMessage = str_replace("[document_name]", $visible_name, $invitationSMSMessage);
                                        $invitationSMSMessage = str_replace("[offer_url]", ($domain_name.'document/view/'.$offerDetailId.'/'.$uniqid), $invitationSMSMessage);
                                    }

                                    $message .= $invitationSMSMessage;
                                } else {
                                    $message .= $getTranslation[318].' '.$userdata->full_name.',%0a';
                                    $message .= $userdata->full_name.' '.$getTranslation[463].': '.$visible_name.'.%0a '.$getTranslation[786].':%0a'.($domain_name.'document/view/'.$offerDetailId.'/'.$uniqid);
                                }
                                $utility->sendsms($mobileno,urldecode($message));
                                //added new code starting
                                $utility->updateSentsms($parentId);
                                //added new code ending
                                //add sms logs starting
                                $smsLogsData = array(
                                    "user_id" => $user_id,
                                    "offer_sent_id" => $offerSentid,
                                    "offersent_detail_id" => $offerDetailId,
                                    "phone_number" => $mobileno,
                                    "message" => $message,
                                    "section_name" => "Invitation SMS through API"
                                );
                                $utility->addItem("sms_logs", $smsLogsData);
                                //add sms logs ending
                                if(!$utility->isSuperuser($user_id)) {
                                    $whereUserLogin['id'] = $parentId;
                                    $updateRemainingSMS['total_remaing_sms'] = $totalRemSMS-1;
                                    $utility->updateItem('users_login', $whereUserLogin, $updateRemainingSMS);
                                }
                            }
                        }   //invitation type 2 ends here
                    }

                    if($invitation_type == 4 && $iframeURL != 1) {
                        $parties['partyname'] = $fullname;
                        $parties['offerDetailId'] = $offerDetailId;
                        $parties['uniqid'] = $uniqid;
                        array_push($meetingArray, $parties);
                    }
                } if($invitation_type == 3 && $iframeURL != 1) {
                    $offer_url =  $domain_name.'document/view/'.$offerDetailId.'/'.$uniqid;
                    $posDetails['user_id'] = $user_id;
                    $posDetails['offer_url'] = $offer_url;
                    $posDetails['offer_id'] = $offerSentid;
                    $posDetails['sent_detail_id'] = $offerDetailId;
                    $posDetails['invitation_order'] = $invitation_order;
                    $utility->addItem("pushed_ipad",$posDetails);
                    $utility->createThumbnail($offerSentid);
                }
            }
        }//recipients loop end

        if($parentSettings['webhook_settings'] != NULL) {
            try {
                $webhooksettings = json_decode($parentSettings['webhook_settings'], true);
                if(isset($webhooksettings['for_senddoc']) && $webhooksettings['for_senddoc'] == 1) {
                    //added by me (MS) 11 June 2020
                    $getUsersData = User::where('id', $user_id)->select('super_access_token')->first();
                    $externalData = [];
                    $externalData['document_id'] = $offerSentid;
                    $externalData['access_token'] = $getUsersData['super_access_token'];
                    $externalData['external_response'] = 1;
                    $getResponseOfSpecificDocumentDetail = $this->getSpecificdocumentdetail($externalData);
                    if(isset($webhooksettings['webhook_templates']) && !empty($webhooksettings['webhook_templates']) && $templateId != '') {
                        if(in_array($templateId, $webhooksettings['webhook_templates'])) {
                            $utility->postSenddatatowebhook($webhooksettings['webhook_URL'], $getResponseOfSpecificDocumentDetail->getData());
                        }
                    } else {
                        $utility->postSenddatatowebhook($webhooksettings['webhook_URL'], $getResponseOfSpecificDocumentDetail->getData());
                    }
                    //added by me (MS) 11 June 2020 ending
                }
            } catch (\Exception $e) {
            }// catche ends
        }

        if($userData->payment_version == 2) {
            $userobj['users_signatures'] = $signatureLeft;
        } else {
            $userobj['monthly_signature'] = $signatureLeft;
        }
        
        //added by (MS) for change status from saved to trail starting
        $userobj['savedfrom_contract'] = 0;
        //added by (MS) for change status from saved to trail ending
        $utility->updateItem("users_login",$whereu,$userobj);
        //19-july-2019 starting

        if(!empty($signUrl)) {
            return $signUrl;
        } else {
            return $offerSentid;
        }
        //19-july-2019 ending
        //return postsenddocument $offerSentid;
    }

    public function senddocumenttemplateapi($offerSentid,$data,$user_id,$visible_name,$invitation_message,$lang,$signing_url="",$extraFields="",$organizationField="") {
        $domain_name =  asset('/');
        $utility = new Utility();
        //sendcontractController only used for getSendcontractnotification function
        $sentcontract = new sendcontractController();

        $userdata = $utility->getParentDetails($user_id);
        $getTranslation = $utility->GeneralTranslations($lang);
        //$isTemplateId = (isset($data['template_id']) && $data['template_id'] != '' ? true : false);
        $isTemplateId = (isset($data['document_id']) && $data['document_id'] != '' ? true : false);

        //getting info and manipulating about super user and normal user starting
        $sender_company = (isset($data["sender_company"]) && !empty($data["sender_company"]) ? $data["sender_company"] : $userdata->company);
        $userArrar['full_name'] = $userdata->full_name;
        $userArrar['email'] = $userdata->email;
        $userArrar['company'] = $sender_company;
        $userArrar['reg_no'] = (isset($data["sender_reg_no"]) && !empty($data["sender_reg_no"]) ? $data["sender_reg_no"] : $userdata->reg_no);
        $userArrar['address'] = (isset($data["sender_address"]) && !empty($data["sender_address"]) ? $data["sender_address"] : $userdata->address);
        $userArrar['telephone'] = (isset($data["sender_telephone"]) && !empty($data["sender_telephone"]) ? $data["sender_telephone"] : $userdata->telephone);
        $userArrar['post_code'] = (isset($data["sender_post_code"]) && !empty($data["sender_post_code"]) ? $data["sender_post_code"] : $userdata->post_code);
        $userArrar['city'] = (isset($data["sender_city"]) && !empty($data["sender_city"]) ? $data["sender_city"] : $userdata->city);
        //getting info and manipulating about super user and normal user ending

        $sign_date = date("Y-m-d H:i:s");
        $sign_ip = $_SERVER['REMOTE_ADDR'];
        $invitation_order = $is_sender = 1;
        $status = 4;
        $uniqidSender = uniqid();
        $confirmation = $role = $id_attachment = $authentication = $pin_code = $invitation_type = $paypal_amount = $recpid = 0;
        $senderOfferDetailId = $this->addOffersentdetailsapi($offerSentid,$recpid,$status,$sign_date,$sign_ip,$userArrar,$is_sender,$userArrar['email'],$userdata->full_name,$sender_company,$invitation_order,$uniqidSender,'',$confirmation,$role,$id_attachment,$authentication,$paypal_amount,$pin_code,$invitation_type);

        //get user signature
        $whereu['id'] = $user_id;
        $userData = $utility->getItem("users_login", $whereu);
        if($userData->parent_id == 0) {
            $isPaid = $userData->is_paid;
            if($userData->payment_version == 2){
                $userData->monthly_signature = $userData->users_signatures;
            }
            $signatureLeft = $userData->monthly_signature;
        } else {
            $whereu['id'] = $userData->parent_id;
            $userData = $utility->getItem("users_login", $whereu);
            $isPaid = $userData->is_paid;
            if($userData->payment_version == 2){
                $userData->monthly_signature = $userData->users_signatures;
            }
            $signatureLeft = $userData->monthly_signature;
        }

        //manuiplation of document fields starting
        if(isset($data['documentfields']) && !empty($data['documentfields'])) {
            $documents = json_decode($data['documentfields'], true);
            $documentArray = [];
            foreach($documents as $docKey => $docValue) {
                $documentFieldsArray = [];
                foreach($docValue['document_fields'] as $docFldKey => $docFldValue) {
                    array_push($documentFieldsArray, ['documentFieldName' => $docFldKey, 'documentFieldValue' => $docFldValue]);
                }
            }
            $documentArray = json_encode($documentFieldsArray);
        }
        //manuiplation of document fields ending

        $RecipientNum = 0;
        $LinkedOfferSentId = (isset($data['linkedoffersentid']) && $data['linkedoffersentid'] != '' ? $data['linkedoffersentid'] : '');
        $signUrl = [];  //19-July-2019
        $recipients = json_decode($data['recipients'], true);
        //recipients loop starting
        foreach($recipients as $key => $recipient) {
            $recipientDetails = $specificCustomDetailsArray = [];
            $EncryptrecipientDetails = [];
            if(isset($recipient) && $recipient != "") {
                $extraFields = $recipientFields = $organizationFields = $organizationFieldsArr = $organizationExtraFields = $detailsArray = [];
                $role = $recpid = $recipientRoleNew = $organizationName = '';

                //manuiplation of people fields array for extra and document fields starting
                $recipientKeys = array('first_name', 'last_name', 'email', 'personal_no', 'mobile', 'address', 'city', 'zipcode');
                if(isset($recipient['people_fields'])) {
                    $extraFieldsArray = $recipientFieldsArray = [];
                    foreach($recipient['people_fields'] as $pepleFldKey => $pepleFldValue) {
                        if(!in_array($pepleFldKey, $recipientKeys)) {
                            //making object of extra_fields and recipientfields for people's custom fields starting
                            array_push($extraFieldsArray, ['fieldName' => $pepleFldKey, 'fieldValue' => $pepleFldValue]);
                            array_push($recipientFieldsArray, ['fieldName' => $pepleFldKey, 'fieldValue' => '']);
                            //making object of extra_fields and recipientfields for people's custom fields ending
                        }
                    }
                    //extra_fields and recipientfields json encode starting
                    $extraFields = json_encode($extraFieldsArray);
                    $recipientFields = json_encode($recipientFieldsArray);
                    //extra_fields and recipientfields json encode ending
                }
                //manuiplation of people fields array for extra and document fields ending
                //manuiplation of details fields starting
                if(isset($recipient['details'])) {
                    $detArray = [];
                    foreach($recipient['details'] as $detailsKey => $detailsValue) {
                        array_push($detArray, ['detailsFieldName' => $detailsKey, 'detailsFieldValue' => $detailsValue]);
                    }
                    $detailsArray = json_encode($detArray);
                }
                //manuiplation of details fields ending
                //company name variable starting
                $organizationName = (isset($recipient['organization_fields']['name']) && $recipient['organization_fields']['name'] != '' ? $recipient['organization_fields']['name'] : '');
                //company name variable ending
                $recipient['people_fields']['email'] = preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', trim($recipient['people_fields']['email']));
                $whererecipient['email'] = Tcrypt::encrypter($recipient['people_fields']['email']);
                $whererecipient['registerby'] = $user_id;
                $recipientDetails = $utility->getItem("customers", $whererecipient);

                //unset($recipientDetails->last_name);
                if(empty($recipientDetails)) {
                    //recipient insert in if condition
                    //userdetails column data only for recipient starting
                    $recipientDetails['registerby'] = $user_id;
                    $recipientDetails['email'] = $recipient['people_fields']['email'];
                    $recipientDetails['full_name'] = $recipient['people_fields']['first_name'];
                    $recipientDetails['last_name'] = (isset($recipient['people_fields']['last_name']) && $recipient['people_fields']['last_name'] != '' ? $recipient['people_fields']['last_name'] : '');
                    //adding Personal No, with separate key for BankID
                    $recipientDetails['personnr'] = (isset($recipient['people_fields']['personal_no']) && $recipient['people_fields']['personal_no'] != '' ? $recipient['people_fields']['personal_no'] : '');
                    $recipientDetails['mobile'] = (isset($recipient['people_fields']['mobile']) && !empty($recipient['people_fields']['mobile']) ? $recipient['people_fields']['mobile'] : "");
                    //we've both keys zip and zipcode one of them is new and other one is old
                    $recipientDetails['zipcode'] = (isset($recipient['people_fields']['zipcode']) && !empty($recipient['people_fields']['zipcode']) ? $recipient['people_fields']['zipcode'] : "");
                    $recipientDetails['zip'] = (isset($recipient['people_fields']['zipcode']) && !empty($recipient['people_fields']['zipcode']) ? $recipient['people_fields']['zipcode'] : "");
                    $recipientDetails['city'] = (isset($recipient['people_fields']['city']) && !empty($recipient['people_fields']['city']) ? $recipient['people_fields']['city'] : "");                    
                    $recipientDetails['address'] = (isset($recipient['people_fields']['address']) && !empty($recipient['people_fields']['address']) ? $recipient['people_fields']['address'] : "");
                    //$recipientDetails['country'] = (isset($recipient['people_fields']['country']) && !empty($recipient['people_fields']['country']) ? $recipient['people_fields']['country'] : "");
                    $recipientDetails['company'] = $organizationName;

                    if(isset($recipient['organization_fields']['org_no']) && $recipient['organization_fields']['org_no'] != '') {
                        $recipientDetails['reg_no'] = $recipient['organization_fields']['org_no'];
                    }
                    //userdetails column data only for recipient ending

                    //update organization and linked with recipient starting
                    if($organizationName != '') {
                        $getOrganization = Organizations::where('registerby', $user_id)->where('name', Tcrypt::encrypter($organizationName))->select('id')->first();
                        if($getOrganization) {
                            $EncryptrecipientDetails['organization_id'] = $getOrganization['id'];
                        } else {
                            $orgNo = (isset($recipient['organization_fields']['org_no']) && $recipient['organization_fields']['org_no'] != '' ? $recipient['organization_fields']['org_no'] : '');
                            $orgPhone = (isset($recipient['organization_fields']['phone']) && $recipient['organization_fields']['phone'] != '' ? $recipient['organization_fields']['phone'] : '');
                            $orgAddress = (isset($recipient['organization_fields']['address']) && $recipient['organization_fields']['address'] != '' ? $recipient['organization_fields']['address'] : '');
                            $orgCity = (isset($recipient['organization_fields']['city']) && $recipient['organization_fields']['city'] != '' ? $recipient['organization_fields']['city'] : '');
                            $orgZipCode = (isset($recipient['organization_fields']['zipcode']) && $recipient['organization_fields']['zipcode'] != '' ? $recipient['organization_fields']['zipcode'] : '');
                            $getOrganizationId = Organizations::insertGetId(['name' => Tcrypt::encrypter($organizationName), 'reg_no' => $orgNo, 'address' => $orgAddress, 'mobile' => $orgPhone, 'zip' => $orgZipCode, 'city' => $orgCity]);
                            $EncryptrecipientDetails['organization_id'] = $getOrganizationId;
                        }
                        //insert organization fields into user_details object starting
                        if($EncryptrecipientDetails['organization_id'] != '') {
                            $recipientDetails['org_name'] = (isset($organizationName) && $organizationName != '' ? $organizationName : '');
                            $recipientDetails['org_reg_no'] = (isset($orgNo) && $orgNo != '' ? $orgNo : '');
                            $recipientDetails['org_mobile'] = (isset($orgPhone) && $orgPhone != '' ? $orgPhone : '');
                            $recipientDetails['org_address'] = (isset($orgAddress) && $orgAddress != '' ? $orgAddress : '');
                            $recipientDetails['org_city'] = (isset($orgCity) && $orgCity != '' ? $orgCity : '');
                            $recipientDetails['org_zip'] = (isset($orgZipCode) && $orgZipCode != '' ? $orgZipCode : '');
                            $recipientDetails['org_id'] = ($EncryptrecipientDetails['organization_id'] != '' ? $EncryptrecipientDetails['organization_id'] : '');
                        }
                        //insert organization fields into user_details object ending
                    }
                    //update organization and linked with recipient ending
                    
                    //updating recipient data in customers table starting
                    $EncryptrecipientDetails['email'] = Tcrypt::encrypter($recipient['people_fields']['email']);
                    $EncryptrecipientDetails['full_name'] = Tcrypt::encrypter($recipient['people_fields']['first_name']);
                    if(isset($recipient['people_fields']['last_name']) && !empty($recipient['people_fields']['last_name'])) {
                        $EncryptrecipientDetails['last_name'] = Tcrypt::encrypter($recipient['people_fields']['last_name']);
                    }
                    $EncryptrecipientDetails['mobile'] = (isset($recipient['people_fields']['mobile']) && !empty($recipient['people_fields']['mobile']) ? $recipient['people_fields']['mobile'] : "");
                    $EncryptrecipientDetails['zip'] = (isset($recipient['people_fields']['zipcode']) && !empty($recipient['people_fields']['zipcode']) ? $recipient['people_fields']['zipcode'] : "");
                    $EncryptrecipientDetails['city'] = (isset($recipient['people_fields']['city']) && !empty($recipient['people_fields']['city']) ? $recipient['people_fields']['city'] : "");
                    //$EncryptrecipientDetails['country'] = (isset($recipient['people_fields']['country']) && !empty($recipient['people_fields']['country']) ? $recipient['people_fields']['country'] : "");
                    $EncryptrecipientDetails['address'] = (isset($recipient['people_fields']['address']) && !empty($recipient['people_fields']['address']) ? $recipient['people_fields']['address'] : "");
                    $EncryptrecipientDetails['company'] = ($organizationName != ''? Tcrypt::encrypter($organizationName) : '');
                    $EncryptrecipientDetails['registerby'] = $user_id;
                    $recReturnId = $utility->addItem("customers", $EncryptrecipientDetails);
                    $recipientDetails['id'] = $recReturnId;
                    //updating recipient data in customers table ending
                } else {
                    //recipient update in else condition
                    $recipientDetails = (array)$recipientDetails;   //variable coming from customers table and converting into array

                    //userdetails column data only for recipient starting
                    $recipientDetails['registerby'] = $user_id;
                    $recipientDetails['email'] = $recipient['people_fields']['email'];
                    $recipientDetails['full_name'] = $recipient['people_fields']['first_name'];
                    $recipientDetails['last_name'] = (isset($recipient['people_fields']['last_name']) && $recipient['people_fields']['last_name'] != '' ? $recipient['people_fields']['last_name'] : '');
                    $recipientDetails['recipient_role'] = (isset($recipient['details']['recipient_role']) && $recipient['details']['recipient_role'] != '' ? $recipient['details']['recipient_role'] : '');
                    //adding Personal No, with separate key for BankID
                    $recipientDetails['personnr'] = (isset($recipient['people_fields']['personal_no']) && $recipient['people_fields']['personal_no'] != '' ? $recipient['people_fields']['personal_no'] : '');
                    $recipientDetails['mobile'] = (isset($recipient['people_fields']['mobile']) && $recipient['people_fields']['mobile'] != '' ? $recipient['people_fields']['mobile'] : '');                    
                    //we've both keys zip and zipcode one of them is new and other one is old
                    $recipientDetails['zipcode'] = (isset($recipient['people_fields']['zipcode']) && $recipient['people_fields']['zipcode'] != '' ? $recipient['people_fields']['zipcode'] : '');
                    $recipientDetails['zip'] = (isset($recipient['people_fields']['zipcode']) && $recipient['people_fields']['zipcode'] != '' ? $recipient['people_fields']['zipcode'] : '');
                    $recipientDetails['city'] = (isset($recipient['people_fields']['city']) && $recipient['people_fields']['city'] != '' ? $recipient['people_fields']['city'] : '');
                    //$recipientDetails['country'] = (isset($recipient['people_fields']['country']) && $recipient['people_fields']['country'] != '' ? $recipient['people_fields']['country'] : '');
                    $recipientDetails['address'] = (isset($recipient['people_fields']['address']) && $recipient['people_fields']['address'] != '' ? $recipient['people_fields']['address'] : '');

                    if(isset($recipient['organization_fields']['org_no']) && $recipient['organization_fields']['org_no'] != '') {
                        $recipientDetails['reg_no'] = $recipient['organization_fields']['org_no'];
                    } if(isset($recipientDetails['company']) && $recipientDetails['company'] != '') {
                        $recipientDetails['company'] = Tcrypt::decrypter($recipientDetails['company']);
                    } else {
                        $recipientDetails['company'] = $organizationName;
                    } 
                    //userdetails column data only for recipient ending

                    //updating recipient data in customers table starting
                    $EncryptrecipientDetails['email'] = (isset($recipient['people_fields']['email']) && !empty($recipient['people_fields']['email']) ? Tcrypt::encrypter($recipient['people_fields']['email']) : '');
                    $EncryptrecipientDetails['full_name'] = (isset($recipient['people_fields']['first_name']) && !empty($recipient['people_fields']['first_name']) ? Tcrypt::encrypter($recipient['people_fields']['first_name']) : '');
                    if(isset($recipient['people_fields']['last_name']) && !empty($recipient['people_fields']['last_name'])) {
                        $EncryptrecipientDetails['last_name'] = Tcrypt::encrypter($recipient['people_fields']['last_name']);
                    } if($organizationName != '') {
                        $EncryptrecipientDetails['company'] = Tcrypt::encrypter($organizationName);
                    } if(isset($recipient['people_fields']['mobile']) && !empty($recipient['people_fields']['mobile'])) {
                        $EncryptrecipientDetails['mobile'] = $recipient['people_fields']['mobile'];
                    } if(isset($recipient['people_fields']['zipcode']) && !empty($recipient['people_fields']['zipcode'])) {
                        $EncryptrecipientDetails['zip'] = $recipient['people_fields']['zipcode'];
                    } if(isset($recipient['people_fields']['city']) && !empty($recipient['people_fields']['city'])) {
                        $EncryptrecipientDetails['city'] = $recipient['people_fields']['city'];
                    } /* if(isset($recipient['people_fields']['country']) && !empty($recipient['people_fields']['country'])) {
                        $EncryptrecipientDetails['country'] = $recipient['people_fields']['country'];
                    } */ if(isset($recipient['people_fields']['address']) && !empty($recipient['people_fields']['address'])) {
                        $EncryptrecipientDetails['address'] = $recipient['people_fields']['address'];
                    } if(isset($recipient['organization_fields']['org_no']) && !empty($recipient['organization_fields']['org_no'])) {
                        $EncryptrecipientDetails['reg_no'] = $recipient['organization_fields']['org_no'];
                    } if(isset($recipient['people_fields']['personal_no']) && !empty($recipient['people_fields']['personal_no'])) {
                        $EncryptrecipientDetails['personnr'] = $recipient['people_fields']['personal_no'];
                    }
                    //update organization and linked with recipient starting
                    if($organizationName != '') {
                        $getOrganization = Organizations::where('registerby', $user_id)->where('name', Tcrypt::encrypter($organizationName))->select('id', 'name', 'reg_no', 'address', 'mobile', 'zip', 'city')->first();
                        if($getOrganization) {
                            $EncryptrecipientDetails['organization_id'] = $getOrganization['id'];
                            //insert organization fields into user_details object starting
                            if($EncryptrecipientDetails['organization_id'] != '') {
                                $recipientDetails['org_name'] = ($getOrganization['name'] != '' ? Tcrypt::decrypter($getOrganization['name']) : '');
                                $recipientDetails['org_reg_no'] = ($getOrganization['reg_no'] != '' ? $getOrganization['reg_no'] : '');
                                $recipientDetails['org_mobile'] = ($getOrganization['mobile'] != '' ? $getOrganization['mobile'] : '');
                                $recipientDetails['org_address'] = ($getOrganization['address'] != '' ? $getOrganization['address'] : '');
                                $recipientDetails['org_city'] = ($getOrganization['city'] != '' ? $getOrganization['city'] : '');
                                $recipientDetails['org_zip'] = ($getOrganization['zip'] != '' ? $getOrganization['zip'] : '');
                                $recipientDetails['org_id'] = ($getOrganization['id'] != '' ? $getOrganization['id'] : '');
                            }
                            //insert organization fields into user_details object ending
                        }
                    }
                    //update organization and linked with recipient ending

                    $whereUpdate['id'] = $recipientDetails['id'];
                    $whereUpdate['registerby'] = $user_id;
                    $utility->updateItem("customers", $whereUpdate, $EncryptrecipientDetails);
                    //updating recipient data in customers table ending
                }

                //manuiplation of organization and it's custom fields starting
                $organizationKeys = ['name', 'org_no', 'phone', 'address', 'city', 'zipcode'];
                if(isset($recipient['organization_fields'])) {
                    $orgArray = $organizationFieldsArray = $orgExtraFieldsArray = [];
                    foreach($recipient['organization_fields'] as $orgKey => $orgValue) {
                        //commment this line when work will be completed in sendtemplate starting
                        //$orgKey = str_replace('organization', 'org', $orgKey);
                        //commment this line when work will be completed in sendtemplate ending
                        array_push($orgArray, ['orgFieldName' => $orgKey, 'orgFieldValue' => $orgValue]);
                        if(!in_array($orgKey, $organizationKeys)) {
                            //making object of organizationfields and org_extra_fields for organization's custom fields starting
                            array_push($organizationFieldsArray, ['fieldName' => $orgKey, 'fieldValue' => '']);
                            array_push($orgExtraFieldsArray, ['fieldName' => $orgKey, 'fieldValue' => $orgValue]);
                            //making object of organizationfields and org_extra_fields for organization's custom fields ending
                            $recipientDetails[$orgKey] = $orgValue;
                        }
                    }
                    //organizationfields and org_extra_fields json encode starting
                    $organizationFields = json_encode($orgArray);
                    $organizationFieldsArr = json_encode($organizationFieldsArray);
                    $organizationExtraFields = json_encode($orgExtraFieldsArray);
                    //organizationfields and org_extra_fields json encode ending
                }
                //manuiplation of organization and it's custom fields ending

                //extra, organization and document fields code starting
                if(isset($extraFields) && !empty($extraFields)) {
                    $recipientDetails['extra_fields'] = $extraFields;
                    $recipientDetails['recipientfields'] = $recipientFields;
                    $recipientDetails['extra_fields_new'] = $extraFields;
                } if(isset($organizationFields) && !empty($organizationFields)) {
                    $recipientDetails['organization_fields'] = $organizationFields;
                    $recipientDetails['organizationfields'] = $organizationFieldsArr;
                    $recipientDetails['org_extra_fields'] = $organizationExtraFields;
                } if(isset($detailsArray) && !empty($detailsArray)) {
                    $recipientDetails['details_fields'] = $detailsArray;
                } if(isset($documentArray) && !empty($documentArray)) {
                    $recipientDetails['document_fields'] = $documentArray;
                }
                //extra, organization and document fields code ending

                //getting mobile no to sent sms if user select invitation and confirmation email & sms starting
                if(isset($recipient['people_fields']['mobile'])) {
                    $mobileno = $recipient['people_fields']['mobile'];
                } elseif(isset($recipientDetails['mobile'])) {
                    $mobileno = $recipientDetails['mobile'];
                } else {
                    $mobileno = '';
                }
                //getting mobile no to sent sms if user select invitation and confirmation email & sms ending

                //invitation_type (invitation_through) 1 for email, 2 for email & sms, 3 for pos, 4 for in meeting
                //invitation_order defualt value is 1
                //confirmation (offer_confirmation) 1 for email & 2 for email & sms
                //authentication 1 for regular signature, 2 for paypal, 3 for bankID & 4 for pin via sms
                //role old one was like 1 for sign & 2 for review/new one is like Manager, CEO, User & so on
                //id_attachment 0 for no request & 1 for attachment
                //New code according to data manuiplation stating
                $invitation_type = $invitation_order = $confirmation = $authentication = 1;
                $id_attachment = 0;
                if(isset($recipient['details']['invitation_type'])) {
                    if($recipient['details']['invitation_type'] == 'email' || $recipient['details']['invitation_type'] == 'Email' || $recipient['details']['invitation_type'] == 'EMAIL') {
                        $invitation_type = 1;
                    } elseif($recipient['details']['invitation_type'] == 'email and sms' || $recipient['details']['invitation_type'] == 'Email And SMS' || $recipient['details']['invitation_type'] == 'EMAIL AND SMS' || $recipient['details']['invitation_type'] == 'email & sms' || $recipient['details']['invitation_type'] == 'Email & SMS' || $recipient['details']['invitation_type'] == 'EMAIL & SMS') {
                        $invitation_type = 2;
                    } elseif($recipient['details']['invitation_type'] == 'pos' || $recipient['details']['invitation_type'] == 'POS' || $recipient['details']['invitation_type'] == 'Pos') {
                        $invitation_type = 3;
                    } elseif($recipient['details']['invitation_type'] == 'in meeting' || $recipient['details']['invitation_type'] == 'In Meeting' || $recipient['details']['invitation_type'] == 'IN MEETING') {
                        $invitation_type = 4;
                    }
                } if(isset($recipient['details']['invitation_order'])) {
                    $invitation_order = $recipient['details']['invitation_order'];
                } if(isset($recipient['details']['confirmation'])) {
                    if($recipient['details']['confirmation'] == 'email' || $recipient['details']['confirmation'] == 'Email' || $recipient['details']['confirmation'] == 'EMAIL') {
                        $confirmation = 1;
                    } elseif($recipient['details']['confirmation'] == 'email and sms' || $recipient['details']['confirmation'] == 'Email And SMS' || $recipient['details']['confirmation'] == 'EMAIL AND SMS' || $recipient['details']['confirmation'] == 'email & sms' || $recipient['details']['confirmation'] == 'Email & SMS' || $recipient['details']['confirmation'] == 'EMAIL & SMS') {
                        $confirmation = 2;
                    }
                } if(isset($recipient['details']['authentication'])) {
                    if($recipient['details']['authentication'] == 'regular signature' || $recipient['details']['authentication'] == 'Regular Signature' || $recipient['details']['authentication'] == 'REGULAR SIGNATURE') {
                        $authentication = 1;
                    } elseif($recipient['details']['authentication'] == 'paypal' || $recipient['details']['authentication'] == 'Paypal' || $recipient['details']['authentication'] == 'PAYPAL' || $recipient['details']['authentication'] == 'pay pal' || $recipient['details']['authentication'] == 'Pay Pal' || $recipient['details']['authentication'] == 'PAY PAL') {
                        $authentication = 2;
                    } elseif($recipient['details']['authentication'] == 'bankID' || $recipient['details']['authentication'] == 'BankID' || $recipient['details']['authentication'] == 'BANKID') {
                        $authentication = 3;
                    } elseif($recipient['details']['authentication'] == 'pin via sms' || $recipient['details']['authentication'] == 'Pin Via SMS' || $recipient['details']['authentication'] == 'PIN VIA SMS') {
                        $authentication = 4;
                    } elseif($recipient['details']['authentication'] == 'attest' || $recipient['details']['authentication'] == 'at test' || $recipient['details']['authentication'] == 'Attest' || $recipient['details']['authentication'] == 'At test') {
                        if(!isset($recipient['people_fields']['role'])) {
                            $recipient['people_fields']['role'] = 2;
                            $authentication = 1;
                        }
                    } elseif($recipient['details']['authentication'] == 'view only' || $recipient['details']['authentication'] == 'viewonly' || $recipient['details']['authentication'] == 'View Only' || $recipient['details']['authentication'] == 'ViewOnly' || $recipient['details']['authentication'] == 'Viewonly') {
                        $authentication = 6;
                    }
                } if(isset($recipient['details']['id_attachment'])) {
                    if($recipient['details']['id_attachment'] == 'yes' || $recipient['details']['id_attachment'] == 'Yes' || $recipient['details']['id_attachment'] == 'YES') {
                        $id_attachment = 1;
                    } elseif($recipient['details']['id_attachment'] == 'no' || $recipient['details']['id_attachment'] == 'No' || $recipient['details']['id_attachment'] == 'NO') {
                        $id_attachment = 0;
                    }
                }
                //New code according to data manuiplation ending

                //insert id, role, recrolename and colorcode in user_detailsobject created for recipient starting
                $recpid = (isset($recipientDetails['id']) && $recipientDetails['id'] != '' ? $recipientDetails['id'] : $recReturnId);
                $recipientDetails['id'] = $recpid;
                $role = (isset($recipient['people_fields']['role']) ? $recipient['people_fields']['role'] : 1);
                $recipientDetails['role'] = $role;
                $recipientRoleNew = (isset($recipient['details']['recipient_role']) && $recipient['details']['recipient_role'] != '' ? $recipient['details']['recipient_role'] : '');
                $recipientDetails['recrolename'] = $recipientRoleNew;
                $getColorCode = Recipient_fields_roles::where('userid', $user_id)->where('tab_components', $recipientRoleNew)->where('offer_doc_id', 0)->pluck('colorcode');
                $recipientDetails['colorcode'] = $getColorCode;
                //insert id, role, recrolename and colorcode in user_detailsobject created for recipient ending

                //recipientDetails object asigning to user_details variable for inserting into user_details column
                $user_details = $recipientDetails;

                //fullname, reciver_email and company insert into offer sent details starting
                $fullname = (isset($recipientDetails['full_name']) ? $recipientDetails['full_name'] : $signersNameArray[$key]);
                $recipient['people_fields']['email'] = preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $recipient['people_fields']['email']);
                $reciver_email = (isset($recipient['people_fields']['email']) ? $recipient['people_fields']['email'] : '');
                $company = (isset($recipientDetails['company']) && $recipientDetails['company'] != '' ? $recipientDetails['company'] : (isset($recipient['organization_fields']['name']) && $recipient['organization_fields']['name'] != '' ? $recipient['organization_fields']['name'] : ''));
                //fullname, reciver_email and company insert into offer sent details ending

                //Adding recipients data in fields which are placed on the contract starting
                $RecipientNum++;
                if($isTemplateId) {
                    $sentData = Offersent::where('id', $offerSentid)->select('content')->first();
                    if($sentData) {
                        $OfferHTML = (isset($sentData['content']) && !empty($sentData['content']) ? Tcrypt::decrypter($sentData['content']) : '');
                        $updatedHTML = $this->setRecipientsInContentNew($OfferHTML, $user_details, $RecipientNum, $LinkedOfferSentId, str_replace(' ', '', ucfirst(strtolower(trim($recipientRoleNew)))), $fullname, $data);
                        if(!empty($updatedHTML)) {
                            $updatedHTML = Tcrypt::encrypter($updatedHTML);
                            Offersent::where('id', $offerSentid)->update(['content' => $updatedHTML]);
                        }
                    }
                }
                //Adding recipients data in fields which are placed on the contract ending

                $is_sender = $status = $pin_code = 0;
                $sign_ip = $sign_date = '';
                $uniqid = uniqid();

                if($invitation_order == 1) {
                    $status = 1;
                }

                //generating pin code if authentication is pin via sms starting
                if($authentication == 4) {
                    $pin_code = rand(10000, 99999);
                }
                //generating pin code if authentication is pin via sms ending

                if($isPaid == 0) {
                    if($signatureLeft >= 1) {
                        $offerDetailId = $this->addOffersentdetailsapi($offerSentid,$recpid,$status,$sign_date,$sign_ip,$user_details,$is_sender,$reciver_email,$fullname,$company,$invitation_order,$uniqid, '',$confirmation,$role,$id_attachment,$authentication,$paypal_amount,$pin_code,$invitation_type);
                        if(!$utility->isSuperuser($user_id)) {
                            $signatureLeft--;
                        }
                    } else {
                        return 0;
                    }
                } else {
                    $offerDetailId = $this->addOffersentdetailsapi($offerSentid,$recpid,$status,$sign_date,$sign_ip,$user_details,$is_sender,$reciver_email,$fullname,$company,$invitation_order,$uniqid, '',$confirmation,$role,$id_attachment,$authentication,$paypal_amount,$pin_code,$invitation_type);
                }

                if($offerDetailId) {
                    if(isset($data['external_source']) && !empty($data['external_source'])) {
                        $externalSource = json_decode($data['external_source'], true);
                        if(isset($externalSource[0]['document_key']) && !empty($externalSource[0]['document_key'])) {
                            if($externalSource[0]['document_key']['viewingDownloading'] != '' && $externalSource[0]['document_key']['viewingDownloading'] == 2) {
                                $externalSource[0]['document_key']['pinCode'] = $utility->randomString(4, "0123456789");
                            }
                        }
                        if(isset($externalSource[0]['document_key']) && !empty($externalSource[0]['document_key'])) {
                            $offerSentDetaildata['viewing_downloading'] = json_encode($externalSource[0]['document_key']);
                        } else {
                            $offerSentDetaildata['viewing_downloading'] = '';
                        }
                        if(isset($externalSource[0]['request_attachment']) && !empty($externalSource[0]['request_attachment'])) {
                            $offerSentDetaildata['request_attachment'] = $externalSource[0]['request_attachment'];
                        }
                        $utility->updateItem("offer_send_details", ['id' => $offerDetailId], $offerSentDetaildata);
                    }
                }
                
                //generating contract link to show instead of sending email starting
                if($signing_url == 1) {
                    $signUrl[] = $domain_name.'document/view/'.$offerDetailId.'/'.$uniqid;
                }
                //generating contract link to show instead of sending email ending

                //invitation type 1 is for email
                if($invitation_order == 1) {
                    if($invitation_type == 1 ||  $invitation_type == 2){
                        if($signing_url != 1) {
                            $sentcontract->getSendcontractnotification($offerSentid,$offerDetailId);
                        }
                        //invitation type 2 is for email and sms
                        if($invitation_type == 2) {
                            $parentId = $utility->getParent($user_id);
                            $totalRemSMS = $utility->checkRemainingSMS($parentId);
                            if($totalRemSMS > 0) {
                                $message = "";
                                $recipientCompleteName = $recipient['people_fields']['first_name'].(isset($recipient['people_fields']['last_name']) && $recipient['people_fields']['last_name'] != '' ? ' '.$recipient['people_fields']['last_name'] : '');
                                if(isset($data["invitation_message"]) && $data["invitation_message"] != "") {   //invitation_sms
                                    $invitationSMSMessage = $data["invitation_message"];
                                    if(strpos($invitationSMSMessage, '{rec_name}') !== false || strpos($invitationSMSMessage, '{rec_firstname}') !== false || strpos($invitationSMSMessage, '{full_name}') !== false || strpos($invitationSMSMessage, '{document_name}') !== false || strpos($invitationSMSMessage, '{offer_url}') !== false) {
                                        $invitationSMSMessage = str_replace("{rec_name}", $recipientCompleteName, $invitationSMSMessage);
                                        $invitationSMSMessage = str_replace("{rec_firstname}", $recipient['people_fields']['first_name'], $invitationSMSMessage);
                                        $invitationSMSMessage = str_replace("{full_name}", $userdata->full_name, $invitationSMSMessage);
                                        $invitationSMSMessage = str_replace("{document_name}", $visible_name, $invitationSMSMessage);
                                        $invitationSMSMessage = str_replace("{offer_url}", ($domain_name.'document/view/'.$offerDetailId.'/'.$uniqid), $invitationSMSMessage);
                                    } else {
                                        $invitationSMSMessage = str_replace("[recipient.fullname]", $recipientCompleteName, $invitationSMSMessage);
                                        $invitationSMSMessage = str_replace("[recipient.firstname]", $recipient['people_fields']['first_name'], $invitationSMSMessage);
                                        $invitationSMSMessage = str_replace(["[Me.name]", "[me.name]"], [$userdata->full_name, $userdata->full_name], $invitationSMSMessage);
                                        $invitationSMSMessage = str_replace("[document_name]", $visible_name, $invitationSMSMessage);
                                        $invitationSMSMessage = str_replace("[offer_url]", ($domain_name.'document/view/'.$offerDetailId.'/'.$uniqid), $invitationSMSMessage);
                                    }

                                    $message .= $invitationSMSMessage;
                                } else {
                                    $message .= $getTranslation[318].' '.$recipientCompleteName.',%0a';
                                    $message .= $userdata->full_name.' '.$getTranslation[463].': '.$visible_name.'.%0a '.$getTranslation[786].':%0a'.($domain_name.'document/view/'.$offerDetailId.'/'.$uniqid);
                                }
                                //sending sms
                                $utility->sendsms($mobileno, urldecode($message));
                                $utility->updateSentsms($parentId);
                                //add sms logs starting
                                $smsLogsData = array(
                                    "user_id" => $user_id,
                                    "offer_sent_id" => $offerSentid,
                                    "offersent_detail_id" => $offerDetailId,
                                    "phone_number" => $mobileno,
                                    "message" => $message,
                                    "section_name" => "Invitation SMS through API"
                                );
                                $utility->addItem("sms_logs", $smsLogsData);
                                //add sms logs ending
                                if(!$utility->isSuperuser($user_id)) {
                                    $whereUserLogin['id'] = $parentId;
                                    $updateRemainingSMS['total_remaing_sms'] = $totalRemSMS-1;
                                    $utility->updateItem('users_login', $whereUserLogin, $updateRemainingSMS);
                                }
                            }
                        }
                    }

                    if($invitation_type == 4) {
                        //invitation type 3 is for in meeting
                        $parties['partyname'] = $fullname;
                        $parties['offerDetailId'] = $offerDetailId;
                        $parties['uniqid'] = $uniqid;
                        array_push($meetingArray, $parties);
                    }
                } if($invitation_type == 3) {
                    //invitation type 3 is for pos
                    $offer_url =  $domain_name.'document/view/'.$offerDetailId.'/'.$uniqid;
                    $posDetails['user_id'] = $user_id;
                    $posDetails['offer_url'] = $offer_url;
                    $posDetails['offer_id'] = $offerSentid;
                    $posDetails['sent_detail_id'] = $offerDetailId;
                    $posDetails['invitation_order'] = $invitation_order;
                    $utility->addItem("pushed_ipad", $posDetails);
                    $utility->createThumbnail($offerSentid);
                }
            }
        }//recipients loop ending
        if($userData->payment_version == 2){
            $userobj['users_signatures'] = $signatureLeft;
        }else{
            $userobj['monthly_signature'] = $signatureLeft;
        }
        
        //added by (MS) for change status from saved to trail starting
        $userobj['savedfrom_contract'] = 0;
        //added by (MS) for change status from saved to trail ending
        $utility->updateItem("users_login",$whereu,$userobj);
        //19-july-2019 starting
        if(!empty($signUrl)) {
            return $signUrl;
        } else {
            return $offerSentid;
        }
        //19-july-2019 ending
        //return $offerSentid;
    }

    public function sendcontracttemplate($offerSentid,$data,$user_id,$visible_name,$invitation_message,$lang,$signing_url="",$iframeURL='') {
        $domain_name =  asset('/');
        $utility = new Utility();
        $mymailer = new mymailer();
        $sentcontract = new sendcontractController();
        /*offer add in sent details*/
        
        $userdata = $utility->getParentDetails($user_id);
        $parent_id = $utility->getParent($user_id);
        $getTranslation = $utility->GeneralTranslations($lang);
        $isTemplate = (isset($data['template_id']) && $data['template_id'] != '' ? true : false);
        $templateId = (isset($data['template_id']) && $data['template_id'] != '' ? $data['template_id'] : '');
        $getDocumentLanguage = Offersent::where('id', $offerSentid)->select('language_id', 'request_attachment')->first();
        $languageId = '';
        if(isset($getDocumentLanguage) && $getDocumentLanguage != '') {
            $languageId = $getDocumentLanguage['language_id'];
        } else {
            $languageId = $lang;
        }
        
        $parentSettings = settings::where('user_id', $parent_id)->select('webhook_settings')->first();

        $LinkedOfferSentId = (isset($data['linkedoffersentid']) && $data['linkedoffersentid'] != '' ? $data['linkedoffersentid'] : '');

        // getting info and manipulating about super user and normal user starting
        $sender_company = (isset($data["sender_company"]) && !empty($data["sender_company"]) ? $data["sender_company"] : $userdata->company);
        $userArrar['full_name'] = $userdata->full_name;
        $userArrar['email'] = $userdata->email;
        $userArrar['company'] = $sender_company;
        $userArrar['reg_no'] = (isset($data["sender_reg_no"]) && !empty($data["sender_reg_no"]) ? $data["sender_reg_no"] : $userdata->reg_no);
        $userArrar['address'] = (isset($data["sender_address"]) && !empty($data["sender_address"]) ? $data["sender_address"] : $userdata->address);
        $userArrar['telephone'] = (isset($data["sender_telephone"]) && !empty($data["sender_telephone"]) ? $data["sender_telephone"] : $userdata->telephone);
        $userArrar['post_code'] = (isset($data["sender_post_code"]) && !empty($data["sender_post_code"]) ? $data["sender_post_code"] : $userdata->post_code);
        $userArrar['city'] = (isset($data["sender_city"]) && !empty($data["sender_city"]) ? $data["sender_city"] : $userdata->city);
        // getting info and manipulating about super user and normal user ending

        //add this variable in beta condition
        $sign_date=date("Y-m-d H:i:s");
        $sign_ip = $_SERVER['REMOTE_ADDR'];
        $recpid = 0;
        $is_sender = 1;
        $invitation_order = 1;
        $status=4;
        $uniqidSender = uniqid();
        $confirmation=$role=$id_attachment=$authentication=$pin_code=$invitation_type=$paypal_amount = 0;
        $senderOfferDetailId = $this->addOffersentdetailsapi($offerSentid,$recpid,$status,$sign_date,$sign_ip,$userArrar,$is_sender,$userArrar['email'],$userdata->full_name,$sender_company,$invitation_order,$uniqidSender,'',$confirmation,$role,$id_attachment,$authentication,$paypal_amount,$pin_code,$invitation_type);

        /*get user signature */
        $whereu['id'] = $user_id;
        $userData = $utility->getItem("users_login",$whereu);
        if($userData->parent_id == 0){
            $isPaid = $userData->is_paid;
            if($userData->payment_version == 2){
                $userData->monthly_signature = $userData->users_signatures;
            }
            $signatureLeft = $userData->monthly_signature;
        } else {
            $whereu['id'] = $userData->parent_id;
            $userData = $utility->getItem("users_login",$whereu);
            $isPaid = $userData->is_paid;
            if($userData->payment_version == 2){
                $userData->monthly_signature = $userData->users_signatures;
            }
            $signatureLeft = $userData->monthly_signature;
        }
        
        //manuiplation of document fields starting
        if(isset($data['documentfields']) && !empty($data['documentfields'])) {
            $documents = json_decode($data['documentfields'], true);
            $documentArray = [];
            foreach($documents as $docKey => $docValue) {
                $documentFieldsArray = [];
                foreach($docValue['document_fields'] as $docFldKey => $docFldValue) {
                    array_push($documentFieldsArray, array('documentFieldName' => $docFldKey, 'documentFieldValue' => $docFldValue));
                }
            }
            $documentArray = json_encode($documentFieldsArray);
        }
        //manuiplation of document fields ending

        $RecipientNum = 0;
        $getRecSettings = 1;
        $signUrl = $pushWebHookDetails = [];
        $recipients = json_decode($data['recipients'], true);
        $requestAttachmentJsonDecode = (isset($getDocumentLanguage['request_attachment']) && $getDocumentLanguage['request_attachment'] != '' ? json_decode($getDocumentLanguage['request_attachment'], true) : []);
        if($iframeURL == 1 && $parent_id == 17207) {
            Recipient_fields_roles::where('offer_doc_id', $templateId)->update(['customer_id_iframe' => 0]);
        }

        foreach($recipients as $key => $recipient) {
            $recipientDetails = array();
            $EncryptrecipientDetails = array();
            if(isset($recipient) && $recipient != "") {
                $extraAndDocumentFields = $organizationArray = $detailsArray = array();
                $recipientRoleNew = $signingMethods = '';
                //manuiplation of people fields array for extra and document fields starting
                $recipientKeys = array('name', 'email', 'personal_no', 'mobile', 'address', 'city', 'zipcode');
                if(isset($recipient['people_fields'])) {
                    $extAndDocFldsArray = array();
                    foreach($recipient['people_fields'] as $pepleFldKey => $pepleFldValue) {
                        if(!in_array($pepleFldKey, $recipientKeys)) {
                            array_push($extAndDocFldsArray, array('extAndDocFieldName' => $pepleFldKey, 'extAndDocFieldValue' => $pepleFldValue));
                        }
                    }
                    $extraAndDocumentFields = json_encode($extAndDocFldsArray);
                }
                //manuiplation of people fields array for extra and document fields ending
                //manuiplation of organization fields starting
                if(isset($recipient['organization_fields'])) {
                    $orgArray = array();
                    foreach($recipient['organization_fields'] as $orgKey => $orgValue) {
                        //$orgKey = str_replace('organization', 'org', $orgKey);
                        array_push($orgArray, array('orgFieldName' => $orgKey, 'orgFieldValue' => $orgValue));
                    }
                    $organizationArray = json_encode($orgArray);
                }
                //manuiplation of organization fields ending
                //manuiplation of details fields starting
                if(isset($recipient['details'])) {
                    $detArray = array();
                    foreach($recipient['details'] as $detailsKey => $detailsValue) {
                        array_push($detArray, array('detailsFieldName' => $detailsKey, 'detailsFieldValue' => $detailsValue));
                    }
                    $detailsArray = json_encode($detArray);
                }
                //manuiplation of details fields ending
                $recipient['people_fields']['name'] = trim(preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $recipient['people_fields']['name']));
                $recipient['people_fields']['email'] = trim(preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $recipient['people_fields']['email']));
                $organizationName = (isset($recipient['organization_fields']['name']) && $recipient['organization_fields']['name'] != '' ? $recipient['organization_fields']['name'] : '');
                $whererecipient['email'] = Tcrypt::encrypter($recipient['people_fields']['email']);
                $whererecipient['registerby'] = $user_id;
                $recipientDetails = $utility->getItem("customers", $whererecipient);
                unset($recipientDetails->last_name);
                if(empty($recipientDetails)) {
                    
                    $recipientDetails['registerby'] = $user_id;
                    $recipientDetails['email'] = $recipient['people_fields']['email'];
                    $recipientDetails['full_name'] = $recipient['people_fields']['name'];
                    $recipientDetails['first_name'] = $recipient['people_fields']['name'];
                    //adding Personal No, with separate key for BankID
                    $recipientDetails['personnr'] = (isset($recipient['people_fields']['personal_no']) && $recipient['people_fields']['personal_no'] != '' ? $recipient['people_fields']['personal_no'] : '');
                    $recipientDetails['mobile'] = (isset($recipient['people_fields']['mobile']) && !empty($recipient['people_fields']['mobile']) ? $recipient['people_fields']['mobile'] : "");
                    //we've both keys zip and zipcode one of them is new and other one is old
                    $recipientDetails['zipcode'] = (isset($recipient['people_fields']['zipcode']) && !empty($recipient['people_fields']['zipcode']) ? $recipient['people_fields']['zipcode'] : "");
                    $recipientDetails['zip'] = (isset($recipient['people_fields']['zipcode']) && !empty($recipient['people_fields']['zipcode']) ? $recipient['people_fields']['zipcode'] : "");
                    $recipientDetails['city'] = (isset($recipient['people_fields']['city']) && !empty($recipient['people_fields']['city']) ? $recipient['people_fields']['city'] : "");
                    $recipientDetails['address'] = (isset($recipient['people_fields']['address']) && !empty($recipient['people_fields']['address']) ? $recipient['people_fields']['address'] : "");
                    $recipientDetails['company'] = $organizationName;
                    //this code is here cause we don't have recipient_role column in customers table and also we've to insert the data in user_details also for is_sender = 0
                    $recipientDetails['recipient_role'] = (isset($recipient['details']['recipient_role']) && $recipient['details']['recipient_role'] != '' ? $recipient['details']['recipient_role'] : '');

                    if(isset($recipient['organization_fields']['org_no']) && $recipient['organization_fields']['org_no'] != '') {
                        $recipientDetails['reg_no'] = $recipient['organization_fields']['org_no'];
                    }

                    if($organizationName != '') {
                        $getOrganization = Organizations::where('registerby', $user_id)->where('name', Tcrypt::encrypter($organizationName))->select('id')->first();
                        if($getOrganization) {
                            $EncryptrecipientDetails['organization_id'] = $getOrganization['id'];
                        } else {
                            $orgNo = (isset($recipient['organization_fields']['org_no']) && $recipient['organization_fields']['org_no'] != '' ? $recipient['organization_fields']['org_no'] : '');
                            $orgPhone = (isset($recipient['organization_fields']['phone']) && $recipient['organization_fields']['phone'] != '' ? $recipient['organization_fields']['phone'] : '');
                            $orgAddress = (isset($recipient['organization_fields']['address']) && $recipient['organization_fields']['address'] != '' ? $recipient['organization_fields']['address'] : '');
                            $orgCity = (isset($recipient['organization_fields']['city']) && $recipient['organization_fields']['city'] != '' ? $recipient['organization_fields']['city'] : '');
                            $orgZipCode = (isset($recipient['organization_fields']['zipcode']) && $recipient['organization_fields']['zipcode'] != '' ? $recipient['organization_fields']['zipcode'] : '');
                            $getOrganizationId = Organizations::insertGetId(['name' => Tcrypt::encrypter($organizationName), 'reg_no' => $orgNo, 'address' => $orgAddress, 'mobile' => $orgPhone, 'zip' => $orgZipCode, 'city' => $orgCity]);
                            $EncryptrecipientDetails['organization_id'] = $getOrganizationId;
                        }
                        //insert organization fields into user_details object starting
                        if($EncryptrecipientDetails['organization_id'] != '') {
                            $recipientDetails['org_name'] = (isset($organizationName) && $organizationName != '' ? $organizationName : '');
                            $recipientDetails['org_reg_no'] = (isset($getOrganization['reg_no']) && $getOrganization['reg_no'] != '' ? $getOrganization['reg_no'] : (isset($orgNo) && $orgNo != '' ? $orgNo : ''));
                            $recipientDetails['org_mobile'] = (isset($getOrganization['mobile']) && $getOrganization['mobile'] != '' ? $getOrganization['mobile'] : (isset($orgPhone) && $orgPhone != '' ? $orgPhone : ''));
                            $recipientDetails['org_address'] = (isset($getOrganization['address']) && $getOrganization['address'] != '' ? $getOrganization['address'] : (isset($orgAddress) && $orgAddress != '' ? $orgAddress : ''));
                            $recipientDetails['org_city'] = (isset($getOrganization['city']) && $getOrganization['city'] != '' ? $getOrganization['city'] : (isset($orgCity) && $orgCity != '' ? $orgCity : ''));
                            $recipientDetails['org_zip'] = (isset($getOrganization['zip']) && $getOrganization['zip'] != '' ? $getOrganization['zip'] : (isset($orgZipCode) && $orgZipCode != '' ? $orgZipCode : ''));
                            $recipientDetails['org_id'] = ($EncryptrecipientDetails['organization_id'] != '' ? $EncryptrecipientDetails['organization_id'] : '');
                        }
                        //insert organization fields into user_details object ending
                    }
                    //update organization and linked with recipient ending

                    //updating recipient data in customers table starting
                    $EncryptrecipientDetails['email'] = Tcrypt::encrypter($recipient['people_fields']['email']);
                    $EncryptrecipientDetails['full_name'] = Tcrypt::encrypter($recipient['people_fields']['name']);
                    $EncryptrecipientDetails['mobile'] = (isset($recipient['people_fields']['mobile']) && !empty($recipient['people_fields']['mobile']) ? $recipient['people_fields']['mobile'] : "");
                    $EncryptrecipientDetails['zip'] = (isset($recipient['people_fields']['zipcode']) && !empty($recipient['people_fields']['zipcode']) ? $recipient['people_fields']['zipcode'] : "");
                    $EncryptrecipientDetails['city'] = (isset($recipient['people_fields']['city']) && !empty($recipient['people_fields']['city']) ? $recipient['people_fields']['city'] : "");
                    $EncryptrecipientDetails['address'] = (isset($recipient['people_fields']['address']) && !empty($recipient['people_fields']['address']) ? $recipient['people_fields']['address'] : "");
                    $EncryptrecipientDetails['company'] = ($organizationName != '' ? Tcrypt::encrypter($organizationName) : '');

                    $EncryptrecipientDetails['registerby'] = $user_id;
                    $recReturnId = $utility->addItem("customers", $EncryptrecipientDetails);

                    $recipientDetails['id'] = $recReturnId;
                    //update request attachment object for recipient id to open recipient request attachment file upload popup
                    if(!empty($requestAttachmentJsonDecode)) {
                        if(isset($recipient['details']['recipient_role']) && $recipient['details']['recipient_role'] != '') {
                            $arrayNameSearchKey = array_search($recipient['details']['recipient_role'], array_column($requestAttachmentJsonDecode, 'Recipientname'));
                            if($requestAttachmentJsonDecode[$arrayNameSearchKey]['recipient_id'] != 'Me' && $requestAttachmentJsonDecode[$arrayNameSearchKey]['recipient_id'] != 'all') {
                                $requestAttachmentJsonDecode[$arrayNameSearchKey]['recipient_id'] = $recReturnId;
                            }
                        }
                    }
                    //updating recipient data in customers table ending
                } else {
                    $recipientDetails = (array)$recipientDetails;

                    $recipientDetails['registerby'] = $user_id;
                    $recipientDetails['full_name'] = $recipient['people_fields']['name'];
                    $recipientDetails['first_name'] = $recipient['people_fields']['name'];
                    $recipientDetails['email'] = $recipient['people_fields']['email'];
                    //adding Personal No, with separate key for BankID
                    $recipientDetails['personnr'] = (isset($recipient['people_fields']['personal_no']) && $recipient['people_fields']['personal_no'] != '' ? $recipient['people_fields']['personal_no'] : (isset($recipientDetails['personnr']) && $recipientDetails['personnr'] != '' ? $recipientDetails['personnr'] : ''));
                    $recipientDetails['mobile'] = (isset($recipient['people_fields']['mobile']) && $recipient['people_fields']['mobile'] != '' ? $recipient['people_fields']['mobile'] : (isset($recipientDetails['mobile']) && $recipientDetails['mobile'] != '' ? $recipientDetails['mobile'] : ''));
                    //we've both keys zip and zipcode one of them is new and other one is old
                    $recipientDetails['zipcode'] = (isset($recipient['people_fields']['zipcode']) && $recipient['people_fields']['zipcode'] != '' ? $recipient['people_fields']['zipcode'] : (isset($recipientDetails['zip']) && $recipientDetails['zip'] != '' ? $recipientDetails['zip'] : ''));
                    $recipientDetails['zip'] = (isset($recipient['people_fields']['zipcode']) && $recipient['people_fields']['zipcode'] != '' ? $recipient['people_fields']['zipcode'] : (isset($recipientDetails['zip']) && $recipientDetails['zip'] != '' ? $recipientDetails['zip'] : ''));
                    $recipientDetails['city'] = (isset($recipient['people_fields']['city']) && $recipient['people_fields']['city'] != '' ? $recipient['people_fields']['city'] : (isset($recipientDetails['city']) && $recipientDetails['city'] != '' ? $recipientDetails['city'] : ''));
                    $recipientDetails['address'] = (isset($recipient['people_fields']['address']) && $recipient['people_fields']['address'] != '' ? $recipient['people_fields']['address'] : (isset($recipientDetails['address']) && $recipientDetails['address'] != '' ? $recipientDetails['address'] : ''));
                    $recipientDetails['recipient_role'] = (isset($recipient['details']['recipient_role']) && $recipient['details']['recipient_role'] != '' ? $recipient['details']['recipient_role'] : '');

                    if(isset($recipient['organization_fields']['org_no']) && $recipient['organization_fields']['org_no'] != '') {
                        $recipientDetails['reg_no'] = (isset($recipient['organization_fields']['org_no']) && $recipient['organization_fields']['org_no'] != '' ? $recipient['organization_fields']['org_no'] : (isset($recipientDetails['reg_no']) && $recipientDetails['reg_no'] != '' ? $recipientDetails['reg_no'] : ''));
                    } if(isset($recipientDetails['company']) && $recipientDetails['company'] != '') {
                        $recipientDetails['company'] = (isset($recipient['organization_fields']['name']) && $recipient['organization_fields']['name'] != '' ? $recipient['organization_fields']['name'] : Tcrypt::decrypter($recipientDetails['company']));
                    } else {
                        $recipientDetails['company'] = (isset($recipient['organization_fields']['name']) && $recipient['organization_fields']['name'] != '' ? $recipient['organization_fields']['name'] : '');
                    }

                    $EncryptrecipientDetails['email'] = (isset($recipient['people_fields']['email']) && !empty($recipient['people_fields']['email']) ? Tcrypt::encrypter($recipient['people_fields']['email']) : '');
                    $EncryptrecipientDetails['full_name'] = (isset($recipient['people_fields']['name']) && !empty($recipient['people_fields']['name']) ? Tcrypt::encrypter($recipient['people_fields']['name']) : '');

                    //changing if condition to ternary condition starting
                    $recipientDetailsEncrypt['company'] = ($organizationName != '' ? Tcrypt::encrypter($organizationName) : (isset($recipientDetails['company']) && $recipientDetails['company'] != '' ? $recipientDetails['company'] : ''));
                    $recipientDetailsEncrypt['mobile'] = (isset($recipient['people_fields']['mobile']) && $recipient['people_fields']['mobile'] != '' ? $recipient['people_fields']['mobile'] : (isset($recipientDetails['mobile']) && $recipientDetails['mobile'] != '' ? $recipientDetails['mobile'] : ''));
                    $recipientDetailsEncrypt['zip'] = (isset($recipient['people_fields']['zipcode']) && $recipient['people_fields']['zipcode'] != '' ? $recipient['people_fields']['zipcode'] : (isset($recipientDetails['zip']) && $recipientDetails['zip'] != '' ? $recipientDetails['zip'] : ''));
                    $recipientDetailsEncrypt['city'] = (isset($recipient['people_fields']['city']) && $recipient['people_fields']['city'] != '' ? $recipient['people_fields']['city'] : (isset($recipientDetails['city']) && $recipientDetails['city'] != '' ? $recipientDetails['city'] : ''));
                    $recipientDetailsEncrypt['address'] = (isset($recipient['people_fields']['address']) && $recipient['people_fields']['address'] != '' ? $recipient['people_fields']['address'] : (isset($recipientDetails['address']) && $recipientDetails['address'] != '' ? $recipientDetails['address'] : ''));
                    $recipientDetailsEncrypt['reg_no'] = (isset($recipient['organization_fields']['org_no']) && $recipient['organization_fields']['org_no'] != '' ? $recipient['organization_fields']['org_no'] : (isset($recipientDetails['reg_no']) && $recipientDetails['reg_no'] != '' ? $recipientDetails['reg_no'] : ''));
                    $recipientDetailsEncrypt['personnr'] = (isset($recipient['people_fields']['personal_no']) && $recipient['people_fields']['personal_no'] != '' ? $recipient['people_fields']['personal_no'] : (isset($recipientDetails['personnr']) && $recipientDetails['personnr'] != '' ? $recipientDetails['personnr'] : ''));
                    //changing if condition to ternary condition ending

                    /* if($organizationName != '') {
                        $EncryptrecipientDetails['company'] = Tcrypt::encrypter($organizationName);
                    } if(isset($recipient['people_fields']['mobile']) && !empty($recipient['people_fields']['mobile'])) {
                        $EncryptrecipientDetails['mobile'] = $recipient['people_fields']['mobile'];
                    } if(isset($recipient['people_fields']['zipcode']) && !empty($recipient['people_fields']['zipcode'])) {
                        $EncryptrecipientDetails['zip'] = $recipient['people_fields']['zipcode'];
                    } if(isset($recipient['people_fields']['city']) && !empty($recipient['people_fields']['city'])) {
                        $EncryptrecipientDetails['city'] = $recipient['people_fields']['city'];
                    } if(isset($recipient['people_fields']['address']) && !empty($recipient['people_fields']['address'])) {
                        $EncryptrecipientDetails['address'] = $recipient['people_fields']['address'];
                    } if(isset($recipient['organization_fields']['org_no']) && !empty($recipient['organization_fields']['org_no'])) {
                        $EncryptrecipientDetails['reg_no'] = $recipient['organization_fields']['org_no'];
                    } if(isset($recipient['people_fields']['personal_no']) && !empty($recipient['people_fields']['personal_no'])) {
                        $EncryptrecipientDetails['personnr'] = $recipient['people_fields']['personal_no'];
                    } */

                    //update organization and linked with recipient starting
                    if($organizationName != '') {
                        $getOrganization = Organizations::where('registerby', $user_id)->where('name', Tcrypt::encrypter($organizationName))->select('id', 'name', 'reg_no', 'address', 'mobile', 'zip', 'city')->first();
                        if($getOrganization) {
                            $EncryptrecipientDetails['organization_id'] = $getOrganization['id'];
                            //insert organization fields into user_details object starting
                            if($EncryptrecipientDetails['organization_id'] != '') {
                                $recipientDetails['org_name'] = ($getOrganization['name'] != '' ? Tcrypt::decrypter($getOrganization['name']) : '');
                                $recipientDetails['org_reg_no'] = ($getOrganization['reg_no'] != '' ? $getOrganization['reg_no'] : '');
                                $recipientDetails['org_mobile'] = ($getOrganization['mobile'] != '' ? $getOrganization['mobile'] : '');
                                $recipientDetails['org_address'] = ($getOrganization['address'] != '' ? $getOrganization['address'] : '');
                                $recipientDetails['org_city'] = ($getOrganization['city'] != '' ? $getOrganization['city'] : '');
                                $recipientDetails['org_zip'] = ($getOrganization['zip'] != '' ? $getOrganization['zip'] : '');
                                $recipientDetails['org_id'] = ($getOrganization['id'] != '' ? $getOrganization['id'] : '');
                            }
                            //insert organization fields into user_details object ending
                        } else {
                            $orgNo = (isset($recipient['organization_fields']['org_no']) && $recipient['organization_fields']['org_no'] != '' ? $recipient['organization_fields']['org_no'] : '');
                            $orgPhone = (isset($recipient['organization_fields']['phone']) && $recipient['organization_fields']['phone'] != '' ? $recipient['organization_fields']['phone'] : '');
                            $orgAddress = (isset($recipient['organization_fields']['address']) && $recipient['organization_fields']['address'] != '' ? $recipient['organization_fields']['address'] : '');
                            $orgCity = (isset($recipient['organization_fields']['city']) && $recipient['organization_fields']['city'] != '' ? $recipient['organization_fields']['city'] : '');
                            $orgZipCode = (isset($recipient['organization_fields']['zipcode']) && $recipient['organization_fields']['zipcode'] != '' ? $recipient['organization_fields']['zipcode'] : '');
                            $getOrganizationId = Organizations::insertGetId(['name' => Tcrypt::encrypter($organizationName), 'reg_no' => $orgNo, 'address' => $orgAddress, 'mobile' => $orgPhone, 'zip' => $orgZipCode, 'city' => $orgCity]);
                            $recipientDetails['org_name'] = (isset($recipient['organization_fields']['name']) && $recipient['organization_fields']['name'] != '' ? $recipient['organization_fields']['name'] : '');
                            $recipientDetails['org_reg_no'] = $orgNo;
                            $recipientDetails['org_mobile'] = $orgPhone;
                            $recipientDetails['org_address'] = $orgAddress;
                            $recipientDetails['org_city'] = $orgCity;
                            $recipientDetails['org_zip'] = $orgZipCode;
                            $recipientDetails['org_id'] = $getOrganizationId;
                        }
                    }
                    //update organization and linked with recipient ending

                    $whereUpdate['id'] = $recipientDetails['id'];
                    $whereUpdate['registerby'] = $user_id;
                    $utility->updateItem("customers", $whereUpdate, $EncryptrecipientDetails);
                    //update request attachment object for recipient id to open recipient request attachment file upload popup
                    if(!empty($requestAttachmentJsonDecode)) {
                        if(isset($recipient['details']['recipient_role']) && $recipient['details']['recipient_role'] != '') {
                            $arrayNameSearchKey = array_search($recipient['details']['recipient_role'], array_column($requestAttachmentJsonDecode, 'Recipientname'));
                            if($requestAttachmentJsonDecode[$arrayNameSearchKey]['recipient_id'] != 'Me' && $requestAttachmentJsonDecode[$arrayNameSearchKey]['recipient_id'] != 'all') {
                                $requestAttachmentJsonDecode[$arrayNameSearchKey]['recipient_id'] = $recipientDetails['id'];
                            }
                        }
                    }
                }

                $recipientRoleNew = (isset($recipient['details']['recipient_role']) && $recipient['details']['recipient_role'] != '' ? $recipient['details']['recipient_role'] : '');

                //extra, organization and document fields code starting
                if(isset($extraAndDocumentFields) && !empty($extraAndDocumentFields)) {
                    $recipientDetails['extanddoc_fields'] = $extraAndDocumentFields;
                } if(isset($organizationArray) && !empty($organizationArray)) {
                    $recipientDetails['organization_fields'] = $organizationArray;
                } if(isset($detailsArray) && !empty($detailsArray)) {
                    $recipientDetails['details_fields'] = $detailsArray;
                } if(isset($documentArray) && !empty($documentArray)) {
                    $recipientDetails['document_fields'] = $documentArray;
                }
                //extra, organization and document fields code ending

                if(isset($recipient['people_fields']['mobile'])) {
                    $mobileno = $recipient['people_fields']['mobile'];
                } elseif(isset($recipientDetails['mobile'])) {
                    $mobileno = $recipientDetails['mobile'];
                } else {
                    $mobileno = '';
                }

                $recpid = (isset($recipientDetails['id']) && $recipientDetails['id'] != '' ? $recipientDetails['id'] : $recReturnId);
                $fullname = isset($recipientDetails['full_name']) ? $recipientDetails['full_name'] : $signersNameArray[$key];
                //$recipient['people_fields']['email'] = preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $recipient['people_fields']['email']);

                $reciver_email = isset($recipient['people_fields']['email']) ? $recipient['people_fields']['email'] : '';
                $company = (isset($recipientDetails['company']) && $recipientDetails['company'] != '' ? $recipientDetails['company'] : (isset($recipient['organization_fields']['name']) && $recipient['organization_fields']['name'] != '' ? $recipient['organization_fields']['name'] : ''));

                //invitation_type (invitation_through) 1 for email, 2 for email & sms, 3 for pos, 4 for in meeting
                //invitation_order defualt value is 1
                //confirmation (offer_confirmation) 1 for email & 2 for email & sms
                //authentication 1 for regular signature, 2 for paypal, 3 for bankID & 4 for pin via sms
                //role old one was like 1 for sign & 2 for review/new one is like Manager, CEO, User & so on
                //id_attachment 0 for no request & 1 for attachment
                //New code according to data manuiplation stating
                $invitation_type = $invitation_order = $confirmation = $authentication = 1;
                $id_attachment = 0;
                if(isset($recipient['details']['invitation_type'])) {
                    if($recipient['details']['invitation_type'] == 'email' || $recipient['details']['invitation_type'] == 'Email' || $recipient['details']['invitation_type'] == 'EMAIL') {
                        $invitation_type = 1;
                    } elseif($recipient['details']['invitation_type'] == 'email and sms' || $recipient['details']['invitation_type'] == 'Email And SMS' || $recipient['details']['invitation_type'] == 'EMAIL AND SMS' || $recipient['details']['invitation_type'] == 'email & sms' || $recipient['details']['invitation_type'] == 'Email & SMS' || $recipient['details']['invitation_type'] == 'EMAIL & SMS') {
                        $invitation_type = 2;
                    } elseif($recipient['details']['invitation_type'] == 'sms' || $recipient['details']['invitation_type'] == 'SMS') {
                        $invitation_type = 6;
                    } elseif($recipient['details']['invitation_type'] == 'pos' || $recipient['details']['invitation_type'] == 'POS' || $recipient['details']['invitation_type'] == 'Pos') {
                        $invitation_type = 3;
                    } elseif($recipient['details']['invitation_type'] == 'in meeting' || $recipient['details']['invitation_type'] == 'In Meeting' || $recipient['details']['invitation_type'] == 'IN MEETING') {
                        $invitation_type = 4;
                    }
                } if(isset($recipient['details']['invitation_order']) && $recipient['details']['invitation_order'] != '') {
                    $invitation_order = $recipient['details']['invitation_order'];
                } if(isset($recipient['details']['confirmation'])) {
                    if($recipient['details']['confirmation'] == 'email' || $recipient['details']['confirmation'] == 'Email'|| $recipient['details']['confirmation'] == 'EMAIL') {
                        $confirmation = 1;
                    } elseif($recipient['details']['confirmation'] == 'email and sms' || $recipient['details']['confirmation'] == 'Email And SMS' || $recipient['details']['confirmation'] == 'EMAIL AND SMS' || $recipient['details']['confirmation'] == 'email & sms' || $recipient['details']['confirmation'] == 'Email & SMS' || $recipient['details']['confirmation'] == 'EMAIL & SMS') {
                        $confirmation = 2;
                    } elseif($recipient['details']['confirmation'] == 'No confirmation' || $recipient['details']['confirmation'] == 'no confirmation' || $recipient['details']['confirmation'] == 'NO CONFIRMATION' || $recipient['details']['confirmation'] == 'no_confirmation' || $recipient['details']['confirmation'] == 'no-confirmation' || $recipient['details']['confirmation'] == 'NO_CONFIRMATION' || $recipient['details']['confirmation'] == 'NO-CONFIRMATION') {
                        $confirmation = 3;
                    }
                } if(isset($recipient['details']['authentication'])) {
                    if($recipient['details']['authentication'] == 'regular signature' || $recipient['details']['authentication'] == 'Regular Signature' || $recipient['details']['authentication'] == 'REGULAR SIGNATURE') {
                        $authentication = 1;
                        $signingMethods = 'E-signature';
                    } elseif($recipient['details']['authentication'] == 'paypal' || $recipient['details']['authentication'] == 'Paypal' || $recipient['details']['authentication'] == 'PAYPAL' || $recipient['details']['authentication'] == 'pay pal' || $recipient['details']['authentication'] == 'Pay Pal' || $recipient['details']['authentication'] == 'PAY PAL') {
                        $authentication = 2;
                    } elseif($recipient['details']['authentication'] == 'bankID' || $recipient['details']['authentication'] == 'BankID' || $recipient['details']['authentication'] == 'BANKID') {
                        $authentication = 3;
                        $signingMethods = 'BankID';
                    }  elseif($recipient['details']['authentication'] == 'NorwegianBankID' || $recipient['details']['authentication'] == 'Norwegian BankID' || $recipient['details']['authentication'] == 'NORWEGIANBANKID' || $recipient['details']['authentication'] == 'norwegian bankid' || $recipient['details']['authentication'] == 'norwegianbankid') {
                        $authentication = 9;
                        $signingMethods = 'Norwegian BankID';
                    } elseif($recipient['details']['authentication'] == 'DanishBankID' || $recipient['details']['authentication'] == 'Danish BankID' || $recipient['details']['authentication'] == 'DANISHBANKID' || $recipient['details']['authentication'] == 'danish bankid' || $recipient['details']['authentication'] == 'danishbankid') {
                        $authentication = 10;
                        $signingMethods = 'Danish BankID';
                    } elseif($recipient['details']['authentication'] == 'FinnishBankID' || $recipient['details']['authentication'] == 'Finnish BankID' || $recipient['details']['authentication'] == 'FINNISHBANKID' || $recipient['details']['authentication'] == 'finnish bankid' || $recipient['details']['authentication'] == 'finnishbankid') {
                        $authentication = 11;
                        $signingMethods = 'Finnish BankID';
                    } elseif($recipient['details']['authentication'] == 'pin via sms' || $recipient['details']['authentication'] == 'Pin Via SMS' || $recipient['details']['authentication'] == 'PIN VIA SMS') {
                        $authentication = 4;
                        $signingMethods = 'PIN via SMS';
                    } elseif($recipient['details']['authentication'] == 'attest' || $recipient['details']['authentication'] == 'at test' || $recipient['details']['authentication'] == 'Attest' || $recipient['details']['authentication'] == 'At test') {
                        $signingMethods = 'Attest';
                        if(!isset($recipient['people_fields']['role'])) {
                            $recipient['people_fields']['role'] = 2;
                            $authentication = 1;
                        }
                    } elseif($recipient['details']['authentication'] == 'view only' || $recipient['details']['authentication'] == 'viewonly' || $recipient['details']['authentication'] == 'View Only' || $recipient['details']['authentication'] == 'ViewOnly' || $recipient['details']['authentication'] == 'Viewonly') {
                        $authentication = 6;
                        $signingMethods = 'Read only';
                    }
                } if(isset($recipient['details']['id_attachment'])) {
                    if($recipient['details']['id_attachment'] == 'yes' || $recipient['details']['id_attachment'] == 'Yes' || $recipient['details']['id_attachment'] == 'YES') {
                        $id_attachment = 1;
                    } elseif($recipient['details']['id_attachment'] == 'no' || $recipient['details']['id_attachment'] == 'No' || $recipient['details']['id_attachment'] == 'NO') {
                        $id_attachment = 0;
                    }
                }
                //sendtemplate function
                //where('userid', $parent_id)->
                $recipientRolesData = Recipient_fields_roles::where('tab_components', $recipientRoleNew)->where('offer_doc_id', $templateId)->select('colorcode', 'tab_status')->first();
                $role = (isset($recipient['people_fields']['role']) ? $recipient['people_fields']['role'] : 1);
                $recipientDetails['getrecsettings'] = $getRecSettings;
                if($iframeURL == 1 && $parent_id == 17207) {
                    Recipient_fields_roles::where('tab_components', $recipientRoleNew)->where('offer_doc_id', $templateId)->update(['customer_id_iframe' => $recipientDetails['id']]);
                    $recipientDetails['getrecsettings'] = $recipientRolesData['tab_status'];
                }
                $recipientDetails['authentication'] = $authentication;
                $recipientDetails['invitation_order'] = $invitation_order;
                $recipientDetails['invitation_type'] = $invitation_type;
                $recipientDetails['id_attachment'] = $id_attachment;
                $recipientDetails['confirmation'] = $confirmation;
                $recipientDetails['recrolename'] = $recipientRoleNew;
                $recipientDetails['tab_components'] = $recipientRoleNew;
                $recipientDetails['colorcode'] = $recipientRolesData['colorcode'];
                $recipientDetails['role'] = $role;
                //New code according to data manuiplation ending

                //request attachment starting
                //Offersent::where();

                //request attachment ending

                /*$invitation_type = isset($recipient['people_fields']['invitation_type']) ? $recipient['people_fields']['invitation_type'] : 1;
                $invitation_order = isset($recipient['people_fields']['invitation_order']) ? $recipient['people_fields']['invitation_order'] : 1;
                $confirmation = isset($recipient['people_fields']['confirmation']) ? $recipient['people_fields']['confirmation'] : 1;
                $authentication = isset($recipient['people_fields']['authentication']) ? $recipient['people_fields']['authentication'] : 1;*/
                //comment from here and move it to upper section
                //$role = isset($recipient['people_fields']['role']) ? $recipient['people_fields']['role'] : 1;
                /*$id_attachment = isset($recipient['people_fields']['id_attachment']) ? $recipient['people_fields']['id_attachment'] : 0;*/
                
                $user_details = $recipientDetails;

                //For Adding Recipients Data in Template HTML (RJ) START
                /* $RecipientNum++;
                if($isTemplate) {
                    $sentData = Offersent::where('id', $offerSentid)->select('content')->first();
                    if($sentData) {
                        $OfferHTML = (isset($sentData['content']) && $sentData['content'] != '' ? Tcrypt::decrypter($sentData['content']) : '');
                        //postSendtemplate
                        $updatedHTML = $this->setRecipientsInContentNew($OfferHTML, $user_details, $RecipientNum, $LinkedOfferSentId, str_replace(' ', '', ucfirst(strtolower(trim($recipientRoleNew)))), $fullname, $data, $languageId);
                        //pre defined values code starting
                        //if(isset($data['autofill_fields']) && $data['autofill_fields'] != '') {
                        if(isset($data['recipients']) && $data['recipients'] != '') {
                            //$updatedHTML = $this->setCustomFieldValues(($updatedHTML != '' ? $updatedHTML : $OfferHTML), $data, $user_details, $RecipientNum);
                        }
                        //pre defined values code ending
                        //public function setRecipientsInContentNew
                        if($updatedHTML != '') {
                            $updatedHTML = Tcrypt::encrypter($updatedHTML);
                            Offersent::where('id', $offerSentid)->update(['content'=>$updatedHTML]);
                        }
                    }
                } */
                //For Adding Recipients Data in Template HTML (RJ) END

                $is_sender = 0;
                $status = 0;
                $sign_ip='';
                $sign_date = '';
                $uniqid = uniqid();

                if($invitation_order == 1) {
                    $status = 1;
                }

                //check authentication via pic code
                $pin_code = 0;
                if($authentication == 4 && $iframeURL != 1) {
                    $pin_code = rand(10000, 99999);
                }

                if($isPaid == 0) {
                    if($signatureLeft >= 1) {
                        $offerDetailId = $sentcontract->addOffersentdetails($offerSentid,$recpid,$status,$sign_date,$sign_ip,$user_details,$is_sender,$reciver_email,$fullname,$company,$invitation_order,$uniqid,  '',$confirmation,$role,$id_attachment,$authentication,$paypal_amount,$pin_code,$invitation_type);
                        if(!$utility->isSuperuser($user_id)) {
                            //$signatureLeft--;
                            if($authentication == 9 || $authentication == 10 || $authentication == 11) {
                                $signatureLeft = $signatureLeft-2;
                            } else {
                                $signatureLeft--;
                            }
                        }
                    } else {
                        return 0;
                    }
                } else {
                    $offerDetailId = $sentcontract->addOffersentdetails($offerSentid,$recpid,$status,$sign_date,$sign_ip,$user_details,$is_sender,$reciver_email,$fullname,$company,$invitation_order,$uniqid,  '',$confirmation,$role,$id_attachment,$authentication,$paypal_amount,$pin_code,$invitation_type);
                }

                //For Adding Recipients Data in Template HTML (RJ) START
                $RecipientNum++;
                if($isTemplate) {
                    $sentData = Offersent::where('id', $offerSentid)->select('content')->first();
                    if($sentData) {
                        $OfferHTML = (isset($sentData['content']) && $sentData['content'] != '' ? Tcrypt::decrypter($sentData['content']) : '');
                        //postSendtemplate
                        $updatedHTML = $this->setRecipientsInContentNew($OfferHTML, $user_details, $RecipientNum, $LinkedOfferSentId, str_replace(' ', '', ucfirst(strtolower(trim($recipientRoleNew)))), $fullname, $data, $languageId, $offerDetailId);
                        //pre defined values code starting
                        //if(isset($data['autofill_fields']) && $data['autofill_fields'] != '') {
                        if(isset($data['recipients']) && $data['recipients'] != '') {
                            //$updatedHTML = $this->setCustomFieldValues(($updatedHTML != '' ? $updatedHTML : $OfferHTML), $data, $user_details, $RecipientNum);
                        }
                        //pre defined values code ending
                        if($updatedHTML != '') {
                            $updatedHTML = Tcrypt::encrypter($updatedHTML);
                            Offersent::where('id', $offerSentid)->update(['content'=>$updatedHTML]);
                        }
                    }
                }
                //For Adding Recipients Data in Template HTML (RJ) END

                $firstname = $user_details['full_name'];
                $lastname = "";
                /* if(isset($user_details['last_name'])) {
                    $lastname = $user_details['last_name'];
                } */
                if(preg_match('/\s/',$user_details['full_name']) > 0) {
                    $lastname = substr($user_details['full_name'], strrpos($user_details['full_name'], ' ') + 1);
                    $divdedname = explode(" ", $user_details['full_name']);
                    $firstname = array_slice($divdedname, 0, -1);
                    $firstname = implode(" ", $firstname);
                    $lastname = end($divdedname);
                }

                $recipientDetailsWebHook = array();
                $recipientDetailsWebHook['id'] = $user_details['id'];
                $recipientDetailsWebHook['first_name'] = $firstname;
                $recipientDetailsWebHook['last_name'] = $lastname;
                $recipientDetailsWebHook['email'] = $user_details['email'];
                $recipientDetailsWebHook['company'] = (isset($user_details['company']) && $user_details['company'] != '' ? $user_details['company'] : '');
                $recipientDetailsWebHook['reg_no'] = (isset($user_details['reg_no']) && $user_details['reg_no'] != '' ? $user_details['reg_no'] : '');
                $recipientDetailsWebHook['personnr'] = (isset($user_details['personnr']) && $user_details['personnr'] != '' ? $user_details['personnr'] : '');
                $recipientDetailsWebHook['mobile'] = (isset($user_details['mobile']) && $user_details['mobile'] != '' ? $user_details['mobile'] : '');
                $recipientDetailsWebHook['address'] = (isset($user_details['address']) && $user_details['address'] != '' ? $user_details['address'] : '');
                $recipientDetailsWebHook['city'] = (isset($user_details['city']) && $user_details['city'] != '' ? $user_details['city'] : '');
                $recipientDetailsWebHook['zipcode'] = (isset($user_details['zipcode']) && $user_details['zipcode'] != '' ? $user_details['zipcode'] : '');


                /* $recipientDetailsWebHook['company'] = $user_details['company'];
                $recipientDetailsWebHook['reg_no'] = $user_details['reg_no'];
                $recipientDetailsWebHook['personnr'] = $user_details['personnr'];
                $recipientDetailsWebHook['mobile'] = $user_details['mobile'];
                $recipientDetailsWebHook['address'] = $user_details['address'];
                $recipientDetailsWebHook['city'] = $user_details['city'];
                $recipientDetailsWebHook['zipcode'] = $user_details['zipcode']; */
                $recipientDetailsWebHook['signing_method'] = $signingMethods;
                array_push($pushWebHookDetails, $recipientDetailsWebHook);
                
                if($signing_url == 1) {
                    /* $signUrl= $domain_name.'offer/view/'.$offerDetailId.'/'.$uniqid;
                    return $signUrl; */

                    //$signUrl[] = $domain_name.'offer/view/'.$offerDetailId.'/'.$uniqid;
                    if(isset($data['payment_widget']) && $data['payment_widget'] == 1) {
                        $signUrl = '';
                        $signUrl = $domain_name.'document/view/'.$offerDetailId.'/'.$uniqid;
                    } else {
                        $signUrl[] = $domain_name.'document/view/'.$offerDetailId.'/'.$uniqid;
                    }
                }

                if($invitation_order == 1) {
                    if($invitation_type == 1 || $invitation_type == 2 || $invitation_type == 6){
                        //exec("nohup lynx -dump $domain_name/api/v2/sendcontract/sendcontractnotification/$offerSentid/$offerDetailId > /dev/null 2>&1 &");
                        if($signing_url != 1 && $iframeURL != 1 && $invitation_type != 6) {
                            $sentcontract->getSendcontractnotification($offerSentid,$offerDetailId);
                        }
                       
                        if(($invitation_type == 2 || $invitation_type == 6) && $iframeURL != 1) {
                            $parentId = $utility->getParent($user_id);
                            $totalRemSMS = $utility->checkRemainingSMS($parentId);
                            if($totalRemSMS > 0) {
                                $message = "";
                                if((isset($data["invitation_sms"]) && $data["invitation_sms"] != "") || (isset($data["invitation_message"]) && $data["invitation_message"] != "")) {
                                    $recnamename = explode(' ', $recipient['people_fields']['name']);
                                    //$invitationSMSMessage = $data["invitation_sms"];
                                    $invitationSMSMessage = (isset($data["invitation_sms"]) && $data["invitation_sms"] != '' ? $data["invitation_sms"] : (isset($data["invitation_message"]) && $data["invitation_message"] != '' ? $data["invitation_message"] : ''));
                                    if(strpos($invitationSMSMessage, '{rec_name}') !== false || strpos($invitationSMSMessage, '{rec_firstname}') !== false || strpos($invitationSMSMessage, '{full_name}') !== false || strpos($invitationSMSMessage, '{document_name}') !== false || strpos($invitationSMSMessage, '{offer_url}') !== false) {
                                        $invitationSMSMessage = str_replace("{rec_name}", $recipient['people_fields']['name'], $invitationSMSMessage);
                                        $invitationSMSMessage = str_replace("{rec_firstname}", $recnamename[0], $invitationSMSMessage);
                                        $invitationSMSMessage = str_replace("{full_name}", $userdata->full_name, $invitationSMSMessage);
                                        $invitationSMSMessage = str_replace("{document_name}", $visible_name, $invitationSMSMessage);
                                        $invitationSMSMessage = str_replace("{offer_url}", ($domain_name.'document/view/'.$offerDetailId.'/'.$uniqid), $invitationSMSMessage);
                                    } else {
                                        $invitationSMSMessage = str_replace("[recipient.fullname]", $recipient['people_fields']['name'], $invitationSMSMessage);
                                        $invitationSMSMessage = str_replace("[recipient.firstname]", $recnamename[0], $invitationSMSMessage);
                                        $invitationSMSMessage = str_replace(["[Me.name]", "[me.name]"], [$userdata->full_name, $userdata->full_name], $invitationSMSMessage);
                                        $invitationSMSMessage = str_replace("[document_name]", $visible_name, $invitationSMSMessage);
                                        $invitationSMSMessage = str_replace("[offer_url]", ($domain_name.'document/view/'.$offerDetailId.'/'.$uniqid), $invitationSMSMessage);
                                    }

                                    $message .= $invitationSMSMessage;
                                } else {
                                    $message .= 'Hi '.$userdata->full_name . ' has sent you document.';
                                    $message .= 'Review document by click the link below. ' . ($domain_name.'document/view/'.$offerDetailId.'/'.$uniqid);
                                }
                                $utility->sendsms($mobileno,urldecode($message));
                                //added new code starting
                                $utility->updateSentsms($parentId);
                                //added new code ending
                                //add sms logs starting
                                $smsLogsData = array(
                                    "user_id" => $user_id,
                                    "offer_sent_id" => $offerSentid,
                                    "offersent_detail_id" => $offerDetailId,
                                    "phone_number" => $mobileno,
                                    "message" => $message,
                                    "section_name" => "Invitation SMS through API"
                                );
                                $utility->addItem("sms_logs", $smsLogsData);
                                //add sms logs ending
                                if(!$utility->isSuperuser($user_id)) {
                                    $whereUserLogin['id'] = $parentId;
                                    $updateRemainingSMS['total_remaing_sms'] = $totalRemSMS-1;
                                    $utility->updateItem('users_login', $whereUserLogin, $updateRemainingSMS);
                                }
                            }
                        }   //invitation type 2 ends here
                    }

                    if($invitation_type == 4 && $iframeURL != 1) {
                        $parties['partyname'] = $fullname;
                        $parties['offerDetailId'] = $offerDetailId;
                        $parties['uniqid'] = $uniqid;
                        array_push($meetingArray, $parties);
                    }
                } if($invitation_type == 3 && $iframeURL != 1) {
                    //$offer_url =  $domain_name.'offer/view/'.$offerDetailId.'/'.$uniqid;
                    $offer_url =  $domain_name.'document/view/'.$offerDetailId.'/'.$uniqid;
                    $posDetails['user_id'] = $user_id;
                    $posDetails['offer_url'] = $offer_url;
                    $posDetails['offer_id'] = $offerSentid;
                    $posDetails['sent_detail_id'] = $offerDetailId;
                    $posDetails['invitation_order'] = $invitation_order;
                    $utility->addItem("pushed_ipad",$posDetails);
                    $utility->createThumbnail($offerSentid);
                }
            }
            $getRecSettings++;
        }//recipients loop end

        if($parentSettings['webhook_settings'] != NULL) {
            try {
                $webhooksettings = json_decode($parentSettings['webhook_settings'], true);
                if(isset($webhooksettings['for_senddoc']) && $webhooksettings['for_senddoc'] == 1) {
                    $sign_date = date("Y-m-d H:i:s");
                    $sign_ip = (isset($_SERVER['REMOTE_ADDR']) && $_SERVER['REMOTE_ADDR'] != '' ? $_SERVER['REMOTE_ADDR'] : '');

                    $offerSendDetailsOfSender = Offersentdetails::where(["offer_sent_id" => $offerSentid, 'is_sender' => 1])->select('id', 'unique_id')->first();
                    $senderdetailsArray = array();
                    $senderdetailsArray["first_name"] = $userArrar["full_name"];
                    $senderdetailsArray["last_name"] = (isset($userArrar["last_name"]) && $userArrar["last_name"]!= '' ? $userArrar["last_name"] : '');
                    $senderdetailsArray["company"] = (isset($userArrar["company"]) ? $userArrar["company"] : '');
                    $senderdetailsArray["email"] = $userArrar["email"];
                    $senderdetailsArray["reg_no"] = (isset($userArrar["reg_no"]) ? $userArrar["reg_no"] : '');
                    $senderdetailsArray["address"] = (isset($userArrar["address"]) ? $userArrar["address"] : '');
                    $senderdetailsArray["telephone"] = (isset($userArrar["telephone"]) ? $userArrar["telephone"] : '');
                    $senderdetailsArray["post_code"] = (isset($userArrar["post_code"]) ? $userArrar["post_code"] : '');
                    $senderdetailsArray["city"] = (isset($userArrar["city"]) ? $userArrar["city"] : '');
                    $senderdetailsArray["id"] = $userdata->user_id;
                    
                    //document details array
                    $doc_detaildata = array();
                    $doc_detaildata['document_sentID'] = $offerSentid;
                    $doc_detaildata['document_name'] = $visible_name;
                    $doc_detaildata['document_sent_date'] = $sign_date;
                    $doc_detaildata['document_status'] = 'sent';
                    $doc_detaildata['document_url'] = $domain_name.'document/view/'.$offerSendDetailsOfSender['id'].'/'.$offerSendDetailsOfSender['unique_id'];
                    
                    //main array to send to webhook
                    $doc_data = array();

                    $doc_data['document_details'] = $doc_detaildata;
                    $doc_data['sender_details'] = $senderdetailsArray;
                    $doc_data['recipient_details'] = $pushWebHookDetails;

                    //added by me (MS) 11 June 2020 
                    $getUsersData = User::where('id', $user_id)->select('super_access_token')->first();
                    $externalData = [];
                    $externalData['document_id'] = $offerSentid;
                    $externalData['access_token'] = $getUsersData['super_access_token'];
                    $externalData['external_response'] = 1;
                    $getResponseOfSpecificDocumentDetail = $this->getSpecificdocumentdetail($externalData);
                    if(isset($webhooksettings['webhook_templates']) && !empty($webhooksettings['webhook_templates']) && $templateId != '') {
                        if(in_array($templateId, $webhooksettings['webhook_templates'])) {
                            $utility->postSenddatatowebhook($webhooksettings['webhook_URL'], $getResponseOfSpecificDocumentDetail->getData());
                        }
                    } else {
                        $utility->postSenddatatowebhook($webhooksettings['webhook_URL'], $getResponseOfSpecificDocumentDetail->getData());
                    }
                    $addupdateapiaccesslogs = $utility->addupdateapiaccesslogs($user_id, 'webhook/senddocument', $getResponseOfSpecificDocumentDetail->getData(), -1);
                    //added by me (MS) 11 June 2020 ending
                }
            } catch (\Exception $e) {
            }// catche ends
        }

        if($userData->payment_version == 2){
            $userobj['users_signatures'] = $signatureLeft;
        }else{
            $userobj['monthly_signature'] = $signatureLeft;
        }
        //added by (MS) for change status from saved to trail starting
        $userobj['savedfrom_contract'] = 0;
        //added by (MS) for change status from saved to trail ending
        //request attachment while sending document and separate the recipients object to insert into their specific column starting
        //sender attachment doesn't show only recipients shows and sender viewed shows not recipients viewed
        if(!empty($requestAttachmentJsonDecode)) {
            $offerSentDataForAttachment = Offersentdetails::where('offer_sent_id', $offerSentid)->where('is_sender', 0)->select('id', 'request_attachment', 'customer_id')->get()->toArray();
            foreach($offerSentDataForAttachment as $offerSentDataForAttachmentKey => $offerSentDataForAttachmentValue) {
                $customerId = $offerSentDataForAttachmentValue['customer_id'];
                $recipientAttachmentArray = [];
                foreach($requestAttachmentJsonDecode as $requestAttachmentJsonDecodeKey => $requestAttachmentJsonDecodeValue) {
                    if($requestAttachmentJsonDecodeValue['recipient_id'] == 'all' || $requestAttachmentJsonDecodeValue['recipient_id'] == $customerId) {
                        if(isset($requestAttachmentJsonDecodeValue["is_uploaded"]) && $requestAttachmentJsonDecodeValue["is_uploaded"] == 1) {
                        } else {
                            array_push($recipientAttachmentArray, $requestAttachmentJsonDecodeValue);
                        }
                    }
                }
                Offersentdetails::where('id', $offerSentDataForAttachmentValue['id'])->update(['request_attachment' => json_encode($recipientAttachmentArray)]);
            }
            Offersent::where('id', $offerSentid)->update(['request_attachment' => json_encode($requestAttachmentJsonDecode)]);
        }
        //request attachment while sending document and separate the recipients object to insert into their specific column ending
        $utility->updateItem("users_login",$whereu,$userobj);
        if(!empty($signUrl)) {
            return $signUrl;
        } else {
            return $offerSentid;
        }
        //return $offerSentid;
    }
    
    /* function for sign contract*/
    public function postSigncontract(){
        $data = Input::all();
        $utility = new utility();
        $mymailer = new mymailer();
        $domain_name = asset('/');
        $curDate=date('Y-m-d H:i:s');
        $signed_ip=$_SERVER['REMOTE_ADDR'];
        if(isset($data['signing_link']) || !empty($data['signing_link'])){
            $signing_link = $data['signing_link'];
            $link_array = explode("/",$signing_link);
            $offerDetailId = $link_array[5];
            $uniqueId = $link_array[6];
            $OfferSentDetails = Offersentdetails::where('id','=', $offerDetailId)->where('unique_id', '=', $uniqueId)->first();
            $offerSentId = $OfferSentDetails['offer_sent_id'];
            $userID = $utility->getUseridfromOffer($offerSentId);

            //Creating Thumbnail for signed Contract
            $utility->createThumbnail($offerSentId,1);

            //Set User's selected timezone
            $userTimezone =  $utility->getUsertimezone($userID);
            if($userTimezone != '')date_default_timezone_set($userTimezone);
            
            $gps=$utility->GetGpsCordinates($signed_ip);
            
            if($OfferSentDetails['offer_status'] != 4){
                if($OfferSentDetails['role'] == 2 && $OfferSentDetails['offer_status'] < 4)
                {
                        // to change the status for review online   
                        Offersentdetails::where('id', $offerDetailId)->update(['offer_status' => 3,'document_read_date' => $curDate,'read_ip' => $signed_ip]);
                        $Update['offer_status'] = 3;
                        if($OfferSentDetails['offer_status'] != 3){
                            $Update['unread_notification'] = 1;
                        }
                        Offersent::where('id', $OfferSentDetails['offer_sent_id'])->update($Update);
                        return Response::json(['status'=>'success','result' => 'Contract has been read successfully']);
                }else{


                    if($OfferSentDetails['authentication_method'] == 4){
                        if(isset($data['pin_code']) && !empty($data['pin_code'])){
                            if($data['pin_code'] != $OfferSentDetails['pin_code']){
                                return Response::json(['status'=>'error','result' => 'Invalid pin code']);
                            }
                        }else{
                            return Response::json(['status'=>'error','result' => 'pin code is required for sign contract']);
                        }
                    }


                    //Check if there are signatures in senders account
                    $isPending = 0;
                    $userID = $utility->getParent($userID);
                    //Checking if Paid User
                    //Checking if Paid User
                    if($utility->isPaiduser($userID)){
                        $signatures = $utility->checkSignatures($userID);
                        $monthlySig = $signatures['monthly_signature'];
                        $extraSig = $signatures['extra_signature'];
                        if($monthlySig < 1){
                            $isPending = ($extraSig > 0 ? 0 : 1);
                        }
                        $where['id'] = $userID;
                        if($monthlySig < 1){
                            if($extraSig > 0){
                                $update['extra_signature'] = $extraSig-1;
                                $utility->updateItem('users_login',$where,$update);
                            }
                        }
                        else{
                            $update['monthly_signature'] = $monthlySig-1;
                            $utility->updateItem('users_login',$where,$update);
                        }
                    }
                    Offersentdetails::where('id', $offerDetailId)->update([
                        'offer_status'       => 4,
                        'signed_date'        => $curDate,
                        'signed_ip'          => $signed_ip,
                        'gps_location'       => $gps,
                        'is_pending'         =>  $isPending,
                        'isretargeting'      => 0
                    ]);
                    //Update for New Dashboard Notification
                    Offersent::where('id', $offerSentId)->update(['unread_notification' => 1]);
                    //Sending Verification Email to All Parties Command Executes on Server
                    if($isPending == 0){            
                        exec("nohup lynx -dump $domain_name/textpress/sendverificationemail/$offerDetailId > /dev/null 2>&1 &");
                        //$utility->sendverificationEmail($offerDetailId);
                    }


                    $getAllrecipient = Offersentdetails::where('offer_sent_id','=', $offerSentId)->where('is_sender', '=', 0)->get();
                    $numberOfrec=$getAllrecipient->count();
                    $status4=0;
                    foreach($getAllrecipient as $eachRecipient)
                    {
                      if($eachRecipient['offer_status']==4){$status4=$status4+1;}   

                    }

                    if($numberOfrec == $status4)
                    {   
                            Offersent::where('id', $offerSentId)->update(['offer_status' => 4]);
                    }

                    /*
                     * Condition for Invitation Order Functionality
                     */
                    else
                    {
                        $OffersentData = Offersent::where('id', $offerSentId)->first();
                        $invitationOrder = $OfferSentDetails['invitation_order']+1;
                        $getNextrecipient = Offersentdetails::where('offer_sent_id','=', $offerSentId)->where('invitation_order', '=', $invitationOrder)->first();

                        //Updating POS offer invitation order to 1 for next unsigned offer
                        if($getNextrecipient['invitation_type'] == 3){
                                Pushedipad::where('invitation_order', '=' , $invitationOrder)
                                          ->where('offer_id', '=', $offerSentId)
                                          ->where('is_signed_offer', '=', 0)
                                          ->update(['invitation_order' => 1]);
                        }

                        else if($getNextrecipient){
                            $utility->sendOfferinvitation($getNextrecipient, $OffersentData);
                        }
                    }
                    return Response::json(['status'=>'success','result' => 'Contract has been signed successfully']);
                }
            }else{
                return Response::json(['status'=>'success','result' => 'This contract has already signed']);
            }
        }else{
            return Response::json(['status'=>'error','result' => 'signing link is invalid or empty signing link']);
        }
    }
    public function postFiles(){
        $data = Input::all();
        $utility = new utility();
        $domain_name = asset('/');
        $contract_id = $data['contract_id'];
        if(isset($data['access_token'])){
                $access_token = $data['access_token'];
        }else{
                return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
        $user_id = $utility->getUserIdByAuthToken($access_token);
        if($user_id){
            $where['sender_id'] = $user_id;
            $where['id'] = $contract_id;
            $result = $utility->getItem("offer_sent",$where,array('id'));
            if(!empty($result)){
                return $domain_name.'avtal/downloadpdf/'.$contract_id;
            }else{
                return Response::json(['status'=>'error','result' => 'Invalid contract id or access token']);
            }
        }else{
            return Response::json(['status'=>'error','result' => 'Invalid access_token']);
        }
    }
    

    /**
     * create template by uload pdf template
     * @return type templateid
     */
    public function postUploadpdftemplate() {
        ini_set('max_execution_time', 800);
        $data = Input::all();

        if(isset($data['access_token'])) {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }

        if(isset($data['offerid'])) {
            $offerid = $data['offerid'];
        } else {
            $offerid = 0;
        }

        if(!isset($data['file']) || empty($data['file'])) {
            return Response::json(['status'=>'error','result' =>'File is missing']);
        } else {
            $file = $data['file'];
        }

        $uniqid = uniqid();

        $fileTypes = array('docx','doc','xls','xlsx','csv','ppt','pptx','pdf');
        if(!in_array(strtolower($file->getClientOriginalExtension()), $fileTypes)) {
            return Response::json(['status' => 'error', 'result' => 'Invalid document file type, only document files are acceptable']);
        }

        $file_original_name = $file->getClientoriginalName();
        $file_ext = strtolower($file->getClientOriginalExtension());
        $filename = pathinfo($file_original_name, PATHINFO_FILENAME);

        $file_name = $file_original_name;
        $name = 'pdftemplate_'.$uniqid.'.pdf';
        $name_new = 'pdftemplate_'.$uniqid.'.'.$file_ext;
        $destination = public_path().'/uploads/contractpdf';

        $Allowed_Ext = array('docx','doc','xls','xlsx','csv','ppt','pptx');
        if(in_array($file_ext,$Allowed_Ext)) {
            $file->move($destination, $name_new);
            $file_path = $destination.'/'.$name_new;
            $Conversionapi = new Conversionapi();
            try {
                $Conversionapi->convert($file_path, $destination.'/'.$name);
            } catch(\Exception $e) {
                if(file_exists($file_path)) {
                    unlink($file_path);
                }
                return Response::json(['status' => 'error', 'result' => 'Unable to load this file']);
            } if(file_exists($file_path)) {
                unlink($file_path);
            }
        } else {
            $file->move($destination, $name);
        }

        $userTemplate = new usertemplateController();
        $retOfferid = $userTemplate->createPdfTemplate($offerid,$destination,$name,$file_name,$access_token,'isapi');
        return Response::json(['status' => 'success', 'result' => ['template_id' => $retOfferid]]);

        /*$file_name = $file->getClientoriginalName();
        $name  = 'pdftemplate_'.$uniqid.'.pdf';
        $destination = public_path().'/uploads/templatepdf';
        $file->move($destination, $name );
        $userTemplate = new usertemplateController();
        $retOfferid = $userTemplate->createPdfTemplate($offerid,$destination,$name,$file_name,$access_token,'isapi');
        return Response::json(['status' => 'success', 'result' => ['template_id' => $retOfferid]]);*/
        
    }

    public function setRecipientsInContent($content='',$recipientdata=null,$RecipientNum=null,$LinkedOfferSentId='') {
        if($content != '' && $recipientdata != null && $RecipientNum != null){
            $html = new \Htmldom($content);
            $ExtraFieldsFromDetails = $organizationFieldsFromDetails = '';
            if($LinkedOfferSentId != ''){
                $RecDetails = Offersentdetails::where('offer_sent_id', $LinkedOfferSentId)->where('customer_id',$recipientdata['id'])->select('user_details')->first();
                $RecDetails = json_decode(Tcrypt::decrypter($RecDetails['user_details']),true);
                if(isset($RecDetails['extra_fields']) && $RecDetails['extra_fields'] != '') {
                    $ExtraFieldsFromDetails = json_decode($RecDetails['extra_fields'], true);
                }
            }
            foreach($html->find(".text[recipientselectedid=recipient$RecipientNum]") as $element) {
                $element->setAttribute('recipientselected', $recipientdata['full_name']);
                $element->setAttribute('recipientselectedid', $recipientdata['id']);
                foreach($recipientdata as $reckey => $recval) {
                    if(($reckey == 'extra_fields' && $recval != '') || ($reckey == 'extra_fields' && $ExtraFieldsFromDetails != '')) {
                        $extra_fields = ($ExtraFieldsFromDetails != '' ? $ExtraFieldsFromDetails : json_decode($recipientdata[$reckey], true));
                        foreach($extra_fields as $extraKey => $extraVal) {
                            $fieldName = $extraVal['fieldName'];
                            $fieldValue = $extraVal['fieldValue'];
                            if($element->selectedtype == $fieldName && $element->prechecked == 1) {
                                $element->find('h4', 0)->innertext = $fieldValue;
                            } elseif(stripos(strtolower($element->find('h4', 0)->plaintext), 'is empty') !== false && $element->prechecked == 1) {
                                $element->find('h4', 0)->innertext = '';
                            }
                        }
                    } else {
                        if($element->selectedtype == $reckey && $element->prechecked == 1 || (strpos($element->getAttribute('class'), 'signature_box_popupcontainer') !== false && $element->prechecked == 0)) {
                            if(strpos($element->getAttribute('class'), 'signature_box_popupcontainer') !== false) {
                                $element->find('h4', 0)->innertext = $recipientdata['full_name'].' signs here';
                            } else {
                                $element->find('h4', 0)->innertext = $recipientdata[$reckey];
                            }
                            //$element->find('h4',0)->innertext = $recipientdata[$reckey];
                        } elseif(stripos(strtolower($element->find('h4',0)->plaintext), 'is empty') !== false && isset($element->prechecked) && $element->prechecked != '' && $element->prechecked == 1) {
                            $element->find('h4', 0)->innertext = '';
                        }
                    }
                }
            }
            foreach($recipientdata as $reckey => $recval) {
                if(($reckey == 'extra_fields' && $recval != '') || ($reckey == 'extra_fields' && $ExtraFieldsFromDetails != '')) {
                    $extra_fields = ($ExtraFieldsFromDetails != '' ? $ExtraFieldsFromDetails : json_decode($recipientdata[$reckey],true));
                    foreach($extra_fields as $extraKey => $extraVal) {
                        $fieldName = $extraVal['fieldName'];
                        $fieldValue = $extraVal['fieldValue'];
                        $html = str_ireplace('{rec'.$RecipientNum.'_'.$fieldName.'}</span>&nbsp;', $fieldValue.'</span> ', $html);
                        $html = str_ireplace('{rec'.$RecipientNum.'_'.$fieldName.'}', $fieldValue, $html);
                    }
                } else {
                    $html = str_replace('{rec'.$RecipientNum.'_'.$reckey.'}</span>&nbsp;', $recipientdata[$reckey].'</span> ', $html);
                    $html = str_replace('{rec'.$RecipientNum.'_'.$reckey.'}', $recipientdata[$reckey], $html);
                }
            }
            return $html;
        } elseif($content != '') {
            return $content;
        } else {
            return '';
        }
    }

    public function setRecipientsInContentNew($content='',$recipientdata=null,$RecipientNum=null,$LinkedOfferSentId='',$recipientRoleNew='',$recipientFullName='',$data='', $languageId='',$detailId='') {
        if($content != '' && $recipientdata != null && $RecipientNum != null) {
            $utility = new Utility();
            $user_id = $utility->getUserIdByAuthToken($data['access_token']);
            $parent_id = $utility->getParent($user_id);
            $getTranslation = $utility->GeneralTranslations($languageId, [50, 651, 978, 1710, 53, 51, 1647, 652, 346, 906, 56, 57, 1617, 1620, 1621, 1618, 1619]);
            $html = new \Htmldom($content);
            $ExtraFieldsFromDetails = $organizationFieldsFromDetails = '';
            if($LinkedOfferSentId != '') {
                $RecDetails = Offersentdetails::where('offer_sent_id', $LinkedOfferSentId)->where('customer_id',$recipientdata['id'])->select('user_details')->first();
                $RecDetails = json_decode(Tcrypt::decrypter($RecDetails['user_details']), true);
                if(isset($RecDetails['extra_fields']) && $RecDetails['extra_fields'] != '') {
                    $ExtraFieldsFromDetails = json_decode($RecDetails['extra_fields'], true);
                }
            }
            $htmlFields = '';
            //$html->find('.template_container', 0)->setAttribute('sentbyapi', 1);
            if($html->find(".text[recipientselectedid=recipient$RecipientNum]")) {
                $htmlFields = $html->find(".text[recipientselectedid=recipient$RecipientNum]");
            } else {
                //$htmlFields = $html->find(".text[getrecsettings=$RecipientNum][recipientselectedid!='me']");
                $htmlFields = $html->find(".text[getrecsettings=$RecipientNum]");
            }
            if($parent_id == 17207 && isset($data['iframe_url']) && $data['iframe_url'] == 1) {
                //$documentFieldText = $html->find(".documentField");
                $documentFieldText = $html->find(".field_box_popupcontainer");
                foreach($documentFieldText as $element) {
                    //document & custom fields to fill the value with an API
                    if(strpos($element->getAttribute('class'), 'documentFieldText') !== false || strpos($element->getAttribute('class'), 'documentFieldDate') !== false || strpos($element->getAttribute('class'), 'customField') !== false) {
                        if(isset($data['documentfields']) && !empty($data['documentfields'])) {
                            if($this->is_JSON($data['documentfields'])) {
                                $documentFields = json_decode($data['documentfields'], true);
                                if(!empty($documentFields)) {
                                    foreach($documentFields as $documentFieldsKeys => $documentFieldsValue) {
                                        foreach($documentFieldsValue['document_fields'] as $docAllKeys => $docAllValue) {
                                            if(!empty(trim($docAllValue))) {
                                                if($element->selectedtype == $docAllKeys || (isset($element->apiattribute) && $element->apiattribute != '' && $element->apiattribute == $docAllKeys)) {
                                                    if($element->find('h4', 0)) {
                                                        $element->find('h4', 0)->innertext = (isset($docAllValue) ? trim($docAllValue) : '');
                                                        $element->find('h4', 0)->setAttribute('fromAPIh4', 1);
                                                        if($element->find('input', 0)) {
                                                            $element->find('input', 0)->setAttribute('value', trim($docAllValue));
                                                        }
                                                        //if($element->recipientselectedid == 'me') {
                                                            //$element->find('input', 0)->plaintext = $docAllValue;
                                                        //}
                                                    }
                                                } if(strpos($element->getAttribute('class'), 'customField') !== false && $element->recipientselectedid == 'me' && $element->selectedtype == $docAllKeys) {
                                                    if($element->find('h4', 0)) {
                                                        $element->find('h4', 0)->innertext = (isset($docAllValue) ? trim($docAllValue) : '');
                                                        $element->find('h4', 0)->setAttribute('fromAPIh4', 1);
                                                        if($element->find('input', 0)) {
                                                            $element->find('input', 0)->setAttribute('value', trim($docAllValue));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                //tags replace
                $documentTagName = $html->find(".dynamicTag");
                foreach($documentTagName as $element) {
                    if(strpos($element->getAttribute('class'), 'documenttagName') !== false) {
                        if(!isset($data['iframe_url']) || $data['iframe_url'] == '' || $data['iframe_url'] == 0) {
                            $changeRedClass = $element->getAttribute('class');
                            $element->setAttribute('class', str_replace('color-red', 'removeRedClass', $changeRedClass));  //for tags
                        }
                        //$element->setAttribute('fillbyapi', 1);
                        if(isset($data['documentfields']) && !empty($data['documentfields'])) {
                            if($this->is_JSON($data['documentfields'])) {
                                $documentFields = json_decode($data['documentfields'], true);
                                if(!empty($documentFields)) {
                                    foreach($documentFields as $documentFieldsKeys => $documentFieldsValue) {
                                        foreach($documentFieldsValue['document_fields'] as $docAllKeys => $docAllValue) {
                                            if($element->tagname == $docAllKeys) {
                                                $element->setAttribute('fillbyapi', 1);
                                                //$html = str_replace('['.$docAllKeys.']</span>&nbsp;', $docAllValue.'</span> ', $html);
                                                //$html = str_replace('['.$docAllKeys.']', $docAllValue, $html);
                                                $element->innertext = $docAllValue;
                                                if(!isset($data['iframe_url']) || $data['iframe_url'] == '' || $data['iframe_url'] == 0) {
                                                    $changeRedClass = $element->getAttribute('class');
                                                    $element->setAttribute('class', str_replace('removeRedClass', ' ', $changeRedClass));  //for tags
                                                } else {
                                                    $changeRedClass = $element->getAttribute('class');
                                                    $element->setAttribute('class', str_replace('color-red', ' ', $changeRedClass));  //for tags
                                                }
                                            } if(isset($element->apitagattribute) && $element->apitagattribute != '' && $element->apitagattribute == $docAllKeys) {
                                                $element->setAttribute('fillbyapi', 1);
                                                $element->innertext = $docAllValue;
                                                if(!isset($data['iframe_url']) || $data['iframe_url'] == '' || $data['iframe_url'] == 0) {
                                                    $changeRedClass = $element->getAttribute('class');
                                                    $element->setAttribute('class', str_replace('removeRedClass', ' ', $changeRedClass));  //for tags
                                                } else {
                                                    $changeRedClass = $element->getAttribute('class');
                                                    $element->setAttribute('class', str_replace('color-red', ' ', $changeRedClass));  //for tags
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return $html;
            }
            
            foreach($htmlFields as $element) {
                $element->setAttribute('fillbyapi', 1);
                if($element->recipientselectedid != 'me') {
                    $element->setAttribute('recipientselected', $recipientdata['full_name']);
                    $element->setAttribute('recipientselectedid', $recipientdata['id']);
                    $element->setAttribute('rectooltip', $recipientRoleNew);
                    $element->setAttribute('recipient_detailid', $detailId);
                    $element->setAttribute('recipient_rolename', $recipientRoleNew);
                    foreach($recipientdata as $reckey => $recval) {
                        if(($reckey == 'extra_fields' && $recval != '') || ($reckey == 'extra_fields' && $ExtraFieldsFromDetails != '')) {
                            $extra_fields = ($ExtraFieldsFromDetails != '' ? $ExtraFieldsFromDetails : json_decode($recipientdata[$reckey], true));                        
                            foreach($extra_fields as $extraKey => $extraVal) {
                                $fieldName = $extraVal['fieldName'];
                                $fieldValue = $extraVal['fieldValue'];
                                if($element->selectedtype == $fieldName && $element->prechecked == 1) {
                                    $element->find('h4', 0)->innertext = $fieldValue;
                                //} elseif(stripos(strtolower($element->find('h4', 0)->plaintext), 'is empty') !== false && $element->prechecked == 1) {
                                } elseif($element->find('h4', 0) && stripos(strtolower($element->find('h4', 0)->plaintext), 'is empty') !== false) {
                                    //$element->find('h4', 0) && add this condition in header on 05 November 2020
                                    $element->find('h4', 0)->innertext = '';
                                }
                            }
                            //extra fields ends here
                        } elseif($reckey == 'extanddoc_fields' && $recval != '') {
                            $extraAndDocumentFieldValue = json_decode($recval, true);
                            foreach($extraAndDocumentFieldValue as $extraAndDocumentFieldKey => $extraAndDocumentFieldValue) {
                                //if($extraAndDocumentFieldValue['extAndDocFieldName'] == $element->selectedtype && $element->prechecked == 1) {
                                if($extraAndDocumentFieldValue['extAndDocFieldName'] == $element->selectedtype) {
                                    $element->find('h4', 0)->innertext = $extraAndDocumentFieldValue['extAndDocFieldValue'];
                                }
                            }
                        } elseif($reckey == 'organization_fields' && $recval != '') {
                            $organizationFieldValue = json_decode($recval, true);
                            foreach($organizationFieldValue as $orgFldKey => $orgFldValue) {
                                $orgFldValue['orgFieldName'] = str_replace('name', 'org_name', $orgFldValue['orgFieldName']);
                                $orgFldValue['orgFieldName'] = str_replace('org_no', 'org_reg_no', $orgFldValue['orgFieldName']);
                                $orgFldValue['orgFieldName'] = str_replace('address', 'org_address', $orgFldValue['orgFieldName']);
                                $orgFldValue['orgFieldName'] = str_replace('city', 'org_city', $orgFldValue['orgFieldName']);
                                $orgFldValue['orgFieldName'] = str_replace('zipcode', 'org_zip', $orgFldValue['orgFieldName']);
                                $orgFldValue['orgFieldName'] = str_replace('phone', 'org_mobile', $orgFldValue['orgFieldName']);
                                if($orgFldValue['orgFieldName'] == $element->selectedtype && $element->prechecked == 1) {
                                    $element->setAttribute('recdata', 1);
                                    $element->find('h4', 0)->innertext = $orgFldValue['orgFieldValue'];
                                }
                            }
                        } else {
                            if($reckey == 'zip') {
                                $reckey = 'zipcode';
                            } if($reckey == 'personal_no') {
                                $reckey = 'personnr';
                            }
                            if($element->selectedtype == $reckey && $element->prechecked == 1 || (strpos($element->getAttribute('class'), 'signature_box_popupcontainer') !== false && $element->prechecked == 0)) {
                                if(strpos($element->getAttribute('class'), 'signature_box_popupcontainer') !== false) {
                                    $element->find('h4', 0)->innertext = $recipientdata['full_name'].' signs here';
                                    $element->setAttribute('type', 'signature');
                                } else {
                                    /* if($reckey == 'zipcode') {
                                        $reckey = 'zip';
                                    } if($reckey == 'personnr') {
                                        $reckey = 'personal_no';
                                    } */
                                    if(isset($recipientdata[$reckey])) {
                                        $element->setAttribute('recdata', 1);
                                        $element->find('h4', 0)->innertext = $recipientdata[$reckey];
                                    }
                                }
                                //$element->find('h4',0)->innertext = $recipientdata[$reckey];
                            } elseif($element->find('h4', 0) && stripos(strtolower($element->find('h4', 0)->plaintext), 'is empty') !== false && isset($element->prechecked) && $element->prechecked != '' && $element->prechecked == 1) {
                                $element->find('h4', 0)->innertext = '';
                            }
                        }
                    }
                }
            }

            $checkCustomValue = (isset($data['check_custom_value']) && $data['check_custom_value'] ? $data['check_custom_value'] : '');
            //$documentFieldText = $html->find(".documentField");
            $documentFieldText = $html->find(".field_box_popupcontainer");
            foreach($documentFieldText as $element) {
                //document & custom fields to fill the value with an API
                if(strpos($element->getAttribute('class'), 'documentFieldText') !== false || strpos($element->getAttribute('class'), 'documentFieldDate') !== false || strpos($element->getAttribute('class'), 'customField') !== false) {
                    if(isset($data['documentfields']) && !empty($data['documentfields'])) {
                        if($this->is_JSON($data['documentfields'])) {
                            $documentFields = json_decode($data['documentfields'], true);
                            if(!empty($documentFields)) {
                                foreach($documentFields as $documentFieldsKeys => $documentFieldsValue) {
                                    foreach($documentFieldsValue['document_fields'] as $docAllKeys => $docAllValue) {
                                        if(!empty(trim($docAllValue))) {
                                            if($element->selectedtype == $docAllKeys || (isset($element->apiattribute) && $element->apiattribute != '' && $element->apiattribute == $docAllKeys)) {
                                                if($element->find('h4', 0)) {
                                                    $element->find('h4', 0)->innertext = (isset($docAllValue) ? trim($docAllValue) : '');
                                                    $element->find('h4', 0)->setAttribute('fromAPIh4', 1);
                                                    if($element->find('input', 0)) {
                                                        $element->find('input', 0)->setAttribute('value', trim($docAllValue));
                                                    }
                                                    /* if($checkCustomValue != '' && $checkCustomValue == 'customValue' && ($element->selectedtype == 'Ange valfritt belopp' || $element->apiattribute == 'ange_valfritt_belopp')) {
                                                        if($element->find('h4', 0)) {
                                                            $element->find('h4', 0)->innertext = (isset($docAllValue) ? trim($docAllValue) : '');
                                                            $element->find('h4', 0)->setAttribute('fromAPIh4', 1);
                                                        } if($element->find('input', 0)) {
                                                            $element->find('input', 0)->setAttribute('value', trim($docAllValue));
                                                        }
                                                    } */
                                                    //if($element->recipientselectedid == 'me') {
                                                        //$element->find('input', 0)->plaintext = $docAllValue;
                                                    //}
                                                }
                                            } if(strpos($element->getAttribute('class'), 'customField') !== false && $element->recipientselectedid == 'me' && $element->selectedtype == $docAllKeys) {
                                                if($element->find('h4', 0)) {
                                                    $element->find('h4', 0)->innertext = (isset($docAllValue) ? trim($docAllValue) : '');
                                                    $element->find('h4', 0)->setAttribute('fromAPIh4', 1);
                                                    if($element->find('input', 0)) {
                                                        $element->find('input', 0)->setAttribute('value', trim($docAllValue));
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            $documentDropList = $html->find(".documentField");
            foreach($documentDropList as $elements) {
                //if(strpos($elements->getAttribute('class'), 'selectcolor_popupcontainer') !== false || strpos($elements->getAttribute('class'), 'field_box_popupcontainer') !== false) {
                if(strpos($elements->getAttribute('class'), 'selectcolor_popupcontainer') !== false) {
                    if(isset($data['payment_widget']) && $data['payment_widget'] == 1) {
                        if(isset($data['documentfields']) && !empty($data['documentfields'])) {
                            if($this->is_JSON($data['documentfields'])) {
                                $documentFields = json_decode($data['documentfields'], true);
                                if(!empty($documentFields)) {
                                    foreach($documentFields as $documentFieldsKeys => $documentFieldsValue) {
                                        foreach($documentFieldsValue['document_fields'] as $docAllKeys => $docAllValue) {
                                            if(!empty(trim($docAllValue))) {
                                                //print_rj($data['payment_widget']);
                                                if($elements->dropdownlabel == $docAllKeys || (isset($elements->apiattribute) && $elements->apiattribute != '' && $elements->apiattribute == $docAllKeys) || strpos($elements->getAttribute('class'), 'field_box_popupcontainer') !== false) {
                                                    if((strpos($elements->getAttribute('class'), 'dropdown_radioList_api') !== false && $elements->find('.dropdownRadioListContainer', 0)) || strpos($elements->getAttribute('class'), 'field_box_popupcontainer') !== false) {
                                                        foreach($elements->find('.multipleChoiceLi') as $getDropListRadioElementsKey => $getDropListRadioElementsValue) {
                                                            if($getDropListRadioElementsValue->find('label', 0)->innertext == trim($docAllValue) && $checkCustomValue != '' && $checkCustomValue == 'predefinedValue') {
                                                                $getCommonClassIcon = $getDropListRadioElementsValue->find('.icon', 0)->getAttribute('class');
                                                                $getDropListRadioElementsValue->find('.icon', 0)->setAttribute('class', str_replace('fa-circle-o', 'fa-dot-circle-o', $getCommonClassIcon));
                                                            } elseif(($getDropListRadioElementsValue->find('label', 0)->innertext == 'Valfritt belopp' && $checkCustomValue != '' && $checkCustomValue == 'customValue') || strpos($elements->getAttribute('class'), 'field_box_popupcontainer') !== false) {
                                                                $getCommonClassIcon = $getDropListRadioElementsValue->find('.icon', 0)->getAttribute('class');
                                                                $getDropListRadioElementsValue->find('.icon', 0)->setAttribute('class', str_replace('fa-circle-o', 'fa-dot-circle-o', $getCommonClassIcon));
                                                                //only for text field (Ange valfritt belopp) starting
                                                                $forSelectedTextFieldOnly = $html->find(".field_box_popupcontainer");
                                                                foreach($forSelectedTextFieldOnly as $forSelectedTextFieldOnlyElements) {
                                                                    if(strpos($forSelectedTextFieldOnlyElements->getAttribute('class'), 'documentFieldText') !== false && $forSelectedTextFieldOnlyElements->selectedtype == 'Ange valfritt belopp') {
                                                                        if($forSelectedTextFieldOnlyElements->find('input', 0)) {
                                                                            $forSelectedTextFieldOnlyElements->find('input', 0)->setAttribute('value', trim($docAllValue));
                                                                        } if($forSelectedTextFieldOnlyElements->find('h4', 0)) {
                                                                            $forSelectedTextFieldOnlyElements->find('h4', 0)->innertext = (isset($docAllValue) ? trim($docAllValue) : '');
                                                                        }
                                                                        //widget billecta asign value
                                                                        $forSelectedTextFieldOnlyElements->setAttribute('widBill', trim($docAllValue));
                                                                        $getCurrentElementClass = $forSelectedTextFieldOnlyElements->parent()->parent()->getAttribute('class');
                                                                        //$forSelectedTextFieldOnlyElements->parent()->parent()->setAttribute('class', str_replace('relationDisable', 'updatedformfield filled fielddisabled', $getCurrentElementClass));
                                                                        $forSelectedTextFieldOnlyElements->parent()->parent()->setAttribute('class', str_replace('relationDisable', '', $getCurrentElementClass));
                                                                        /* $getCurrentElementClass = $forSelectedTextFieldOnlyElements->parent()->parent()->getAttribute('class');
                                                                        $forSelectedTextFieldOnlyElements->parent()->parent()->setAttribute('class', str_replace('checkRequiredField', 'fieldsBorderPreFilled', $getCurrentElementClass)); */
                                                                    }
                                                                }
                                                                //only for text field (Ange valfritt belopp) ending
                                                            }
                                                        }
                                                        //https://simplehtmldom.sourceforge.io/manual_api.htm
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            //exit('exit at line no 17498');
            
            //tags replace
            $documentTagName = $html->find(".dynamicTag");
            foreach($documentTagName as $element) {
                if(strpos($element->getAttribute('class'), 'documenttagName') !== false) {
                    if(!isset($data['iframe_url']) || $data['iframe_url'] == '' || $data['iframe_url'] == 0) {
                        $changeRedClass = $element->getAttribute('class');
                        $element->setAttribute('class', str_replace('color-red', 'removeRedClass', $changeRedClass));  //for tags
                    }
                    if(isset($data['documentfields']) && !empty($data['documentfields'])) {
                        if($this->is_JSON($data['documentfields'])) {
                            $documentFields = json_decode($data['documentfields'], true);
                            if(!empty($documentFields)) {
                                foreach($documentFields as $documentFieldsKeys => $documentFieldsValue) {
                                    foreach($documentFieldsValue['document_fields'] as $docAllKeys => $docAllValue) {
                                        if($element->tagname == $docAllKeys) {
                                            $element->setAttribute('fillbyapi', 1);
                                            //$html = str_replace('['.$docAllKeys.']</span>&nbsp;', $docAllValue.'</span> ', $html);
                                            //$html = str_replace('['.$docAllKeys.']', $docAllValue, $html);
                                            $element->innertext = $docAllValue;
                                            if(!isset($data['iframe_url']) || $data['iframe_url'] == '' || $data['iframe_url'] == 0) {
                                                $changeRedClass = $element->getAttribute('class');
                                                $element->setAttribute('class', str_replace('removeRedClass', ' ', $changeRedClass));  //for tags
                                            } else {
                                                $changeRedClass = $element->getAttribute('class');
                                                $element->setAttribute('class', str_replace('color-red', ' ', $changeRedClass));  //for tags
                                            }
                                        } if(isset($element->apitagattribute) && $element->apitagattribute != '' && $element->apitagattribute == $docAllKeys) {
                                            $element->setAttribute('fillbyapi', 1);
                                            $element->innertext = $docAllValue;
                                            if(!isset($data['iframe_url']) || $data['iframe_url'] == '' || $data['iframe_url'] == 0) {
                                                $changeRedClass = $element->getAttribute('class');
                                                $element->setAttribute('class', str_replace('removeRedClass', ' ', $changeRedClass));  //for tags
                                            } else {
                                                $changeRedClass = $element->getAttribute('class');
                                                $element->setAttribute('class', str_replace('color-red', ' ', $changeRedClass));  //for tags
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            foreach($recipientdata as $reckey => $recval) {
                if(isset($recipientRoleNew)) {
                    $recKeyColumn = $reckey;
                    if($reckey == 'name' || $reckey == 'Name') {
                        $reckey = $getTranslation[50];
                    } if($reckey == 'full_name' || $reckey == 'Full_name') {
                        $reckey = $getTranslation[651];
                    } if($reckey == 'first name' || $reckey == 'first_name') {
                        $reckey = $getTranslation[978];
                    } if($reckey == 'last_name' || $reckey == 'Last_name') {
                        $reckey = $getTranslation[1710];
                    } if($reckey == 'Reg.no' || $reckey == 'reg.no' || $reckey == 'reg_no' || $reckey == 'Reg_no') {
                        $reckey = $getTranslation[53];
                    } if($reckey == 'email' || $reckey == 'Email') {
                        $reckey = $getTranslation[51];
                    } if($reckey == 'personnr' || $reckey == 'Personnr' || $reckey == 'personal_no'  || $reckey == 'personal_number') {
                        $reckey = 'personnr';//$getTranslation[651];
                    } if($reckey == 'Company' || $reckey == 'company') {
                        $reckey = $getTranslation[1647];
                    } if($reckey == 'mobile' || $reckey == 'Mobile') {
                        $reckey = $getTranslation[652];
                    } if($reckey == 'Date' || $reckey == 'date') {
                        $reckey = $getTranslation[346];
                    } if($reckey == 'address' || $reckey == 'Address') {
                        $reckey = $getTranslation[906];
                    } if($reckey == 'city' || $reckey == 'City') {
                        $reckey = $getTranslation[56];
                    } if($reckey == 'zipcode' || $reckey == 'Zipcode' || $reckey == 'zip' || $reckey == 'zip code') {
                        $reckey = $getTranslation[57];
                    } if($reckey == 'org_name' || $reckey == 'Org_name') {
                        $reckey = $getTranslation[1647];
                        $recipientRoleNew = $recipientRoleNew.'.'.$getTranslation[1647];
                    } if($reckey == 'org_reg_no' || $reckey == 'Org_reg_no') {
                        $reckey = $getTranslation[1617];
                        $recipientRoleNew = $recipientRoleNew.'.'.$getTranslation[1647];
                    } if($reckey == 'org_mobile' || $reckey == 'Org_mobile') {
                        $reckey = $getTranslation[1620];
                        $recipientRoleNew = $recipientRoleNew.'.'.$getTranslation[1647];
                    } if($reckey == 'org_zip' || $reckey == 'Org_zip') {
                        $reckey = $getTranslation[1621];
                        $recipientRoleNew = $recipientRoleNew.'.'.$getTranslation[1647];
                    } if($reckey == 'org_address' || $reckey == 'Org_address') {
                        $reckey = $getTranslation[1618];
                        $recipientRoleNew = $recipientRoleNew.'.'.$getTranslation[1647];
                    } if($reckey == 'org_city' || $reckey == 'Org_city') {
                        $reckey = $getTranslation[1619];
                        $recipientRoleNew = $recipientRoleNew.'.'.$getTranslation[1647];
                    }
                    $tagName = $recipientRoleNew.'.'.strtolower($reckey);
                    $reckey = $recKeyColumn;
                    
                    /* foreach($documentTagName as $dynamicTagValue) {
                        //print_rj($dynamicTagValue->innertext);
                        //print_rj($tagName);
                        //$dynamicTagValue->innertext = str_replace('[', '', $dynamicTagValue->innertext);
                        //$dynamicTagValue->innertext = str_replace(']', '', $dynamicTagValue->innertext);
                        if(isset($dynamicTagValue->innertext) && $dynamicTagValue->innertext == '['.$tagName.']') {
                            //print_rj($dynamicTagValue->innertext);
                            $dynamicTagValue->setAttribute('fillbyapi', 1);
                        }
                        //if($dynamicTagValue->innertext == '['.$tagName.']') {
                        //}
                    } */
                    //$tagName
                    //print_rj($tagName);
                    //print_rj($recipientdata[$reckey]);
                    //print_rj($recipientdata);

                    $html = str_replace('['.$tagName.']</span>&nbsp;', $recipientdata[$reckey].'</span> ', $html);
                    $html = str_replace('['.$tagName.']', $recipientdata[$reckey], $html);

                    if($reckey == 'extanddoc_fields') {
                        if(isset($recipientdata['extanddoc_fields']) && $recipientdata['extanddoc_fields'] != '') {
                            $extraAndDocumentFieldValue = json_decode($recipientdata['extanddoc_fields'], true);
                            foreach($extraAndDocumentFieldValue as $extraAndDocumentFieldKey => $extraAndDocumentFieldValue) {
                                $tagName = $recipientRoleNew.'.'.$extraAndDocumentFieldValue['extAndDocFieldName'];
                                $html = str_replace('['.$tagName.']</span>&nbsp;', $extraAndDocumentFieldValue['extAndDocFieldValue'].'</span> ', $html);
                                $html = str_replace('['.$tagName.']', $extraAndDocumentFieldValue['extAndDocFieldValue'], $html);
                            }
                        }
                    }
                    if($reckey == 'organization_fields') {
                        if(isset($recipientdata['organization_fields']) && $recipientdata['organization_fields'] != '') {
                            $organizationFieldValue = json_decode($recipientdata['organization_fields'], true);
                            foreach($organizationFieldValue as $orgFldKey => $orgFldValue) {
                                $orgFldValue['orgFieldName'] = str_replace('name', 'organization_name', $orgFldValue['orgFieldName']);
                                $orgFldValue['orgFieldName'] = str_replace('org_no', 'organization_no', $orgFldValue['orgFieldName']);
                                $orgFldValue['orgFieldName'] = str_replace('phone', 'organization_mobile', $orgFldValue['orgFieldName']);
                                $orgFldValue['orgFieldName'] = str_replace('address', 'organization_address', $orgFldValue['orgFieldName']);
                                $orgFldValue['orgFieldName'] = str_replace('city', 'organization_city', $orgFldValue['orgFieldName']);
                                $orgFldValue['orgFieldName'] = str_replace('zipcode', 'organization_zipcode', $orgFldValue['orgFieldName']);
                                $orgFldValue['orgFieldName'] = str_replace('_', '.', $orgFldValue['orgFieldName']);
                                if($orgFldValue['orgFieldName'] == 'organization.no') {
                                    $orgFldValue['orgFieldName'] = 'Organization.reg_no';
                                }
                                
                                $tagName = $recipientRoleNew.'.'.$orgFldValue['orgFieldName'];
                                $html = str_replace('['.$tagName.']</span>&nbsp;', $orgFldValue['orgFieldValue'].'</span> ', $html);
                                $html = str_replace('['.$tagName.']', $orgFldValue['orgFieldValue'], $html);

                                $tagName = $recipientRoleNew.'.'.ucfirst($orgFldValue['orgFieldName']);
                                $html = str_replace('['.$tagName.']</span>&nbsp;', $orgFldValue['orgFieldValue'].'</span> ', $html);
                                $html = str_replace('['.$tagName.']', $orgFldValue['orgFieldValue'], $html);
                            }
                        }
                    }
                } else {
                    $html = str_replace('{rec'.$RecipientNum.'_'.$reckey.'}</span>&nbsp;', $recipientdata[$reckey].'</span> ', $html);
                    $html = str_replace('{rec'.$RecipientNum.'_'.$reckey.'}', $recipientdata[$reckey], $html);
                }
                
                if($reckey == 'extra_fields') {
                    if(isset($recipientdata['extra_fields']) && $recipientdata['extra_fields'] != '') {
                        $extraFieldValue = json_decode($recipientdata['extra_fields'], true);
                        foreach($extraFieldValue as $extraFldKey => $extraFldValue) {
                            $tagName = $recipientRoleNew.'.'.$extraFldValue['fieldName'];
                            $html = str_replace('['.$tagName.']</span>&nbsp;', $extraFldValue['fieldValue'].'</span> ', $html);
                            $html = str_replace('['.$tagName.']', $extraFldValue['fieldValue'], $html);
                        }
                    }
                }
            }
            //die('19549');
            return $html;
        } elseif($content != '') {
            return $content;
        } else {
            return '';
        }
    }

    public function setRecipientsInContentNewDocument($content='',$recipientdata=null,$RecipientNum=null,$LinkedOfferSentId='',$recipientRoleNew='',$recipientFullName='',$data='', $languageId='') {
        if($content != '' && $recipientdata != null && $RecipientNum != null) {
            $utility = new Utility();
            $getTranslation = $utility->GeneralTranslations($languageId, [50, 651, 978, 1710, 53, 51, 1647, 652, 346, 906, 56, 57, 1617, 1620, 1621, 1618, 1619]);
            $html = new \Htmldom($content);
            $ExtraFieldsFromDetails = $organizationFieldsFromDetails = '';
            if($LinkedOfferSentId != '') {
                $RecDetails = Offersentdetails::where('offer_sent_id', $LinkedOfferSentId)->where('customer_id',$recipientdata['id'])->select('user_details')->first();
                $RecDetails = json_decode(Tcrypt::decrypter($RecDetails['user_details']), true);
                if(isset($RecDetails['extra_fields']) && $RecDetails['extra_fields'] != '') {
                    $ExtraFieldsFromDetails = json_decode($RecDetails['extra_fields'], true);
                }
            }

            $htmlFields = '';
            if($html->find(".text[recipientselectedid=recipient$RecipientNum]")) {
                $htmlFields = $html->find(".text[recipientselectedid=recipient$RecipientNum]");
            } else {
                //$htmlFields = $html->find(".text[getrecsettings=$RecipientNum][recipientselectedid!='me']");
                $htmlFields = $html->find(".text[getrecsettings=$RecipientNum]");
            }
            foreach($htmlFields as $element) {
                if($element->recipientselectedid != 'me') {
                    $element->setAttribute('recipientselected', $recipientdata['full_name']);
                    $element->setAttribute('recipientselectedid', $recipientdata['id']);
                    foreach($recipientdata as $reckey => $recval) {
                        if(($reckey == 'extra_fields' && $recval != '') || ($reckey == 'extra_fields' && $ExtraFieldsFromDetails != '')) {
                            $extra_fields = ($ExtraFieldsFromDetails != '' ? $ExtraFieldsFromDetails : json_decode($recipientdata[$reckey], true));                        
                            foreach($extra_fields as $extraKey => $extraVal) {
                                $fieldName = $extraVal['fieldName'];
                                $fieldValue = $extraVal['fieldValue'];
                                if($element->selectedtype == $fieldName && $element->prechecked == 1) {
                                    $element->find('h4', 0)->innertext = $fieldValue;
                                //} elseif(stripos(strtolower($element->find('h4', 0)->plaintext), 'is empty') !== false && $element->prechecked == 1) {
                                } elseif($element->find('h4', 0) && stripos(strtolower($element->find('h4', 0)->plaintext), 'is empty') !== false) {
                                    $element->find('h4', 0)->innertext = '';
                                }
                            }
                            //extra fields ends here
                        } elseif($reckey == 'extanddoc_fields' && $recval != '') {
                            $extraAndDocumentFieldValue = json_decode($recval, true);
                            foreach($extraAndDocumentFieldValue as $extraAndDocumentFieldKey => $extraAndDocumentFieldValue) {
                                //if($extraAndDocumentFieldValue['extAndDocFieldName'] == $element->selectedtype && $element->prechecked == 1) {
                                if($extraAndDocumentFieldValue['extAndDocFieldName'] == $element->selectedtype) {
                                    $element->find('h4', 0)->innertext = $extraAndDocumentFieldValue['extAndDocFieldValue'];
                                }
                            }
                        } elseif($reckey == 'organization_fields' && $recval != '') {
                            $organizationFieldValue = json_decode($recval, true);
                            foreach($organizationFieldValue as $orgFldKey => $orgFldValue) {
                                $orgFldValue['orgFieldName'] = str_replace('name', 'org_name', $orgFldValue['orgFieldName']);
                                $orgFldValue['orgFieldName'] = str_replace('org_no', 'org_reg_no', $orgFldValue['orgFieldName']);
                                $orgFldValue['orgFieldName'] = str_replace('address', 'org_address', $orgFldValue['orgFieldName']);
                                $orgFldValue['orgFieldName'] = str_replace('city', 'org_city', $orgFldValue['orgFieldName']);
                                $orgFldValue['orgFieldName'] = str_replace('zipcode', 'org_zip', $orgFldValue['orgFieldName']);
                                $orgFldValue['orgFieldName'] = str_replace('phone', 'org_mobile', $orgFldValue['orgFieldName']);
                                if($orgFldValue['orgFieldName'] == $element->selectedtype && $element->prechecked == 1) {
                                    $element->setAttribute('recdata', 1);
                                    $element->find('h4', 0)->innertext = $orgFldValue['orgFieldValue'];
                                }
                            }
                        } else {
                            if($reckey == 'zip') {
                                $reckey = 'zipcode';
                            } if($reckey == 'personal_no') {
                                $reckey = 'personnr';
                            }
                            if($element->selectedtype == $reckey && $element->prechecked == 1 || (strpos($element->getAttribute('class'), 'signature_box_popupcontainer') !== false && $element->prechecked == 0)) {
                            //if($element->selectedtype == $reckey || (strpos($element->getAttribute('class'), 'signature_box_popupcontainer') !== false && $element->prechecked == 0)) {
                                if(strpos($element->getAttribute('class'), 'signature_box_popupcontainer') !== false) {
                                    $element->find('h4', 0)->innertext = $recipientdata['full_name'].' signs here';
                                } else {
                                    if($reckey == 'zipcode') {
                                        $reckey = 'zip';
                                    } if($reckey == 'personnr') {
                                        $reckey = 'personal_no';
                                    }
                                    if(isset($recipientdata[$reckey])) {
                                        $element->setAttribute('recdata', 1);
                                        $element->find('h4', 0)->innertext = $recipientdata[$reckey];
                                    }
                                }
                                //$element->find('h4',0)->innertext = $recipientdata[$reckey];
                            } elseif(stripos(strtolower($element->find('h4', 0)->plaintext), 'is empty') !== false && isset($element->prechecked) && $element->prechecked != '' && $element->prechecked == 1) {
                                $element->find('h4', 0)->innertext = '';
                            }
                        }
                    }
                }
            }
            
            //$documentFieldText = $html->find(".documentFieldText");
            $documentFieldText = $html->find(".documentField");
            foreach($documentFieldText as $element) {
                if(strpos($element->getAttribute('class'), 'documentFieldText') !== false || strpos($element->getAttribute('class'), 'documentFieldDate') !== false) {
                    if(isset($data['documentfields']) && !empty($data['documentfields'])) {
                        if($this->is_JSON($data['documentfields'])) {
                            $documentFields = json_decode($data['documentfields'], true);
                            if(!empty($documentFields)) {
                                foreach($documentFields as $documentFieldsKeys => $documentFieldsValue) {
                                    foreach($documentFieldsValue['document_fields'] as $docAllKeys => $docAllValue) {
                                        if(!empty(trim($docAllValue))) {
                                            if($element->selectedtype == $docAllKeys || (isset($element->apiattribute) && $element->apiattribute != '' && $element->apiattribute == $docAllKeys)) {
                                                if($element->find('h4', 0)) {
                                                    $element->find('h4', 0)->innertext = (isset($docAllValue) ? trim($docAllValue) : '');
                                                    $element->find('h4', 0)->setAttribute('fromAPIh4', 1);
                                                    if($element->find('input', 0)) {
                                                        $element->find('input', 0)->setAttribute('value', trim($docAllValue));
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            //tags replace
            $documentTagName = $html->find(".dynamicTag");
            foreach($documentTagName as $element) {
                if(strpos($element->getAttribute('class'), 'documenttagName') !== false) {
                    if(isset($data['documentfields']) && !empty($data['documentfields'])) {
                        if($this->is_JSON($data['documentfields'])) {
                            $documentFields = json_decode($data['documentfields'], true);
                            if(!empty($documentFields)) {
                                foreach($documentFields as $documentFieldsKeys => $documentFieldsValue) {
                                    foreach($documentFieldsValue['document_fields'] as $docAllKeys => $docAllValue) {
                                        if($element->tagname == $docAllKeys) {
                                            $html = str_replace('['.$docAllKeys.']</span>&nbsp;', $docAllValue.'</span> ', $html);
                                            $html = str_replace('['.$docAllKeys.']', $docAllValue, $html);
                                        } if(isset($element->apitagattribute) && $element->apitagattribute != '' && $element->apitagattribute == $docAllKeys) {
                                            $element->innertext = $docAllValue;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            foreach($recipientdata as $reckey => $recval) {
                if(isset($recipientRoleNew) && $recipientRoleNew != '') {
                    $tagName = $recipientRoleNew.'.'.$reckey;
                    $html = str_replace('['.$tagName.']</span>&nbsp;', $recipientdata[$reckey].'</span> ', $html);
                    $html = str_replace('['.$tagName.']', $recipientdata[$reckey], $html);

                    if($reckey == 'extanddoc_fields') {
                        if(isset($recipientdata['extanddoc_fields']) && $recipientdata['extanddoc_fields'] != '') {
                            $extraAndDocumentFieldValue = json_decode($recipientdata['extanddoc_fields'], true);
                            foreach($extraAndDocumentFieldValue as $extraAndDocumentFieldKey => $extraAndDocumentFieldValue) {
                                $tagName = $recipientRoleNew.'.'.$extraAndDocumentFieldValue['extAndDocFieldName'];
                                $html = str_replace('['.$tagName.']</span>&nbsp;', $extraAndDocumentFieldValue['extAndDocFieldValue'].'</span> ', $html);
                                $html = str_replace('['.$tagName.']', $extraAndDocumentFieldValue['extAndDocFieldValue'], $html);
                            }
                        }
                    }
                    if($reckey == 'organization_fields') {
                        if(isset($recipientdata['organization_fields']) && $recipientdata['organization_fields'] != '') {
                            $organizationFieldValue = json_decode($recipientdata['organization_fields'], true);
                            foreach($organizationFieldValue as $orgFldKey => $orgFldValue) {
                                $orgFldValue['orgFieldName'] = str_replace('name', 'organization_name', $orgFldValue['orgFieldName']);
                                $orgFldValue['orgFieldName'] = str_replace('org_no', 'organization_no', $orgFldValue['orgFieldName']);
                                $orgFldValue['orgFieldName'] = str_replace('phone', 'organization_mobile', $orgFldValue['orgFieldName']);
                                $orgFldValue['orgFieldName'] = str_replace('address', 'organization_address', $orgFldValue['orgFieldName']);
                                $orgFldValue['orgFieldName'] = str_replace('city', 'organization_city', $orgFldValue['orgFieldName']);
                                $orgFldValue['orgFieldName'] = str_replace('zipcode', 'organization_zipcode', $orgFldValue['orgFieldName']);
                                $orgFldValue['orgFieldName'] = str_replace('_', '.', $orgFldValue['orgFieldName']);
                                if($orgFldValue['orgFieldName'] == 'organization.no') {
                                    $orgFldValue['orgFieldName'] = 'Organization.reg_no';
                                }
                                
                                $tagName = $recipientRoleNew.'.'.$orgFldValue['orgFieldName'];
                                $html = str_replace('['.$tagName.']</span>&nbsp;', $orgFldValue['orgFieldValue'].'</span> ', $html);
                                $html = str_replace('['.$tagName.']', $orgFldValue['orgFieldValue'], $html);

                                $tagName = $recipientRoleNew.'.'.ucfirst($orgFldValue['orgFieldName']);
                                $html = str_replace('['.$tagName.']</span>&nbsp;', $orgFldValue['orgFieldValue'].'</span> ', $html);
                                $html = str_replace('['.$tagName.']', $orgFldValue['orgFieldValue'], $html);
                            }
                        }
                    }
                } else {
                    $html = str_replace('{rec'.$RecipientNum.'_'.$reckey.'}</span>&nbsp;', $recipientdata[$reckey].'</span> ', $html);
                    $html = str_replace('{rec'.$RecipientNum.'_'.$reckey.'}', $recipientdata[$reckey], $html);
                }

                if($reckey == 'extra_fields') {
                    if(isset($recipientdata['extra_fields']) && $recipientdata['extra_fields'] != '') {
                        $extraFieldValue = json_decode($recipientdata['extra_fields'], true);
                        foreach($extraFieldValue as $extraFldKey => $extraFldValue) {
                            $tagName = $recipientRoleNew.'.'.$extraFldValue['fieldName'];
                            $html = str_replace('['.$tagName.']</span>&nbsp;', $extraFldValue['fieldValue'].'</span> ', $html);
                            $html = str_replace('['.$tagName.']', $extraFldValue['fieldValue'], $html);
                        }
                    }
                }
            }
            return $html;
        } elseif($content != '') {
            return $content;
        } else {
            return '';
        }
    }

    public function anyTesttemplate($offerid=''){
        if($offerid == '')return 'offerid missing';
        $sentcontract = new sendcontractController();
        $contract = $sentcontract->getTemplateByTemplateID($offerid);
        if($contract == '0'){
            return Response::json(['status'=>'error','result' => 'template not found']);
        }
        $utility = new utility();
        $whererecipient['id'] = 2755;
        $whererecipient['registerby'] = 327; 
        $recipientDetails = $utility->getItem("customers",$whererecipient);
        $recipientDetails = (array)$recipientDetails;
        $recipientDetails['company'] = (isset($recipientDetails['company']) && $recipientDetails['company'] != ''? Tcrypt::decrypter($recipientDetails['company']) : '');
        $recipientDetails['full_name'] = (isset($recipientDetails['full_name']) && $recipientDetails['full_name'] != ''? Tcrypt::decrypter($recipientDetails['full_name']) : '');
        $recipientDetails['email'] = (isset($recipientDetails['email']) && $recipientDetails['email'] != ''? Tcrypt::decrypter($recipientDetails['email']) : '');
        
        $content = $contract->content;
        echo '<style>.template_container{position:relative;}</style>';
        //echo '<div style="position:relative;width:940px;height:1334px">';
        echo $content;
        echo '<hr>';
        $return = $this->setRecipientsInContent($content,$recipientDetails,1,11964);
        echo $return;
        echo '<hr>';
        
    }
    public function is_JSON($args){
        /* json_decode($args);
        return (json_last_error()===JSON_ERROR_NONE); */
        try {
            json_decode($args);
            return (json_last_error()===JSON_ERROR_NONE);
        } catch(Exception $e) {
            return false;
        }
    }

    public function postAddrecipient() {
        $data = Input::all();
        $utility = new Utility();
        
        if(isset($data['access_token'])) {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
        $user_id = $utility->getUserIdByAuthToken($access_token);
        if($user_id > 0) {
             if(isset($data['recipients']) && $data['recipients'] != ''){
                if($this->is_JSON($data['recipients'])){
                    $recipients = json_decode($data['recipients'],true);
                    foreach ($recipients as $reckey => $recVal) {

                        //Recipients Information Validations START
                        if(!isset($recVal['name']) || $recVal['name'] == ''){
                            return Response::json(['status'=>'error','result' => 'Invalid or missing Recipient name']);
                        }else if(!isset($recVal['email']) || !filter_var($recVal['email'], FILTER_VALIDATE_EMAIL)){
                            return Response::json(['status'=>'error','result' => 'Invalid or missing Recipient email']);
                        }
                        //Recipients Information Validations END

                    }//Foreach End
                }else{
                    return Response::json(['status'=>'error','result' => 'Recipient information is missing']);
                }
                
                
                $company = $regno = $mobileno = $address = $zip = $city = $extra_fields = '';
                $new_recIds = array();
                foreach ($recipients as $reckey => $recVal) {

                    //Recipients Information Validations START
                    if(isset($recVal['name']) && $recVal['name'] != ''){
                        $fullname = Tcrypt::encrypter($recVal['name']);
                    }
                    if(isset($recVal['email']) && filter_var($recVal['email'], FILTER_VALIDATE_EMAIL)){
                        $email = $recVal['email'];
                        $emailEnc = Tcrypt::encrypter($email);
                        $getemail = Recipient::where('registerby', $user_id)->where('email', $emailEnc)->select('email')->first();
                        if($getemail) {
                            continue;
                        } else {
                            $email = Tcrypt::encrypter($recVal['email']);
                        }
                        
                    }
                    $company = isset($recVal['company'])? Tcrypt::encrypter($recVal['company']) : ''; 
                    $reg_no = isset($recVal['reg_no'])? $recVal['reg_no'] : ''; 
                    $mobileno = isset($recVal['mobileno'])? $recVal['mobileno'] : '';
                    $address = isset($recVal['address'])? $recVal['address'] : '';
                    $zip = isset($recVal['zip'])? $recVal['zip'] : '';
                    $city = isset($recVal['city'])? $recVal['city'] : '';
                    $extra_fields = isset($recVal['extra_fields'])? $recVal['extra_fields'] : '';
                    $addnewrec = Recipient::insertGetId([
                        'full_name' => $fullname,
                        'company' => $company,
                        'mobile' => $mobileno,
                        'email' => $email,
                        'reg_no' => $reg_no,
                        'address' => $address,
                        'zip' => $zip,
                        'city' => $city,
                        'extra_fields' =>$extra_fields,
                        'registerby' => $user_id]);
                    if($addnewrec){
                        array_push($new_recIds,$addnewrec);
                    }
                    //Recipients Information Validations END

                }//Foreach End
                

                
                
                if(count($new_recIds) > 0) {
                    return Response::json(['status'=>'success','result' => $new_recIds]);
                } else {
                    return Response::json(['status'=>'error','result' => 'some thing went wrong']);
                }
            } else{
                return Response::json(['status'=>'error','result' => 'missing or invalid recipients information']);
            }
        }

    }

    public function getOrganizations() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');

        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        }

        $user_id = $utility->getUserIdByAuthToken($access_token);
        if($user_id > 0) {

            $pageLimit = 10;
            if(isset($data['pagelimit']) && $data['pagelimit'] != '') {
                $pageLimit = $data['pagelimit'];
                $data['page_limit'] = $pageLimit;
            } elseif(isset($data['page_limit']) && $data['page_limit'] != '') {
                $data['page_limit'] = $data['page_limit'];
                $pageLimit = $data['page_limit'];
            } /* elseif(isset($data['document_limit']) && $data['document_limit'] != '') {
                $data['pagelimit'] = $data['document_limit'];
                $pageLimit = $data['document_limit'];
            } */
            //$pageLimit = (isset($data['pagelimit']) && $data['pagelimit'] != '' ? $data['pagelimit'] : 10);
            $currentPage = (isset($data['current_page']) && $data['current_page'] != '' ? $data['current_page'] : 0);
            $skipRecords = $currentPage * $pageLimit;

            $organizationInfo = Organizations::where('organizations.registerby', $user_id)->join('users_info', 'organizations.registerby', '=', 'users_info.user_id')->select('organizations.id AS organization_id', 'organizations.name', 'organizations.reg_no', 'organizations.mobile', 'organizations.address', 'organizations.zip', 'organizations.city', 'organizations.country', 'organizations.extra_fields', 'organizations.created_date', 'organizations.registerby', 'users_info.full_name AS parent_name')->orderBy('organizations.id', 'desc')->skip($skipRecords)->take($pageLimit)->get()->toArray();

            if($organizationInfo) {
                $responseArray = [];
                foreach($organizationInfo as $orgInfokey => $orgInfoValue) {
                    $organizations = $extraFields = [];
                    $organizations['organization_id'] = $orgInfoValue['organization_id'];
                    $organizations['name'] = ($orgInfoValue['name'] != '' ? trim(Tcrypt::decrypter($orgInfoValue['name'])) : '');
                    $organizations['reg_no'] = ($orgInfoValue['reg_no'] != '' ? trim($orgInfoValue['reg_no']) : '');
                    $organizations['mobile'] = ($orgInfoValue['mobile'] != '' ? trim($orgInfoValue['mobile']) : '');
                    $organizations['address'] = ($orgInfoValue['address'] != '' ? trim($orgInfoValue['address']) : '');
                    $organizations['zipcode'] = ($orgInfoValue['zip'] != '' ? trim($orgInfoValue['zip']) : '');
                    $organizations['city'] = ($orgInfoValue['city'] != '' ? trim($orgInfoValue['city']) : '');
                    $organizations['country'] = ($orgInfoValue['country'] != '' ? trim($orgInfoValue['country']) : '');

                    $organizations['parent_name'] = ($orgInfoValue['parent_name'] != '' ? trim($orgInfoValue['parent_name']) : '');
                    $organizations['parent_id'] = ($orgInfoValue['registerby'] != '' ? trim($orgInfoValue['registerby']) : '');

                    $organizations['register_date'] = ($orgInfoValue['created_date'] != '' && $orgInfoValue['created_date'] != '0000-00-00 00:00:00' ? trim($orgInfoValue['created_date']) : '');

                    $extraFields['extra_fields'] = ($orgInfoValue['extra_fields'] != '' ? json_decode($orgInfoValue['extra_fields'], true) : '');

                    $eachArray = ['organization' => $organizations, 'extra_field' => $extraFields];
                    array_push($responseArray, $eachArray);
                }

                $totalOrganizations = Organizations::where('registerby', $user_id)->count();

                return Response::json(['status' => 'success', 'total_organizations' => $totalOrganizations, 'result' => $responseArray]);
            } else {
                return Response::json(['status' => 'error', 'result' => 'No record found']);
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }

    public function postAddorganizations() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');

        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        }

        $user_id = $utility->getUserIdByAuthToken($access_token);
        if($user_id > 0) {
            if(isset($data['organizations']) && $data['organizations'] != '') {
                if($this->is_JSON($data['organizations'])) {
                    $organizations = json_decode($data['organizations'], true);

                    foreach($organizations as $orgKey => $orgValue) {
                        if(isset($orgValue['organizations_fields']) && $orgValue['organizations_fields'] != '') {
                            if(!isset($orgValue['organizations_fields']['name']) || $orgValue['organizations_fields']['name'] == '') {
                                return Response::json(['status' => 'error', 'result' => 'Invalid or missing organization name']);
                            } if(isset($orgValue['organizations_fields']['name']) && $orgValue['organizations_fields']['name'] != '') {
                                $getOrganizationName = Organizations::where('registerby', $user_id)->where('name', trim(Tcrypt::encrypter($orgValue['organizations_fields']['name'])))->count();
                                if($getOrganizationName) {
                                    return Response::json(['status' => 'error', 'result' => 'Organization ('.$orgValue['organizations_fields']['name'].') for this user already exists']);
                                }
                            }
                        } if(isset($orgValue['extra_fields']) && $orgValue['extra_fields'] != '') {
                            foreach($orgValue['extra_fields'] as $extFldKey => $extFldValue) {
                                if(!array_key_exists('fieldName', $extFldValue)) {
                                    return Response::json(['status' => 'error', 'result' => 'Key must be fieldName in extra_fields array']);
                                } if(!array_key_exists('fieldValue', $extFldValue)) {
                                    return Response::json(['status' => 'error', 'result' => 'Key must be fieldValue in extra_fields array']);
                                }
                            }
                        }
                    }
                } else {
                    return Response::json(['status' => 'error', 'result' => 'Organizations information is invalid format, JSON is required']);
                }

                $newOrganizationsIds = [];
                foreach($organizations as $organizationsKey => $organizationsValue) {
                    $organizationName = $regNr = $mobileNo = $address = $zipcode = $city = $country = $extraFields = $extraFieldsVariable = '';

                    $organizationName = (isset($organizationsValue['organizations_fields']['name']) && $organizationsValue['organizations_fields']['name'] != '' ? trim(Tcrypt::encrypter($organizationsValue['organizations_fields']['name'])) : '');
                    $regNr = (isset($organizationsValue['organizations_fields']['reg_no']) ? trim($organizationsValue['organizations_fields']['reg_no']) : '');
                    $mobileNo = (isset($organizationsValue['organizations_fields']['mobile']) ? trim($organizationsValue['organizations_fields']['mobile']) : '');
                    $address = (isset($organizationsValue['organizations_fields']['address']) ? trim($organizationsValue['organizations_fields']['address']) : '');
                    $zipcode = (isset($organizationsValue['organizations_fields']['zipcode']) ? trim($organizationsValue['organizations_fields']['zipcode']) : '');
                    $city = (isset($organizationsValue['organizations_fields']['city']) ? trim($organizationsValue['organizations_fields']['city']) : '');
                    $country = (isset($organizationsValue['organizations_fields']['country']) ? trim($organizationsValue['organizations_fields']['country']) : '');

                    if(isset($organizationsValue['extra_fields']) && $organizationsValue['extra_fields'] != '') {
                        $extraFieldsVariable = [];
                        foreach($organizationsValue['extra_fields'] as $extFldKey => $extFldValue) {
                            array_push($extraFieldsVariable, array('fieldName' => trim($extFldValue['fieldName']), 'fieldValue' => trim($extFldValue['fieldValue'])));
                        }
                    }
                    $extraFields = ($extraFieldsVariable != '' ? json_encode($extraFieldsVariable) : '');

                    $organizationsId = Organizations::insertGetId([
                        'name' => $organizationName,
                        'reg_no' => $regNr,
                        'mobile' => $mobileNo,
                        'address' => $address,
                        'zip' => $zipcode,
                        'city' => $city,
                        'country' => $country,
                        'extra_fields' => $extraFields,
                        'registerby' => $user_id,
                        'created_date' => date('Y-m-d H:i:s')
                    ]);

                    if($organizationsId) {
                        array_push($newOrganizationsIds, $organizationsId);
                    }
                }//end foreach loop

                if(count($newOrganizationsIds) > 0) {
                    return Response::json(['status' => 'success', 'result' => $newOrganizationsIds]);
                } else {
                    return Response::json(['status' => 'error', 'result' => 'Something went wrong']);
                }
            } else {
                return Response::json(['status' => 'error', 'result' => 'Missing or invalid organization information']);
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }

    public function postUpdateorganizations() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');

        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        }

        $user_id = $utility->getUserIdByAuthToken($access_token);
        if($user_id > 0) {
            if(isset($data['organizations']) && $data['organizations'] != '') {
                if($this->is_JSON($data['organizations'])) {
                    $organizations = json_decode($data['organizations'], true);
                    foreach($organizations as $orgKey => $orgValue) {
                        if(isset($orgValue['organizations_fields'])) {
                            if(!isset($orgValue['organizations_fields']['organization_id']) || $orgValue['organizations_fields']['organization_id'] == '') {
                                return Response::json(['status' => 'error', 'result' => 'Missing organization_id']);
                            }
                        } if(isset($orgValue['extra_fields']) && $orgValue['extra_fields'] != '') {
                            foreach($orgValue['extra_fields'] as $extFldKey => $extFldValue) {
                                if(!array_key_exists('fieldName', $extFldValue)) {
                                    return Response::json(['status' => 'error', 'result' => 'Key must be fieldName in extra_fields array']);
                                } if(!array_key_exists('fieldValue', $extFldValue)) {
                                    return Response::json(['status' => 'error', 'result' => 'Key must be fieldValue in extra_fields array']);
                                }
                            }
                        }
                    }
                } else {
                    return Response::json(['status' => 'error', 'result' => 'Organizations information is invalid format, JSON is required']);
                }
            } else {
                return Response::json(['status' => 'error', 'result' => 'Missing or invalid organizations information']);
            }

            $updateOrganizationsCount = [];
            foreach($organizations as $organizationsKey => $organizationsValue) {
                $extraFields = $extraFieldsVariable = '';

                $organizationData['registerby'] = $user_id;
                if(isset($organizationsValue['organizations_fields']['name']) && $organizationsValue['organizations_fields']['name'] != '') {
                    $getOrganizationName = Organizations::where('registerby', $user_id)->where('name', Tcrypt::encrypter($organizationsValue['organizations_fields']['name']))->count();
                    if($getOrganizationName) {
                        unset($organizationsValue['organizations_fields']['name']);
                    } else {
                        $organizationData['name'] = trim(Tcrypt::encrypter($organizationsValue['organizations_fields']['name']));
                    }
                } if(isset($organizationsValue['organizations_fields']['reg_no']) && $organizationsValue['organizations_fields']['reg_no'] != '') {
                    $organizationData['reg_no'] = trim($organizationsValue['organizations_fields']['reg_no']);
                } if(isset($organizationsValue['organizations_fields']['mobile']) && $organizationsValue['organizations_fields']['mobile'] != '') {
                    $organizationData['mobile'] = trim($organizationsValue['organizations_fields']['mobile']);
                } if(isset($organizationsValue['organizations_fields']['address']) && $organizationsValue['organizations_fields']['address'] != '') {
                    $organizationData['address'] = trim($organizationsValue['organizations_fields']['address']);
                } if(isset($organizationsValue['organizations_fields']['zipcode']) && $organizationsValue['organizations_fields']['zipcode'] != '') {
                    $organizationData['zip'] = trim($organizationsValue['organizations_fields']['zipcode']);
                } if(isset($organizationsValue['organizations_fields']['city']) && $organizationsValue['organizations_fields']['city'] != '') {
                    $organizationData['city'] = trim($organizationsValue['organizations_fields']['city']);
                } if(isset($organizationsValue['organizations_fields']['country']) && $organizationsValue['organizations_fields']['country'] != '') {
                    $organizationData['country'] = trim($organizationsValue['organizations_fields']['country']);
                } if(isset($organizationsValue['extra_fields']) && $organizationsValue['extra_fields'] != '') {
                    $extraFieldsVariable = [];
                    foreach($organizationsValue['extra_fields'] as $extFldKey => $extFldValue) {
                        array_push($extraFieldsVariable, array('fieldName' => trim($extFldValue['fieldName']), 'fieldValue' => trim($extFldValue['fieldValue'])));
                    }
                    $extraFields = ($extraFieldsVariable != '' ? json_encode($extraFieldsVariable) : '');
                    $organizationData['extra_fields'] = $extraFields;
                }

                $updateOrganization = Organizations::where('id', $organizationsValue['organizations_fields']['organization_id'])->where('registerby', $user_id)->update($organizationData);

                if($updateOrganization) {
                    array_push($updateOrganizationsCount, $updateOrganization);
                }
            }

            if(count($updateOrganizationsCount) > 0) {
                return Response::json(['status'=>'success','result' => 'Organization(s) updated successfully']);
            } else {
                return Response::json(['status'=>'success','result' => 'Something went wrong']);
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }

    public function getOrganizationinfo() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');
        $organizationId = 0;

        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        } if(isset($data['organization_id']) && $data['organization_id'] != '') {
            $organizationId = $data['organization_id'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'organization_id is missing']);
        }

        $user_id = $utility->getUserIdByAuthToken($access_token);
        if($user_id > 0) {
            $organizationInfo = Organizations::where('organizations.id', $organizationId)->where('organizations.registerby', $user_id)->join('users_info', 'organizations.registerby', '=', 'users_info.user_id')->select('organizations.id AS organization_id', 'organizations.name AS organization_name', 'organizations.reg_no', 'organizations.mobile', 'organizations.address', 'organizations.zip', 'organizations.city', 'organizations.country', 'organizations.extra_fields', 'organizations.created_date', 'organizations.registerby', 'users_info.full_name AS parent_name')->first();
            $responseArray = [];
            if($organizationInfo) {
                $organizationInfoResponse['organization_id'] = $organizationInfo['organization_id'];
                $organizationInfoResponse['name'] = ($organizationInfo['name'] != '' ? trim(Tcrypt::decrypter($organizationInfo['name'])) : '');
                $organizationInfoResponse['reg_no'] = ($organizationInfo['reg_no'] != '' ? trim($organizationInfo['reg_no']) : '');
                $organizationInfoResponse['mobile'] = ($organizationInfo['mobile'] != '' ? trim($organizationInfo['mobile']) : '');
                $organizationInfoResponse['address'] = ($organizationInfo['address'] != '' ? trim($organizationInfo['address']) : '');
                $organizationInfoResponse['zipcode'] = ($organizationInfo['zip'] != '' ? trim($organizationInfo['zip']) : '');
                $organizationInfoResponse['city'] = ($organizationInfo['city'] != '' ? $organizationInfo['city'] : '');
                $organizationInfoResponse['country'] = ($organizationInfo['country'] != '' ? $organizationInfo['country'] : '');
                $organizationInfoResponse['parent_name'] = ($organizationInfo['parent_name'] != '' ? trim($organizationInfo['parent_name']) : '');
                $organizationInfoResponse['parent_id'] = ($organizationInfo['registerby'] != '' ? trim($organizationInfo['registerby']) : '');

                $organizationInfoResponse['register_date'] = ($organizationInfo['created_date'] != '' && $organizationInfo['created_date'] != '0000-00-00 00:00:00' ? trim($organizationInfo['created_date']) : '');

                $responseArray['organization'] = $organizationInfoResponse;
                $responseArray['extra_fields'] = ($organizationInfo['extra_fields'] != '' ? json_decode($organizationInfo['extra_fields'], true) : '');

                return Response::json(['status' => 'success', 'result' => $responseArray]);
            } else {
                return Response::json(['status' => 'error', 'result' => 'No record found']);
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }

    public function postDeleteorganizations() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');

        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        }

        $user_id = $utility->getUserIdByAuthToken($access_token);
        if($user_id > 0) {
            if(isset($data['organizations']) && $data['organizations'] != '') {
                if($this->is_JSON($data['organizations'])) {
                    $organizations = json_decode($data['organizations'], true);
                    if(!empty($organizations)) {
                        if(is_array($organizations)) {
                            foreach($organizations as $orgKey => $orgValue) {
                                if(is_numeric($orgValue)) {
                                    $checkIdBelongs = Organizations::where('id', $orgValue)->where('registerby', $user_id)->count();
                                    if(!$checkIdBelongs) {
                                        return Response::json(['status' => 'error', 'result' => 'Organization id(s) or access token is invalid']);
                                    }
                                } else {
                                    return Response::json(['status' => 'error', 'result' => 'Organization information should be numeric']);
                                }
                            }
                        } else {
                            return Response::json(['status' => 'error', 'result' => 'Organization information is not an array']);
                        }
                    } else {
                        return Response::json(['status' => 'error', 'result' => 'Organization id(s) required']);
                    }
                } else {
                    return Response::json(['status' => 'error', 'result' => 'Organization information is invalid format, JSON is required']);
                }

                $deleteResponseArray = [];
                foreach($organizations as $organizationsKey => $organizationsValue) {
                    $deleteRecords = Organizations::where('id', $organizationsValue)->where('registerby', $user_id)->delete();
                    if($deleteRecords) {
                        Recipient::where('organization_id', $organizationsValue)->where('registerby', $user_id)->update(['organization_id' => 0]);
                        array_push($deleteResponseArray, $deleteRecords);
                    }
                }

                if($deleteResponseArray) {
                    return Response::json(['status'=>'success','result' => 'Organization(s) deleted successfully']);
                } else {
                    return Response::json(['status' => 'success', 'result' => 'Something went wrong']);
                }
            } else {
                return Response::json(['status' => 'error', 'result' => 'Organization information is missing']);
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }

    public function getPeople() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');

        //http://beta.simplesign.io/admin/checkrecipienttest/236
        //http://localhost/codeTesting/cURL/codeTesting73cURLPHPallrecipients.php
        //http://localhost/codeTesting/cURL/codeTesting66cURLPHPaddrecipientsinPHP.php
        //http://localhost/codeTesting/cURL/codeTesting70cURLPHPrecipientupdate.php
        //http://localhost/codeTesting/cURL/codeTesting71cURLPHPgetrecipient.php
        //http://localhost/codeTesting/cURL/codeTesting72cURLPHPdeleterecipient.php
        //https://www.google.com/search?q=what+is+odata&oq=what+is+odata&aqs=chrome..69i57j0l5.2946j0j7&sourceid=chrome&ie=UTF-8
        
        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        }

        $user_id = $utility->getUserIdByAuthToken($access_token);
        if($user_id > 0) {

            $pageLimit = 10;
            if(isset($data['pagelimit']) && $data['pagelimit'] != '') {
                $pageLimit = $data['pagelimit'];
                $data['page_limit'] = $pageLimit;
            } elseif(isset($data['page_limit']) && $data['page_limit'] != '') {
                $data['page_limit'] = $data['page_limit'];
                $pageLimit = $data['page_limit'];
            } /* elseif(isset($data['document_limit']) && $data['document_limit'] != '') {
                $data['pagelimit'] = $data['document_limit'];
                $pageLimit = $data['document_limit'];
            } */
            //$pageLimit = (isset($data['pagelimit']) && $data['pagelimit'] != '' ? $data['pagelimit'] : 10);
            $currentPage = (isset($data['current_page']) && $data['current_page'] != '' ? $data['current_page'] : 0);
            $skipRecords = $currentPage * $pageLimit;

            $recipientInfo = Recipient::where('customers.registerby', $user_id)->join('users_info', 'customers.registerby', '=', 'users_info.user_id')->select('customers.id AS people_id', 'customers.organization_id', 'customers.full_name', 'customers.last_name', 'customers.email', 'customers.personnr', 'customers.mobile', 'customers.address', 'customers.zip', 'customers.city', 'customers.country', 'customers.extra_fields_new', 'customers.created_date', 'customers.registerby', 'users_info.full_name AS parent_name')->orderBy('customers.id', 'desc')->skip($skipRecords)->take($pageLimit)->get()->toArray();
            if($recipientInfo) {
                $responseArray = [];
                foreach($recipientInfo as $recInfoKey => $recInfoValue) {
                    $peoples = $extraFields = [];
                    $peoples['people_id'] = $recInfoValue['people_id'];
                    if(isset($recInfoValue['last_name']) && $recInfoValue['last_name'] != '') {
                        $peoples['first_name'] = (isset($recInfoValue['full_name']) && $recInfoValue['full_name'] != '' ? trim(Tcrypt::decrypter($recInfoValue['full_name'])) : '');
                        $peoples['last_name'] = (isset($recInfoValue['last_name']) && $recInfoValue['last_name'] != '' ? trim(Tcrypt::decrypter($recInfoValue['last_name'])) : '');
                    } else {
                        //$nameExplode = ($recInfoValue['full_name'] != '' ? explode(' ', trim(Tcrypt::decrypter($recInfoValue['full_name']))) : '');
                        $nameExplode = ($recInfoValue['full_name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim(Tcrypt::decrypter($recInfoValue['full_name']))) : '');
                        $peoples['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                        $peoples['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                    }
                    $peoples['email'] = ($recInfoValue['email'] != '' ? preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', trim(Tcrypt::decrypter($recInfoValue['email']))) : '');
                    $peoples['personal_no'] = ($recInfoValue['personnr'] != '' ? trim($recInfoValue['personnr']) : '');
                    $peoples['mobile'] = ($recInfoValue['mobile'] != '' ? trim($recInfoValue['mobile']) : '');
                    $peoples['address'] = ($recInfoValue['address'] != '' ? trim($recInfoValue['address']) : '');
                    $peoples['zipcode'] = ($recInfoValue['zip'] != '' ? trim($recInfoValue['zip']) : '');
                    $peoples['city'] = ($recInfoValue['city'] != '' ? trim($recInfoValue['city']) : '');
                    $peoples['country'] = ($recInfoValue['country'] != '' ? trim($recInfoValue['country']) : '');

                    /*$getOrganizationName = Organizations::where('id', $recInfoValue['organization_id'])->where('registerby', $user_id)->pluck('name');
                    $peoples['organization_name'] = (isset($getOrganizationName) && $getOrganizationName != '' ? trim(Tcrypt::decrypter($getOrganizationName)) : '');

                    $peoples['parent_name'] = ($recInfoValue['parent_name'] != '' ? trim($recInfoValue['parent_name']) : '');
                    $peoples['parent_id'] = ($recInfoValue['registerby'] != '' ? trim($recInfoValue['registerby']) : '');

                    $peoples['register_date'] = ($recInfoValue['created_date'] != '' && $recInfoValue['created_date'] != '0000-00-00 00:00:00' ? trim($recInfoValue['created_date']) : '');*/

                    //$extraFields['extra_fields'] = ($recInfoValue['extra_fields_new'] != '' ? json_decode($recInfoValue['extra_fields_new'], true) : '');

                    //$eachArray = ['people' => $peoples, 'extra_field' => $extraFields];
                    $eachArray = ['people' => $peoples];
                    array_push($responseArray, $eachArray);
                }

                $totalRecipients = Recipient::where('registerby', $user_id)->count();

                //return Response::json(['status' => 'success', 'total_people' => $totalRecipients, 'result' => $responseArray]);
                return response()->json(['status' => 'success', 'total_people' => $totalRecipients, 'result' => $responseArray], 200, ['Content-Type' => 'application/json; charset=UTF-8'], JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
            } else {
                return Response::json(['status' => 'error', 'result' => 'No record found']);
            }
        } else {
                return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }

    public function postAddpeople() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');

        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        }
        
        $user_id = $utility->getUserIdByAuthToken($access_token);
        if($user_id > 0) {
            $addupdateapiaccesslogs = $utility->addupdateapiaccesslogs($user_id, 'postAddpeople v3', $data, -1);
            if(isset($data['people']) && $data['people'] != '') {
                if($this->is_JSON($data['people'])) {
                    $peoples = json_decode($data['people'], true);
                    if(!empty($peoples)) {
                        foreach($peoples as $recKey => $recValue) {
                            if(!is_array($recValue['people_fields'])) {
                                return Response::json(['status' => 'error', 'result' => 'people_fields should be array']);
                            } else {
                                if(!isset($recValue['people_fields']) || empty($recValue['people_fields'])) {
                                    return Response::json(['status' => 'error', 'result' => 'People information is missing']);
                                } elseif(isset($recValue['people_fields']) && !empty($recValue['people_fields'])) {
                                    if(!isset($recValue['people_fields']['first_name']) || $recValue['people_fields']['first_name'] == '') {
                                        return Response::json(['status' => 'error', 'result' => 'Invalid or missing people first_name']);
                                    } elseif(!isset($recValue['people_fields']['email']) || !filter_var($recValue['people_fields']['email'], FILTER_VALIDATE_EMAIL)) {
                                        return Response::json(['status' => 'error', 'result' => 'Invalid or missing people email']);
                                    } if(isset($recValue['people_fields']['email']) && $recValue['people_fields']['email'] != '' && filter_var($recValue['people_fields']['email'], FILTER_VALIDATE_EMAIL)) {
                                        $recValue['people_fields']['email'] = preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $recValue['people_fields']['email']);
                                        $getEmail = Recipient::where('registerby', $user_id)->where('email', trim(Tcrypt::encrypter(strtolower($recValue['people_fields']['email']))))->count();
                                        if($getEmail) {
                                            return Response::json(['status' => 'error', 'result' => 'Email ('.$recValue['people_fields']['email'].') for this user already exists']);
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        return Response::json(['status' => 'error', 'result' => 'People information is missing']);
                    }
                } else {
                    return Response::json(['status' => 'error', 'result' => 'People information is invalid format, JSON is required']);
                }

                $newPeoplesIds = [];
                foreach($peoples as $peoplesKey => $peoplesValue) {
                    $fullName = $firstName = $lastName = $email = $personNr = $mobileNo = $address = $zipcode = $city = $country = $extraFieldsNew = $extraFieldsVariable = '';
                    
                    $peoplesValue['people_fields']['email'] = trim(preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $peoplesValue['people_fields']['email']));
                    $firstName = (isset($peoplesValue['people_fields']['first_name']) && $peoplesValue['people_fields']['first_name'] != '' ? Tcrypt::encrypter(trim($peoplesValue['people_fields']['first_name'])) : '');
                    $lastName = (isset($peoplesValue['people_fields']['last_name']) && $peoplesValue['people_fields']['last_name'] != '' ? Tcrypt::encrypter(trim($peoplesValue['people_fields']['last_name'])) : '');

                    $email = (isset($peoplesValue['people_fields']['email']) && $peoplesValue['people_fields']['email'] !=  '' && filter_var($peoplesValue['people_fields']['email'], FILTER_VALIDATE_EMAIL) ? trim(Tcrypt::encrypter(strtolower($peoplesValue['people_fields']['email']))) : '');
                    $personNr = (isset($peoplesValue['people_fields']['personal_no']) ? trim($peoplesValue['people_fields']['personal_no']) : '');
                    $mobileNo = (isset($peoplesValue['people_fields']['mobile']) ? trim($peoplesValue['people_fields']['mobile']) : '');
                    $address = (isset($peoplesValue['people_fields']['address']) ? trim($peoplesValue['people_fields']['address']) : '');
                    $zipcode = (isset($peoplesValue['people_fields']['zipcode']) ? trim($peoplesValue['people_fields']['zipcode']) : '');
                    $city = (isset($peoplesValue['people_fields']['city']) ? trim($peoplesValue['people_fields']['city']) : '');
                    $country = (isset($peoplesValue['people_fields']['country']) ? trim($peoplesValue['people_fields']['country']) : '');

                    $organizationId = 0;
                    if(isset($peoplesValue['people_fields']['organization_name']) && $peoplesValue['people_fields']['organization_name'] != '') {
                        $getOrganizationId = Organizations::where('name', Tcrypt::encrypter($peoplesValue['people_fields']['organization_name']))->where('registerby', $user_id)->select('id')->first();
                        if($getOrganizationId) {
                            $organizationId = $getOrganizationId['id'];
                        } else {
                            $organizationId = Organizations::insertGetId(['name' => Tcrypt::encrypter($peoplesValue['people_fields']['organization_name']), 'registerby' => $user_id, 'created_date' => date('Y-m-d H:i:s')]);
                        }
                    }

                    $peoplesId = Recipient::insertGetId([
                        'organization_id' => $organizationId,
                        'full_name' => $firstName,
                        'last_name' => $lastName,
                        'email' => $email,
                        'personnr' => $personNr,
                        'mobile' => $mobileNo,
                        'address' => $address,
                        'zip' => $zipcode,
                        'city' => $city,
                        'country' => $country,
                        'registerby' => $user_id
                    ]);

                    if($peoplesId) {
                        array_push($newPeoplesIds, $peoplesId);
                    }
                }//end foreach loop

                if(count($newPeoplesIds) > 0) {
                    return Response::json(['status' => 'success', 'result' => $newPeoplesIds]);
                } else {
                    return Response::json(['status' => 'error', 'result' => 'Already added']);
                }
            } else {
                return Response::json(['status' => 'error', 'result' => 'Missing or invalid people information']);
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }

    public function postUpdatepeople() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');

        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        }

        $user_id = $utility->getUserIdByAuthToken($access_token);
        if($user_id > 0) {
            $addupdateapiaccesslogs = $utility->addupdateapiaccesslogs($user_id, 'postUpdatepeople v3', $data, -1);
            if(isset($data['people']) && $data['people'] != '') {
                if($this->is_JSON($data['people'])) {
                    $peoples = json_decode($data['people'], true);
                    if(!empty($peoples)) {
                        foreach($peoples as $recKey => $recValue) {
                            if(!is_array($recValue['people_fields'])) {
                                return Response::json(['status' => 'error', 'result' => 'people_fields should be array']);
                            } else {
                                if(!isset($recValue['people_fields']) || empty($recValue['people_fields'])) {
                                    return Response::json(['status' => 'error', 'result' => 'People information is missing']);
                                } elseif(!isset($recValue['people_fields']['people_id']) || $recValue['people_fields']['people_id'] == '') {
                                    return Response::json(['status' => 'error', 'result' => 'Missing people_id']);
                                } if(isset($recValue['people_fields']['email']) && !empty($recValue['people_fields']['email'])) {
                                    $recValue['people_fields']['email'] = preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $recValue['people_fields']['email']);
                                    if(isset($recValue['people_fields']['email']) && $recValue['people_fields']['email'] != '' && !filter_var($recValue['people_fields']['email'], FILTER_VALIDATE_EMAIL)) {
                                        return Response::json(['status' => 'error', 'result' => 'Invalid people email']);
                                    }
                                }
                                if(isset($recValue['people_fields']['people_id']) && $recValue['people_fields']['people_id'] != '') {
                                    $checkrecipient = Recipient::where('id', $recValue['people_fields']['people_id'])->where('registerby', $user_id)->count();
                                    if(!$checkrecipient) {
                                        return Response::json(['status' => 'error', 'result' => 'Invalid people_id or access_token']);
                                    }
                                }
                                /* if(!isset($recValue['people_fields']['first_name']) || $recValue['people_fields']['first_name'] == '') {
                                    return Response::json(['status' => 'error', 'result' => 'Invalid or missing people first_name']);
                                } */
                            }
                        }
                    } else {
                        return Response::json(['status' => 'error', 'result' => 'People information is missing']);
                    }
                } else {
                    return Response::json(['status' => 'error', 'result' => 'People information is invalid format, JSON is required']);
                }

                $updatePeoplesCount = [];
                foreach($peoples as $peoplesKey => $peoplesValue) {
                    $personNr = $mobileNo = $address = $zipcode = $city = $country = $extraFieldsNew = $extraFieldsVariable = '';
                    $peopleData = [];

                    if(isset($peoplesValue['people_fields']['first_name']) && $peoplesValue['people_fields']['first_name'] != '') {
                        $peopleData['full_name'] = Tcrypt::encrypter(trim($peoplesValue['people_fields']['first_name']));
                    } if(isset($peoplesValue['people_fields']['last_name']) && $peoplesValue['people_fields']['last_name'] != '') {
                        $peopleData['last_name'] = Tcrypt::encrypter(trim($peoplesValue['people_fields']['last_name']));
                    }

                    if(isset($peoplesValue['people_fields']['email']) && $peoplesValue['people_fields']['email'] != '') {
                        $peoplesValue['people_fields']['email'] = trim(preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $peoplesValue['people_fields']['email']));
                        $getEmail = Recipient::where('registerby', $user_id)->where('email', Tcrypt::encrypter($peoplesValue['people_fields']['email']))->count();
                        if($getEmail) {
                            unset($peoplesValue['people_fields']['email']);
                        } else {
                            $peopleData['email'] = Tcrypt::encrypter(trim(strtolower($peoplesValue['people_fields']['email'])));
                        }
                    } if(isset($peoplesValue['people_fields']['personal_no']) && $peoplesValue['people_fields']['personal_no'] != '') {
                        $peopleData['personnr'] = trim($peoplesValue['people_fields']['personal_no']);
                    } if(isset($peoplesValue['people_fields']['mobile']) && $peoplesValue['people_fields']['mobile'] != '') {
                        $peopleData['mobile'] = trim($peoplesValue['people_fields']['mobile']);
                    } if(isset($peoplesValue['people_fields']['address']) && $peoplesValue['people_fields']['address'] != '') {
                        $peopleData['address'] = trim($peoplesValue['people_fields']['address']);
                    } if(isset($peoplesValue['people_fields']['zipcode']) && $peoplesValue['people_fields']['zipcode'] != '') {
                        $peopleData['zip'] = trim($peoplesValue['people_fields']['zipcode']);
                    } if(isset($peoplesValue['people_fields']['city']) && $peoplesValue['people_fields']['city'] != '') {
                        $peopleData['city'] = trim($peoplesValue['people_fields']['city']);
                    } if(isset($peoplesValue['people_fields']['country']) && $peoplesValue['people_fields']['country'] != '') {
                        $peopleData['country'] = trim($peoplesValue['people_fields']['country']);
                    }

                    $organizationId = 0;
                    if(isset($peoplesValue['people_fields']['organization_name']) && $peoplesValue['people_fields']['organization_name'] != '') {
                        $getOrganizationId = Organizations::where('name', Tcrypt::encrypter($peoplesValue['people_fields']['organization_name']))->where('registerby', $user_id)->select('id')->first();
                        if($getOrganizationId) {
                            $organizationId = $getOrganizationId['id'];
                        }
                        $peopleData['organization_id'] = $organizationId;
                    }

                    if(!empty($peopleData)) {
                        //DB::enableQueryLog();
                        $updatePeople = Recipient::where('id', $peoplesValue['people_fields']['people_id'])->where('registerby', $user_id)->update($peopleData);
                        if($updatePeople) {
                            array_push($updatePeoplesCount, $updatePeople);
                        }
                    } else {
                        return Response::json(['status' => 'error', 'result' => 'Nothing to update']);
                    }
                }

                if(count($updatePeoplesCount) > 0) {
                    return Response::json(['status' => 'success', 'result' => 'People updated successfully']);
                } else {
                    return Response::json(['status' => 'success', 'result' => 'Already updated']);
                }
            } else {
                return Response::json(['status' => 'error', 'result' => 'Missing or invalid people information']);
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }

    public function getPeopleinfo() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');
        $peopleId = 0;
        
        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        } if(isset($data['people_id']) && $data['people_id'] != '') {
            $peopleId = $data['people_id'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'people_id is missing']);
        }

        $user_id = $utility->getUserIdByAuthToken($access_token);
        if($user_id > 0) {
            //$peopleInfo = Recipient::where('id', $peopleId)->where('registerby', $user_id)->select('id', 'organization_id', 'full_name', 'email', 'personnr', 'mobile', 'address', 'zip', 'city', 'country', 'extra_fields_new', 'created_date')->first();

            $peopleInfo = Recipient::where('customers.id', $peopleId)->where('customers.registerby', $user_id)->join('users_info', 'customers.registerby', '=', 'users_info.user_id')->select('customers.id AS people_id', 'customers.organization_id', 'customers.full_name', 'customers.last_name', 'customers.email', 'customers.personnr', 'customers.mobile', 'customers.address', 'customers.zip', 'customers.city', 'customers.country', 'customers.extra_fields_new', 'customers.created_date', 'customers.registerby', 'users_info.full_name AS parent_name')->first();
            $responseArray = [];
            if($peopleInfo) {
                $peopleInfoResponse['people_id'] = $peopleInfo['people_id'];
                if(isset($peopleInfo['last_name']) && $peopleInfo['last_name'] != '') {
                    $peopleInfoResponse['first_name'] = (isset($peopleInfo['full_name']) && $peopleInfo['full_name'] != '' ? trim(Tcrypt::decrypter($peopleInfo['full_name'])) : '');
                    $peopleInfoResponse['last_name'] = (isset($peopleInfo['last_name']) && $peopleInfo['last_name'] != '' ? trim(Tcrypt::decrypter($peopleInfo['last_name'])) : '');
                } else {
                    //$nameExplode = ($peopleInfo['full_name'] != '' ? explode(' ', trim(Tcrypt::decrypter($peopleInfo['full_name']))) : '');
                    $nameExplode = ($peopleInfo['full_name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim(Tcrypt::decrypter($peopleInfo['full_name']))) : '');
                    $peopleInfoResponse['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                    $peopleInfoResponse['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                }
                $peopleInfoResponse['email'] = ($peopleInfo['email'] != '' ? preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', trim(Tcrypt::decrypter($peopleInfo['email']))) : '');
                $peopleInfoResponse['personal_no'] = ($peopleInfo['personnr'] != '' ? trim($peopleInfo['personnr']) : '');
                $peopleInfoResponse['mobile'] = ($peopleInfo['mobile'] != '' ? trim($peopleInfo['mobile']) : '');
                $peopleInfoResponse['address'] = ($peopleInfo['address'] != '' ? trim($peopleInfo['address']) : '');
                $peopleInfoResponse['zipcode'] = ($peopleInfo['zip'] != '' ? trim($peopleInfo['zip']) : '');
                $peopleInfoResponse['city'] = ($peopleInfo['city'] != '' ? trim($peopleInfo['city']) : '');
                $peopleInfoResponse['country'] = ($peopleInfo['country'] != '' ? trim($peopleInfo['country']) : '');

                /*$getOrganizationName = Organizations::where('id', $peopleInfo['organization_id'])->where('registerby', $user_id)->pluck('name');
                $peopleInfoResponse['organization_name'] = (isset($getOrganizationName) && $getOrganizationName != '' ? trim(Tcrypt::decrypter($getOrganizationName)) : '');

                $peopleInfoResponse['parent_name'] = ($peopleInfo['parent_name'] != '' ? trim($peopleInfo['parent_name']) : '');
                $peopleInfoResponse['parent_id'] = ($peopleInfo['registerby'] != '' ? trim($peopleInfo['registerby']) : '');

                $peopleInfoResponse['register_date'] = ($peopleInfo['created_date'] != '' && $peopleInfo['created_date'] != '0000-00-00 00:00:00' ? trim($peopleInfo['created_date']) : '');*/

                $responseArray['people'] = $peopleInfoResponse;
                //$responseArray['extra_fields'] = ($peopleInfo['extra_fields_new'] != '' ? json_decode($peopleInfo['extra_fields_new'], true) : '');

                //return Response::json(['status' => 'success', 'result' => $responseArray]);
                return response()->json(['status' => 'success', 'result' => $responseArray], 200, ['Content-Type' => 'application/json; charset=UTF-8'], JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
            } else {
                return Response::json(['status' => 'error', 'result' => 'No record found']);
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }

    public function postDeletepeople() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');

        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        }

        $user_id = $utility->getUserIdByAuthToken($access_token);
        if($user_id > 0) {
            if(isset($data['people']) && $data['people'] != '') {
                if($this->is_JSON($data['people'])) {
                    $peoples = json_decode($data['people'], true);
                    if(!empty($peoples)) {
                        if(is_array($peoples)) {
                            foreach($peoples as $recKey => $recValue) {
                                if(is_numeric($recValue)) {
                                    $checkIdsBelongs = Recipient::where('id', $recValue)->where('registerby', $user_id)->count();
                                    if(!$checkIdsBelongs) {
                                        return Response::json(['status' => 'error', 'result' => 'People id(s) or access token is invalid']);
                                    }
                                } else {
                                    return Response::json(['status' => 'error', 'result' => 'People information should be numeric']);
                                }
                            }
                        } else {
                            return Response::json(['status' => 'error', 'result' => 'People information is not an array']);
                        }
                    } else {
                        return Response::json(['status' => 'error', 'result' => 'People id(s) required']);
                    }
                } else {
                    return Response::json(['status' => 'error', 'result' => 'People information is invalid format, JSON is required']);
                }

                $deleteResponseArray = [];
                foreach($peoples as $peoplesKey => $peoplesValue) {
                    $deleteRecords = Recipient::where('id', $peoplesValue)->where('registerby', $user_id)->delete();
                    if($deleteRecords) {
                        array_push($deleteResponseArray, $deleteRecords);
                    }
                }

                if($deleteResponseArray) {
                    return Response::json(['status'=>'success','result' => 'People deleted successfully']);
                } else {
                    return Response::json(['status' => 'success', 'result' => 'Already deleted']);
                }
            } else {
                return Response::json(['status' => 'error', 'result' => 'People information is missing']);
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }

    public function getUsers() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');
        ini_set('max_execution_time', 800);

        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        }        

        $user_id = $utility->getUserIdByAuthToken($access_token);
        if($user_id > 0) {
            $checkAccessToken = User::where('id', $user_id)->pluck('parent_id');
            if($checkAccessToken) {
                return Response::json(['status' => 'error', 'result' => 'Need parent access_token']);
            } else {
                $pageLimit = 10;
                if(isset($data['pagelimit']) && $data['pagelimit'] != '') {
                    $pageLimit = $data['pagelimit'];
                    $data['page_limit'] = $pageLimit;
                } elseif(isset($data['page_limit']) && $data['page_limit'] != '') {
                    $data['page_limit'] = $data['page_limit'];
                    $pageLimit = $data['page_limit'];
                } /* elseif(isset($data['document_limit']) && $data['document_limit'] != '') {
                    $data['pagelimit'] = $data['document_limit'];
                    $pageLimit = $data['document_limit'];
                } */
                //$pageLimit = (isset($data['pagelimit']) && $data['pagelimit'] != '' ? $data['pagelimit'] : 10);
                $currentPage = (isset($data['current_page']) && $data['current_page'] != '' ? $data['current_page'] : 0);
                $skipRecords = $currentPage * $pageLimit;

                $teamsInfo = User::where('users_login.parent_id', $user_id)->where('users_login.is_active', '!=', -1)->join('users_info', 'users_login.id', '=', 'users_info.user_id')->select('users_login.id', 'users_info.full_name', 'users_login.email', 'users_login.is_active', 'users_login.user_premission_group', 'users_info.extra_fields', 'users_info.extra_fields_data')->orderBy('users_login.id', 'desc')->skip($skipRecords)->take($pageLimit)->get()->toArray();
                $responseArray = $teamArray = [];
                if($teamsInfo) {
                    //all code for sub user to show data
                    $mainUserExtraFields = Userinfo::where('user_id', $user_id)->select('extra_fields')->first();
                    foreach($teamsInfo as $teamsInfoKey => $teamsInfoValue) {
                        $teams = [];
                        $teams['account_id'] = $teamsInfoValue['id'];
                        $teams['full_name'] = $teamsInfoValue['full_name'];
                        $teams['email_address'] = trim(Tcrypt::decrypter($teamsInfoValue['email']));
                        $teams['status'] = ($teamsInfoValue['is_active'] == 1 ? 'active' : 'inactive');
                        $userPremissionGroup = ($teamsInfoValue['user_premission_group'] != '' && $teamsInfoValue['user_premission_group'] != '[]' ? json_decode($teamsInfoValue['user_premission_group'], true) : []);
                        if(!empty($userPremissionGroup)) {
                            foreach($userPremissionGroup as $userPerGrpKey => $userPerGrpValue) {
                                $getGroupAndRoleName = Usersgroups::where('user_groups.user_id', $user_id)->where('user_groups.group_id', $userPerGrpValue['group_id'])->where('users_roles.role_id', $userPerGrpValue['role_id'])->join('users_roles', 'user_groups.user_id', '=', 'users_roles.user_id')->select('user_groups.name', 'users_roles.role_name')->first();
                                $teams['groups'] = [$getGroupAndRoleName['name'] => $getGroupAndRoleName['role_name']];
                            }
                        }
                        if(!empty($teamsInfoValue['extra_fields_data'])) {
                            $extraFieldsDataJsonDecode = json_decode($teamsInfoValue['extra_fields_data'], true);
                            if(!empty($extraFieldsDataJsonDecode)) {
                                $subUsersFieldsResponse = [];
                                foreach($extraFieldsDataJsonDecode as $extraFieldsDataJsonDecodeKey => $extraFieldsDataJsonDecodeValue) {
                                    $subUsersFieldsResponse[$extraFieldsDataJsonDecodeKey] = (isset($extraFieldsDataJsonDecodeValue) && $extraFieldsDataJsonDecodeValue != '' ? $extraFieldsDataJsonDecodeValue : '');
                                }
                                $teams['user_fields'] = $subUsersFieldsResponse;
                            }
                        } elseif(!empty($mainUserExtraFields['extra_fields'])) {
                            $extraFieldsJsonDecode = json_decode($mainUserExtraFields['extra_fields'], true);
                            if(!empty($extraFieldsJsonDecode)) {
                                $subUsersFieldsResponse = [];
                                foreach($extraFieldsJsonDecode as $extraFieldsJsonDecodeKey => $extraFieldsJsonDecodeValue) {
                                    //$subUsersFieldsResponse[$extraFieldsJsonDecodeKey] = (isset($extraFieldsJsonDecodeValue) && $extraFieldsJsonDecodeValue != '' ? $extraFieldsJsonDecodeValue : '');
                                    $subUsersFieldsResponse[$extraFieldsJsonDecodeValue['title']] = '';
                                }
                                $teams['user_fields'] = $subUsersFieldsResponse;
                            }
                        }
                        $teamsArray = ['user_member' => $teams];
                        array_push($teamArray, $teamsArray);
                    }

                    $mainUsersInfo = User::where('users_login.id', $user_id)->join('users_info', 'users_login.id', '=', 'users_info.user_id')->select('users_login.id', 'users_info.full_name', 'users_login.email', 'users_login.is_active', 'users_login.user_premission_group', 'users_info.extra_fields', 'users_info.extra_fields_data')->first();
                    if(!empty($mainUsersInfo)) {
                        $mainUserInformation = ['user_member' => [
                            'account_id' => $mainUsersInfo['id'],
                            'full_name' => $mainUsersInfo['full_name'],
                            'email_address' => trim($mainUsersInfo['email']),
                            'status' => ($mainUsersInfo['is_active'] == 1 ? 'active' : 'inactive'),
                            'groups' => ['Default' => 'Full Access']
                        ]];
                        if(!empty($mainUsersInfo['extra_fields'])) {
                            $mainUserExtraFieldsJsonDecode = json_decode($mainUsersInfo['extra_fields'], true);
                            $mainUserExtraFieldsDataJsonDecode = (isset($mainUsersInfo['extra_fields_data']) && !empty($mainUsersInfo['extra_fields_data']) ? json_decode($mainUsersInfo['extra_fields_data'], true) : []);
                            if(!empty($mainUserExtraFieldsJsonDecode)) {
                                $mainUsersFieldsResponse = [];
                                foreach($mainUserExtraFieldsJsonDecode as $mainUserExtraFieldsJsonDecodeKey => $mainUserExtraFieldsJsonDecodeValue) {
                                    $title = (isset($mainUserExtraFieldsDataJsonDecode[$mainUserExtraFieldsJsonDecodeValue['title']]) && $mainUserExtraFieldsDataJsonDecode[$mainUserExtraFieldsJsonDecodeValue['title']] != '' ? $mainUserExtraFieldsDataJsonDecode[$mainUserExtraFieldsJsonDecodeValue['title']] : '');
                                    //$mainUsersFieldsResponse[$mainUserExtraFieldsJsonDecodeValue['title']] = (isset($mainUserExtraFieldsJsonDecodeValue) && $mainUserExtraFieldsJsonDecodeValue != '' ? $mainUserExtraFieldsJsonDecodeValue : '');
                                    $mainUsersFieldsResponse[$mainUserExtraFieldsJsonDecodeValue['title']] = $title;
                                }
                                $mainUserInformation['user_member']['user_fields'] = $mainUsersFieldsResponse;
                            }
                        }
                        array_push($teamArray, $mainUserInformation);
                    }
                    $responseArray['users'] = $teamArray;
                } else {
                    //all code for main user to show data
                    $mainUsersInfo = User::where('users_login.id', $user_id)->join('users_info', 'users_login.id', '=', 'users_info.user_id')->select('users_login.id', 'users_info.full_name', 'users_login.email', 'users_login.is_active', 'users_login.user_premission_group', 'users_info.extra_fields', 'users_info.extra_fields_data')->first();
                    if(!empty($mainUsersInfo)) {
                        $mainUserInformation = ['user_member' => [
                            'account_id' => $mainUsersInfo['id'],
                            'full_name' => $mainUsersInfo['full_name'],
                            'email_address' => trim($mainUsersInfo['email']),
                            'status' => ($mainUsersInfo['is_active'] == 1 ? 'active' : 'inactive'),
                            'groups' => ['Default' => 'Full Access']
                        ]];
                        if(!empty($mainUsersInfo['extra_fields'])) {
                            $mainUserExtraFieldsJsonDecode = json_decode($mainUsersInfo['extra_fields'], true);
                            $mainUserExtraFieldsDataJsonDecode = (isset($mainUsersInfo['extra_fields_data']) && !empty($mainUsersInfo['extra_fields_data']) ? json_decode($mainUsersInfo['extra_fields_data'], true) : []);
                            if(!empty($mainUserExtraFieldsJsonDecode)) {
                                $mainUsersFieldsResponse = [];
                                foreach($mainUserExtraFieldsJsonDecode as $mainUserExtraFieldsJsonDecodeKey => $mainUserExtraFieldsJsonDecodeValue) {
                                    $title = (isset($mainUserExtraFieldsDataJsonDecode[$mainUserExtraFieldsJsonDecodeValue['title']]) && $mainUserExtraFieldsDataJsonDecode[$mainUserExtraFieldsJsonDecodeValue['title']] != '' ? $mainUserExtraFieldsDataJsonDecode[$mainUserExtraFieldsJsonDecodeValue['title']] : '');
                                    //$mainUsersFieldsResponse[$mainUserExtraFieldsJsonDecodeValue['title']] = (isset($mainUserExtraFieldsJsonDecodeValue) && $mainUserExtraFieldsJsonDecodeValue != '' ? $mainUserExtraFieldsJsonDecodeValue : '');
                                    $mainUsersFieldsResponse[$mainUserExtraFieldsJsonDecodeValue['title']] = $title;
                                }
                                $mainUserInformation['user_member']['user_fields'] = $mainUsersFieldsResponse;
                            }
                        }
                        /* if(!empty($mainUsersInfo['extra_fields_data'])) {
                            $mainUserExtraFieldsDataJsonDecode = json_decode($mainUsersInfo['extra_fields_data'], true);
                            if(!empty($mainUserExtraFieldsDataJsonDecode)) {
                                $mainUsersFieldsResponse = [];
                                foreach($mainUserExtraFieldsDataJsonDecode as $mainUserExtraFieldsDataJsonDecodeKey => $mainUserExtraFieldsDataJsonDecodeValue) {
                                    $mainUsersFieldsResponse[$mainUserExtraFieldsDataJsonDecodeKey] = (isset($mainUserExtraFieldsDataJsonDecodeValue) && $mainUserExtraFieldsDataJsonDecodeValue != '' ? $mainUserExtraFieldsDataJsonDecodeValue : '');
                                }
                                $mainUserInformation['user_member']['user_fields'] = $mainUsersFieldsResponse;
                            }
                        } */
                        array_push($teamArray, $mainUserInformation);
                    }
                    $responseArray['users'] = $teamArray;
                    //return Response::json(['status' => 'error', 'result' => 'No record found']);
                }

                $parentData = User::where('id', $user_id)->where('is_active', '!=', -1)->select('monthly_signature', 'is_paid')->first();
                $userSettings = settings::where('user_id', $user_id)->select('storage_files_limit', 'archive_permission_access')->first();

                //'users_login.user_permissions_level'
                $accountInfo = User::where('users_login.id', $user_id)->join('user_setting', 'users_login.id', '=', 'user_setting.user_id')->join('users_info', 'users_login.id', '=', 'users_info.user_id')->select('users_login.monthly_signature', 'users_login.is_paid', 'user_setting.storage_files_limit', 'user_setting.archive_permission_access', 'users_login.is_active', 'users_info.company', 'users_info.reg_no', 'users_info.address', 'users_info.telephone', 'users_info.post_code', 'users_info.city')->first();

                $isLocked = ($accountInfo['is_active'] == 1 ? false : true);
                $isPaidSimpleSign = ($accountInfo['is_paid'] == 1 ? true : false);
                $archivePermissionAccess = ($accountInfo['archive_permission_access'] == 1 ? true : false);
                $storageFilesLimit = ($accountInfo['storage_files_limit'] != 0 ? $accountInfo['storage_files_limit'] : 50);
                $responseArray['account_setting'] = ['is_locked' => $isLocked, 'is_paid_ss' => $isPaidSimpleSign, 'is_paid_ssa' => $archivePermissionAccess, 'signatures_left' => $accountInfo['monthly_signature'], 'archive_storage_left' => $storageFilesLimit];

                $responseArray['account_details'] = ['company' => $accountInfo['company'], 'reg_no' => $accountInfo['reg_no'], 'address' => $accountInfo['address'], 'phone_no' => $accountInfo['telephone'], 'zipcode' => $accountInfo['post_code'], 'city' => $accountInfo['city']];

                $totalUsers = 0;
                $totalTeam = User::where('parent_id', $user_id)->where('is_active', '!=', -1)->count();
                $mainUser = User::where('id', $user_id)->where('is_active', '!=', -1)->count();
                if($totalTeam) {
                    $totalUsers = ($totalTeam+$mainUser);
                } else {
                    $totalUsers = $mainUser;
                }
                return response()->json(['status' => 'success', 'total_users' => $totalUsers, 'result' => $responseArray], 200, ['Content-Type' => 'application/json; charset=UTF-8'], JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }

    public function getTeam() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');
        ini_set('max_execution_time', 800);

        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        }

        $user_id = $utility->getUserIdByAuthToken($access_token);
        if($user_id > 0) {
            $checkAccessToken = User::where('id', $user_id)->pluck('parent_id');
            if($checkAccessToken) {
                return Response::json(['status' => 'error', 'result' => 'Need parent access_token']);
            } else {
                $pageLimit = (isset($data['pagelimit']) && $data['pagelimit'] != '' ? $data['pagelimit'] : 10);
                $currentPage = (isset($data['current_page']) && $data['current_page'] != '' ? $data['current_page'] : 0);
                $skipRecords = $currentPage * $pageLimit;

                $teamsInfo = User::where('users_login.parent_id', $user_id)->where('users_login.is_active', '!=', -1)->join('users_info', 'users_login.id', '=', 'users_info.user_id')->select('users_login.id', 'users_info.full_name', 'users_login.email', 'users_login.is_active', 'users_login.user_premission_group')->orderBy('users_login.id', 'desc')->skip($skipRecords)->take($pageLimit)->get()->toArray();

                if($teamsInfo) {
                    $responseArray = $teamArray = [];
                    foreach($teamsInfo as $teamsInfoKey => $teamsInfoValue) {
                        $teams = [];

                        $teams['account_id'] = $teamsInfoValue['id'];
                        $teams['full_name'] = $teamsInfoValue['full_name'];
                        $teams['email_address'] = trim(Tcrypt::decrypter($teamsInfoValue['email']));
                        $teams['status'] = ($teamsInfoValue['is_active'] == 1 ? 'active' : 'inactive');
                        $userPremissionGroup = ($teamsInfoValue['user_premission_group'] != '' && $teamsInfoValue['user_premission_group'] != '[]' ? json_decode($teamsInfoValue['user_premission_group'], true) : '');
                        if($userPremissionGroup != '') {
                            foreach($userPremissionGroup as $userPerGrpKey => $userPerGrpValue) {
                                $getGroupAndRoleName = Usersgroups::where('user_groups.user_id', $user_id)->where('user_groups.group_id', $userPerGrpValue['group_id'])->where('users_roles.role_id', $userPerGrpValue['role_id'])->join('users_roles', 'user_groups.user_id', '=', 'users_roles.user_id')->select('user_groups.name', 'users_roles.role_name')->first();

                                $teams['groups'] = [$getGroupAndRoleName['name'] => $getGroupAndRoleName['role_name']];
                            }
                        }

                        $teamsArray = ['team_member' => $teams];
                        //array_push($responseArray, $teamsArray);
                        array_push($teamArray, $teamsArray);
                    }                    
                    $responseArray['team'] = $teamArray;

                    $parentData = User::where('id', $user_id)->where('is_active', '!=', -1)->select('monthly_signature', 'is_paid')->first();
                    $userSettings = settings::where('user_id', $user_id)->select('storage_files_limit', 'archive_permission_access')->first();

                    //'users_login.user_permissions_level'
                    $accountInfo = User::where('users_login.id', $user_id)->join('user_setting', 'users_login.id', '=', 'user_setting.user_id')->join('users_info', 'users_login.id', '=', 'users_info.user_id')->select('users_login.monthly_signature', 'users_login.is_paid', 'user_setting.storage_files_limit', 'user_setting.archive_permission_access', 'users_login.is_active', 'users_info.company', 'users_info.reg_no', 'users_info.address', 'users_info.telephone', 'users_info.post_code', 'users_info.city')->first();

                    $isLocked = ($accountInfo['is_active'] == 1 ? false : true);
                    $isPaidSimpleSign = ($accountInfo['is_paid'] == 1 ? true : false);
                    $archivePermissionAccess = ($accountInfo['archive_permission_access'] == 1 ? true : false);
                    $storageFilesLimit = ($accountInfo['storage_files_limit'] != 0 ? $accountInfo['storage_files_limit'] : 50);
                    //$accountSetting = ['account_setting' => ['is_locked' => $isLocked, 'is_paid_ss' => $isPaidSimpleSign, 'is_paid_ssa' => $archivePermissionAccess, 'signatures_left' => $accountInfo['monthly_signature'], 'archive_storage_left' => $storageFilesLimit]];
                    //array_push($responseArray, $accountSetting);
                    $responseArray['account_setting'] = ['is_locked' => $isLocked, 'is_paid_ss' => $isPaidSimpleSign, 'is_paid_ssa' => $archivePermissionAccess, 'signatures_left' => $accountInfo['monthly_signature'], 'archive_storage_left' => $storageFilesLimit];

                    //$accountDetails = ['account_details' => ['company' => $accountInfo['company'], 'reg_no' => $accountInfo['reg_no'], 'address' => $accountInfo['address'], 'phone_no' => $accountInfo['telephone'], 'zipcode' => $accountInfo['post_code'], 'city' => $accountInfo['city']]];
                    //array_push($responseArray, $accountDetails);
                    $responseArray['account_details'] = ['company' => $accountInfo['company'], 'reg_no' => $accountInfo['reg_no'], 'address' => $accountInfo['address'], 'phone_no' => $accountInfo['telephone'], 'zipcode' => $accountInfo['post_code'], 'city' => $accountInfo['city']];

                    $totalTeam = User::where('parent_id', $user_id)->where('is_active', '!=', -1)->count();

                    return response()->json(['status' => 'success', 'total_team' => $totalTeam, 'result' => $responseArray], 200, ['Content-Type' => 'application/json; charset=UTF-8'], JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
                    //return Response::json(['status' => 'success', 'total_team' => $totalTeam, 'result' => $responseArray]);
                } else {
                    return Response::json(['status' => 'error', 'result' => 'No record found']);
                }
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }

    public function getSubusers() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');

        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        }

        $user_id = $utility->getUserIdByAuthToken($access_token);
        if($user_id > 0) {

            $checkAccessToken = User::where('id', $user_id)->pluck('parent_id');
            if($checkAccessToken) {
                return Response::json(['status' => 'error', 'result' => 'Need parent access_token']);
            } else {

                $pageLimit = (isset($data['pagelimit']) && $data['pagelimit'] != '' ? $data['pagelimit'] : 10);
                $currentPage = (isset($data['current_page']) && $data['current_page'] != '' ? $data['current_page'] : 0);
                $skipRecords = $currentPage * $pageLimit;

                $subUsersInfo = User::where('users_login.parent_id', $user_id)->where('users_login.is_active', '!=', -1)->join('users_info', 'users_login.id', '=', 'users_info.user_id')->select('users_login.id', 'users_info.full_name', 'users_login.email', 'users_login.is_active', 'users_login.is_paid', 'users_login.monthly_signature', 'users_login.user_permissions_level')->orderBy('users_login.id', 'desc')->skip($skipRecords)->take($pageLimit)->get()->toArray();

                //$mainUser = User::where('users_login.id', $user_id)->where('users_login.is_active', '!=', -1)->join('users_info', 'users_login.id', '=', 'users_info.user_id')->select('users_login.id', 'users_info.full_name')->first();
                $parentData = User::where('id', $user_id)->where('is_active', '!=', -1)->select('monthly_signature', 'is_paid')->first();

                $userSettings = settings::where('user_id', $user_id)->select('storage_files_limit', 'archive_permission_access')->first();

                $responseArray = [];
                foreach($subUsersInfo as $subUsersInfoKey => $subUsersInfoValue) {
                    $subUsers = [];

                    if($subUsersInfoValue['user_permissions_level'] == 0) {
                        $subUsersInfoValue['user_permissions_level'] = 'P';
                    } elseif($subUsersInfoValue['user_permissions_level'] == 1) {
                        $subUsersInfoValue['user_permissions_level'] = 'A';
                    } elseif($subUsersInfoValue['user_permissions_level'] == 2) {
                        $subUsersInfoValue['user_permissions_level'] = 'E';
                    }

                    $subUsers['account_id'] = $subUsersInfoValue['id'];
                    $subUsers['full_name'] = $subUsersInfoValue['full_name'];
                    $subUsers['email_address'] = trim(Tcrypt::decrypter($subUsersInfoValue['email']));
                    $subUsers['is_locked'] = ($subUsersInfoValue['is_active'] == 1 ? false : true);
                    $subUsers['is_paid_ss'] = ($parentData['is_paid'] == 1 ? true : false);
                    $subUsers['is_paid_ssa'] = ($userSettings['archive_permission_access'] == 1 ? true : false);
                    $subUsers['signatures_left'] = $parentData['monthly_signature'];
                    $subUsers['documents_left'] = ($userSettings['storage_files_limit'] != 0 ? $userSettings['storage_files_limit'] : 50);
                    $subUsers['role_code'] = $subUsersInfoValue['user_permissions_level'];

                    $eachArray = ['sub_users' => $subUsers];
                    array_push($responseArray, $eachArray);
                }

                $totalSubUsers = User::where('parent_id', $user_id)->count();

                return Response::json(['status' => 'success', 'total_sub_users' => $totalSubUsers, 'result' => $responseArray]);
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }

    public function postCreateusers() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');
        ini_set('max_execution_time', 800);        

        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        }

        $user_id = $utility->getUserIdByAuthToken($access_token);
        $parent_id = $utility->getParent($user_id);
        if($user_id > 0) {
            $checkAccessToken = User::where('id', $user_id)->pluck('parent_id');
            if($checkAccessToken) {
                return Response::json(['status' => 'error', 'result' => 'Need parent access_token']);
            } else {
                if(isset($data['users']) && $data['users'] != '') {
                    if($this->is_JSON($data['users'])) {
                        $team = json_decode($data['users'], true);
                        if(!empty($team)) {
                            foreach($team as $teamKey => $teamValue) {
                                if(!empty($teamValue['user_member'])) {
                                    if(!is_array($teamValue['user_member'])) {
                                        return Response::json(['status' => 'error', 'result' => 'user_member should be array']);
                                    } else {
                                        if(!isset($teamValue['user_member']) || empty($teamValue['user_member'])) {
                                            return Response::json(['status' => 'error', 'result' => 'user_member information is missing']);
                                        } elseif(isset($teamValue['user_member']) && !empty($teamValue['user_member'])) {
                                            if(!isset($teamValue['user_member']['full_name']) || $teamValue['user_member']['full_name'] == '') {
                                                return Response::json(['status' => 'error', 'result' => 'Invalid or missing user_member full_name']);
                                            } elseif(!isset($teamValue['user_member']['email']) || !filter_var($teamValue['user_member']['email'], FILTER_VALIDATE_EMAIL)) {
                                                return Response::json(['status' => 'error', 'result' => 'Invalid or missing user_member email']);
                                            } elseif(!isset($teamValue['user_member']['password']) || $teamValue['user_member']['password'] == '') {
                                                return Response::json(['status' => 'error', 'result' => 'Invalid or missing user_member password']);
                                            } elseif(isset($teamValue['user_member']['password']) && $teamValue['user_member']['password'] != '' && strlen($teamValue['user_member']['password']) < 8) {
                                                return Response::json(['status' => 'error', 'result' => 'Password length must be 8 characters']);
                                            } elseif(isset($teamValue['user_member']['password']) && $teamValue['user_member']['password'] != '' && !preg_match('/^(?=.*\d)(?=.*[a-zA-Z])\S{8,20}$/', $teamValue['user_member']['password'])) {
                                                return Response::json(['status' => 'error', 'result' => 'Password must contain numeric and alphabetic characters']);
                                            } if(isset($teamValue['user_member']['email']) && $teamValue['user_member']['email'] != '') {
                                                
                                                $userMemberEmail = $teamValue['user_member']['email'];
                                                /* list(,$checkEmail) = explode('@',$userMemberEmail);
                                                $disposables = array('yopmail.com', 'maildrop.cc', 'mailinator.com');
                                                $valid = (in_array($checkEmail, $disposables) ? false : $userMemberEmail);
                                                if($valid === false) {
                                                    return Response::json(['status'=>'error','result'=>'Invalid Email']);
                                                } */

                                                $teamValue['user_member']['email'] = preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', trim($teamValue['user_member']['email']));
                                                $checkEmailAlreadyExists = User::where('email', Tcrypt::encrypter($teamValue['user_member']['email']))->where('is_active', '!=', -1)->count();
                                                if($checkEmailAlreadyExists) {
                                                    return Response::json(['status' => 'error', 'result' => 'Email '.$teamValue['user_member']['email'].' address already exists']);
                                                }
                                            } if(isset($teamValue['groups'])) {
                                                if(!is_array($teamValue['groups'])) {
                                                    return Response::json(['status' => 'error', 'result' => 'groups should be an array']);
                                                } else {
                                                    if(!empty($teamValue['groups'])) {
                                                        foreach($teamValue['groups'] as $groupsKey => $groupsValue) {
                                                            if(!isset($groupsValue['group_name']) || $groupsValue['group_name'] == '') {
                                                                return Response::json(['status' => 'error', 'result' => 'group_name is missing or its value in groups array']);
                                                            } if(!isset($groupsValue['role_name']) || $groupsValue['role_name'] == '') {
                                                                return Response::json(['status' => 'error', 'result' => 'role_name is missing or its value in groups array']);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    return Response::json(['status' => 'error', 'result' => 'user_member should not be empty']);
                                }
                            }
                        } else {
                            return Response::json(['status' => 'error', 'result' => 'users information should not be empty']);
                        }
                    } else {
                        return Response::json(['status' => 'error', 'result' => 'User information is invalid format, JSON is required']);
                    }

                    if(isset($data['user_fields']) && !empty($data['user_fields'])) {
                        if($this->is_JSON($data['user_fields'])) {
                            //[{"fields":[{"title":"Text Field For Testing","type":"text"},{"title":"Date Field For Testing","type":"datepicker"}]}]    //javascript
                            //[{"fields":[{"title":"Text Field For Testing","type":"text"},{"title":"Date Field For Testing","type":"datepicker"},{"title":"Make Multiple Choices","type":"droplist","options":["Make One","Make Two","Make Three"]}]}]     //javascript
                            $userFields = json_decode($data['user_fields'], true);
                            if(!empty($userFields)) {
                                foreach($userFields as $userFieldsKey => $userFieldsValue) {
                                    if(!empty($userFieldsValue['fields'])) {
                                        if(!is_array($userFieldsValue['fields'])) {
                                            return Response::json(['status' => 'error', 'result' => 'fields should be array']);
                                        } else {
                                            if(!isset($userFieldsValue['fields']) || empty($userFieldsValue['fields'])) {
                                                return Response::json(['status' => 'error', 'result' => 'fields information is missing']);
                                            } elseif(isset($userFieldsValue['fields']) && !empty($userFieldsValue['fields'])) {
                                                foreach($userFieldsValue['fields'] as $fieldsKey => $fieldsValue) {
                                                    if(!isset($fieldsValue['title'])) {
                                                        return Response::json(['status' => 'error', 'result' => 'Key must be title']);
                                                    } if(!isset($fieldsValue['type'])) {
                                                        return Response::json(['status' => 'error', 'result' => 'Key must be type']);
                                                    } if(isset($fieldsValue['type']) && $fieldsValue['type'] != '') {
                                                        $checkExtraFields = Userinfo::where('user_id', $user_id)->select('extra_fields')->first();
                                                        if(isset($checkExtraFields['extra_fields']) && !empty($checkExtraFields['extra_fields'])) {
                                                            $extraFields = json_decode($checkExtraFields['extra_fields'], true);
                                                            if(!empty($extraFields)) {
                                                                $arraySearchKey = array_search($fieldsValue['title'], array_column($extraFields, 'title'));
                                                                if($extraFields[$arraySearchKey]['title'] == $fieldsValue['title']) {
                                                                    return Response::json(['status' => 'error', 'result' => 'field '.$fieldsValue['title'].' already exist']);
                                                                }
                                                            }
                                                        }
                                                    } if(isset($fieldsValue['type']) && ($fieldsValue['type'] != 'text' && $fieldsValue['type'] != 'datepicker' && $fieldsValue['type'] != 'droplist')) {
                                                        return Response::json(['status' => 'error', 'result' => 'Type could be text, datepicker or droplist']);
                                                    } if(isset($fieldsValue['type']) && $fieldsValue['type'] != '' && $fieldsValue['type'] == 'droplist') {
                                                        if(!isset($fieldsValue['options']) || empty($fieldsValue['options'])) {
                                                            return Response::json(['status' => 'error', 'result' => 'options should not be empty']);
                                                        }
                                                        if(isset($fieldsValue['options'])) {
                                                            if(!is_array($fieldsValue['options'])) {
                                                                return Response::json(['status' => 'error', 'result' => 'options should be array']);
                                                            }
                                                            if($utility->arrayIsIndexedAssociativeOrMulti($fieldsValue['options']) == true) {
                                                                return Response::json(['status' => 'error', 'result' => 'options should be sequential array']);
                                                            } else {
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            return Response::json(['status' => 'error', 'result' => 'user_fields information is invalid format, JSON is required']);
                        }
                    }

                    $mainUser = User::where('users_login.id', $user_id)->where('users_login.is_active', '!=', -1)->join('users_info', 'users_login.id', '=', 'users_info.user_id')->select('users_login.id', 'users_login.total_users', 'users_login.is_paid', 'users_info.company', 'users_info.full_name')->first();
                    //if(!empty($mainUser) && $mainUser['is_paid'] != 0 && $mainUser['total_users'] != -1) {
                    if(!empty($mainUser) && $mainUser['total_users'] != -1) {
                        $countSubUsers = User::where('parent_id', $user_id)->where('is_active', '!=', -1)->count();
                        $countSubUsers = ($countSubUsers + 1) + count($team);
                        if($mainUser['total_users'] < $countSubUsers) {
                            return Response::json(['status' => 'error', 'message' => 'You need to uprade your account for add more users']);
                        }
                    }

                    $gridMailer = new Gridmailer();
                    $newSubusersIds = [];
                    $userController = new userController();
                    $mymailer = new mymailer();
                    $fullName = (isset($mainUser['full_name']) && $mainUser['full_name'] != '' ? trim($mainUser['full_name']) : '');
                    $companyName = (isset($mainUser['company']) && $mainUser['company'] != '' ? trim($mainUser['company']) : '');

                    foreach($team as $teamKey => $teamValue) {
                        $teamMemberName = $teamMemberEmail = $teamMemberPassword = '';
                        if(isset($teamValue['user_member']['email']) && $teamValue['user_member']['email'] != '') {
                            $teamValue['user_member']['email'] = preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', trim($teamValue['user_member']['email']));
                        }

                        $teamMemberName = trim($teamValue['user_member']['full_name']);
                        $teamMemberEmail = trim($teamValue['user_member']['email']);
                        $teamMemberPassword = trim($teamValue['user_member']['password']);

                        //comment this line for testing now
                        $userId = $userController->createUser($user_id, 1, 0, uniqid(), $teamMemberEmail, $teamMemberPassword, $teamMemberName, trim($companyName), '', '', '', '');

                        if($userId > 0) {
                            $template = $fullName.' has added you to Simple Sign.<br><br>';
                            $template .= 'Your account info for access the account <br><br>';
                            $template .= 'Email:     '.$teamMemberEmail.'<br>';
                            $template .= 'password:     '.$teamMemberPassword.'<br><br>';
                            $template .= 'Best Regard<br>';
                            $template .= 'Simple Sign<br>';

                            $myMailer['from'] = 'noreply@simplesign.se';
                            $myMailer['subject'] = 'Invitation from '.$fullName;
                            $myMailer['body'] = $template;
                            $myMailer['to'] = $teamMemberEmail;
                            $myMailer['to_name'] = $teamMemberName;
                            $myMailer['replaceables'] = array('emailbody' => $template);


                            $mailArray = array();
                            $mailArray['from_name'] = '';
                            $mailArray['from_email'] = 'noreply@simplesign.io';
                            $mailArray['to_name'] = $teamMemberName;
                            $mailArray['to_email'] = $teamMemberEmail;
                            $mailArray['reply_to'] = 'noreply@simplesign.io';
                            $mailArray['subject'] = 'Invitation from '.$fullName;
                            $mailArray['body'] = $template;
                            $mailArray['bodyplain'] = '';

                            //comment this line for testing now
                            $mailsend = $gridMailer->sendGridEmail($mailArray);

                            //$mailsend = $mymailer->sendmail($myMailer);

                            //comment this line for testing now
                            $utility->createIntercomUser($userId);

                            array_push($newSubusersIds, $userId);

                            //adding groups and role names in permission in user table starting
                            $arrayPushData = [];
                            if(isset($teamValue['groups']) && !empty($teamValue['groups'])) {
                                foreach($teamValue['groups'] as $groupsKey => $groupsValue) {
                                    $userGroupSettings = [];
                                    //checking groups and roles if exists starting
                                    $userGroups = Usersgroups::where('name', $groupsValue['group_name'])->where('user_id', $user_id)->select('group_id', 'user_group_settings')->first();
                                    $userRoles = Usersrolesub::where('role_name', $groupsValue['role_name'])->where('user_id', $user_id)->select('role_id')->first();
                                    if($userGroups && $userRoles) {
                                        array_push($arrayPushData, ['group_id' => $userGroups['group_id'], 'role_id' => $userRoles['role_id']]);

                                        //adding roles in groups table starting
                                        if($userGroups['user_group_settings'] != '') {
                                            $userGroupSettings = json_decode($userGroups['user_group_settings'], true);
                                            if(isset($userGroupSettings['subusers']) && $userGroupSettings['subusers'] != '') {
                                                array_push($userGroupSettings['subusers'], ['user_id' => $userId, 'role_id' => $userRoles['role_id']]);
                                            }
                                            //comment this line for testing now
                                            Usersgroups::where('group_id', $userGroups['group_id'])->where('user_id', $user_id)->update(['user_group_settings' => json_encode($userGroupSettings)]);
                                        }
                                        //adding roles in groups table ending
                                        //checking groups and roles if exists ending
                                    }
                                } //groups foreach condition ends here
                            } else {
                                //checking default groups and roles starting
                                $userGroups = Usersgroups::where('user_id', $user_id)->where('is_default', 1)->select('group_id', 'user_group_settings')->first();
                                $userRoles = Usersrolesub::where('user_id', $user_id)->where('is_default', 1)->select('role_id')->first();
                                if($userGroups && $userRoles) {
                                    array_push($arrayPushData, ['group_id' => $userGroups['group_id'], 'role_id' => $userRoles['role_id']]);
                                    if($userGroups['user_group_settings'] != '') {
                                        $userGroupSettings = json_decode($userGroups['user_group_settings'], true);
                                        if(isset($userGroupSettings['subusers']) && $userGroupSettings['subusers'] != '') {
                                            array_push($userGroupSettings['subusers'], ['user_id' => $userId, 'role_id' => $userRoles['role_id']]);
                                        }
                                        //comment this line for testing now
                                        Usersgroups::where('group_id', $userGroups['group_id'])->where('user_id', $user_id)->update(['user_group_settings' => json_encode($userGroupSettings)]);
                                    }
                                }
                                //checking default groups and roles ending
                            } //else for groups and roles condition ends here
                            if(!empty($arrayPushData)) {
                                //comment this line for testing now
                                User::where('id', $userId)->where('parent_id', $user_id)->update(['user_premission_group' => json_encode($arrayPushData)]);
                            }
                            //adding groups and role names in permission in user table ending
                        } //user_id greater than 0 condition ends here
                    } //foreach loop ends here

                    if(isset($data['user_fields']) && !empty($data['user_fields'])) {
                        $userFieldsResponse = $userFieldData = [];
                        $userFields = json_decode($data['user_fields'], true);
                        if(!empty($userFields)) {
                            $getDataBaseExtraFields = Userinfo::where('user_id', $user_id)->select('extra_fields')->first();
                            if(isset($getDataBaseExtraFields['extra_fields']) && !empty($getDataBaseExtraFields['extra_fields'])) {
                                $extraFields = json_decode($getDataBaseExtraFields['extra_fields'], true);
                                if(!empty($extraFields)) {
                                    foreach($extraFields as $extraFieldsKey => $extraFieldsVal) {
                                        array_push($userFields[0]['fields'], $extraFieldsVal);
                                    }
                                }
                            }

                            if(isset($userFields[0]['fields']) && !empty($userFields[0]['fields'])) {
                                foreach($userFields[0]['fields'] as $fieldsKey => $fieldsValue) {
                                    $userFieldsDropList = [];
                                    if(isset($fieldsValue['type']) && $fieldsValue['type'] == 'droplist') {
                                        if(isset($fieldsValue['options']) && !empty($fieldsValue['options'])) {
                                            foreach($fieldsValue['options'] as $optionsKey => $optionsValue) {
                                                array_push($userFieldsDropList, $optionsValue);
                                            }
                                        }
                                    }
                                    if(!empty($userFieldsDropList)) {
                                        $userFieldsArray = ['title' => $fieldsValue['title'], 'type' => $fieldsValue['type'], 'options' => $userFieldsDropList];
                                        if(isset($fieldsValue['value']) && $fieldsValue['value'] != '') {
                                            $userFieldsArray['val'] = $fieldsValue['value'];
                                        }
                                    } else {
                                        $userFieldsArray = ['title' => $fieldsValue['title'], 'type' => $fieldsValue['type']];
                                        if(isset($fieldsValue['value']) && $fieldsValue['value'] != '') {
                                            $userFieldsArray['val'] = $fieldsValue['value'];
                                        }
                                    }
                                    array_push($userFieldsResponse, $userFieldsArray);
                                    if(isset($fieldsValue['title']) && $fieldsValue['title'] != '' && isset($fieldsValue['value'])) {
                                        $userFieldData[$fieldsValue['title']] = (isset($fieldsValue['value']) && !empty($fieldsValue['value']) ? $fieldsValue['value'] : '');
                                    }
                                }
                            }
                        }
                        if(!empty($userFieldsResponse)) {
                            //comment this line for testing now
                            Userinfo::where('user_id', $user_id)->update(['extra_fields' => json_encode($userFieldsResponse)]);
                            if(!empty($userFieldData)) {
                                //comment this line for testing now
                                Userinfo::whereIn('user_id', $newSubusersIds)->update(['extra_fields_data' => json_encode($userFieldData)]);
                            }
                        }
                    }

                    if(count($newSubusersIds) > 0) {
                        return Response::json(['status' => 'success', 'result' => 'Invitation email has been sent', 'account_id' => $newSubusersIds]);
                    } else {
                        return Response::json(['status' => 'error', 'result' => 'Already added']);
                    }
                } else {
                    return Response::json(['status' => 'error', 'result' => 'Missing or invalid user information']);
                }
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }

    public function postCreateteam() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');
        ini_set('max_execution_time', 800);

        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        }

        $user_id = $utility->getUserIdByAuthToken($access_token);
        $parent_id = $utility->getParent($user_id);
        if($user_id > 0) {
            $checkAccessToken = User::where('id', $user_id)->pluck('parent_id');
            if($checkAccessToken) {
                return Response::json(['status' => 'error', 'result' => 'Need parent access_token']);
            } else {
                if(isset($data['team']) && $data['team'] != '') {
                    if($this->is_JSON($data['team'])) {
                        $team = json_decode($data['team'], true);
                        foreach($team as $teamKey => $teamValue) {
                            if(!is_array($teamValue['team_member'])) {
                                return Response::json(['status' => 'error', 'result' => 'team_member should be array']);
                            } else {
                                if(!isset($teamValue['team_member']) || empty($teamValue['team_member'])) {
                                    return Response::json(['status' => 'error', 'result' => 'team_member information is missing']);
                                } elseif(isset($teamValue['team_member']) && !empty($teamValue['team_member'])) {
                                    if(!isset($teamValue['team_member']['full_name']) || $teamValue['team_member']['full_name'] == '') {
                                        return Response::json(['status' => 'error', 'result' => 'Invalid or missing team_member full_name']);
                                    } elseif(!isset($teamValue['team_member']['email']) || !filter_var($teamValue['team_member']['email'], FILTER_VALIDATE_EMAIL)) {
                                        return Response::json(['status' => 'error', 'result' => 'Invalid or missing team_member email']);
                                    } elseif(!isset($teamValue['team_member']['password']) || $teamValue['team_member']['password'] == '') {
                                        return Response::json(['status' => 'error', 'result' => 'Invalid or missing team_member password']);
                                    } if(isset($teamValue['team_member']['email']) && $teamValue['team_member']['email'] != '') {
                                        $teamValue['team_member']['email'] = preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $teamValue['team_member']['email']);
                                        $checkEmailAlreadyExists = User::where('email', Tcrypt::encrypter($teamValue['team_member']['email']))->where('is_active', '!=', -1)->count();
                                        if($checkEmailAlreadyExists) {
                                            return Response::json(['status' => 'error', 'result' => 'Email '.$teamValue['team_member']['email'].' address already exists']);
                                        }
                                    } if(isset($teamValue['groups'])) {
                                        if(!is_array($teamValue['groups'])) {
                                            return Response::json(['status' => 'error', 'result' => 'groups should be array']);
                                        } else {
                                            //!array_key_exists('role_name', $teamValue['groups'])
                                            foreach($teamValue['groups'] as $groupsKey => $groupsValue) {
                                                if(!isset($groupsValue['group_name']) || $groupsValue['group_name'] == '') {
                                                    return Response::json(['status' => 'error', 'result' => 'group_name is missing or its value in groups array']);
                                                } if(!isset($groupsValue['role_name']) || $groupsValue['role_name'] == '') {
                                                    return Response::json(['status' => 'error', 'result' => 'role_name is missing or its value in groups array']);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        return Response::json(['status' => 'error', 'result' => 'Team information is invalid format, JSON is required']);
                    }

                    $mainUser = User::where('users_login.id', $user_id)->where('users_login.is_active', '!=', -1)->join('users_info', 'users_login.id', '=', 'users_info.user_id')->select('users_login.id', 'users_login.total_users', 'users_login.is_paid', 'users_info.company', 'users_info.full_name')->first();
                    if(!empty($mainUser) && $mainUser['is_paid'] != 0) {
                        $countSubUsers = User::where('parent_id', $user_id)->count();
                        $countSubUsers = ($countSubUsers + 1) + count($team);
                        if($mainUser['total_users'] < $countSubUsers) {
                            return Response::json(['status' => 'error', 'message' => 'You need to uprade your account for add more users']);
                        }
                    }

                    $newSubusersIds = [];
                    $userController = new userController();
                    $mymailer = new mymailer();
                    $fullName = (isset($mainUser['full_name']) && $mainUser['full_name'] != '' ? trim($mainUser['full_name']) : '');
                    $companyName = (isset($mainUser['company']) && $mainUser['company'] != '' ? trim($mainUser['company']) : '');
                    foreach($team as $teamKey => $teamValue) {
                        $teamMemberName = $teamMemberEmail = $teamMemberPassword = '';
                        $teamValue['team_member']['email'] = trim(preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $teamValue['team_member']['email']));

                        $teamMemberName = trim($teamValue['team_member']['full_name']);
                        $teamMemberEmail = trim($teamValue['team_member']['email']);
                        $teamMemberPassword = trim($teamValue['team_member']['password']);

                        $userId = $userController->createUser($user_id, 1, 0, uniqid(), $teamMemberEmail, $teamMemberPassword, $teamMemberName, trim($companyName), '', '', '', '');

                        if($userId > 0) {
                            $template = $fullName.' has added you to Simple Sign.<br><br>';
                            $template .= 'Your account info for access the account <br><br>';
                            $template .= 'Email:     '.$teamMemberEmail.'<br>';
                            $template .= 'password:     '.$teamMemberPassword.'<br><br>';
                            $template .= 'Best Regard<br>';
                            $template .= 'Simple Sign<br>';

                            $myMailer['from'] = 'noreply@simplesign.se';
                            $myMailer['subject'] = 'Invitation from '.$fullName;
                            $myMailer['body'] = $template;
                            $myMailer['to'] = $teamMemberEmail;
                            $myMailer['to_name'] = $teamMemberName;
                            $myMailer['replaceables'] = array('emailbody' => $template);
                            $mailsend = $mymailer->sendmail($myMailer);
                            $utility->createIntercomUser($userId);

                            array_push($newSubusersIds, $userId);

                            //adding groups and role names in permission in user table starting
                            $arrayPushData = [];
                            if(isset($teamValue['groups'])) {
                                foreach($teamValue['groups'] as $groupsKey => $groupsValue) {
                                    $userGroupSettings = [];
                                    //checking groups and roles if exists starting
                                    $userGroups = Usersgroups::where('name', $groupsValue['group_name'])->where('user_id', $user_id)->select('group_id', 'user_group_settings')->first();
                                    $userRoles = Usersrolesub::where('role_name', $groupsValue['role_name'])->where('user_id', $user_id)->select('role_id')->first();
                                    if($userGroups && $userRoles) {
                                        array_push($arrayPushData, ['group_id' => $userGroups['group_id'], 'role_id' => $userRoles['role_id']]);

                                        //adding roles in groups table starting
                                        if($userGroups['user_group_settings'] != '') {
                                            $userGroupSettings = json_decode($userGroups['user_group_settings'], true);
                                            if(isset($userGroupSettings['subusers']) && $userGroupSettings['subusers'] != '') {
                                                array_push($userGroupSettings['subusers'], ['user_id' => $userId, 'role_id' => $userRoles['role_id']]);
                                            }
                                            Usersgroups::where('group_id', $userGroups['group_id'])->where('user_id', $user_id)->update(['user_group_settings' => json_encode($userGroupSettings)]);
                                        }
                                        //adding roles in groups table ending
                                        //checking groups and roles if exists ending
                                    }
                                } //groups foreach condition ends here
                                /*if(!empty($arrayPushData)) {
                                    User::where('id', $userId)->where('parent_id', $user_id)->update(['user_premission_group' => json_encode($arrayPushData)]);
                                }*/
                            } else {
                                //checking default groups and roles starting
                                $userGroups = Usersgroups::where('user_id', $user_id)->where('is_default', 1)->select('group_id', 'user_group_settings')->first();
                                $userRoles = Usersrolesub::where('user_id', $user_id)->where('is_default', 1)->select('role_id')->first();
                                if($userGroups && $userRoles) {
                                    array_push($arrayPushData, ['group_id' => $userGroups['group_id'], 'role_id' => $userRoles['role_id']]);
                                    if($userGroups['user_group_settings'] != '') {
                                        $userGroupSettings = json_decode($userGroups['user_group_settings'], true);
                                        if(isset($userGroupSettings['subusers']) && $userGroupSettings['subusers'] != '') {
                                            array_push($userGroupSettings['subusers'], ['user_id' => $userId, 'role_id' => $userRoles['role_id']]);
                                        }
                                        Usersgroups::where('group_id', $userGroups['group_id'])->where('user_id', $user_id)->update(['user_group_settings' => json_encode($userGroupSettings)]);
                                    }
                                }
                                //checking default groups and roles ending
                            } //else for groups and roles condition ends here
                            if(!empty($arrayPushData)) {
                                User::where('id', $userId)->where('parent_id', $user_id)->update(['user_premission_group' => json_encode($arrayPushData)]);
                                //User::where('id', $userId)->update(['user_premission_group' => json_encode($arrayPushData)]);
                            }
                            //adding groups and role names in permission in user table ending
                        } //user_id greater than 0 condition ends here
                    } //foreach loop ends here

                    if(count($newSubusersIds) > 0) {
                        return Response::json(['status' => 'success', 'result' => 'Invitation email has been sent', 'account_id' => $newSubusersIds]);
                    } else {
                        return Response::json(['status' => 'error', 'result' => 'Already added']);
                    }
                } else {
                    return Response::json(['status' => 'error', 'result' => 'Missing or invalid team information']);
                }
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }

    public function postAddsubusers() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');

        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        }

        $user_id = $utility->getUserIdByAuthToken($access_token);
        if($user_id > 0) {
            $checkAccessToken = User::where('id', $user_id)->pluck('parent_id');
            if($checkAccessToken) {
                return Response::json(['status' => 'error', 'result' => 'Need parent access_token']);
            } else {
                if(isset($data['subusers']) && $data['subusers'] != '') {
                    if($this->is_JSON($data['subusers'])) {
                        $subUsers = json_decode($data['subusers'], true);
                        foreach($subUsers as $suKey => $suValue) {
                            if(!is_array($suValue['subuser_fields'])) {
                                return Response::json(['status' => 'error', 'result' => 'subuser_fields should be array']);
                            } else {
                                if(!isset($suValue['subuser_fields']) || empty($suValue['subuser_fields'])) {
                                    return Response::json(['status' => 'error', 'result' => 'Subuser information is missing']);
                                } elseif(isset($suValue['subuser_fields']) && !empty($suValue['subuser_fields'])) {
                                    if(!isset($suValue['subuser_fields']['full_name']) || $suValue['subuser_fields']['full_name'] == '') {
                                        return Response::json(['status' => 'error', 'result' => 'Invalid or missing subuser full_name']);
                                    } elseif(!isset($suValue['subuser_fields']['email']) || !filter_var($suValue['subuser_fields']['email'], FILTER_VALIDATE_EMAIL)) {
                                        return Response::json(['status' => 'error', 'result' => 'Invalid or missing subuser email']);
                                    } elseif(!isset($suValue['subuser_fields']['password']) || $suValue['subuser_fields']['password'] == '') {
                                        return Response::json(['status' => 'error', 'result' => 'Invalid or missing subuser password']);
                                    } if(isset($suValue['subuser_fields']['email']) && $suValue['subuser_fields']['email'] != '') {
                                        $suValue['subuser_fields']['email'] = preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $suValue['subuser_fields']['email']);
                                        $checkEmailAlreadyExists = User::where('email', Tcrypt::encrypter($suValue['subuser_fields']['email']))->count();
                                        if($checkEmailAlreadyExists) {
                                            return Response::json(['status' => 'error', 'result' => 'Email '.$suValue['subuser_fields']['email'].' address already exists']);
                                        }
                                    }
                                }
                            }



                            /*if(isset($suValue['subuser_fields'])) {
                                if(!isset($suValue['subuser_fields']['name']) || $suValue['subuser_fields']['name'] == '') {
                                    return Response::json(['status' => 'error', 'result' => 'Invalid or missing subuser name']);
                                } elseif(!isset($suValue['subuser_fields']['email']) || !filter_var($suValue['subuser_fields']['email'], FILTER_VALIDATE_EMAIL)) {
                                    $suValue['subuser_fields']['email'] = preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $suValue['subuser_fields']['email']);
                                    return Response::json(['status' => 'error', 'result' => 'Invalid or missing subuser email']);
                                } elseif(!isset($suValue['subuser_fields']['password']) || $suValue['subuser_fields']['password'] == '') {
                                    return Response::json(['status' => 'error', 'result' => 'Invalid or missing subuser password']);
                                } if(isset($suValue['subuser_fields']['email']) && $suValue['subuser_fields']['email'] != '') {
                                    $suValue['subuser_fields']['email'] = preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $suValue['subuser_fields']['email']);
                                    $checkEmailAlreadyExists = User::where('email', Tcrypt::encrypter($suValue['subuser_fields']['email']))->count();
                                    if($checkEmailAlreadyExists) {
                                        return Response::json(['status' => 'error', 'result' => 'Email '.$suValue['subuser_fields']['email'].' address already exists']);
                                    }
                                }
                            }*/
                        }
                    } else {
                        return Response::json(['status' => 'error', 'result' => 'Subusers information is invalid format, JSON is required']);
                    }

                    $mainUser = User::where('users_login.id', $user_id)->where('users_login.is_active', '!=', -1)->join('users_info', 'users_login.id', '=', 'users_info.user_id')->select('users_login.id', 'users_login.total_users', 'users_login.is_paid', 'users_info.company', 'users_info.full_name')->first();

                    if(!empty($mainUser) && $mainUser['is_paid'] != 0) {
                        $countSubUsers = User::where('parent_id', $user_id)->count();
                        $countSubUsers = ($countSubUsers + 1) + count($subUsers);
                        if($mainUser['total_users'] < $countSubUsers) {
                            return Response::json(['status' => 'error', 'message' => 'You need to uprade your account for add more users']);
                        }
                    }

                    $newSubusersIds = [];
                    $userController = new userController();
                    $mymailer = new mymailer();
                    $fullName = trim($mainUser['full_name']);
                    foreach($subUsers as $subUsersKey => $subUsersValue) {
                        $subUserName = $subUserEmail = $subUserPassword = '';
                        $subUsersValue['subuser_fields']['email'] = trim(preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $subUsersValue['subuser_fields']['email']));

                        $subUserName = trim($subUsersValue['subuser_fields']['full_name']);
                        $subUserEmail = trim($subUsersValue['subuser_fields']['email']);
                        $subUserPassword = trim($subUsersValue['subuser_fields']['password']);

                        $userId = $userController->createUser($user_id, 1, 0, uniqid(), $subUserEmail, $subUserPassword, $subUserName, trim($mainUser['company']), '', '', '', '');

                        if($userId > 0) {
                            $template = $fullName.' has added you to Simple Sign.<br><br>';
                            $template .= 'Your account info for access the account <br><br>';
                            $template .= 'Email:     '.$subUserEmail.'<br>';
                            $template .= 'password:     '.$subUserPassword.'<br><br>';
                            $template .= 'Best Regard<br>';
                            $template .= 'Simple Sign<br>';

                            $myMailer['from'] = 'noreply@simplesign.se';
                            $myMailer['subject'] = 'Invitation from '.$fullName;
                            $myMailer['body'] = $template;
                            $myMailer['to'] = $subUserEmail;
                            $myMailer['to_name'] = $subUserName;
                            $myMailer['replaceables'] = array('emailbody' => $template);
                            $mailsend = $mymailer->sendmail($myMailer);

                            array_push($newSubusersIds, $userId);
                        }
                    }

                    if(count($newSubusersIds) > 0) {
                        return Response::json(['status' => 'success', 'result' => 'Invitation email has been sent', 'account_id' => $newSubusersIds]);
                    } else {
                        return Response::json(['status' => 'error', 'result' => 'Already added']);
                    }
                } else {
                    return Response::json(['status' => 'error', 'result' => 'Missing or invalid subusers information']);
                }
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }

    public function postUpdateusers() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');
        ini_set('max_execution_time', 800);

        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        }

        $user_id = $utility->getUserIdByAuthToken($access_token);
        if($user_id > 0) {
            $checkAccessToken = User::where('id', $user_id)->pluck('parent_id');
            if($checkAccessToken) {
                return Response::json(['status' => 'error', 'result' => 'Need parent access_token']);
            } else {
                if(isset($data['users']) && $data['users'] != '') {
                    if($this->is_JSON($data['users'])) {
                        $team = json_decode($data['users'], true);
                        if(!empty($team)) {
                            foreach($team as $teamKey => $teamValue) {
                                if(!empty($teamValue['user_member'])) {
                                    if(!is_array($teamValue['user_member'])) {
                                        return Response::json(['status' => 'error', 'result' => 'user_member should be array']);
                                    } else {
                                        if(!isset($teamValue['user_member']) || empty($teamValue['user_member'])) {
                                            return Response::json(['status' => 'error', 'result' => 'user_member information is missing']);
                                        } if(!isset($teamValue['user_member']['account_id']) || $teamValue['user_member']['account_id'] == '') {
                                            return Response::json(['status' => 'error', 'result' => 'Provide account_id to update the record']);
                                        } if(isset($teamValue['user_member']['email']) && $teamValue['user_member']['email'] != '' && !filter_var($teamValue['user_member']['email'], FILTER_VALIDATE_EMAIL)) {
                                            $teamValue['user_member']['email'] = preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $teamValue['user_member']['email']);
                                            return Response::json(['status' => 'error', 'result' => 'Invalid user email']);
                                        } if(isset($teamValue['user_member']['password']) && $teamValue['user_member']['password'] != '' && strlen($teamValue['user_member']['password']) < 8) {
                                            return Response::json(['status' => 'error', 'result' => 'Password length must be 8 characters']);
                                        } if(isset($teamValue['user_member']['password']) && $teamValue['user_member']['password'] != '' && !preg_match('/^(?=.*\d)(?=.*[a-zA-Z])\S{8,20}$/', $teamValue['user_member']['password'])) {
                                            return Response::json(['status' => 'error', 'result' => 'Password must contain numeric and alphabetic characters']);
                                        } if(isset($teamValue['user_member']['account_id']) && $teamValue['user_member']['account_id'] != '') {
                                            $checkSubUsers = User::where('id', trim($teamValue['user_member']['account_id']))->where('parent_id', $user_id)->count();
                                            if(!$checkSubUsers) {
                                                return Response::json(['status' => 'error', 'result' => 'Invalid account_id for parent access_token']);
                                            }
                                        } if(isset($teamValue['groups'])) {
                                            if(!is_array($teamValue['groups'])) {
                                                return Response::json(['status' => 'error', 'result' => 'groups should be array']);
                                            } else {
                                                if(!empty($teamValue['groups'])) {
                                                    foreach($teamValue['groups'] as $groupsKey => $groupsValue) {
                                                        if(!isset($groupsValue['group_name']) || $groupsValue['group_name'] == '') {
                                                            return Response::json(['status' => 'error', 'result' => 'group_name is missing or its value in groups array']);
                                                        } if(!isset($groupsValue['role_name']) || $groupsValue['role_name'] == '') {
                                                            return Response::json(['status' => 'error', 'result' => 'role_name is missing or its value in groups array']);
                                                        }
                                                    }
                                                }
                                            }
                                        } if(isset($teamValue['fields'])) {
                                            if(!is_array($teamValue['fields'])) {
                                                return Response::json(['status' => 'error', 'result' => 'fields should be array']);
                                            } else {
                                                if(!empty($teamValue['fields'])) {
                                                    $checkExtraFields = Userinfo::where('user_id', $user_id)->select('extra_fields')->first();
                                                    if(!empty($checkExtraFields['extra_fields'])) {
                                                        $extraFieldsJsonDecode = (isset($checkExtraFields['extra_fields']) && !empty($checkExtraFields['extra_fields']) ? json_decode($checkExtraFields['extra_fields'], true) : []);
                                                        foreach($teamValue['fields'] as $fieldsKey => $fieldsValue) {
                                                            if(!isset($fieldsValue['title'])) {
                                                                return Response::json(['status' => 'error', 'result' => 'Key must be title']);
                                                            } if(isset($fieldsValue['type']) && $fieldsValue['type'] != '') {
                                                                if(isset($fieldsValue['type']) && ($fieldsValue['type'] != 'text' && $fieldsValue['type'] != 'datepicker')) {
                                                                    return Response::json(['status' => 'error', 'result' => 'Type could be text or datepicker']);
                                                                } if(isset($fieldsValue['type']) && $fieldsValue['type'] != '' && $fieldsValue['type'] == 'droplist') {
                                                                    return Response::json(['status' => 'error', 'result' => 'Multiple choices/Droplist can not be update']);
                                                                }
                                                            }
                                                            $arraySearchTitle = array_search($fieldsValue['title'], array_column($extraFieldsJsonDecode, 'title'));
                                                            if($arraySearchTitle  !== false) {
                                                            } else {
                                                                return Response::json(['status' => 'error', 'result' => $fieldsValue['title'].' does not exists']);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    return Response::json(['status' => 'error', 'result' => 'user_member should not be empty']);
                                }
                            }
                        } else {
                            return Response::json(['status' => 'error', 'result' => 'User(s) information should not be empty']);
                        }
                    } else {
                        return Response::json(['status' => 'error', 'result' => 'User(s) information is invalid format, JSON is required']);
                    }

                    $updateSubusersCount = [];
                    foreach($team as $teamKey => $teamValue) {
                        $teamMemberName = $teamMemberEmail = $teamMemberPassword = '';
                        $teamDataLogin = $teamDataInfo = [];
                        if(isset($teamValue['user_member']['email']) && $teamValue['user_member']['email'] != '') {
                            if(isset($teamValue['user_member']['email']) && $teamValue['user_member']['email'] != '') {
                                $teamValue['user_member']['email'] = preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $teamValue['user_member']['email']);
                            }
                            $getEmail = User::where('email', Tcrypt::encrypter($teamValue['user_member']['email']))->count();
                            if($getEmail) {
                                unset($teamValue['user_member']['email']);
                            } else {
                                //same manuiplation goes for other email functions
                                $teamDataLogin['email'] = trim(Tcrypt::encrypter(strtolower($teamValue['user_member']['email'])));
                            }
                        } if(isset($teamValue['user_member']['password']) && $teamValue['user_member']['password'] != '') {
                            $teamDataLogin['password'] = hash('sha256', trim($teamValue['user_member']['password']));
                        } if(isset($teamValue['user_member']['full_name']) && $teamValue['user_member']['full_name'] != '') {
                            $teamDataInfo['full_name'] = trim($teamValue['user_member']['full_name']);
                            if(!empty($teamDataInfo)) {
                                $updateInfo = Userinfo::where('user_id', trim($teamValue['user_member']['account_id']))->update($teamDataInfo);
                                $utility->createIntercomUser($teamValue['user_member']['account_id']);

                                if($updateInfo) {
                                    array_push($updateSubusersCount, $updateInfo);
                                }
                            }
                        }
                        if(isset($teamValue['fields']) && !empty($teamValue['fields'])) {
                            $extraFieldsData = Userinfo::where('user_id', trim($teamValue['user_member']['account_id']))->select('extra_fields_data')->first();
                            if(!empty($extraFieldsData['extra_fields_data'])) {
                                $extraFieldsDataJsonDecode = (isset($extraFieldsData['extra_fields_data']) && !empty($extraFieldsData['extra_fields_data']) ? json_decode($extraFieldsData['extra_fields_data'], true) : []);
                                if(!empty($extraFieldsDataJsonDecode)) {
                                    foreach($teamValue['fields'] as $fieldsKey => $fieldsValue) {
                                        if(isset($fieldsValue['value']) && $fieldsValue['value'] != '') {
                                            $extraFieldsDataJsonDecode[$fieldsValue['title']] = $fieldsValue['value'];
                                        } elseif(!isset($fieldsValue['value']) || $fieldsValue['value'] == '') {
                                            $extraFieldsDataJsonDecode[$fieldsValue['title']] = '';
                                        }
                                    }
                                    Userinfo::where('user_id', trim($teamValue['user_member']['account_id']))->update(['extra_fields_data' => json_encode($extraFieldsDataJsonDecode)]);
                                }
                            }
                        }

                        if(!empty($teamDataLogin)) {
                            $updateLogin = User::where('id', trim($teamValue['user_member']['account_id']))->where('parent_id', $user_id)->update($teamDataLogin);

                            if($updateLogin) {
                                array_push($updateSubusersCount, $updateLogin);

                                //adding groups and role names in permission in user table starting
                                $arrayPushData = [];
                                if(isset($teamValue['groups'])) {
                                    foreach($teamValue['groups'] as $groupsKey => $groupsValue) {
                                        $userGroupSettings = [];
                                        //checking groups and roles if exists starting
                                        $userGroups = Usersgroups::where('name', $groupsValue['group_name'])->where('user_id', $user_id)->select('group_id', 'user_group_settings')->first();
                                        $userRoles = Usersrolesub::where('role_name', $groupsValue['role_name'])->where('user_id', $user_id)->select('role_id')->first();
                                        if($userGroups && $userRoles) {
                                            array_push($arrayPushData, ['group_id' => $userGroups['group_id'], 'role_id' => $userRoles['role_id']]);

                                            //adding roles in groups table starting
                                            if($userGroups['user_group_settings'] != '') {
                                                $userGroupSettings = json_decode($userGroups['user_group_settings'], true);
                                                if(isset($userGroupSettings['subusers']) && $userGroupSettings['subusers'] != '') {
                                                    array_push($userGroupSettings['subusers'], ['user_id' => $teamValue['user_member']['account_id'], 'role_id' => $userRoles['role_id']]);
                                                }
                                                Usersgroups::where('group_id', $userGroups['group_id'])->where('user_id', $user_id)->update(['user_group_settings' => json_encode($userGroupSettings)]);
                                            }
                                            //adding roles in groups table ending
                                            //checking groups and roles if exists ending
                                        }
                                    } //groups foreach condition ends here
                                }
                                if(!empty($arrayPushData)) {
                                    User::where('id', $teamValue['user_member']['account_id'])->where('parent_id', $user_id)->update(['user_premission_group' => json_encode($arrayPushData)]);
                                }
                                //adding groups and role names in permission in user table ending
                            }
                        }
                    }

                    return Response::json(['status'=>'success','result' => 'User(s) updated successfully']);
                } else {
                    return Response::json(['status' => 'error', 'result' => 'Missing or invalid user information']);
                }
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }

    public function postUpdateteam() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');
        ini_set('max_execution_time', 800);
        //htdocs/codeTesting/cURL/Subuser/codeTesting82
        //htdocs/codeTesting/cURL/Subuser/codeTesting84
        //htdocs/codeTesting/cURL/Subuser/codeTesting85
        //htdocs/codeTesting/cURL/Subuser/codeTesting86
        //htdocs/codeTesting/cURL/Subuser/codeTesting87
        //htdocs/cURL/codeTesting56
        //htdocs/cURL/codeTesting56 //two files
        //htdocs/codeTesting/OOPS/oops_one.php
        //htdocs/codeTesting/Designs/index.php
        //htdocs/codeTesting/codeTesting84HTMLMetaTag.php

        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        }

        $user_id = $utility->getUserIdByAuthToken($access_token);
        if($user_id > 0) {
            $checkAccessToken = User::where('id', $user_id)->pluck('parent_id');
            if($checkAccessToken) {
                return Response::json(['status' => 'error', 'result' => 'Need parent access_token']);
            } else {
                if(isset($data['team']) && $data['team'] != '') {
                    if($this->is_JSON($data['team'])) {
                        $team = json_decode($data['team'], true);
                        foreach($team as $teamKey => $teamValue) {
                            if(!is_array($teamValue['team_member'])) {
                                return Response::json(['status' => 'error', 'result' => 'team_member should be array']);
                            } else {
                                if(!isset($teamValue['team_member']) || empty($teamValue['team_member'])) {
                                    return Response::json(['status' => 'error', 'result' => 'team_member information is missing']);
                                } if(!isset($teamValue['team_member']['account_id']) || $teamValue['team_member']['account_id'] == '') {
                                    return Response::json(['status' => 'error', 'result' => 'Provide account_id to update the record']);
                                } if(isset($teamValue['team_member']['email']) && $teamValue['team_member']['email'] != '' && !filter_var($teamValue['team_member']['email'], FILTER_VALIDATE_EMAIL)) {
                                    $teamValue['team_member']['email'] = preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $teamValue['team_member']['email']);
                                    return Response::json(['status' => 'error', 'result' => 'Invalid team email']);
                                } if(isset($teamValue['team_member']['account_id']) && $teamValue['team_member']['account_id'] != '') {
                                    $checkSubUsers = User::where('id', trim($teamValue['team_member']['account_id']))->where('parent_id', $user_id)->count();
                                    if(!$checkSubUsers) {
                                        return Response::json(['status' => 'error', 'result' => 'Invalid account_id for parent access_token']);
                                    }
                                } if(isset($teamValue)) {
                                    if(!is_array($teamValue['groups'])) {
                                        return Response::json(['status' => 'error', 'result' => 'groups should be array']);
                                    } else {
                                        //!array_key_exists('role_name', $teamValue['groups'])
                                        foreach($teamValue['groups'] as $groupsKey => $groupsValue) {
                                            if(!isset($groupsValue['group_name']) || $groupsValue['group_name'] == '') {
                                                return Response::json(['status' => 'error', 'result' => 'group_name is missing or its value in groups array']);
                                            } if(!isset($groupsValue['role_name']) || $groupsValue['role_name'] == '') {
                                                return Response::json(['status' => 'error', 'result' => 'role_name is missing or its value in groups array']);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        return Response::json(['status' => 'error', 'result' => 'Team information is invalid format, JSON is required']);
                    }

                    $updateSubusersCount = [];
                    foreach($team as $teamKey => $teamValue) {
                        $teamMemberName = $teamMemberEmail = $teamMemberPassword = '';
                        $teamDataLogin = $teamDataInfo = [];
                        if(isset($teamValue['team_member']['email']) && $teamValue['team_member']['email'] != '') {
                            $teamValue['team_member']['email'] = preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $teamValue['team_member']['email']);
                            $getEmail = User::where('email', Tcrypt::encrypter($teamValue['team_member']['email']))->count();
                            if($getEmail) {
                                unset($teamValue['team_member']['email']);
                            } else {
                                //same manuiplation goes for other email functions
                                $teamDataLogin['email'] = trim(Tcrypt::encrypter(strtolower($teamValue['team_member']['email'])));
                            }
                        } if(isset($teamValue['team_member']['password']) && $teamValue['team_member']['password'] != '') {
                            $teamDataLogin['password'] = hash('sha256', trim($teamValue['team_member']['password']));
                        } if(isset($teamValue['team_member']['full_name']) && $teamValue['team_member']['full_name'] != '') {
                            $teamDataInfo['full_name'] = trim($teamValue['team_member']['full_name']);
                            if(!empty($teamDataInfo)) {
                                $updateInfo = Userinfo::where('user_id', trim($teamValue['team_member']['account_id']))->update($teamDataInfo);
                                $utility->createIntercomUser($teamValue['team_member']['account_id']);

                                if($updateInfo) {
                                    array_push($updateSubusersCount, $updateInfo);
                                }
                            }
                        }

                        if(!empty($teamDataLogin)) {
                            $updateLogin = User::where('id', trim($teamValue['team_member']['account_id']))->where('parent_id', $user_id)->update($teamDataLogin);

                            if($updateLogin) {
                                array_push($updateSubusersCount, $updateLogin);

                                //adding groups and role names in permission in user table starting
                                $arrayPushData = [];
                                if(isset($teamValue['groups'])) {
                                    foreach($teamValue['groups'] as $groupsKey => $groupsValue) {
                                        $userGroupSettings = [];
                                        //checking groups and roles if exists starting
                                        $userGroups = Usersgroups::where('name', $groupsValue['group_name'])->where('user_id', $user_id)->select('group_id', 'user_group_settings')->first();
                                        $userRoles = Usersrolesub::where('role_name', $groupsValue['role_name'])->where('user_id', $user_id)->select('role_id')->first();
                                        if($userGroups && $userRoles) {
                                            array_push($arrayPushData, ['group_id' => $userGroups['group_id'], 'role_id' => $userRoles['role_id']]);

                                            //adding roles in groups table starting
                                            if($userGroups['user_group_settings'] != '') {
                                                $userGroupSettings = json_decode($userGroups['user_group_settings'], true);
                                                if(isset($userGroupSettings['subusers']) && $userGroupSettings['subusers'] != '') {
                                                    array_push($userGroupSettings['subusers'], ['user_id' => $userId, 'role_id' => $userRoles['role_id']]);
                                                }
                                                Usersgroups::where('group_id', $userGroups['group_id'])->where('user_id', $user_id)->update(['user_group_settings' => json_encode($userGroupSettings)]);
                                            }
                                            //adding roles in groups table ending
                                            //checking groups and roles if exists ending
                                        }
                                    } //groups foreach condition ends here
                                }
                                if(!empty($arrayPushData)) {
                                    User::where('id', $userId)->where('parent_id', $user_id)->update(['user_premission_group' => json_encode($arrayPushData)]);
                                }
                                //adding groups and role names in permission in user table ending
                            }
                        } elseif(empty($teamDataLogin) && empty($teamDataInfo)) {
                            return Response::json(['status' => 'error', 'result' => 'Nothing to update']);
                        }
                    }

                    if(count($updateSubusersCount) > 0) {
                        return Response::json(['status'=>'success','result' => 'Teams updated successfully']);
                    } else {
                        return Response::json(['status'=>'success','result' => 'Record already updated']);
                    }
                } else {
                    return Response::json(['status' => 'error', 'result' => 'Missing or invalid team information']);
                }
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }

    public function  postUpdatesubusers() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');

        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        }

        $user_id = $utility->getUserIdByAuthToken($access_token);
        if($user_id > 0) {
            $checkAccessToken = User::where('id', $user_id)->pluck('parent_id');
            if($checkAccessToken) {
                return Response::json(['status' => 'error', 'result' => 'Need parent access_token']);
            } else {
                if(isset($data['subusers']) && $data['subusers'] != '') {
                    if($this->is_JSON($data['subusers'])) {
                        $subUsers = json_decode($data['subusers'], true);
                        foreach($subUsers as $suKey => $suValue) {
                            if(!is_array($suValue['subuser_fields'])) {
                                return Response::json(['status' => 'error', 'result' => 'subuser_fields should be array']);
                            } else {
                                if(!isset($suValue['subuser_fields']) || empty($suValue['subuser_fields'])) {
                                    return Response::json(['status' => 'error', 'result' => 'Subuser information is missing']);
                                } if(!isset($suValue['subuser_fields']['subuser_id']) || $suValue['subuser_fields']['subuser_id'] == '') {
                                    return Response::json(['status' => 'error', 'result' => 'Missing subuser_id']);
                                } if(isset($suValue['subuser_fields']['email']) && $suValue['subuser_fields']['email'] != '' && !filter_var($suValue['subuser_fields']['email'], FILTER_VALIDATE_EMAIL)) {
                                    $suValue['subuser_fields']['email'] = preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $suValue['subuser_fields']['email']);
                                    return Response::json(['status' => 'error', 'result' => 'Invalid subuser email']);
                                } if(isset($suValue['subuser_fields']['subuser_id']) && $suValue['subuser_fields']['subuser_id'] != '') {
                                    $checkSubUsers = User::where('id', trim($suValue['subuser_fields']['subuser_id']))->where('parent_id', $user_id)->count();
                                    if(!$checkSubUsers) {
                                        return Response::json(['status' => 'error', 'result' => 'Invalid subuser_id for parent access_token']);
                                    }
                                }
                            }

                            /*if(isset($suValue['subuser_fields'])) {
                                if(!isset($suValue['subuser_fields']['subuser_id']) || $suValue['subuser_fields']['subuser_id'] == '') {
                                    return Response::json(['status' => 'error', 'result' => 'Missing subuser_id']);
                                } if(isset($suValue['subuser_fields']['email']) && $suValue['subuser_fields']['email'] != '' && !filter_var($suValue['subuser_fields']['email'], FILTER_VALIDATE_EMAIL)) {
                                    return Response::json(['status' => 'error', 'result' => 'Invalid subuser email']);
                                } if(isset($suValue['subuser_fields']['subuser_id']) && $suValue['subuser_fields']['subuser_id'] != '') {
                                    $checkSubUsers = User::where('id', trim($suValue['subuser_fields']['subuser_id']))->where('parent_id', $user_id)->count();
                                    if(!$checkSubUsers) {
                                        return Response::json(['status' => 'error', 'result' => 'Invalid subuser_id for parent access_token']);
                                    }
                                }
                                //what we don't have id
                            }*/
                        }
                    } else {
                        return Response::json(['status' => 'error', 'result' => 'Subusers information is invalid format, JSON is required']);
                    }

                    $updateSubusersCount = [];
                    foreach($subUsers as $subUsersKey => $subUsersValue) {
                        $subUserName = $subUserEmail = $subUserPassword = '';
                        $subUserDataLogin = $subUserDataInfo = [];
                        if(isset($subUsersValue['subuser_fields']['email']) && $subUsersValue['subuser_fields']['email'] != '') {
                            $subUsersValue['subuser_fields']['email'] = preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $subUsersValue['subuser_fields']['email']);
                            $getEmail = User::where('email', Tcrypt::encrypter($subUsersValue['subuser_fields']['email']))->count();
                            if($getEmail) {
                                unset($subUsersValue['subuser_fields']['email']);
                            } else {
                                //same manuiplation goes for other email functions
                                $subUserDataLogin['email'] = trim(Tcrypt::encrypter(strtolower($subUsersValue['subuser_fields']['email'])));
                            }
                        } if(isset($subUsersValue['subuser_fields']['password']) && $subUsersValue['subuser_fields']['password'] != '') {
                            $subUserDataLogin['password'] = hash('sha256', trim($subUsersValue['subuser_fields']['password']));
                        } if(isset($subUsersValue['subuser_fields']['full_name']) && $subUsersValue['subuser_fields']['full_name'] != '') {
                            $subUserDataInfo['full_name'] = trim($subUsersValue['subuser_fields']['full_name']);
                            if(!empty($subUserDataInfo)) {
                                $updateInfo = Userinfo::where('user_id', trim($subUsersValue['subuser_fields']['subuser_id']))->update($subUserDataInfo);

                                if($updateInfo) {
                                    array_push($updateSubusersCount, $updateInfo);
                                }
                            }
                        }

                        if(!empty($subUserDataLogin)) {
                            $updateLogin = User::where('id', trim($subUsersValue['subuser_fields']['subuser_id']))->where('parent_id', $user_id)->update($subUserDataLogin);

                            if($updateLogin) {
                                array_push($updateSubusersCount, $updateLogin);
                            }
                        } elseif(empty($subUserDataLogin) && empty($subUserDataInfo)) {
                            return Response::json(['status' => 'error', 'result' => 'Nothing to update']);
                        }
                    }

                    if(count($updateSubusersCount) > 0) {
                        return Response::json(['status'=>'success','result' => 'Subuser(s) updated successfully']);
                    } else {
                        return Response::json(['status'=>'success','result' => 'Already updated']);
                    }
                } else {
                    return Response::json(['status' => 'error', 'result' => 'Missing or invalid subusers information']);
                }
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }

    public function getUserinfo() {
        //http://localhost/codeTesting/cURL/Subuser/codeTesting82cURLPHPallsubusers.php
        //http://localhost/codeTesting/cURL/Subuser/codeTesting85cURLPHPgetsubusersidbased.php
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');
        $teamId = 0;

        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        } if(isset($data['account_id']) && $data['account_id'] != '') {
            $teamId = $data['account_id'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'account_id is missing']);
        }

        $user_id = $utility->getUserIdByAuthToken($access_token);
        if($user_id > 0) {
            $checkAccessToken = User::where('id', $user_id)->pluck('parent_id');
            if($checkAccessToken) {
                return Response::json(['status' => 'error', 'result' => 'Need parent access_token']);
            } else {

                $checkUserToValidate = User::where('id', $teamId)->where('parent_id', $user_id)->count();
                if(!$checkUserToValidate && $teamId != $user_id) {
                    return Response::json(['status' => 'error', 'result' => 'invalid account_id']);
                }

                $teamsInfo = User::where('users_login.id', $teamId)->where('users_login.parent_id', $user_id)->where('users_login.is_active', '!=', -1)->join('users_info', 'users_login.id', '=', 'users_info.user_id')->select('users_login.id', 'users_info.full_name', 'users_login.email', 'users_login.is_active', 'users_login.user_premission_group', 'users_info.extra_fields', 'users_info.extra_fields_data')->first();

                $responseArray = $teamArray = $teamPushArray = [];
                if($teamsInfo) {
                    $teamArray['account_id'] = $teamsInfo['id'];
                    $teamArray['full_name'] = $teamsInfo['full_name'];
                    $teamArray['email_address'] = trim($teamsInfo['email']);
                    $teamArray['status'] = ($teamsInfo['is_active'] == 1 ? 'active' : 'inactive');
                    $userPremissionGroup = ($teamsInfo['user_premission_group'] != '' && $teamsInfo['user_premission_group'] != '[]' ? json_decode($teamsInfo['user_premission_group'], true) : '');
                    if($userPremissionGroup != '') {
                        foreach($userPremissionGroup as $userPerGrpKey => $userPerGrpValue) {
                            $getGroupAndRoleName = Usersgroups::where('user_groups.user_id', $user_id)->where('user_groups.group_id', $userPerGrpValue['group_id'])->where('users_roles.role_id', $userPerGrpValue['role_id'])->join('users_roles', 'user_groups.user_id', '=', 'users_roles.user_id')->select('user_groups.name', 'users_roles.role_name')->first();

                            $teamArray['groups'] = [$getGroupAndRoleName['name'] => $getGroupAndRoleName['role_name']];
                        }
                    }
                    if(!empty($teamsInfo['extra_fields_data'])) {
                        $extraFieldsDataJsonDecode = json_decode($teamsInfo['extra_fields_data'], true);
                        if(!empty($extraFieldsDataJsonDecode)) {
                            $subUsersFieldsResponse = [];
                            foreach($extraFieldsDataJsonDecode as $extraFieldsDataJsonDecodeKey => $extraFieldsDataJsonDecodeValue) {
                                $subUsersFieldsResponse[$extraFieldsDataJsonDecodeKey] = (isset($extraFieldsDataJsonDecodeValue) && $extraFieldsDataJsonDecodeValue != '' ? $extraFieldsDataJsonDecodeValue : '');
                            }
                            $teamArray['user_fields'] = $subUsersFieldsResponse;
                        }
                    } elseif(!empty($teamsInfo['extra_fields'])) {
                        $extraFieldsJsonDecode = json_decode($teamsInfo['extra_fields'], true);
                        if(!empty($extraFieldsJsonDecode)) {
                            $subUsersFieldsResponse = [];
                            foreach($extraFieldsJsonDecode as $extraFieldsJsonDecodeKey => $extraFieldsJsonDecodeValue) {
                                $subUsersFieldsResponse[$extraFieldsJsonDecodeKey] = (isset($extraFieldsJsonDecodeValue) && $extraFieldsJsonDecodeValue != '' ? $extraFieldsJsonDecodeValue : '');
                            }
                            $teamArray['user_fields'] = $subUsersFieldsResponse;
                        }
                    }
                    $teamsArray = ['user_member' => $teamArray];
                    array_push($teamPushArray, $teamsArray);
                    $responseArray['user'] = $teamPushArray;
                } else {
                    $mainUsersInfo = User::where('users_login.id', $user_id)->join('users_info', 'users_login.id', '=', 'users_info.user_id')->select('users_login.id', 'users_info.full_name', 'users_login.email', 'users_login.is_active', 'users_login.user_premission_group', 'users_info.extra_fields', 'users_info.extra_fields_data')->first();
                    if(!empty($mainUsersInfo)) {
                        $mainUserInformation = ['user_member' => [
                            'account_id' => $mainUsersInfo['id'],
                            'full_name' => $mainUsersInfo['full_name'],
                            'email_address' => trim($mainUsersInfo['email']),
                            'status' => ($mainUsersInfo['is_active'] == 1 ? 'active' : 'inactive'),
                            'groups' => ['Default' => 'Full Access']
                        ]];
                        if(!empty($mainUsersInfo['extra_fields'])) {
                            $mainUserExtraFieldsJsonDecode = json_decode($mainUsersInfo['extra_fields'], true);
                            $mainUserExtraFieldsDataJsonDecode = (isset($mainUsersInfo['extra_fields_data']) && !empty($mainUsersInfo['extra_fields_data']) ? json_decode($mainUsersInfo['extra_fields_data'], true) : []);
                            if(!empty($mainUserExtraFieldsJsonDecode)) {
                                $mainUsersFieldsResponse = [];
                                foreach($mainUserExtraFieldsJsonDecode as $mainUserExtraFieldsJsonDecodeKey => $mainUserExtraFieldsJsonDecodeValue) {
                                    $title = (isset($mainUserExtraFieldsDataJsonDecode[$mainUserExtraFieldsJsonDecodeValue['title']]) && $mainUserExtraFieldsDataJsonDecode[$mainUserExtraFieldsJsonDecodeValue['title']] != '' ? $mainUserExtraFieldsDataJsonDecode[$mainUserExtraFieldsJsonDecodeValue['title']] : '');
                                    //$mainUsersFieldsResponse[$mainUserExtraFieldsJsonDecodeValue['title']] = (isset($mainUserExtraFieldsJsonDecodeValue) && $mainUserExtraFieldsJsonDecodeValue != '' ? $mainUserExtraFieldsJsonDecodeValue : '');
                                    $mainUsersFieldsResponse[$mainUserExtraFieldsJsonDecodeValue['title']] = $title;
                                }
                                $mainUserInformation['user_member']['user_fields'] = $mainUsersFieldsResponse;
                            }
                        }
                        /* if(!empty($mainUsersInfo['extra_fields_data'])) {
                            $mainUserExtraFieldsDataJsonDecode = json_decode($mainUsersInfo['extra_fields_data'], true);
                            if(!empty($mainUserExtraFieldsDataJsonDecode)) {
                                $mainUsersFieldsResponse = [];
                                foreach($mainUserExtraFieldsDataJsonDecode as $mainUserExtraFieldsDataJsonDecodeKey => $mainUserExtraFieldsDataJsonDecodeValue) {
                                    $mainUsersFieldsResponse[$mainUserExtraFieldsDataJsonDecodeKey] = (isset($mainUserExtraFieldsDataJsonDecodeValue) && $mainUserExtraFieldsDataJsonDecodeValue != '' ? $mainUserExtraFieldsDataJsonDecodeValue : '');
                                }
                                $mainUserInformation['user_member']['user_fields'] = $mainUsersFieldsResponse;
                            }
                        } */
                        array_push($teamPushArray, $mainUserInformation);
                    }
                    $responseArray['user'] = $teamPushArray;
                    //return Response::json(['status' => 'error', 'result' => 'No record found']);
                }
                $parentData = User::where('id', $user_id)->where('is_active', '!=', -1)->select('monthly_signature', 'is_paid')->first();
                $userSettings = settings::where('user_id', $user_id)->select('storage_files_limit', 'archive_permission_access')->first();

                $accountInfo = User::where('users_login.id', $user_id)->join('user_setting', 'users_login.id', '=', 'user_setting.user_id')->join('users_info', 'users_login.id', '=', 'users_info.user_id')->select('users_login.monthly_signature', 'users_login.is_paid', 'user_setting.storage_files_limit', 'user_setting.archive_permission_access', 'users_login.is_active', 'users_info.company', 'users_info.reg_no', 'users_info.address', 'users_info.telephone', 'users_info.post_code', 'users_info.city')->first();

                $isLocked = ($accountInfo['is_active'] == 1 ? false : true);
                $isPaidSimpleSign = ($accountInfo['is_paid'] == 1 ? true : false);
                $archivePermissionAccess = ($accountInfo['archive_permission_access'] == 1 ? true : false);
                $storageFilesLimit = ($accountInfo['storage_files_limit'] != 0 ? $accountInfo['storage_files_limit'] : 50);

                $responseArray['account_setting'] = ['is_locked' => $isLocked, 'is_paid_ss' => $isPaidSimpleSign, 'is_paid_ssa' => $archivePermissionAccess, 'signatures_left' => $accountInfo['monthly_signature'], 'archive_storage_left' => $storageFilesLimit];

                $responseArray['account_details'] = ['company' => $accountInfo['company'], 'reg_no' => $accountInfo['reg_no'], 'address' => $accountInfo['address'], 'phone_no' => $accountInfo['telephone'], 'zipcode' => $accountInfo['post_code'], 'city' => $accountInfo['city']];

                return response()->json(['status' => 'success', 'result' => $responseArray], 200, ['Content-Type' => 'application/json; charset=UTF-8'], JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }

    public function getTeaminfo() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');
        $teamId = 0;

        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        } if(isset($data['account_id']) && $data['account_id'] != '') {
            $teamId = $data['account_id'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'account_id is missing']);
        }

        $user_id = $utility->getUserIdByAuthToken($access_token);
        if($user_id > 0) {
            $checkAccessToken = User::where('id', $user_id)->pluck('parent_id');
            if($checkAccessToken) {
                return Response::json(['status' => 'error', 'result' => 'Need parent access_token']);
            } else {
                $teamsInfo = User::where('users_login.id', $teamId)->where('users_login.is_active', '!=', -1)->join('users_info', 'users_login.id', '=', 'users_info.user_id')->select('users_login.id', 'users_info.full_name', 'users_login.email', 'users_login.is_active', 'users_login.user_premission_group')->first();

                if($teamsInfo) {
                    $responseArray = $teamArray = $teamPushArray = [];
                    $teamArray['account_id'] = $teamsInfo['id'];
                    $teamArray['full_name'] = $teamsInfo['full_name'];
                    $teamArray['email_address'] = trim($teamsInfo['email']);
                    $teamArray['status'] = ($teamsInfo['is_active'] == 1 ? 'active' : 'inactive');
                    $userPremissionGroup = ($teamsInfo['user_premission_group'] != '' && $teamsInfo['user_premission_group'] != '[]' ? json_decode($teamsInfo['user_premission_group'], true) : '');
                    if($userPremissionGroup != '') {
                        foreach($userPremissionGroup as $userPerGrpKey => $userPerGrpValue) {
                            $getGroupAndRoleName = Usersgroups::where('user_groups.user_id', $user_id)->where('user_groups.group_id', $userPerGrpValue['group_id'])->where('users_roles.role_id', $userPerGrpValue['role_id'])->join('users_roles', 'user_groups.user_id', '=', 'users_roles.user_id')->select('user_groups.name', 'users_roles.role_name')->first();

                            $teamArray['groups'] = [$getGroupAndRoleName['name'] => $getGroupAndRoleName['role_name']];
                        }
                    }
                    $teamsArray = ['team_member' => $teamArray];
                    array_push($teamPushArray, $teamsArray);
                    //$responseArray['team'] = $teamsArray;
                    $responseArray['team'] = $teamPushArray;

                    $parentData = User::where('id', $user_id)->where('is_active', '!=', -1)->select('monthly_signature', 'is_paid')->first();
                    $userSettings = settings::where('user_id', $user_id)->select('storage_files_limit', 'archive_permission_access')->first();

                    $accountInfo = User::where('users_login.id', $user_id)->join('user_setting', 'users_login.id', '=', 'user_setting.user_id')->join('users_info', 'users_login.id', '=', 'users_info.user_id')->select('users_login.monthly_signature', 'users_login.is_paid', 'user_setting.storage_files_limit', 'user_setting.archive_permission_access', 'users_login.is_active', 'users_info.company', 'users_info.reg_no', 'users_info.address', 'users_info.telephone', 'users_info.post_code', 'users_info.city')->first();

                    $isLocked = ($accountInfo['is_active'] == 1 ? false : true);
                    $isPaidSimpleSign = ($accountInfo['is_paid'] == 1 ? true : false);
                    $archivePermissionAccess = ($accountInfo['archive_permission_access'] == 1 ? true : false);
                    $storageFilesLimit = ($accountInfo['storage_files_limit'] != 0 ? $accountInfo['storage_files_limit'] : 50);

                    $responseArray['account_setting'] = ['is_locked' => $isLocked, 'is_paid_ss' => $isPaidSimpleSign, 'is_paid_ssa' => $archivePermissionAccess, 'signatures_left' => $accountInfo['monthly_signature'], 'archive_storage_left' => $storageFilesLimit];

                    $responseArray['account_details'] = ['company' => $accountInfo['company'], 'reg_no' => $accountInfo['reg_no'], 'address' => $accountInfo['address'], 'phone_no' => $accountInfo['telephone'], 'zipcode' => $accountInfo['post_code'], 'city' => $accountInfo['city']];

                    return Response::json(['status' => 'success', 'result' => $responseArray]);
                } else {
                    return Response::json(['status' => 'error', 'result' => 'No record found']);
                }
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }

    public function getSubuserinfo() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');
        $subUserId = 0;

        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        } if(isset($data['subuser_id']) && $data['subuser_id'] != '') {
            $subUserId = $data['subuser_id'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'subuser_id is missing']);
        }

        $user_id = $utility->getUserIdByAuthToken($access_token);
        if($user_id > 0) {
            $checkAccessToken = User::where('id', $user_id)->pluck('parent_id');
            if($checkAccessToken) {
                return Response::json(['status' => 'error', 'result' => 'Need parent access_token']);
            } else {

                $subUserInfo = User::where('users_login.id', $subUserId)->where('users_login.is_active', '!=', -1)->join('users_info', 'users_login.id', '=', 'users_info.user_id')->select('users_login.id', 'users_info.full_name', 'users_login.email', 'users_login.is_active', 'users_login.is_paid', 'users_login.monthly_signature', 'users_login.user_permissions_level')->first();

                //$mainUser = User::where('users_login.id', $user_id)->where('users_login.is_active', '!=', -1)->join('users_info', 'users_login.id', '=', 'users_info.user_id')->select('users_login.id', 'users_info.full_name')->first();

                $parentData = User::where('id', $user_id)->where('is_active', '!=', -1)->select('monthly_signature', 'is_paid')->first();

                $userSettings = settings::where('user_id', $user_id)->select('storage_files_limit', 'archive_permission_access')->first();

                $responseArray = [];
                if($subUserInfo) {

                    if($subUserInfo['user_permissions_level'] == 0) {
                        $subUserInfo['user_permissions_level'] = 'P';
                    } elseif($subUserInfo['user_permissions_level'] == 1) {
                        $subUserInfo['user_permissions_level'] = 'A';
                    } elseif($subUserInfo['user_permissions_level'] == 2) {
                        $subUserInfo['user_permissions_level'] = 'E';
                    }

                    $subUserInfoResponse['account_id'] = $subUserInfo['id'];
                    $subUserInfoResponse['full_name'] = $subUserInfo['full_name'];
                    $subUserInfoResponse['email_address'] = trim(Tcrypt::decrypter($subUserInfo['email']));
                    $subUserInfoResponse['is_locked'] = ($subUserInfo['is_active'] == 1 ? false : true);
                    $subUserInfoResponse['is_paid_ss'] = ($parentData['is_paid'] == 1 ? true : false);
                    $subUserInfoResponse['is_paid_ssa'] = ($userSettings['archive_permission_access'] == 1 ? true : false);
                    $subUserInfoResponse['signatures_left'] = $parentData['monthly_signature'];
                    $subUserInfoResponse['documents_left'] = ($userSettings['storage_files_limit'] != 0 ? $userSettings['storage_files_limit'] : 50);
                    $subUsers['role_code'] = $subUserInfo['user_permissions_level'];

                    $responseArray['subuser'] = $subUserInfoResponse;

                    return Response::json(['status' => 'success', 'result' => $responseArray]);
                } else {
                    return Response::json(['status' => 'error', 'result' => 'No record found']);
                }
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }

    public function postDeleteusers() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');

        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        }

        $user_id = $utility->getUserIdByAuthToken($access_token);
        if($user_id > 0) {
            $checkAccessToken = User::where('id', $user_id)->pluck('parent_id');
            if($checkAccessToken) {
                return Response::json(['status' => 'error', 'result' => 'Need parent access_token']);
            } else {
                if(isset($data['users']) && $data['users'] != '') {
                    if($this->is_JSON($data['users'])) {
                        $team = json_decode($data['users'], true);
                        if(!empty($team)) {
                            if(is_array($team)) {
                                foreach($team as $teamKey => $teamValue) {
                                    if(is_numeric($teamValue)) {
                                        $checkIdsBelongs = User::where('id', $teamValue)->where('parent_id', $user_id)->count();
                                        if(!$checkIdsBelongs) {
                                            return Response::json(['status' => 'error', 'result' => 'User id(s) or parent access token is invalid']);
                                        }
                                    } else {
                                        return Response::json(['status' => 'error', 'result' => 'User(s) information should be numeric']);
                                    }
                                }
                            } else {
                                return Response::json(['status' => 'error', 'result' => 'User(s) information is not an array']);
                            }
                        } else {
                            return Response::json(['status' => 'error', 'result' => 'User id(s) required']);
                        }
                    } else {
                        return Response::json(['status' => 'error', 'result' => 'User(s) information is invalid format, JSON is required']);
                    }

                    $updateResponseArray = [];
                    foreach($team as $teamKey => $teamValue) {
                        $updateRecords = User::where('id', $teamValue)->where('parent_id', $user_id)->update(['is_active' => -1]);
                        DB::table('trash')->insertGetId(['user_id' => $teamValue]);
                        if($updateRecords) {
                            array_push($updateResponseArray, $updateRecords);
                        }
                    }

                    if($updateResponseArray) {
                        return Response::json(['status' => 'success', 'result' => 'User(s) deleted successfully']);
                    } else {
                        return Response::json(['status' => 'success', 'result' => 'Something went wrong']);
                    }
                } else {
                    return Response::json(['status' => 'error', 'result' => 'User(s) information is missing']);
                }
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }

    public function postDeleteteam() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');

        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        }

        $user_id = $utility->getUserIdByAuthToken($access_token);
        if($user_id > 0) {
            $checkAccessToken = User::where('id', $user_id)->pluck('parent_id');
            if($checkAccessToken) {
                return Response::json(['status' => 'error', 'result' => 'Need parent access_token']);
            } else {
                if(isset($data['team']) && $data['team'] != '') {
                    if($this->is_JSON($data['team'])) {
                        $team = json_decode($data['team'], true);
                        if(!empty($team)) {
                            if(is_array($team)) {
                                foreach($team as $teamKey => $teamValue) {
                                    if(is_numeric($teamValue)) {
                                        $checkIdsBelongs = User::where('id', $teamValue)->where('parent_id', $user_id)->count();
                                        if(!$checkIdsBelongs) {
                                            return Response::json(['status' => 'error', 'result' => 'Team id(s) or parent access token is invalid']);
                                        }
                                    } else {
                                        return Response::json(['status' => 'error', 'result' => 'Team information should be numeric']);
                                    }
                                }
                            } else {
                                return Response::json(['status' => 'error', 'result' => 'Team information is not an array']);
                            }
                        } else {
                            return Response::json(['status' => 'error', 'result' => 'Team id(s) required']);
                        }
                    } else {
                        return Response::json(['status' => 'error', 'result' => 'Team information is invalid format, JSON is required']);
                    }

                    $updateResponseArray = [];
                    foreach($team as $teamKey => $teamValue) {
                        $updateRecords = User::where('id', $teamValue)->where('parent_id', $user_id)->update(['is_active' => -1]);
                        DB::table('trash')->insertGetId(['user_id' => $teamValue]);
                        if($updateRecords) {
                            array_push($updateResponseArray, $updateRecords);
                        }
                    }

                    if($updateResponseArray) {
                        return Response::json(['status'=>'success','result' => 'Team(s) deleted successfully']);
                    } else {
                        return Response::json(['status' => 'success', 'result' => 'Something went wrong']);
                    }
                } else {
                    return Response::json(['status' => 'error', 'result' => 'Team information is missing']);
                }
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }

    public function postDeletesubusers() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');

        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        }

        $user_id = $utility->getUserIdByAuthToken($access_token);
        if($user_id > 0) {
            $checkAccessToken = User::where('id', $user_id)->pluck('parent_id');
            if($checkAccessToken) {
                return Response::json(['status' => 'error', 'result' => 'Need parent access_token']);
            } else {
                if(isset($data['subusers']) && $data['subusers'] != '') {
                    if($this->is_JSON($data['subusers'])) {
                        $subUsers = json_decode($data['subusers'], true);
                        if(!empty($subUsers)) {
                            if(is_array($subUsers)) {
                                foreach($subUsers as $suKey => $suValue) {
                                    if(is_numeric($suValue)) {
                                        $checkIdsBelongs = User::where('id', $suValue)->where('parent_id', $user_id)->count();
                                        if(!$checkIdsBelongs) {
                                            return Response::json(['status' => 'error', 'result' => 'Subuser id(s) or parent access token is invalid']);
                                        }
                                    } else {
                                        return Response::json(['status' => 'error', 'result' => 'Subuser information should be numeric']);
                                    }
                                }
                            } else {
                                return Response::json(['status' => 'error', 'result' => 'Subuser information is not an array']);
                            }
                        } else {
                            return Response::json(['status' => 'error', 'result' => 'Subuser id(s) required']);
                        }
                    } else {
                        return Response::json(['status' => 'error', 'result' => 'Subuser information is invalid format, JSON is required']);
                    }

                    $deleteResponseArray = [];
                    foreach($subUsers as $subUsersKey => $subUsersValue) {
                        $deleteRecords = User::where('id', $subUsersValue)->where('parent_id', $user_id)->delete();
                        if($deleteRecords) {
                            Userinfo::where('user_id', $subUsersValue)->delete();
                            array_push($deleteResponseArray, $deleteRecords);
                        }
                    }

                    if($deleteResponseArray) {
                        return Response::json(['status'=>'success','result' => 'Subuser(s) deleted successfully']);
                    } else {
                        return Response::json(['status' => 'success', 'result' => 'Something went wrong']);
                    }
                } else {
                    return Response::json(['status' => 'error', 'result' => 'Subusers information is missing']);
                }
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }

    public function postChangeteammemberstatus() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');
        $status = 0;

        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        } if(isset($data['account_id']) && $data['account_id'] != '') {
            $accountId = $data['account_id'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'account_id is missing']);
        } if(isset($data['status']) && $data['status'] != '') {
            $status = $data['status'];
            if($status == 'inactive' || $status == 'Inactive' || $status == 'in active' || $status == 'In active') {
                $status = 0;
            } elseif($status == 'active' || $status == 'Active') {
                $status = 1;
            } else {
                return Response::json(['status' => 'error', 'result' => 'Invalid status']);
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'status is missing']);
        }

        $user_id = $utility->getUserIdByAuthToken($access_token);
        if($user_id > 0) {
            $checkAccessToken = User::where('id', $user_id)->pluck('parent_id');
            if($checkAccessToken) {
                return Response::json(['status' => 'error', 'result' => 'Need parent access_token']);
            } else {
                $teamMemberInfo = User::where('id', $accountId)->where('parent_id', $user_id)->where('is_active', '!=', -1)->count();
                if($teamMemberInfo) {
                    $updateTeamMember = User::where('id', $accountId)->where('parent_id', $user_id)->update(['is_active' => $status]);
                    if($updateTeamMember) {
                        return Response::json(['status' => 'success', 'result' => 'Status changed successfully']);
                    } else {
                        return Response::json(['status' => 'error', 'result' => 'Status already changed']);
                    }
                } else {
                    return Response::json(['status' => 'error', 'result' => 'No record found or user has deleted already']);
                }
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }

    public function postChangeuserstatus() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');
        $status = 0;

        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        } if(isset($data['account_id']) && $data['account_id'] != '') {
            $subUserId = $data['account_id'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'account_id is missing']);
        } if(isset($data['status']) && $data['status'] != '') {
            $status = $data['status'];
            if($status == 'inactive' || $status == 'Inactive' || $status == 'in active' || $status == 'In active') {
                $status = 0;
            } elseif($status == 'active' || $status == 'Active') {
                $status = 1;
            } else {
                return Response::json(['status' => 'error', 'result' => 'Invalid status']);
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'status is missing']);
        }

        $user_id = $utility->getUserIdByAuthToken($access_token);
        if($user_id > 0) {
            $checkAccessToken = User::where('id', $user_id)->pluck('parent_id');
            if($checkAccessToken) {
                return Response::json(['status' => 'error', 'result' => 'Need parent access_token']);
            } else {
                $subUserInfo = User::where('id', $subUserId)->where('parent_id', $user_id)->where('is_active', '!=', -1)->count();
                if($subUserInfo) {
                    $updateSubUser = User::where('id', $subUserId)->where('parent_id', $user_id)->update(['is_active' => $status]);
                    if($updateSubUser) {
                        return Response::json(['status' => 'success', 'result' => 'Status changed successfully']);
                    } else {
                        return Response::json(['status' => 'error', 'result' => 'Status already changed']);
                    }
                } else {
                    return Response::json(['status' => 'error', 'result' => 'No record found or user has deleted']);
                }
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }

    public function postChangesubuserstatus() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');
        $status = 0;

        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        } if(isset($data['subuser_id']) && $data['subuser_id'] != '') {
            $subUserId = $data['subuser_id'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'subuser_id is missing']);
        } if(isset($data['status']) && $data['status'] != '') {
            $status = $data['status'];
            if($status == 'inactive' || $status == 'Inactive' || $status == 'in active' || $status == 'In active') {
                $status = 0;
            } elseif($status == 'active' || $status == 'Active') {
                $status = 1;
            } else {
                return Response::json(['status' => 'error', 'result' => 'Invalid status']);
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'status is missing']);
        }

        $user_id = $utility->getUserIdByAuthToken($access_token);
        if($user_id > 0) {
            $checkAccessToken = User::where('id', $user_id)->pluck('parent_id');
            if($checkAccessToken) {
                return Response::json(['status' => 'error', 'result' => 'Need parent access_token']);
            } else {
                $subUserInfo = User::where('id', $subUserId)->where('parent_id', $user_id)->where('is_active', '!=', -1)->count();
                if($subUserInfo) {
                    $updateSubUser = User::where('id', $subUserId)->where('parent_id', $user_id)->update(['is_active' => $status]);
                    if($updateSubUser) {
                        return Response::json(['status' => 'success', 'result' => 'Status changed successfully']);
                    } else {
                        return Response::json(['status' => 'error', 'result' => 'Status already changed']);
                    }
                } else {
                    return Response::json(['status' => 'error', 'result' => 'No record found or user has deleted']);
                }
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }

    /**
     * This function is for create sub user from api by parent user and send the email and password
     * @return type success or failure
     */
    public function postCreatesubuser()
    {   
        
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');
        if(isset($data['access_token'])){
                $access_token = $data['access_token'];
        }else{
                return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
        $parentId = $utility->getUserIdByAuthToken($access_token);
        
        if($parentId > 0){
                $userController = new userController();
                $userdata = DB::table('users_login')
                ->leftJoin('users_info', 'users_info.user_id', '=', 'users_login.id')->where('users_login.id', $parentId)
                ->select('users_login.id',
                         'users_login.total_users',
                         'users_login.is_paid',
                         'users_info.company',
                         'users_info.full_name'
                        )->first();

                if(isset($data['subusers']) && $data['subusers'] != ''){
                    if($this->is_JSON($data['subusers'])){
                        $subusers = json_decode($data['subusers'],true);
                        foreach ($subusers as $subkey => $subVal) {
                            //Subusers Information Validations START
                            if(!isset($subVal['name']) || $subVal['name'] == ''){
                                return Response::json(['status'=>'error','result' => 'Invalid or missing name']);
                            }else if(!isset($subVal['email']) || !filter_var($subVal['email'], FILTER_VALIDATE_EMAIL)){
                                return Response::json(['status'=>'error','result' => 'Invalid or missing email']);
                            }else if(!isset($subVal['password']) || $subVal['password'] == ''){
                                return Response::json(['status'=>'error','result' => 'Invalid or missing password']);
                            }
                            //Subusers Information Validations END
                        }//Foreach End
                    }else{
                        return Response::json(['status'=>'error','result' => 'Subusers information is missing']);
                    }

                    if(!empty($userdata) && $userdata->is_paid != 0){
                        $count_user = DB::table('users_login')->where('parent_id', $parentId)->count();
                        //adding one user in used total users
                        $count_user = ($count_user + 1) + count($subusers);
                        if($userdata->total_users < $count_user){
                                return Response::json(['status'=>'error','message'=>'You need to uprade your account for add more users']);
                        }
                    }

                    $subuserIds = array();
                    $emailAlready = 0;
                    foreach ($subusers as $subkey => $subVal) {

                            //Creating New Subuser START
                            $company = $userdata->company;
                            $status = 1;
                            $activation_date = 0;
                            $random_no = uniqid();
                            $userid = $userController->createUser($parentId,$status,$activation_date,$random_no,$subVal['email'],$subVal['password'],$subVal['name'],$company,$business='',$phone_no='',$linkedin_id='',$google_id='');

                            if(isset($userid) && $userid >0 ){
                                    $mymailer = new mymailer(); 
                                    $domain_name = asset('/');
                                    $template = $userdata->full_name.' has added you to Simple Sign.<br><br>';
                                    $template .= 'Your account info for access the account<br><br>';
                                    $template .= 'Email:     '.$subVal['email'].'<br>';
                                    $template .= 'password:     '.$subVal['password'].'<br><br>';
                                    $template .= 'Best Regard<br>';
                                    $template .= 'Simple Sign<br>';
                                    $myemail['from'] = 'noreply@simplesign.se';
                                    $myemail['subject'] = "Invitation from ".$userdata->full_name;
                                    $myemail['body'] = $template;
                                    $myemail['to'] = $subVal['email'];
                                    $myemail['to_name'] = $subVal['name'];
                                    $myemail['replaceables'] = array('emailbody' => $template);
                                    $mailsend = $mymailer->sendmail($myemail);
                                    if($userid){
                                        array_push($subuserIds,$userid);
                                    }
                                    //return Response::json(['status'=>'success','message'=>'Invitation email has been sent','account_id'=>$userid]);
                            }
                            else{
                                $emailAlready++;
                                    //return Response::json(['status'=>'error','message'=>'Email already exists']);
                            }
                            //Creating New Subuser END
                    }//Loop END
                    if(count($subuserIds)>0){
                        return Response::json(['status'=>'success','message'=>'Invitation email has been sent','account_id'=>$subuserIds]);
                    }else if($emailAlready > 0){
                        return Response::json(['status'=>'error','message'=>'Email already exists']);
                    }

                }//end if subusers
                else{
                    return Response::json(['status'=>'error','message'=>'Invalid or missing subusers information']);
                }
                
        }else{
                return Response::json(['status'=>'error','message'=>'Invalid access token']);
        }
        
    }

    public function postSharetemplate() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');

        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        } if(isset($data['template_id']) && $data['template_id'] != '') {
            $template_id = $data['template_id'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'template_id is missing']);
        } if(isset($data['share_status']) && $data['share_status'] != '') {
            $shareStatus = $data['share_status'];
            if($shareStatus == 'share') {
                $shareStatus = 1;
            } elseif($shareStatus == 'unshare') {
                $shareStatus = 0;
            } else {
                return Response::json(['status' => 'error', 'result' => 'Invalid share_status']);
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'share_status parameter is missing']);
        }

        $user_id = $utility->getUserIdByAuthToken($access_token);
        $parentId = $utility->getParent($user_id);

        if($user_id > 0) {
            $offerDocs = Offerdocs::where('id', $template_id)->where('user_id', $user_id)->select('visible_name', 'name')->first();
            if($offerDocs) {
                $templateName = ($offerDocs['visible_name'] != '' ? $offerDocs['visible_name'] : $offerDocs['name']);
                Offerdocs::where('id', $template_id)->where('user_id', $user_id)->update(['is_shareable' => $shareStatus]);
                if($shareStatus == 1) {
                    return Response::json(['status' => 'success', 'result' => 'Template '.$templateName.' is now accessible by your team']);
                } if($shareStatus == 0) {
                    return Response::json(['status' => 'success', 'result' => 'Template '.$templateName.' is not accessible by your team']);
                }
            } else {
                return Response::json(['status' => 'error', 'result' => 'Invalid template_id']);
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }

    public function putSharetemplate_old(){
        $utility = new Utility();
        $data = Input::all();
        if(isset($data['access_token'])){
            $access_token = $data['access_token'];
        }else{
            return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }

        $user_id = $utility->getUserIdByAuthToken($access_token);

        if(isset($data['template_id'])){
            $template_id = $data['template_id'];
        }else{
            return Response::json(['status'=>'error','result' => 'template_id is missing']);
        }
        if(isset($data['share'])){
            $share = $data['share'];
        }else{
            return Response::json(['status'=>'error','result' => 'share parameter is missing']);
        }
        if($share == 1 || $share == 0){
            $offerData['is_shareable'] = $share;
            $offerWhere['id'] = $template_id;
            $offerWhere['user_id'] = $user_id;

            $offerContent = $utility->getItem("offer_docs",$offerWhere,array('visible_name','name'));
            if($offerContent){
                $TemplateName = ( $offerContent->visible_name != '' ? $offerContent->visible_name : $offerContent->name );
                $utility->updateItem("offer_docs",$offerWhere,$offerData);
                if($share == 1)return Response::json(['status'=>'success','result' => 'Template '.$TemplateName.' is now accessible by your team']);
                if($share == 0)return Response::json(['status'=>'success','result' => 'Template '.$TemplateName.' is not accessible by your team']);
            }else{
                return Response::json(['status'=>'error','result' => 'template_id is invalid']);
            }
        }

    }

    public function postDeletetemplates() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');

        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }

        $user_id = $utility->getUserIdByAuthToken($access_token);
        $parentId = $utility->getParent($user_id);

        if($user_id > 0) {
            if(isset($data['templates']) && !empty($data['templates'])) {
                if($this->is_JSON($data['templates'])) {
                    $templates = json_decode($data['templates'], true);
                    if(!empty($templates)) {
                        if(is_array($templates)) {
                            foreach($templates as $temKey => $temValue) {
                                if(is_numeric($temValue)) {
                                    $checkIdsBelongs = Offerdocs::where('id', $temValue)->where('user_id', $user_id)->count();
                                    $offerData = Offerdocs::where('id', $temValue)->where('user_id', $user_id)->select('attachments')->first();
                                    if(empty($offerData)) {
                                        return Response::json(['status' => 'error', 'result' => "You can't delete this template or already deleted"]);
                                    } if(!$checkIdsBelongs) {
                                        return Response::json(['status' => 'error', 'result' => 'Template id(s) or access token is invalid']);
                                    }
                                } else {
                                    return Response::json(['status' => 'error', 'result' => 'Template information should be numeric']);
                                }
                            }
                        } else {
                            return Response::json(['status' => 'error', 'result' => 'Template information is not an array']);
                        }
                    } else {
                        return Response::json(['status' => 'error', 'result' => 'Template id(s) required']);
                    }
                } else {
                    return Response::json(['status' => 'error', 'result' => 'Template(s) information is invalid format, JSON is required']);
                }

                $deleteResponseArray = [];
                foreach($templates as $templatesKey => $templatesValue) {
                    $offerData = Offerdocs::where('id', $templatesValue)->where('user_id', $user_id)->select('attachments', 'order')->first();
                    if(!empty($offerData['attachments'])) {
                        $attachments = json_decode($offerData['attachments'], true);
                        foreach($attachments as $attachKey => $attchValue) {
                            if(!empty($attchValue['path']) && $attchValue['path'] != '') {
                                $attachmentPath = env('mediaUrl').'templatedata/'.$attchValue['path'];
                                if(is_file_exist($attachmentPath)) {
                                    //deleteFromGCS('templatedata', $attchValue['path']);
                                }
                            }
                        }
                    }

                    $orderArray = json_decode($offerData['order'], true);
                    //$path = public_path().'/uploads/pdf_image/';
                    $where['user_id'] = $user_id;
                    foreach($orderArray as $orderKey => $orderValue) {
                        //$orderValue['type'];
                        //$orderValue['contentid'];
                        $where['id'] = $orderValue['contentid'];
                        if($orderValue['type'] == 'template') {
                            //$utility->deleteItem("user_template", $where);
                        } elseif($orderValue['type'] == 'pdf') {
                            //$utility->deleteItem("pdf", $where);
                        }
                    }

                    /* $deleteRecords = Offerdocs::where('id', $templatesValue)->where('user_id', $user_id)->delete();
                    if($deleteRecords) {
                        array_push($deleteResponseArray, $deleteRecords);
                    } */
                }

                $offerData = Offerdocs::whereIn('id', $templates)->where('user_id', $user_id)->select('id', 'name', 'visible_name')->get();
                foreach($offerData as $offerDataKey => $offerDataValue) {
                    $templateLogs['template_name'] = ($offerDataValue['visible_name']) ? $offerDataValue['visible_name'] : $offerDataValue['name'];
                    $templateLogs['user_id'] = $user_id;
                    $templateLogs['template_id'] = $offerDataValue['id'];
                    $templateLogs['user_name'] = "Delete"; //($userInfo) ? $userInfo->full_name : "";
                    $templateLogs['ip_address'] = $_SERVER['REMOTE_ADDR'];
                    $templateLogs['user_agent'] = $_SERVER['HTTP_USER_AGENT'];
                    TemplateLogs::insertGetId($templateLogs);
                }

                if($deleteResponseArray) {
                    return Response::json(['status'=>'success','result' => 'Template(s) deleted successfully']);
                } else {
                    return Response::json(['status' => 'success', 'result' => 'Already deleted']);
                }
            } else {
                return Response::json(['status' => 'error', 'result' => 'Template(s) information is missing']);
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }

    /* Delete template by template id*/
    public function deleteDeletetemplate_old(){
        $data = Input::all();
        $utility = new Utility();
        if(!isset($data['access_token']) || empty($data['access_token'])){
            return Response::json(['status'=>'error','result'=>'access_token is missing']);
        }else{
            $user_id = $utility->getUserIdByAuthToken($data['access_token']);
        }
        
        if(!isset($data['template_id']) || empty($data['template_id'])){
            return Response::json(['status'=>'error','result'=>'template_id is missing']);
        }else{
            $offerid= $data['template_id'];
        }
        
        $where['id'] = $offerid;
        $where['user_id'] = $user_id;
        $offerData = $utility->getItem("offer_docs",$where);
        if(empty($offerData)){
            return Response::json(['status'=>'error','result'=>"You can't delete this  template"]);
        }

        if(!empty($offerData->attachments)){
        $contractAttach = json_decode($offerData->attachments,true);
            foreach ($contractAttach as $key => $eachAttach) {
                if(!empty($eachAttach['path']) && $eachAttach['path'] != ''){
                    //Deleting old file from Google Cloud Server
                    $attachmentPath = env('mediaUrl').'templatedata/'.$eachAttach['path'];
                    if(is_file_exist($attachmentPath))
                    {
                        deleteFromGCS('templatedata',$eachAttach['path']);
                    }
                } 
            }
        }

        $orderArray = json_decode($offerData->order);
        $path = public_path().'/uploads/pdf_image/';
        $where1['user_id'] = $user_id;
        foreach($orderArray as $key=>$order){
            $type = $order->type;
            $contentid = $order->contentid;
            $where1['id'] = $contentid;
            if($type=="template"){
                $utility->deleteItem("user_template",$where1);   
                
            }else if($type=="pdf"){
                $utility->deleteItem("pdf",$where1);  
                //unlink( $path . 'pdfimage_' . $contentid.".jpg" );
            }
        }
        $where['user_id'] = $user_id;
        $deletedRows = $utility->deleteItem("offer_docs",$where);  
        return Response::json(['status'=>'success','result' =>'Template deleted successfully']);

    }

    /**
     * Delete sub user from parent account
     * @return type sub user list
     */
    public function deleteDeletesubuser()
    {
        $utility = new Utility();
        $data = Input::all();
        $result = false;
        if(isset($data['access_token'])){
                $access_token = $data['access_token'];
        }else{
                return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
        $parent_id = $utility->getUserIdByAuthToken($access_token);
        if(isset($data['user_id']) || !empty($data['user_id'])){
                $user_id = $data['user_id'];
        }else{
                return Response::json(['status'=>'error','result' => 'user_id is missing']);
        }
        if($user_id > 0 ){
            $User = User::where('id', $user_id)->where('parent_id',$parent_id)->count();
            if($User > 0){
                $result = $utility->getUsersPermanentDelete($user_id);
            }
            /*$where['id'] = $user_id;
            $where['parent_id'] = $parent_id;
            $result = $utility->deleteItem("users_login",$where);*/
        }
        if($result){
            //Deleting user folder from Google Cloud Server
            deleteFolderFromGCS($user_id);
            return Response::json(['status'=>'success','result' => 'sub user has been deleted']);
        }else{
            return Response::json(['status'=>'success','result' => "You can't delete this subuser"]);
        }
    }

    public function deleteDeleterecipient(){
        $data = Input::all();
        $utility = new Utility();
        if(isset($data['access_token'])){
                $access_token = $data['access_token'];
        }else{
                return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
        $user_id = $utility->getUserIdByAuthToken($access_token);
        if(isset($data['recipient_id']) && !empty($data['recipient_id'])){
            $rowid = $data['recipient_id'];
        $getRec = Recipient::where('id', $rowid)->where('registerby', $user_id)->first();  
        $recimg = env('mediaUrl').$user_id.'/'.$getRec['profile_image'];
        //Deleting old file from Google Cloud Server
        if(is_file_exist($recimg) && !empty($getRec['profile_image']))
        {
            deleteFromGCS($user_id,$getRec['profile_image']);
        }
        $delRec=Recipient::where('id', $rowid)->where('registerby', $user_id)->delete();
        if($delRec)
        return Response::json(['status'=>'success','result' => 'Recipient deleted successfully.']);
        else
                return Response::json(['status'=>'success','result' => "You can't delete this recipient"]);
        }else{
            return Response::json(['status'=>'error','result' => 'recipient_id is missing.']);
        }   
    }

    /*
    * Deleting contract from overview
    */
    public function deleteDeletecontract(){
        $utility = new Utility();
        $data = Input::all();
        $tempdelete = (isset($data['tempdelete']) ? $data['tempdelete'] : 0);
        if(isset($data['access_token'])){
                $access_token = $data['access_token'];
        }else{
                return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
        $user_id = $utility->getUserIdByAuthToken($access_token);
        
        if(isset($data['isreceived'])){
            $isReceived = $data['isreceived'];
        }else{
            $isReceived = 0;
        }
        
        if(isset($data['contract_id'])){
            $offerSentId = $data['contract_id'];
        }else{
            return Response::json(['status'=>'error','result' => 'contract_id is missing']); 
        }

        //Temporary Deleting Contract
        if($tempdelete == 1){
            $updWhere['id'] = $offerSentId;
            $updUpdate['overview_deleted'] = 1;
            $utility->updateItem('offer_sent',$updWhere,$updUpdate);
            return Response::json(['status'=>'success','result' => 'contract deleted']);
        }

        //Checking if Contract Belongs to a Subuser of current user START
        $checkContract = Offersent::where('id', $offerSentId)->select("sender_id")->first();
        if($checkContract && isset($checkContract['sender_id']) && $checkContract['sender_id'] > 0){
            $SubUserId = $checkContract['sender_id'];
            $isSubuserFound = User::where('id',$SubUserId)->where('parent_id',$user_id)->count();
            if($isSubuserFound){
                $user_id = $SubUserId;
            }
        }
        //Checking if Contract Belongs to a Subuser of current user END

        //Permanently Deleting Contract
        if($isReceived == 0){

            //Deleting Review attachment Files and Offer Sent row
            $whereSent['id'] = $offerSentId;
            $whereSent['sender_id'] = $user_id;
            $offerSent = $utility->getItem('offer_sent',$whereSent);
                if(empty($offerSent)){
                    return Response::json(['status'=>'success','result' => "You can't delete this conract"]); 
                }else if($offerSent->offer_status == 4){
                return Response::json(['status'=>'success','result' => "This contract has signed, You can't delete it"]); 
            }
            if($offerSent->attachments != ''){
                $sentAttachments = json_decode($offerSent->attachments);
                foreach ($sentAttachments as $eachAttach) {
                    $attachedPath = public_path().'/uploads/contractattachments/'.$eachAttach->path;
                    if(file_exists($attachedPath))
                    {
                      unlink($attachedPath);
                    }
                }
            }
            Offersent::where('id', $offerSentId)->where("sender_id", $user_id)->delete();
            $utility->deleteItem('original_offer',['offer_sent_id'=>$offerSentId, 'sender_id'=>$user_id]);

            //Deleting attachment Files, signature images and Offer Sent details row
            $whereOffer['offer_sent_id'] = $offerSentId;
            $offerDetails = $utility->getItems('offer_send_details',$whereOffer);
            foreach ($offerDetails as $eachDetail) {

                //Deleting Request attachments
                if($eachDetail->req_attached != ''){
                    $reqAttached = public_path().$eachDetail->req_attached;
                    if(is_file_exist($reqAttached))
                    {
                        deleteFromGCS('offerdata',$eachDetail->req_attached);
                    }
                }

                //Deleting Signate image
                if($eachDetail->signature_image != ''){
                    $sigImage = public_path().$eachDetail->signature_image;
                    if(file_exists($sigImage))
                    {
                      unlink($sigImage);
                    }
                }

                //Deleting Id attachment image
                if($eachDetail->attached_id != ''){
                    $attachedId = public_path().$eachDetail->attached_id;
                    if(is_file_exist($attachedId))
                    {
                        deleteFromGCS('offerdata',$eachDetail->attached_id);
                    }
                }
                Offersentdetails::where('id', $eachDetail->id)->delete();
            }
            return Response::json(['status'=>'success','result' => 'contract deleted']); 
        }
        else
        {
            /*$where1['offer_sent_id'] = $offerSentId;
            $where1['recieved_by'] = $$user_id;
            $update1['recieved_by'] = 0;
            $utility->updateItem('offer_send_details',$where1,$update1);*/

            $where2['id'] = $offerSentId;
            $where2['recieved_by'] = $user_id;
            $update2['recieved_by'] = 0;
            $utility->updateItem('offer_sent',$where2,$update2);
            return Response::json(['status'=>'success','result' => 'contract deleted']); 
        }
    }

    public function postDeletedocument() {
        $utility = new Utility();
        $data = Input::all();
        $tempdelete = (isset($data['tempdelete']) ? $data['tempdelete'] : 0);
        
        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        }
        $user_id = $utility->getUserIdByAuthToken($access_token);
        $parentId = $utility->getParent($user_id);
        $getApiHitCount = Userinfo::where('user_id', $parentId)->select('hit_count')->first();
        $addupdateapiaccesslogs = $utility->addupdateapiaccesslogs($user_id, 'postDeletedocument v3', $data, $getApiHitCount['hit_count']);
        if($addupdateapiaccesslogs == 'exceed') {
            $this->apiCallLimitExceedMessage = str_replace('#hitCuntNo', $getApiHitCount['hit_count'], $this->apiCallLimitExceedMessage);
            return Response::json(['status' => 'error', 'result' => $this->apiCallLimitExceedMessage]);
        }

        if(!isset($data['email']) || !filter_var($data['email'], FILTER_VALIDATE_EMAIL)) {
            return Response::json(['status'=>'error','result' => 'Invalid or missing email']);
        } else {
            //$senderEmail = $data['email'];
            $checkEmail = User::where('email', Tcrypt::encrypter($data['email']))->count();
            if(!$checkEmail) {
                return Response::json(['status' => 'error', 'result' => 'Email does not exist']);  
            }
            $checkUserIsCorrect = User::where('email', Tcrypt::encrypter($data['email']))->select('id')->first();
            if($checkUserIsCorrect['id'] != $user_id) {
                return Response::json(['status' => 'error', 'result' => 'Incorrect email address']);  
            }
        }

        if(isset($data['confirm_text']) && $data['confirm_text'] != '') {
            if($data['confirm_text'] != 'DELETE' && $data['confirm_text'] != 'delete') {
                return Response::json(['status'=>'error','result' => 'Invalid value']);
            }
        } else {
            return Response::json(['status'=>'error','result' => 'confirm_text is missing']);
        }
        
        if(isset($data['isreceived'])) {
            $isReceived = $data['isreceived'];
        } else {
            $isReceived = 0;
        }
        
        if(isset($data['document_id']) && !empty($data['document_id'])) {
            $offerSentId = $data['document_id'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'document_id is missing']);
        }

        $getSignedDocument = Offersentdetails::where('offer_sent_id', $offerSentId)->where('is_sender', 0)->where('offer_status', 4)->count();
        if($getSignedDocument) {
            return Response::json(['status'=>'error','result' => "You can't delete this document"]);
        }
        
        //Temporary Deleting Contract
        if($tempdelete == 1) {
            $updWhere['id'] = $offerSentId;
            $updUpdate['overview_deleted'] = 1;
            $utility->updateItem('offer_sent', $updWhere, $updUpdate);
            return Response::json(['status' => 'success', 'result' => 'document deleted']);
        }
        
        //Checking if Contract Belongs to a Subuser of current user START
        $checkContract = Offersent::where('id', $offerSentId)->select("sender_id")->first();
        if($checkContract && isset($checkContract['sender_id']) && $checkContract['sender_id'] > 0) {
            $SubUserId = $checkContract['sender_id'];
            $isSubuserFound = User::where('id', $SubUserId)->where('parent_id', $user_id)->count();
            if($isSubuserFound) {
                $user_id = $SubUserId;
            }
        }
        //Checking if Contract Belongs to a Subuser of current user END
        
        //Permanently Deleting Contract
        if($isReceived == 0) {
            //Deleting Review attachment Files and Offer Sent row
            $whereSent['id'] = $offerSentId;
            $whereSent['sender_id'] = $user_id;
            $offerSent = $utility->getItem('offer_sent', $whereSent);
            if(empty($offerSent)) {
                return Response::json(['status' => 'success', 'result' => "You can't delete this document"]);
            } /* elseif($offerSent->offer_status == 4) {
                //Commented this code on 18 of August 2020
                return Response::json(['status' => 'success', 'result' => "This document has signed, You can't delete it"]);
            } */
            
            if($offerSent->attachments != '') {
                $sentAttachments = json_decode($offerSent->attachments);
                foreach($sentAttachments as $eachAttach) {
                    $attachedPath = public_path().'/uploads/contractattachments/'.$eachAttach->path;
                    if(file_exists($attachedPath)) {
                        unlink($attachedPath);
                    }
                }
            }
            
            Offersent::where('id', $offerSentId)->where("sender_id", $user_id)->delete();
            $utility->deleteItem('original_offer', ['offer_sent_id' => $offerSentId, 'sender_id' => $user_id]);
            
            //Deleting attachment Files, signature images and Offer Sent details row
            $whereOffer['offer_sent_id'] = $offerSentId;
            $offerDetails = $utility->getItems('offer_send_details', $whereOffer);
            foreach($offerDetails as $eachDetail) {
                //Deleting Request attachments
                if($eachDetail->req_attached != '') {
                    $reqAttached = public_path().$eachDetail->req_attached;
                    if(is_file_exist($reqAttached)) {
                        deleteFromGCS('offerdata', $eachDetail->req_attached);
                    }
                }
                
                //Deleting Signate image
                if($eachDetail->signature_image != '') {
                    $sigImage = public_path().$eachDetail->signature_image;
                    if(file_exists($sigImage)) {
                        unlink($sigImage);
                    }
                }
                
                //Deleting Id attachment image
                if($eachDetail->attached_id != '') {
                    $attachedId = public_path().$eachDetail->attached_id;
                    if(is_file_exist($attachedId)) {
                        deleteFromGCS('offerdata', $eachDetail->attached_id);
                    }
                }
                Offersentdetails::where('id', $eachDetail->id)->delete();
            }
            return Response::json(['status' => 'success', 'result' => 'document deleted']);
        } else {
            $where2['id'] = $offerSentId;
            $where2['recieved_by'] = $user_id;
            $update2['recieved_by'] = 0;
            $utility->updateItem('offer_sent', $where2, $update2);
            return Response::json(['status' => 'success', 'result' => 'document deleted']);
        }
    }

    /*Update User information*/
    public function postUpdateaccount() {
        $input = Input::all();
        $utility = new Utility();
        $userArray = [];
        if(!isset($input['access_token']) || $input['access_token'] == "") {
            return Response::json(['status' => 'error', 'message' => 'access_token is missing']);
        } else {
            $user_id = $utility->getUserIdByAuthToken($input['access_token']);
            if($user_id > 0) {
                if(isset($input['user_fields']) && !empty($input['user_fields'])) {
                    if($this->is_JSON($input['user_fields'])) {
                        //[{"fields":[{"title":"Text Field For Testing","type":"text"},{"title":"Date Field For Testing","type":"datepicker"}]}]    //javascript
                        //[{"fields":[{"title":"Text Field For Testing","type":"text"},{"title":"Date Field For Testing","type":"datepicker"},{"title":"Make Multiple Choices","type":"droplist","options":["Make One","Make Two","Make Three"]}]}]     //javascript
                        $userFields = json_decode($input['user_fields'], true);
                        if(!empty($userFields)) {
                            foreach($userFields as $userFieldsKey => $userFieldsValue) {
                                if(!empty($userFieldsValue['fields'])) {
                                    if(!is_array($userFieldsValue['fields'])) {
                                        return Response::json(['status' => 'error', 'result' => 'fields should be array']);
                                    } else {
                                        if(!isset($userFieldsValue['fields']) || empty($userFieldsValue['fields'])) {
                                            return Response::json(['status' => 'error', 'result' => 'fields information is missing']);
                                        } elseif(isset($userFieldsValue['fields']) && !empty($userFieldsValue['fields'])) {
                                            foreach($userFieldsValue['fields'] as $fieldsKey => $fieldsValue) {
                                                if(!isset($fieldsValue['title'])) {
                                                    return Response::json(['status' => 'error', 'result' => 'Key must be title']);
                                                } if(isset($fieldsValue['title']) && $fieldsValue['title'] != '') {
                                                    $checkExtraFields = Userinfo::where('user_id', $user_id)->select('extra_fields')->first();
                                                    if(isset($checkExtraFields['extra_fields']) && !empty($checkExtraFields['extra_fields'])) {
                                                        $extraFields = json_decode($checkExtraFields['extra_fields'], true);
                                                        if(!empty($extraFields)) {
                                                            $arraySearchKey = array_search($fieldsValue['title'], array_column($extraFields, 'title'));
                                                            if($extraFields[$arraySearchKey]['title'] != $fieldsValue['title']) {
                                                                return Response::json(['status' => 'error', 'result' => 'field '.$fieldsValue['title'].' does not exists']);
                                                            }
                                                        }
                                                    }
                                                } if(isset($fieldsValue['type']) && $fieldsValue['type'] != '' && $fieldsValue['type'] == 'droplist') {
                                                    if(!isset($fieldsValue['options']) || empty($fieldsValue['options'])) {
                                                        return Response::json(['status' => 'error', 'result' => 'options should not be empty']);
                                                    }
                                                    if(isset($fieldsValue['options'])) {
                                                        if(!is_array($fieldsValue['options'])) {
                                                            return Response::json(['status' => 'error', 'result' => 'options should be array']);
                                                        }
                                                        if($utility->arrayIsIndexedAssociativeOrMulti($fieldsValue['options']) == true) {
                                                            return Response::json(['status' => 'error', 'result' => 'options should be sequential array']);
                                                        } else {
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        return Response::json(['status' => 'error', 'result' => 'user_fields information is invalid format, JSON is required']);
                    }
                }
                $where['user_id'] = $user_id;

                if(isset($input['user_fields']) && !empty($input['user_fields'])) {
                    $userFields = json_decode($input['user_fields'], true);
                    if(!empty($userFields)) {
                        $extraFieldsData = Userinfo::where('user_id', $user_id)->select('extra_fields', 'extra_fields_data')->first();
                        $extraFieldsJsonDecode = (isset($extraFieldsData['extra_fields']) && !empty($extraFieldsData['extra_fields']) ? json_decode($extraFieldsData['extra_fields'], true) : []);
                        $extraFieldsDataJsonDecode = (isset($extraFieldsData['extra_fields_data']) && !empty($extraFieldsData['extra_fields_data']) ? json_decode($extraFieldsData['extra_fields_data'], true) : []);
                        if(isset($userFields[0]['fields']) && !empty($userFields[0]['fields'])) {
                            foreach($userFields[0]['fields'] as $userFieldsKey => $userFieldsValue) {
                                if(!empty($extraFieldsData['extra_fields'])) {
                                    if(!empty($extraFieldsDataJsonDecode) && !empty($extraFieldsJsonDecode)) {
                                        //if(isset($userFieldsValue['title']) && $userFieldsValue['title'] != '' && isset($userFieldsValue['value']) && $userFieldsValue['value'] != '') {
                                        if(isset($userFieldsValue['title']) && $userFieldsValue['title'] != '') {
                                            $arraySearchKey = array_search($userFieldsValue['title'], array_column($extraFieldsJsonDecode, 'title'));
                                            if(isset($extraFieldsJsonDecode[$arraySearchKey]['title'])) {
                                                $extraFieldsDataJsonDecode[$userFieldsValue['title']] = $userFieldsValue['value'];
                                                if(isset($extraFieldsJsonDecode[$arraySearchKey]['val'])) {
                                                    $extraFieldsJsonDecode[$arraySearchKey]['val'] = $userFieldsValue['value'];
                                                } elseif(!isset($extraFieldsJsonDecode[$arraySearchKey]['val'])) {
                                                    $extraFieldsJsonDecode[$arraySearchKey]['val'] = $userFieldsValue['value'];
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            Userinfo::where('user_id', $user_id)->update(['extra_fields_data' => json_encode($extraFieldsDataJsonDecode), 'extra_fields' => json_encode($extraFieldsJsonDecode)]);
                        }
                    }
                }
                if(isset($input['full_name']) && $input['full_name'] != "") {
                    $userArray['full_name'] = $input['full_name'];
                } if(isset($input['company'])) {
                    $userArray['company'] = $input['company'];
                } if(isset($input['reg_no'])) {
                    $userArray['reg_no'] = $input['reg_no'];
                } if(isset($input['phone_no'])) {
                    $userArray['telephone'] = $input['phone_no'];
                } if(isset($input['address'])) {
                    $userArray['address'] = $input['address'];
                } if(isset($input['city'])) {
                    $userArray['city'] = $input['city'];
                } if(isset($input['post_code'])) {
                    $userArray['post_code'] = $input['post_code'];
                } if(isset($input['company'])) {
                    $userArray['company'] = $input['company'];
                } if(!empty($userArray)) {
                    $affected_rows = $utility->updateItem("users_info", $where, $userArray);
                    if($affected_rows) {
                        $utility->createIntercomUser($user_id);
                        return Response::json(['status' => 'success', 'result' => 'Account updated successfully']);
                    } else {
                        return Response::json(['status' => 'error', 'message' => 'Nothing to update']);
                    }
                } else {
                    //change the message because now we are updating the user custom fields
                    return Response::json(['status' => 'success', 'result' => 'Account updated successfully']);
                    //return Response::json(['status' => 'error', 'message' => 'Nothing to update']);
                }
            } else {
                return Response::json(['status'=>'error','result' => 'Invalid access token']);
            }
        }
    }

    public function postCreateaccount(){
        $gridMailer = new Gridmailer();
        $data = Input::all();
        $utility = new Utility;
        $domain = asset('/');
        $emailBody = '';

        if(!isset($data['email']) || $data['email'] == "") {
            return Response::json(['status' => 'error', 'message' => 'email is missing']);
        } elseif(!filter_var($data['email'], FILTER_VALIDATE_EMAIL)) {
            return Response::json(['status' => 'error', 'message' => 'Invalid Email']);
        } elseif(!isset($data['password']) || $data['password'] == "") {
            return Response::json(['status' => 'error', 'message' => 'password is missing']);
        } if(!isset($data['full_name']) || $data['full_name'] == "") {
            return Response::json(['status' => 'error', 'message' => 'full_name is missing']);
        } elseif(!isset($data['company']) || $data['company'] == "") {
            return Response::json(['status' => 'error', 'message' => 'company name is missing']);
        } elseif(isset($data['password']) && $data['password'] != '' && strlen($data['password']) < 8) {
            return Response::json(['status'=>'error','message'=>'password length must be 8 characters']);
        } elseif(isset($data['password']) && $data['password'] != '' && !preg_match('/^(?=.*\d)(?=.*[a-zA-Z])\S{8,20}$/', $data['password'])) {
            return Response::json(['status'=>'error','message'=>'password must contain numeric and alphabetic characters']);
        } else {
            
            $email = $data['email'];
            list(,$checkEmail) = explode('@',$email);
            $disposables = array('yopmail.com', 'maildrop.cc', 'mailinator.com');
            $valid = (in_array($checkEmail, $disposables) ? false : $email);
            if($valid === false) {
                return Response::json(['status'=>'error','message'=>'Invalid Email']);
            }

            $domain = substr(strrchr(trim($data['email']), "@"), 1);
            $restrictedDomain = DB::table('restrict_domains')->where(['domain' => $domain, 'status' => 1])->count();
            if($restrictedDomain > 0) {
                return Response::json(['status' => 'error', 'message' => 'You can not register with this email.']);
            }
            $userController = new userController();
            $email = $data['email'];
            $password = $data['password'];
            $full_name = isset($data['full_name']) ? $data['full_name'] :'';
            $company = isset($data['company']) ? $data['company'] :'';
            $business = isset($data['business']) ? $data['business'] :'';
            $phone_no = isset($data['phone_no']) ? $data['phone_no'] :'';
            $parentId = 0;
            $status = 0;//$status = 1;
            $activation_date = 0;//date("Y-m-d H:i:s");
            $random_no = uniqid();//0;
            
            if(isset($data['user_fields']) && !empty($data['user_fields'])) {
                if($this->is_JSON($data['user_fields'])) {
                    $userFields = json_decode($data['user_fields'], true);
                    if(!empty($userFields)) {
                        foreach($userFields as $userFieldsKey => $userFieldsValue) {
                            if(!empty($userFieldsValue['fields'])) {
                                if(!is_array($userFieldsValue['fields'])) {
                                    return Response::json(['status' => 'error', 'result' => 'fields should be array']);
                                } else {
                                    if(!isset($userFieldsValue['fields']) || empty($userFieldsValue['fields'])) {
                                        return Response::json(['status' => 'error', 'result' => 'fields information is missing']);
                                    } elseif(isset($userFieldsValue['fields']) && !empty($userFieldsValue['fields'])) {
                                        foreach($userFieldsValue['fields'] as $fieldsKey => $fieldsValue) {
                                            if(!isset($fieldsValue['title'])) {
                                                return Response::json(['status' => 'error', 'result' => 'Key must be title']);
                                            } if(!isset($fieldsValue['type'])) {
                                                return Response::json(['status' => 'error', 'result' => 'Key must be type']);
                                            } /* if(isset($fieldsValue['type']) && $fieldsValue['type'] != '') {
                                                $checkExtraFields = Userinfo::where('user_id', $user_id)->select('extra_fields')->first();
                                                if(isset($checkExtraFields['extra_fields']) && !empty($checkExtraFields['extra_fields'])) {
                                                    $extraFields = json_decode($checkExtraFields['extra_fields'], true);
                                                    if(!empty($extraFields)) {
                                                        $arraySearchKey = array_search($fieldsValue['title'], array_column($extraFields, 'title'));
                                                        if($extraFields[$arraySearchKey]['title'] == $fieldsValue['title']) {
                                                            return Response::json(['status' => 'error', 'result' => 'field '.$fieldsValue['title'].' already exist']);
                                                        }
                                                    }
                                                }
                                            } */ if(isset($fieldsValue['type']) && ($fieldsValue['type'] != 'text' && $fieldsValue['type'] != 'datepicker' && $fieldsValue['type'] != 'droplist')) {
                                                return Response::json(['status' => 'error', 'result' => 'Type could be text, datepicker or droplist']);
                                            } if(isset($fieldsValue['type']) && $fieldsValue['type'] != '' && $fieldsValue['type'] == 'droplist') {
                                                if(!isset($fieldsValue['options']) || empty($fieldsValue['options'])) {
                                                    return Response::json(['status' => 'error', 'result' => 'options should not be empty']);
                                                }
                                                if(isset($fieldsValue['options'])) {
                                                    if(!is_array($fieldsValue['options'])) {
                                                        return Response::json(['status' => 'error', 'result' => 'options should be array']);
                                                    }
                                                    if($utility->arrayIsIndexedAssociativeOrMulti($fieldsValue['options']) == true) {
                                                        return Response::json(['status' => 'error', 'result' => 'options should be sequential array']);
                                                    } else {
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                } else {
                    return Response::json(['status' => 'error', 'result' => 'user_fields information is invalid format, JSON is required']);
                }
            }

            //new code starting
            $admin_data = '';
            if(isset($data['access_token']) && $data['access_token'] != '') {
                $admin_id = $utility->getUserIdByAuthToken($data['access_token']);
                $admin_data = User::where('id', $admin_id)->where('super_admin', 1)->where('is_active', 1)->count();
                if(!$admin_data) {
                    return Response::json(['status'=>'error','result' => 'Super admin access_token is not valid']);
                }
                $userid = $userController->createSuperUser($parentId, 1, date("Y-m-d H:i:s"), $random_no, $email, $password, $full_name, $company, $business, $phone_no, $linkedin_id='', $google_id='', $admin_id, 'en', '');
                $package = (isset($data['package']) && $data['package'] != '' ? $data['package'] : '');
                Userinfo::where('user_id', $userid)->update(['package' => $package]);
                settings::where('user_id', $userid)->update(['sign_bankid' => 1]);
                $superAccessToken = User::where('id', $userid)->pluck('super_access_token');
                $this->copyTemplateForNewInvitedUsers($superAccessToken);
                //if(($_SERVER["HTTP_HOST"] == 'beta.simplesign.io' && $admin_id == 13180) || ($_SERVER["HTTP_HOST"] == 'acceptance.simplesign.io' && $admin_id == 15341)) {
                if($admin_id == 426) {
                    //426
                    $planId = 17;
                    $totalUsers = 100;
                    $totalSignatures = 1200;
                    $customPlanPriceV2 = 180;
                    $customPlanName = 'Prek';
                    $dateOnly = date('Y-m-d');
                    $dateAndTimeOnly = date('Y-m-d H:i:s');
                    $paymentObject = new paymentController();
                    $billingController = new billingController();
                    $totalSMS = $autofillSignatures = $status = 0;
                    $customPlanPriceV2WithVat = $customPlanPriceV2;
                    $customPlanDescription = 'This is prek description';
                    $userStripeCustomerId = User::where('id', $userid)->pluck('stripe_customer_id');
                    $planInfo = json_encode(['plan_name' => $customPlanName, 'plan_desc' => $customPlanDescription]);
                    $billingPeriodYearlyV2 = $paymentMethodInvoiceV2 = $subscribedBy = $forcePayment = $orderType = 1;
                    $stripe_customer_id = $billingController->createStripeCustomer(['user_id' => $userid, 'stripe_customer_id' => $userStripeCustomerId]);
                    $paymentPlanDetails = Paymentplans::where(['product_code' => 'cust-plan'])->select('yearly_stripe_plan_id', 'monthly_stripe_plan_id', 'yearly_vat_stripe_plan_id', 'monthly_vat_stripe_plan_id')->first();
                    
                    $getUserInfoData = Userinfo::where('user_id', $userid)->select('vat_status')->first();
                    $stripePlanId = ($billingPeriodYearlyV2 == 1 ? $paymentPlanDetails->yearly_stripe_plan_id : $paymentPlanDetails->monthly_stripe_plan_id);
                    if($getUserInfoData['vat_status'] != 2) { // if vat applied
                        $stripePlanId = ($billingPeriodYearlyV2 == 1 ? $paymentPlanDetails->yearly_vat_stripe_plan_id : $paymentPlanDetails->monthly_vat_stripe_plan_id);
                        $percentage = ($customPlanPriceV2*25)/100;
                        $customPlanPriceV2WithVat = $customPlanPriceV2+$percentage;                        
                    }
                    $paymentOrdersData = [
                        'subscribed_by' => $subscribedBy,
                        'force_payment' => $forcePayment,
                        'order_type' => $orderType,
                        'status' => $status,
                        'stripe_plan_id' => $stripePlanId,
                        'yearly_or_monthly' => $billingPeriodYearlyV2,
                        'total_signatures' => $totalSignatures,
                        'autofill_signatures' => $autofillSignatures,
                        'total_users' => $totalUsers,
                        'total_sms' => $totalSMS,
                        'user_id' => $userid,
                        'plan_id' => $planId,
                        'paid_amount' => $customPlanPriceV2WithVat,
                        'paid_amount_without_vat' => $customPlanPriceV2,
                        'plan_start_date' => $dateOnly,
                        //'start_date_admin' => $start_date_admin,
                        'plan_info' => $planInfo,
                        'payment_type' => $paymentMethodInvoiceV2,
                        'created_at' => $dateAndTimeOnly
                    ];
                    $paymentOrderId = Paymentorders::insertGetId($paymentOrdersData);
                    //7441
                    //getSuperadmins
                    //$oldOrder = Paymentorders::where(['user_id' => $userid, 'force_payment' => 1, 'plan_id' => $planId])->select('id')->first();

                    $updateLogin = ['payment_version' => 2, 'stripe_admin' => 0];//, 'is_paid' => 0
                    //if($paymentMethodInvoiceV2 == 1) {
                        //$updateLogin['is_paid'] = 1;
                    //}
                    User::where('id', $userid)->update($updateLogin);

                    //DB::table('payment_orders')->where('id', $old_order->id)->where('user_id', $userid)->update($order_data);
                    //if($oldOrder) {
                        //$oldOrder['id'];
                        //Paymentorders::insertGetId($paymentOrdersData);
                    //}

                    //If plan changed to custom plan, first Time
                    if($paymentMethodInvoiceV2 == 1) {
                        $userPlans["user_id"] = $userid;
                        $userPlans["order_id"] = $paymentOrderId;
                        $userPlans["plan_id"] = $planId;
                        $userPlans["total_users"] = $totalUsers;
                        $userPlans["subscribed_by"] = $subscribedBy;
                        $userPlans["start_date"] = $dateAndTimeOnly;
                        $userPlans["plan_total_price"] = $customPlanPriceV2;
                        $userPlans["plan_total_price_without_vat"] = $customPlanPriceV2;
                        $userPlans["stripe_plan_id"] = $stripePlanId;
                        $userPlans["billing_period"] = $billingPeriodYearlyV2;
                        $userPlans["payment_type"] = $paymentMethodInvoiceV2;
                        //$userPlans["start_date_admin"] = $start_date_admin;
                        $userPlans["end_date"] = date('Y-m-d', strtotime($paymentOrdersData['created_at']. ' +1 year'));
                        $userPlans["autofill_signatures"] = $autofillSignatures;
                        $userPlans["plan_info"] = $planInfo;
                        $userPlans["created_at"] = $dateAndTimeOnly;
                        $userPlans["plan_start_date"] = $dateOnly;
                        $checkUserPlans = Userplans::where('user_id', $userid)->count();
                        if($checkUserPlans) {
                            Userplans::where('user_id', $userid)->update($userPlans);
                        } else {
                            Userplans::insertGetId($userPlans);
                        }
                        User::where('id', $userid)->update(['total_remaing_sms' => 0, 'users_signatures' => $totalSignatures, 'total_users' => $totalUsers]);//, 'is_paid' => 1
                        Paymentorders::where('id', $paymentOrderId)->update(['force_payment' => 0, 'status' => 1]);
                        if($totalSignatures > 0) {
                            $utility->sendpendingVerification($userid);
                        }
                        //must check because of variables are used in strange way
                        $paymentObject->anyAddlogs($userid, 'plan', ['message' => 'assign plan to user by admin (type:invoice)'], $userPlans["plan_id"], $userPlans["order_id"]); 
                    }
                }
            } else {
                $userid = $userController->createUser($parentId, $status, $activation_date, $random_no, $email, $password, $full_name, $company, $business, $phone_no, $linkedin_id='', $google_id='');

                if(isset($data['user_fields']) && !empty($data['user_fields'])) {
                    $userFieldsResponse = $userFieldData = [];
                    $userFields = json_decode($data['user_fields'], true);
                    if(!empty($userFields)) {
                        $getDataBaseExtraFields = Userinfo::where('user_id', $userid)->select('extra_fields')->first();
                        if(isset($getDataBaseExtraFields['extra_fields']) && !empty($getDataBaseExtraFields['extra_fields'])) {
                            $extraFields = json_decode($getDataBaseExtraFields['extra_fields'], true);
                            if(!empty($extraFields)) {
                                foreach($extraFields as $extraFieldsKey => $extraFieldsVal) {
                                    array_push($userFields[0]['fields'], $extraFieldsVal);
                                }
                            }
                        }
                        
                        if(isset($userFields[0]['fields']) && !empty($userFields[0]['fields'])) {
                            foreach($userFields[0]['fields'] as $fieldsKey => $fieldsValue) {
                                $userFieldsDropList = [];
                                if(isset($fieldsValue['type']) && $fieldsValue['type'] == 'droplist') {
                                    if(isset($fieldsValue['options']) && !empty($fieldsValue['options'])) {
                                        foreach($fieldsValue['options'] as $optionsKey => $optionsValue) {
                                            array_push($userFieldsDropList, $optionsValue);
                                        }
                                    }
                                }
                                if(!empty($userFieldsDropList)) {
                                    $userFieldsArray = ['title' => $fieldsValue['title'], 'type' => $fieldsValue['type'], 'options' => $userFieldsDropList];
                                    if(isset($fieldsValue['value']) && $fieldsValue['value'] != '') {
                                        $userFieldsArray['val'] = $fieldsValue['value'];
                                    }
                                } else {
                                    $userFieldsArray = ['title' => $fieldsValue['title'], 'type' => $fieldsValue['type']];
                                    if(isset($fieldsValue['value']) && $fieldsValue['value'] != '') {
                                        $userFieldsArray['val'] = $fieldsValue['value'];
                                    }
                                }
                                array_push($userFieldsResponse, $userFieldsArray);
                                if(isset($fieldsValue['title']) && $fieldsValue['title'] != '' && isset($fieldsValue['value'])) {
                                    $userFieldData[$fieldsValue['title']] = (isset($fieldsValue['value']) && !empty($fieldsValue['value']) ? $fieldsValue['value'] : '');
                                }
                            }
                        }
                    }
                    if(!empty($userFieldsResponse)) {
                        //comment this line for testing now
                        Userinfo::where('user_id', $userid)->update(['extra_fields' => json_encode($userFieldsResponse)]);
                        if(!empty($userFieldData)) {
                            //comment this line for testing now
                            Userinfo::where('user_id', $userid)->update(['extra_fields_data' => json_encode($userFieldData)]);
                        }
                    }
                }
            }
            //new code ending

            //$userid = $userController->createUser($parentId,$status,$activation_date,$random_no,$email,$password,$full_name,$company,$business,$phone_no,$linkedin_id='',$google_id='');
            if(isset($userid) && $userid > 0) {
                $usersData = User::where('id', $userid)->select('email', 'password', 'super_access_token')->first();
                if(isset($admin_data) && $admin_data != '') {
                    //$usersData = User::where('id', $userid)->select('super_access_token')->first();
                    $utility->createIntercomUser($userid);
                    return Response::json(['status' => 'success', 'result' => 'Account created successfully', 'account_id' => $userid, 'access_token' => $usersData['super_access_token']]);
                } else {
                    //Email Sending code START
                    //$activateURL = $domain.'home/verifyaccount/'.$userid.'/'.$random_no;
                    $activateURL = asset('/').'home/redirectdashboard/'.$usersData['email'].'/'.$usersData['password'].'/'.'1';
                    $template = '<table width="70%" border="0" cellpadding="0" cellspacing="0" style="text-align:center; margin:auto;">
                        <tr>
                        <td><img src="https://esign.simplesign.io/assets/images/new_logo.png" width="250"></td>
                        </tr>
                    </table>

                    <table width="70%" border="0" cellpadding="0" cellspacing="0" style="text-align:center; margin:auto; border: 3pt solid #e2e2e2; padding-top: 30px; padding-bottom: 30px; margin-top: 1%;">
                        <tr>
                        <td><p style="font-size: 14px; font-family: Open Sans, sans-serif; color: #656565; margin-top: 0;">You have created an account with SimpleSign E-sign.<br>Click the button below to activate your account</p></td>
                        </tr>
                        <tr>
                        <td><div style="font-size: 16px; padding-top: 2px; margin-top: 14px; width: 176px; height: 54px; background-color: #4da6f3; margin: auto; display: inline-table; cursor:pointer;"><a style=" text-decoration: none;font-family: open sans , sans-serif;color: #fff;margin: 0;vertical-align: middle;display: table-cell;" href = "'.$activateURL.'"><p>Verify account</p></a></div></td>
                        </tr>
                    </table>

                    <table width="70%" border="0" cellpadding="0" cellspacing="0" style="text-align: center; margin: auto; border: 3pt solid #e2e2e2; border-top: none; padding-top: 20px; padding-bottom: 20px;">
                        <tr>
                        <td><a href="https://simplesign.io" style="text-decoration:none; font-size: 14px; color: #656973;"><p style="font-family: Open Sans, sans-serif; color: #656565; margin: 0;">E-signing powered by <span style="color: #4da6f3;">Simplesign</span></p></a></td>
                        </tr>
                    </table>';

                    $myemail['from_email'] = 'noreply@simplesign.io';
                    $myemail['from_name'] = 'Simple Sign';
                    $myemail['subject'] = 'Please activate your account';
                    $myemail['body'] = $template;
                    $myemail['to_email'] = trim($email);
                    $myemail['reply_to'] = 'noreply@simplesign.io';
                    $myemail['to_name'] = '';
                    $myemail['bodyplain'] = 'Please activate your account';
                    $mailsend = $gridMailer->sendGridEmail($myemail);
                    $utility->createIntercomUser($userid);
                    //Email Sending code END
                    return Response::json(['status' => 'success', 'result' => 'Account created successfully, check your email for activation', 'account_id' => $userid]);
                }
            } else {
                return Response::json(['status' => 'error', 'message' => 'Email already exists']);
            }
        }
    }

    public function postLoginaccount(){
        $input = Input::all();
        $utility = new Utility;
        $fromWordpress = (isset($input['fromwp']) && $input['fromwp'] !='' ? true : false);
        $fromWpAjax = (isset($input['fromwpajax']) && $input['fromwpajax'] !='' ? true : false);
        if(Session::has('wp_login_error'))Session::forget('wp_login_error');
        if(!isset($input['email']) || $input['email'] == ""){
            return Response::json(['status'=>'error','message'=>'email is missing']);
        }else if(!isset($input['password']) || $input['password'] == ""){
            return Response::json(['status'=>'error','message'=>'password is missing']);
        }else{
            $email = $input['email'];
            $password = hash('sha256', $input['password']);
            $encrypted_email = Tcrypt::encrypter($email);

            $whereRaw = "(";
            //$whereRaw .= 'CAST(AES_DECRYPT(`simplesign_users_login`.`email`,\''.env('ENCRYPT_KEY').'\', \''.env('ENCRYPT_IV').'\') AS CHAR) = \''.$email.'\'';
            $whereRaw .= 'CAST(AES_DECRYPT(`simplesign_users_login`.`email`,\''.env('ENCRYPT_KEY').'\', \''.env('ENCRYPT_IV').'\') AS CHAR) = ?';
            $whereRaw .= ")";
            DB::statement(' SET block_encryption_mode = \''.env('ENCRYPT_CIPHER').'\'');

            $CheckEMail = User::whereRaw($whereRaw,[$email])->count();
            if(!$CheckEMail){
                return Response::json(['status'=>'error','message'=>'Email does not exist']);
            }
            //$user = User::where(['email'=> $encrypted_email, 'password' => $password])->where('is_active', '1')->first();
            $user = User::where(['password' => $password])->whereRaw($whereRaw,[$email])->first();
            
            if( $user && $user->is_active == 1 ){

                $data=$this->setAuth($user->id);
                $utility->AddLastLoginLog('login', $input['password']);//Adding row to login logs
                if(isset($data->account_type) && $data->account_type == 1){
                    $plan_type='Business Standard';
                }else if(isset($data->account_type) && $data->account_type == 2){
                    $plan_type='Business Flex';
                }else{
                    $plan_type='Free';
                }
                
                if(isset($data->is_paid) && $data->is_paid == 1){
                    $is_paid='paid';
                }else{
                    $is_paid='Free';
                }

                if(isset($input['fromExternal'])) {
                    $Result['id'] = $data->id;
                    $Result['email'] = $email;
                    $Result['access_token'] = $data->super_access_token;
                } else {
                    $Result['id'] = $data->id;
                    $Result['email'] = $email;
                    $Result['created_date'] = $data->created_date;
                    $Result['activation_date'] = $data->activation_date;
                    $Result['is_active'] = $data->is_active;
                    $Result['access_token'] = $data->super_access_token;
                    if(!$utility->isSuperuser($data->id)) {
                        $Result['is_paid'] = $is_paid;
                    }
                    $Result['total_signatures'] = $data->extra_signature + $data->monthly_signature;
                    $Result['total_sms'] = $data->total_remaing_sms;
                    $Result['account_type'] = $plan_type;
                    if($utility->isSuperuser($data->id)) {
                        $Result['total_signatures'] ='Unlimited';
                        $Result['total_sms'] = 'Unlimited';
                        $Result['account_type'] = 'Super User';
                    }
                }
 
                /*if($fromWordpress && !$fromWpAjax){
                    return Redirect::to('https://esign.simplesign.io/home/start/dashboard/0/0');
                }else{
                    return Response::json(['status'=>'success','Result'=>$Result]);
                }*/

                return Response::json(['status'=>'success','Result'=>$Result]);
                
            }else if( $user && $user->is_active == 0 ){
                return Response::json(['status'=>'error','message'=>'Your account is inactive, Contact support.']);    
            }else if( $user && $user->is_active == -1 ){
                return Response::json(['status'=>'error','message'=>'Your Simplesign account is inactive, Contact support.']);    
            }
            else{
                    /*if($fromWordpress && !$fromWpAjax){
                        return Redirect::back();
                    }else{
                        return Response::json(['status'=>'error','message'=>'Email or password is incorrect.']);    
                    }*/

                     return Response::json(['status'=>'error','message'=>'Email or password is incorrect.']);    
                }
            }
    }


    /**
     * 
     * @return type 
     * update sub user account from api and simple sign
     */
    public function putUpdatesubuser()
    {
        $utility = new Utility();
        $data = Input::all();
        if(isset($data['access_token'])){
                $access_token = $data['access_token'];
        }else{
                return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
        
        if(isset($data['user_id'])){
            $parent_id = $utility->getUserIdByAuthToken($access_token);
            $update = false;
            // update user record from simple sign api
            $userParenid = $utility->getParent($data['user_id']);
            if($userParenid == $parent_id){
                if(isset($data['full_name'])){
                    $where['user_id'] = $data['user_id'];
                    $userArray['full_name'] = $data['full_name'];
                    $update = $utility->updateItem("users_info",$where,$userArray);
                }
                if((isset($data['email']) && filter_var($data['email'], FILTER_VALIDATE_EMAIL))){
                    $email = Tcrypt::encrypter($data['email']);
                    $where_email['email'] = $email;
                    $userdata =  $utility->getItem("users_login", $where_email);

                    if(empty($userdata)){
                        $userEmail['email'] = $email;
                    }else{
                        return Response::json(['status'=>'error','result' => 'email already exist..']);
                    }
                }
                
                if(isset($data['password']) && !empty($data['password'])){
                    $password = Tcrypt::encrypter($data['password']);
                    $userEmail['password'] = $password;
                    
                }
                if(!empty($userEmail)){
                    $where_id['id'] = $data['user_id'];
                    $update = $utility->updateItem("users_login",$where_id,$userEmail);
                }
                //Updating Intercom user
                $utility->CreateUpdateIntercomUser($data['user_id']);
                if($update){
                    return Response::json(['status'=>'success','result' => 'User updated']);
                }else{
                    return Response::json(['status'=>'error','result' => 'Nothing to update']);
                }
            }else{
                return Response::json(['status'=>'error','result' => "You can't update this subuser"]);
            }
            
        }else{
            return Response::json(['status'=>'error','result' => 'user_id is missing']);
        }
    }

    /*Update Recipient Information*/
    public function putUpdaterecipient()
    {
        $data = Input::all();
        $utility = new Utility();
        $old_recid = 0;
        if(isset($data['access_token'])){
                $access_token = $data['access_token'];
        }else{
                return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
        if(isset($data['recipient_id']) && !empty($data['recipient_id'])){
                $recipient_id = $data['recipient_id'];
        }else{
                return Response::json(['status'=>'error','result' => 'recipient_id is missing']);
        }
        $user_id = $utility->getUserIdByAuthToken($access_token);

        
        if($user_id > 0 ){
                $where['id'] = $recipient_id;
                $where['registerby'] = $user_id;
                if(isset($data['full_name'])){
                    $recArray['full_name'] = Tcrypt::encrypter($data['full_name']);
                }
                if(isset($data['email'])){
                    $recArray['email'] = Tcrypt::encrypter($data['email']);
                }
                if(isset($data['company'])){
                    $recArray['company'] = Tcrypt::encrypter($data['company']);
                }
                if(isset($data['mobile'])){
                    $recArray['mobile'] = $data['mobile'];
                }
                if(isset($data['address'])){
                    $recArray['address'] = $data['address'];
                }
                if(isset($data['city'])){
                    $recArray['city'] = $data['city'];
                }
                if(isset($data['extra_fields'])){
                    $recArray['extra_fields'] = $data['extra_fields'];
                }
                if(isset($data['zip'])){
                    $recArray['zip'] = $data['zip'];
                }
                if(isset($data['reg_no'])){
                    $recArray['reg_no'] = $data['reg_no'];
                }
                if(!empty($recArray)){
                    $addnewrec = $utility->updateItem("customers",$where,$recArray);
                }else{
                    return Response::json(['status'=>'success','result' => 'Nothing to update']);
                }
            return Response::json(['status'=>'success','result' => 'Recipient updated successfully']);
        }else{
            return Response::json(['status'=>'error','result' => 'invalid access token']);
        }

    }

    //Get Recipients
    public function getRecipients() {
        $data = Input::all();
        $utility = new Utility();
        if(isset($data['access_token'])) {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
        $user_id = $utility->getUserIdByAuthToken($access_token);

        $getRecipients = Recipient::where('registerby', $user_id)->where('from_user_api', 0)->orderBy('id', 'desc')->get()->toArray();

        if(count($getRecipients)) {
            foreach($getRecipients as $key => $value) {
                $recId = $value['id'];
                $getRecipients[$key]['email'] = ($getRecipients[$key]['email'] != '' ? Tcrypt::decrypter($value['email']) : '');
                $getRecipients[$key]['full_name'] = ($getRecipients[$key]['full_name'] != '' ? Tcrypt::decrypter($value['full_name']) : '');
                $getRecipients[$key]['company'] = ($getRecipients[$key]['company'] != '' ? Tcrypt::decrypter($value['company']) : '');
                $recTotal = Offersentdetails::where('customer_id', $recId)->count();
                $getRecipients[$key]['totalContracts'] = $recTotal;
            }

            return Response::json(['status' => 'success', 'result' => $getRecipients]);
        } else {
            return Response::json(['status' => 'error', 'result' => 'no records found']);
        }
    }

    //Recipient Information
    public function getRecipientinfo(){
        $data = Input::all();
        $utility = new Utility();
        if(isset($data['access_token'])){
                $access_token = $data['access_token'];
        }else{
                return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
        $user_id = $utility->getUserIdByAuthToken($access_token);

        $isresend = (isset($data['isresend']) && $data['isresend'] == 1 ? true : false);
        $recipient_details = '';
       
        
        if($user_id > 0){
            if(isset($data['recipient_id']) && !empty($data['recipient_id']) && !$isresend){
                $rowid = $data['recipient_id'];
            }else if( isset($data['recipient_id']) && !empty($data['recipient_id']) && $isresend){
                $recipient_info = json_decode($data['recipient_id'],true);
                $recipient_details = json_decode($recipient_info['user_details'],true);
                $recipient_details['email'] = preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $recipient_details['email']);
                $rowid = $recipient_info['rec_id'];
                $recipient_details['id'] = $rowid;
            }else{
                return Response::json(['status'=>'error','result' => 'recipient_id is missing']);
            }
        $getRecipients = Recipient::where('id', $rowid)
                                    ->where('registerby', $user_id)
                                    ->first();
            if(!empty($getRecipients))
            {
                $getRecipients['email'] = ($getRecipients['email']!=''?Tcrypt::decrypter($getRecipients['email']):'');
                //Removing Special Characters from Email
                $getRecipients['email'] = preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $getRecipients['email']);
                $getRecipients['company'] = ($getRecipients['company']!=''?Tcrypt::decrypter($getRecipients['company']):'');
                $getRecipients['full_name'] = ($getRecipients['full_name']!=''?Tcrypt::decrypter($getRecipients['full_name']):'');
                return Response::json(['status'=>'success','result' => $getRecipients]);
            }else if(empty($getRecipients) && $isresend && $recipient_details != ''){
                //if recipient not found when resend contract
                return Response::json(['status'=>'success','result' => $recipient_details]);
            }else
            {
                return Response::json(['status'=>'error','result' => 'no records found']);
            }
        }else{
                return Response::json(['status'=>'error','result' => 'invalid access_token']);
        }
    }

    //Account Information
    public function getAccountinfo()
    {
        $data = Input::all();
        if(isset($data['access_token'])){
                $access_token = $data['access_token'];
        }else{
                return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
        $utility = new Utility();
        $user_id = $utility->getUserIdByAuthToken($access_token);
        $super_productName = '';//product name of Super admin, when there is superuser
        
        //condition if Parent else Sub-user
        if($utility->isParent($user_id) == 1){
            $userInfo=Userinfo::where('user_id', $user_id)->first();
                $userInfo = DB::table('users_login')
                ->leftJoin('users_info', 'users_info.user_id', '=', 'users_login.id')->where('users_login.id', $user_id)
                ->select('users_login.email',
                         'users_info.*','users_login.parent_id','users_login.super_user','users_login.super_admin'
                         )->first();
                $userInfo->email = Tcrypt::decrypter($userInfo->email);
            //if Superuser, Get Super Admin Product name START
            $super_productName = $utility->getProductname($user_id);
            //if Superuser, Get Super Admin Product name END
        }else{
            $parent_id = $utility->getParent($user_id);
            $companyInfo = Userinfo::where('user_id', $parent_id)
                                  ->select(
                                           'id',
                                           'company',
                                           'reg_no',
                                           'address',
                                           'post_code',
                                           'city',
                                           'country',
                                           'industry',
                                           'telephone'
                                    )->first();

            $userInfo = DB::table('users_login')
            ->leftJoin('users_info', 'users_info.user_id', '=', 'users_login.id')->where('users_login.id', $user_id)
            ->select('users_login.email',
                     'users_info.*','users_login.parent_id'
                     )->first();

            //if Superuser, Get Super Admin Product name START
            $super_productName = $utility->getProductname($parent_id);
            //if Superuser, Get Super Admin Product name END

            $userInfo->email = Tcrypt::decrypter($userInfo->email);
            $userInfo->company = $companyInfo['company'];
            $userInfo->reg_no = $companyInfo['reg_no'];
            $userInfo->address = $companyInfo['address'];
            $userInfo->post_code = $companyInfo['post_code'];
            $userInfo->city = $companyInfo['city'];
            $userInfo->country = $companyInfo['country'];
            $userInfo->industry = $companyInfo['industry'];
            //$userInfo->telephone = $companyInfo['telephone'];
            $userInfo->telephone = $userInfo->telephone;
        }
        $userInfo->product_name = $super_productName;
        unset($userInfo->id);
        return Response::json([
                                'status'        =>  'success',
                                'result'            =>  $userInfo
                              ]);
    }

    public function getAccount() {
        $data = Input::all();
        $utility = new Utility;
        $domain = asset('/');

        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }

        $user_id = $utility->getUserIdByAuthToken($access_token);
        if($user_id > 0) {
            $responseArray = [];
            if($utility->isParent($user_id) == 1) {
                $userRecord = User::where('users_login.id', $user_id)->join('users_info', 'users_login.id', '=', 'users_info.user_id')->select('users_login.id', 'users_info.full_name', 'users_login.email', 'users_login.is_active', 'users_login.is_paid', 'users_login.monthly_signature', 'users_login.user_permissions_level', 'users_login.super_access_token')->first();
                
                $userRecord['email'] = trim(preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $userRecord['email']));

                $userSettings = settings::where('user_id', $user_id)->select('storage_files_limit', 'archive_permission_access')->first();
                $userRecord['user_permissions_level'] = 'A';
            } else {
                $parent_id = $utility->getParent($user_id);

                $userRecord = User::where('users_login.id', $parent_id)->join('users_info', 'users_login.id', '=', 'users_info.user_id')->select('users_login.id', 'users_info.full_name', 'users_login.email', 'users_login.is_active', 'users_login.is_paid', 'users_login.monthly_signature', 'users_login.user_permissions_level', 'users_login.super_access_token')->first();

                $userRecord['email'] = trim(preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $userRecord['email']));

                $userSettings = settings::where('user_id', $parent_id)->select('storage_files_limit', 'archive_permission_access')->first();
                if($userRecord['user_permissions_level'] == 0) {
                    $userRecord['user_permissions_level'] = 'P';
                } elseif($userRecord['user_permissions_level'] == 1) {
                    $userRecord['user_permissions_level'] = 'A';
                } elseif($userRecord['user_permissions_level'] == 2) {
                    $userRecord['user_permissions_level'] = 'E';
                }
            }

            $responseArray['account_id'] = $userRecord['id'];
            $responseArray['access_token'] = $userRecord['super_access_token'];
            $responseArray['full_name'] = $userRecord['full_name'];
            $responseArray['email_address'] = $userRecord['email'];
            $responseArray['is_locked'] = ($userRecord['is_active'] == 1 ? false : true);
            $responseArray['is_paid_ss'] = ($userRecord['is_paid'] == 1 ? true : false);
            $responseArray['is_paid_ssa'] = ($userSettings['archive_permission_access'] == 1 ? true : false);
            $responseArray['signatures_left'] = $userRecord['monthly_signature'];
            $responseArray['documents_left'] = ($userSettings['storage_files_limit'] != 0 ? $userSettings['storage_files_limit'] : 50);
            $responseArray['role_code'] = $userRecord['user_permissions_level'];

            return response()->json(['status' => 'success', 'result' => $responseArray], 200, ['Content-Type' => 'application/json; charset=UTF-8'], JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
        } else {
            return Response::json(['status'=>'error','result' => 'Invalid access_token']);
        }
    }


    /*
    *
    * get templates name
    * @return type template name
    *
    */

    public function getTemplates() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');

        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        }

        $user_id = $utility->getUserIdByAuthToken($access_token);
        $parentId = $utility->getParent($user_id);

        $pageLimit = 10;
        if(isset($data['pagelimit']) && $data['pagelimit'] != '') {
            $pageLimit = $data['pagelimit'];
            $data['page_limit'] = $pageLimit;
        } elseif(isset($data['page_limit']) && $data['page_limit'] != '') {
            $data['page_limit'] = $data['page_limit'];
            $pageLimit = $data['page_limit'];
        } /* elseif(isset($data['document_limit']) && $data['document_limit'] != '') {
            $data['pagelimit'] = $data['document_limit'];
            $pageLimit = $data['document_limit'];
        } */
        //$pageLimit = (isset($data['pagelimit']) && $data['pagelimit'] != '' ? $data['pagelimit'] : 10);
        $currentPage = (isset($data['current_page']) && $data['current_page'] != '' ? $data['current_page'] : 0);
        $skipRecords = $currentPage * $pageLimit;

        if($user_id > 0) {
            if($utility->isParent($user_id)) {
                $templates['templates'] = Offerdocs::where('user_id', $user_id)->where('offer_docs.is_saved', '1')->select('id AS template_id', 'name', 'invitation_message', 'confirmation_message')->orderBy('id', 'desc')->skip($skipRecords)->take($pageLimit)->get()->toArray();
            } else {
                //DB::enableQueryLog();
                $templates['templates'] = Offerdocs::where('offer_docs.user_id', $user_id)->where('offer_docs.is_saved', '1')->join('users_login', 'offer_docs.user_id', '=', 'users_login.id')->join('users_info', 'offer_docs.user_id', '=', 'users_info.user_id')->orWhere(function ($query) use ($parentId) {
                        $query->where('offer_docs.user_id', $parentId)->where('offer_docs.is_shareable', '1')->join('users_login', 'offer_docs.user_id', '=', 'users_login.parent_id')->join('users_info', 'users_login.parent_id', '=', 'users_info.user_id');
                })->select('offer_docs.id AS template_id', 'offer_docs.name', 'offer_docs.invitation_message', 'offer_docs.confirmation_message')->orderBy('offer_docs.id', 'desc')->skip($skipRecords)->take($pageLimit)->get()->toArray();
                //, 'users_login.parent_id', 'users_info.full_name'
                //print_r(DB::getQueryLog());
            }
            //select `simplesign_offer_docs`.`id` as `template_id`, `simplesign_offer_docs`.`name`, `simplesign_users_login`.`parent_id`, `simplesign_users_info`.`full_name`, `simplesign_offer_docs`.`invitation_message`, `simplesign_offer_docs`.`confirmation_message` from `simplesign_offer_docs` inner join `simplesign_users_login` on `simplesign_offer_docs`.`user_id` = `simplesign_users_login`.`id` inner join `simplesign_users_info` on `simplesign_offer_docs`.`user_id` = `simplesign_users_info`.`user_id` where `simplesign_offer_docs`.`user_id` = ? or (`simplesign_offer_docs`.`user_id` = ? and `simplesign_offer_docs`.`is_shareable` = ?) order by `simplesign_offer_docs`.`id` desc limit 30 offset 0

            $templates['drafts'] = Offersent::where('sender_id', $user_id)->where('offer_status', 7)->orderBy('created_date', 'desc')->select('id AS template_id', 'name', 'created_date')->skip(0)->take(3)->get()->toArray();

            foreach($templates['drafts'] as $key => $value) {
                $templates['drafts'][$key]['name'] = ($value['name'] != '' ? Tcrypt::decrypter($value['name']) : '');
            }
            //return Response::json(['status' => 'success', 'result' => $templates]);
            return response()->json(['status' => 'success', 'result' => $templates], 200, ['Content-Type' => 'application/json; charset=UTF-8'], JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }

    public function getGettemplatesscrive($accessToken='',$pageLimit=null,$currentPage=null,$templateId=null) {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');
        $access_token = '';

        if(isset($accessToken) && $accessToken != '') {
            $access_token = $accessToken;
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        }

        $user_id = $utility->getUserIdByAuthToken($access_token);
        $parentId = $utility->getParent($user_id);

        if($utility->isParent($user_id) == 1) {
            $allUserIds = $utility->getSubusers($parentId);
        } else {
            $allUserIds = [$user_id];
        }

        $getApiHitCount = Userinfo::where('user_id', $parentId)->select('hit_count')->first();
        $addupdateapiaccesslogs = $utility->addupdateapiaccesslogs($user_id, 'getGettemplatesscrive v3', $data, $getApiHitCount['hit_count']);
        if($addupdateapiaccesslogs == 'exceed') {
            $this->apiCallLimitExceedMessage = str_replace('#hitCuntNo', $getApiHitCount['hit_count'], $this->apiCallLimitExceedMessage);
            return Response::json(['status' => 'error', 'result' => $this->apiCallLimitExceedMessage]);
        }

        $offerDocs = new Offerdocs();
        if(isset($templateId) && $templateId != 0) {
            $offerDocs = $offerDocs->where('id', $templateId);
        }

        $pageLim = (isset($pageLimit) && $pageLimit != 0 ? $pageLimit : 10);
        $currPage = (isset($currentPage) && $currentPage != '' ? $currentPage : 0);
        $skipRecords = $currPage * $pageLim;

        if($user_id > 0) {
            $columns = ['id AS template_id', 'order', 'name', 'visible_name', 'recipient_language', 'due_days_new', 'reminder_days_new', 'invitation_message', 'confirmation_message', 'remember_settings', 'invitation_sms_message', 'confirmation_sms_message', 'reminder_sms_message', 'reminder_email_message', 'viewing_downloading', 'document_chat', 'is_online_contract', 'is_shareable', 'user_extended_shareable', 'user_group', 'enable_preadded', 'is_retargeting'];
            $templates = $offerDocs->whereIn('user_id', $allUserIds)->select($columns)->skip($skipRecords)->take($pageLim)->get()->toArray();
            if(!empty($templates)) {
                $allTemplates = [];
                foreach($templates as $templatesKey => $templatesValue) {
                    $templatesData = [];
                    $templatesData['template_id'] = $templatesValue['template_id'];
                    if($templatesValue['visible_name'] != '') {
                        $templatesData['visible_name'] = $templatesValue['visible_name'];
                    } elseif($templatesValue['name'] != '') {
                        $templatesData['name'] = $templatesValue['name'];
                    }

                    $templatesData['document_language'] = ($templatesValue['recipient_language'] != '' ? $utility->languageName($templatesValue['recipient_language']) : '');
                    $templatesData['due_days'] = ($templatesValue['due_days_new'] != '' ? (int)$templatesValue['due_days_new'] : '');
                    $templatesData['reminder_days'] = ($templatesValue['reminder_days_new'] != '' ? (int)$templatesValue['reminder_days_new'] : '');
                    $templatesData['invitation_message'] = ($templatesValue['invitation_message'] != '' ? $templatesValue['invitation_message'] : '');
                    $templatesData['confirmation_message'] = ($templatesValue['confirmation_message'] != '' ? $templatesValue['confirmation_message'] : '');

                    $rememberSettings = (!empty($templatesValue['remember_settings']) ? json_decode($templatesValue['remember_settings'], true) : '');
                    $templatesData['custom_sms_invitation'] = (isset($rememberSettings['custom_sms']['active_custom_sms']) && $rememberSettings['custom_sms']['active_custom_sms'] == 0 ? false : true);
                    if($templatesData['custom_sms_invitation']) {
                        $templatesData['custom_invitation_sms_message'] = ($templatesValue['invitation_sms_message'] != '' ? $templatesValue['invitation_sms_message'] : '');
                        $templatesData['custom_confirmation_sms_message'] = ($templatesValue['confirmation_sms_message'] != '' ? $templatesValue['confirmation_sms_message'] : '');
                    }

                    $templatesData['custom_reminders'] = (isset($rememberSettings['custom_sms_email_reminder']['active_sms_email_reminder']) && $rememberSettings['custom_sms_email_reminder']['active_sms_email_reminder'] == 0 ? false : true);
                    if($templatesData['custom_reminders']) {
                        $templatesData['custom_reminder_sms_message'] = ($templatesValue['reminder_sms_message'] != '' ? $templatesValue['reminder_sms_message'] : '');
                        $templatesData['custom_reminder_email_message'] = ($templatesValue['reminder_email_message'] != '' ? $templatesValue['reminder_email_message'] : '');
                    }

                    $viewingDownloading = (!empty($templatesValue['viewing_downloading']) ? json_decode($templatesValue['viewing_downloading'], true) : []);
                    if(!empty($viewingDownloading)) {
                        $templatesData['document_key'] = ($viewingDownloading['activeAuthentication'] == 0 ? false : true);
                        if($viewingDownloading['viewingDownloading'] == 1) {
                            $templatesData['document_key_type'] = 'Password';
                            $templatesData['send_password_via_sms'] = ($viewingDownloading['sendPasswordWithSMS'] == '' ? false : true);
                        } elseif($viewingDownloading['viewingDownloading'] == 2) {
                            $templatesData['document_key_type'] = 'Pin via SMS';
                        } elseif($viewingDownloading['viewingDownloading'] == 3) {
                            $templatesData['document_key_type'] = 'BankID';
                        }
                    }
                    $templatesData['chat'] = ($templatesValue['document_chat'] == 0 ? false : true);
                    $templatesData['contract_flow'] = (isset($rememberSettings['link_template']['select_link_template']) && $rememberSettings['link_template']['select_link_template'] == 0 ? false : true);
                    $templatesData['convert_to_e_form'] = ($templatesValue['is_online_contract'] == 0 ? false : true);
                    $templatesData['share_template'] = ($templatesValue['is_shareable'] == 0 ? false : true);
                    $templatesData['import_retargeting_code'] = ($templatesValue['is_retargeting'] == 0 ? false : true);
                    //remaining work add specific recipient fields
                    if(isset($rememberSettings['bcc_emails']) && isset($rememberSettings['bcc_emails']['offer_bcc_emails_setting']) && $rememberSettings['bcc_emails']['offer_bcc_emails_setting'] == 1) {
                        $templatesData['bcc_recipient'] = ($rememberSettings['bcc_emails']['offer_bcc_emails_setting'] == 0 ? false : true);
                        $templatesData['subject'] = (isset($rememberSettings['bcc_emails']['bcc_subject']) && $rememberSettings['bcc_emails']['bcc_subject'] != '' ? $rememberSettings['bcc_emails']['bcc_subject'] : '');
                        $templatesData['email'] = (isset($rememberSettings['bcc_emails']['bcc_email']) && $rememberSettings['bcc_emails']['bcc_email'] != '' ? $rememberSettings['bcc_emails']['bcc_email'] : '');
                    }
                    //remaining work settings for archive
                    //remaining work settings for history
                    $templatesData['pre_added_recipients'] = ($templatesValue['enable_preadded'] == 0 ? false : true);
                    if($templatesData['pre_added_recipients']) {
                        $preAddedRecipients = Preadded::where('offer_doc_id', $templatesValue['template_id'])->select('id')->get();
                        if(!empty($preAddedRecipients)) {
                            $preAddedIds = [];
                            foreach($preAddedRecipients as $preAddedRecipientsKey => $preAddedRecipientsValue) {
                                array_push($preAddedIds, $preAddedRecipientsValue['id']);
                            }
                            $preAddedCompleteInformation = Preadded::whereIn('preadded_customers.id', $preAddedIds)
                            ->select('preadded_customers.id as preadded_customer_id', 'customers.id as customers_id', 'organizations.id as organizations_id', 'recipient_fields_roles.id as recipient_fields_roles_id',
                            'customers.full_name', 'customers.last_name', 'customers.email', 'customers.address', 'customers.city', 'customers.personnr', 'customers.zip', 'customers.mobile', 'customers.extra_fields', 'customers.extra_fields_new',
                            'organizations.name as organization_name', 'organizations.reg_no as organization_reg_no', 'organizations.address as organization_address', 'organizations.zip as organization_zip', 'organizations.city as organization_city', 'organizations.mobile as organization_mobile', 'organizations.extra_fields as organization_extra_fields',
                            'recipient_fields_roles.tab_components', 'recipient_fields_roles.tab_fields', 'customers.organization_id', 'preadded_customers.pre_added_details', 'preadded_customers.pre_added_details')
                            ->leftjoin('customers', 'customers.id', '=', 'preadded_customers.customer_id')
                            ->leftjoin('organizations', 'organizations.id', '=', 'customers.organization_id')
                            ->leftjoin('recipient_fields_roles', 'recipient_fields_roles.id', '=', 'preadded_customers.role_id')->get();
                            if(!empty($preAddedCompleteInformation)) {
                                $recipients = [];
                                foreach($preAddedCompleteInformation as $preAddedCompleteInformationKey => $preAddedCompleteInformationValue) {
                                    $eachRecipients = [];
                                    $preAddedCompleteInformation[$preAddedCompleteInformationKey]['full_name'] = (!empty($preAddedCompleteInformationValue['full_name']) ? Tcrypt::decrypter($preAddedCompleteInformationValue['full_name']) : '');
                                    $preAddedCompleteInformation[$preAddedCompleteInformationKey]['last_name'] = (!empty($preAddedCompleteInformationValue['last_name']) ? Tcrypt::decrypter($preAddedCompleteInformationValue['last_name']) : '');
                                    $preAddedCompleteInformation[$preAddedCompleteInformationKey]['email'] = (!empty($preAddedCompleteInformationValue['email']) ? trim(preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', Tcrypt::decrypter($preAddedCompleteInformationValue['email']))) : '');
                                    $preAddedCompleteInformation[$preAddedCompleteInformationKey]['organization_name'] = (!empty($preAddedCompleteInformationValue['organization_name']) ? Tcrypt::decrypter($preAddedCompleteInformationValue['organization_name']) : '');
                                    $tabFields = (isset($preAddedCompleteInformationValue['tab_fields']) && !empty($preAddedCompleteInformationValue['tab_fields']) ? json_decode($preAddedCompleteInformationValue['tab_fields'], true) : []);
                                    if(!empty($tabFields)) {
                                        if(isset($preAddedCompleteInformation[$preAddedCompleteInformationKey]['full_name']) && !empty($preAddedCompleteInformation[$preAddedCompleteInformationKey]['full_name'])) {
                                            $eachRecipients['first_name'] = $preAddedCompleteInformation[$preAddedCompleteInformationKey]['full_name'];
                                        } else {
                                            $eachRecipients['first_name'] = '';
                                        } if(isset($tabFields['recinfo_fields']) && !empty($tabFields['recinfo_fields']) && isset($tabFields['recinfo_fields']['last_name']) && $tabFields['recinfo_fields']['last_name'] == 1) {
                                            $eachRecipients['last_name'] = (isset($preAddedCompleteInformation[$preAddedCompleteInformationKey]['last_name']) && !empty($preAddedCompleteInformation[$preAddedCompleteInformationKey]['last_name']) ? $preAddedCompleteInformation[$preAddedCompleteInformationKey]['last_name'] : '');
                                        } if(isset($preAddedCompleteInformation[$preAddedCompleteInformationKey]['email']) && !empty($preAddedCompleteInformation[$preAddedCompleteInformationKey]['email'])) {
                                            $eachRecipients['email'] = $preAddedCompleteInformation[$preAddedCompleteInformationKey]['email'];
                                        } else {
                                            $eachRecipients['email'] = '';
                                        } if(isset($tabFields['recinfo_fields']) && !empty($tabFields['recinfo_fields']) && isset($tabFields['recinfo_fields']['personnr']) && $tabFields['recinfo_fields']['personnr'] == 1) {
                                            $eachRecipients['personal_id_number'] = (isset($preAddedCompleteInformationValue['personnr']) && $preAddedCompleteInformationValue['personnr'] != '' ? $preAddedCompleteInformationValue['personnr'] : '');
                                        } if(isset($tabFields['recinfo_fields']) && !empty($tabFields['recinfo_fields']) && isset($tabFields['recinfo_fields']['mobile']) && $tabFields['recinfo_fields']['mobile'] == 1) {
                                            $eachRecipients['mobile'] = (isset($preAddedCompleteInformationValue['mobile']) && $preAddedCompleteInformationValue['mobile'] != '' ? $preAddedCompleteInformationValue['mobile'] : '');
                                        } if(isset($tabFields['recinfo_fields']) && !empty($tabFields['recinfo_fields']) && isset($tabFields['recinfo_fields']['address']) && $tabFields['recinfo_fields']['address'] == 1) {
                                            $eachRecipients['address'] = (isset($preAddedCompleteInformationValue['address']) && $preAddedCompleteInformationValue['address'] != '' ? $preAddedCompleteInformationValue['address'] : '');
                                        } if(isset($tabFields['recinfo_fields']) && !empty($tabFields['recinfo_fields']) && isset($tabFields['recinfo_fields']['zip']) && $tabFields['recinfo_fields']['zip'] == 1) {
                                            $eachRecipients['zip_code'] = (isset($preAddedCompleteInformationValue['zip']) && $preAddedCompleteInformationValue['zip'] != '' ? $preAddedCompleteInformationValue['zip'] : '');
                                        } if(isset($tabFields['recinfo_fields']) && !empty($tabFields['recinfo_fields']) && isset($tabFields['recinfo_fields']['city']) && $tabFields['recinfo_fields']['city'] == 1) {
                                            $eachRecipients['city'] = (isset($preAddedCompleteInformationValue['city']) && $preAddedCompleteInformationValue['city'] != '' ? $preAddedCompleteInformationValue['city'] : '');
                                        } if(isset($tabFields['recinfo_fields']) && !empty($tabFields['recinfo_fields']) && isset($tabFields['recinfo_fields']['custom_fields']) && !empty($tabFields['recinfo_fields']['custom_fields'])) {
                                            $recipientCustomFields = (isset($tabFields['recinfo_fields']['custom_fields']) && !empty($tabFields['recinfo_fields']['custom_fields']) ? json_decode($tabFields['recinfo_fields']['custom_fields'], true) : []);
                                            if(!empty($recipientCustomFields)) {
                                                $extraFieldsNew = (isset($preAddedCompleteInformationValue['extra_fields_new']) && !empty($preAddedCompleteInformationValue['extra_fields_new']) ? json_decode($preAddedCompleteInformationValue['extra_fields_new'], true) : []);
                                                foreach($recipientCustomFields as $recipientCustomFieldsKey => $recipientCustomFieldsValue) {
                                                    if($recipientCustomFieldsValue == 1) {
                                                        $recipientField = ['fieldName' => $recipientCustomFieldsKey, 'fieldValue' => ''];
                                                        $recipientFieldIndex = array_search($recipientCustomFieldsKey, array_column($extraFieldsNew, 'fieldName'));
                                                        if($recipientFieldIndex !== false && isset($extraFieldsNew[$recipientFieldIndex])){
                                                            $recipientField = $extraFieldsNew[$recipientFieldIndex];
                                                        }
                                                        $eachRecipients[$recipientCustomFieldsKey] = (isset($recipientField['fieldValue']) && $recipientField['fieldValue'] != '' ? $recipientField['fieldValue'] : '');
                                                    }
                                                }
                                            }
                                        }
                                        //organization fields
                                        if(isset($tabFields['orginfo_fields']) && !empty($tabFields['orginfo_fields']) && isset($tabFields['orginfo_fields']['org_name']) && $tabFields['orginfo_fields']['org_name'] == 1) {
                                            $eachRecipients['organization_name'] = (isset($preAddedCompleteInformation[$preAddedCompleteInformationKey]['organization_name']) && $preAddedCompleteInformation[$preAddedCompleteInformationKey]['organization_name'] != '' ? $preAddedCompleteInformation[$preAddedCompleteInformationKey]['organization_name'] : '');
                                        } if(isset($tabFields['orginfo_fields']) && !empty($tabFields['orginfo_fields']) && isset($tabFields['orginfo_fields']['org_reg_no']) && $tabFields['orginfo_fields']['org_reg_no'] == 1) {
                                            $eachRecipients['organization_reg_no'] = (isset($preAddedCompleteInformationValue['organization_reg_no']) && $preAddedCompleteInformationValue['organization_reg_no'] != '' ? $preAddedCompleteInformationValue['organization_reg_no'] : '');
                                        } if(isset($tabFields['orginfo_fields']) && !empty($tabFields['orginfo_fields']) && isset($tabFields['orginfo_fields']['org_mobile']) && $tabFields['orginfo_fields']['org_mobile'] == 1) {
                                            $eachRecipients['organization_phone_no'] = (isset($preAddedCompleteInformationValue['organization_mobile']) && $preAddedCompleteInformationValue['organization_mobile'] != '' ? $preAddedCompleteInformationValue['organization_mobile'] : '');
                                        } if(isset($tabFields['orginfo_fields']) && !empty($tabFields['orginfo_fields']) && isset($tabFields['orginfo_fields']['org_address']) && $tabFields['orginfo_fields']['org_address'] == 1) {
                                            $eachRecipients['organization_address'] = (isset($preAddedCompleteInformationValue['organization_address']) && $preAddedCompleteInformationValue['organization_address'] != '' ? $preAddedCompleteInformationValue['organization_address'] : '');
                                        } if(isset($tabFields['orginfo_fields']) && !empty($tabFields['orginfo_fields']) && isset($tabFields['orginfo_fields']['org_zip']) && $tabFields['orginfo_fields']['org_zip'] == 1) {
                                            $eachRecipients['organization_zip_code'] = (isset($preAddedCompleteInformationValue['organization_zip']) && $preAddedCompleteInformationValue['organization_zip'] != '' ? $preAddedCompleteInformationValue['organization_zip'] : '');
                                        } if(isset($tabFields['orginfo_fields']) && !empty($tabFields['orginfo_fields']) && isset($tabFields['orginfo_fields']['org_city']) && $tabFields['orginfo_fields']['org_city'] == 1) {
                                            $eachRecipients['organization_city'] = (isset($preAddedCompleteInformationValue['organization_city']) && $preAddedCompleteInformationValue['organization_city'] != '' ? $preAddedCompleteInformationValue['organization_city'] : '');
                                        } if(isset($tabFields['orginfo_fields']) && !empty($tabFields['orginfo_fields']) && isset($tabFields['orginfo_fields']['custom_fields']) && !empty($tabFields['orginfo_fields']['custom_fields'])) {
                                            $organizationCustomFields = (isset($tabFields['orginfo_fields']['custom_fields']) && !empty($tabFields['orginfo_fields']['custom_fields']) ? json_decode($tabFields['orginfo_fields']['custom_fields'], true) : []);
                                            if(!empty($organizationCustomFields)) {
                                                //organization_extra_fields
                                                $organizationExtraFields = (isset($preAddedCompleteInformationValue['organization_extra_fields']) && !empty($preAddedCompleteInformationValue['organization_extra_fields']) ? json_decode($preAddedCompleteInformationValue['organization_extra_fields'], true) : []);
                                                foreach($organizationCustomFields as $organizationCustomFieldsKey => $organizationCustomFieldsValue) {
                                                    if($organizationCustomFieldsValue == 1) {
                                                        $organizationField = ['fieldName' => $organizationCustomFieldsKey, 'fieldValue' => ''];
                                                        $organizationFieldIndex = array_search($organizationCustomFieldsKey, array_column($organizationExtraFields, 'fieldName'));
                                                        if($organizationFieldIndex !== false && isset($organizationExtraFields[$organizationFieldIndex])){
                                                            $organizationField = $organizationExtraFields[$organizationFieldIndex];
                                                        }
                                                        $eachRecipients[$organizationCustomFieldsKey] = (isset($organizationField['fieldValue']) && $organizationField['fieldValue'] != '' ? $organizationField['fieldValue'] : '');
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        $eachRecipients['first_name'] = '';
                                        $eachRecipients['email'] = '';
                                        $eachRecipients['personal_id_number'] = '';
                                        $eachRecipients['mobile'] = '';
                                        $eachRecipients['address'] = '';
                                        $eachRecipients['zip_code'] = '';
                                        $eachRecipients['city'] = '';
                                    }
                                    array_push($recipients, $eachRecipients);
                                }
                            }
                        }
                    }
                    if(!empty($recipients)) {
                        $templatesData['recipients'] = $recipients;
                    }

                    if(!empty($templatesValue['order'])) {
                        $orderColumn = json_decode($templatesValue['order'], true);
                        $pdfTemplateIds = $templateIds = [];
                        foreach($orderColumn as $orderColumnKey => $orderColumnValue) {
                            if($orderColumnValue['type'] == 'pdf') {
                                array_push($pdfTemplateIds, $orderColumnValue['contentid']);
                            } elseif($orderColumnValue['type'] == 'template') {
                                array_push($templateIds, $orderColumnValue['contentid']);
                            }
                        }
                        $allContentPages = '';
                        //getting pdf data from pdf table
                        $pdfTemplatesData = Pdftemplate::whereIn('id', $pdfTemplateIds)->select('id', 'content')->get();
                        if(!empty($pdfTemplatesData)) {
                            foreach($pdfTemplatesData as $pdfTemplatesDataKey => $pdfTemplatesDataValue) {
                                $allContentPages .= Tcrypt::decrypter($pdfTemplatesDataValue['content']);
                            }
                        }
                        //getting template data from template table
                        $templatesDataResult = Template::whereIn('id', $templateIds)->select('id', 'content')->get();
                        if(!empty($templatesDataResult)) {
                            foreach($templatesDataResult as $templatesDataResultKey => $templatesDataResultValue) {
                                $allContentPages .= $templatesDataResultValue['content'];
                            }
                        }
                        //looping through content variable
                        if(!empty($allContentPages)) {
                            $fieldsResponseArray = $tagsResponseArray = [];
                            $html = new \Htmldom($allContentPages);
                            foreach($html->find('.text') as $findKey => $findValue) {
                                $fieldsName = $fieldsValue = '';
                                if(strpos($findValue->getAttribute('class'), 'field_box_popupcontainer') !== false) {
                                    $fieldsName = $findValue->selectedtype;
                                    $fieldsValue = $findValue->find('h4', 0)->innertext;
                                } if(strpos($findValue->getAttribute('class'), 'check_box_popupcontainer') !== false) {
                                    $fieldsName = $findValue->fieldlabelname;
                                    if(strpos($findValue->find('.check_icon', 0)->getAttribute('style'), 'visible')) {
                                        $fieldsValue = 'Yes';
                                    } else {
                                        $fieldsValue = 'No';
                                    }
                                } if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false) {
                                    if($findValue->find('span.texthere', 0)) {
                                        $fieldsName = $findValue->dropdownlabel;
                                        $fieldsValue = $findValue->find('span.texthere', 0)->innertext;
                                    }
                                } if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'dropdown_radioList_api') !== false) {
                                    if($findValue->find('.fa-dot-circle-o', 0)) {
                                        $fieldsName = $findValue->dropdownlabel;
                                        $fieldsValue = $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext;
                                    }
                                } if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'multi_choice_option') !== false) {
                                    if($findValue->find('.ionIconsCheck')) {
                                        $faCheckValues = [];
                                        foreach($findValue->find('.ionIconsCheck') as $checkBoxKey => $checkBoxValue) {
                                            if(strpos($checkBoxValue->getAttribute('class'), 'fa-check') !== false) {
                                                $faCheckValues[] = $checkBoxValue->parent()->parent()->find('label', 0)->innertext;
                                            }
                                        }
                                        $totalFaCheckValues = count($faCheckValues);
                                        if($totalFaCheckValues > 1) {
                                            $faCheckValues = implode(', ' , array_slice($faCheckValues,0,$totalFaCheckValues-1)) . ' and ' . end($faCheckValues);
                                        } else {
                                            $faCheckValues = implode(', ' , $faCheckValues);
                                        }
                                        $fieldsName = $findValue->dropdownlabel;
                                        $fieldsValue = $faCheckValues;
                                    }
                                } if(strpos($findValue->getAttribute('class'), 'signature_box_popupcontainer') !== false) {
                                    //didn't work on signature box because after placing on contract area it has Recipient 1 default name instead of role name
                                    if($findValue->find('h4', 0)) {
                                        $fieldsName = 'Signature box';
                                        $fieldsValue = $findValue->find('h4', 0)->innertext;
                                    }
                                } if(isset($fieldsResponseArray[$findValue->rectooltip])) {
                                    //innertext will get complete inner html
                                    $fieldsResponseArray[$findValue->rectooltip][$fieldsName] = $fieldsValue;
                                } else {
                                    $fieldsResponseArray[$findValue->rectooltip] = [$fieldsName => $fieldsValue];
                                }
                            }
                            foreach($html->find('.dynamicTag') as $findTagKey => $findTagValue) {
                                $tagsResponseArray[$findTagValue->tagname] = $findTagValue->innertext;
                            }
                        }
                    }

                    unset($templates[$templatesKey]['recipient_language']);
                    unset($templates[$templatesKey]['order']);
                    unset($templates[$templatesKey]['due_days_new']);
                    unset($templates[$templatesKey]['reminder_days_new']);
                    unset($templates[$templatesKey]['invitation_sms_message']);
                    unset($templates[$templatesKey]['confirmation_sms_message']);
                    unset($templates[$templatesKey]['reminder_sms_message']);
                    unset($templates[$templatesKey]['reminder_email_message']);
                    unset($templates[$templatesKey]['document_chat']);
                    unset($templates[$templatesKey]['remember_settings']);
                    unset($templates[$templatesKey]['viewing_downloading']);
                    unset($templates[$templatesKey]['is_online_contract']);
                    unset($templates[$templatesKey]['is_shareable']);
                    unset($templates[$templatesKey]['user_extended_shareable']);
                    unset($templates[$templatesKey]['user_group']);
                    unset($templates[$templatesKey]['enable_preadded']);
                    unset($templates[$templatesKey]['is_retargeting']);
                    if(!empty($fieldsResponseArray)) {
                        $templatesData['fields'] = $fieldsResponseArray;
                    } if(!empty($tagsResponseArray)) {
                        $templatesData['tags'] = $tagsResponseArray;
                    }
                    array_push($allTemplates, $templatesData);
                }

                $templates = Offersent::where('sender_id', $user_id)->where('offer_status', 7)->orderBy('created_date', 'desc')->select('id AS template_id', 'name', 'created_date')->skip(0)->take(3)->get()->toArray();
                foreach($templates as $key => $value) {
                    $templates[$key]['name'] = ($value['name'] != '' ? Tcrypt::decrypter($value['name']) : '');
                }
                return response()->json(['status' => 'success', 'result' => ['templates' => $allTemplates, 'drafts' => $templates]], 200, ['Content-Type' => 'application/json; charset=UTF-8'], JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
            } else {
                return Response::json(['status' => 'error', 'result' => 'No record found']);
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }

    public function getGettemplates() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');
        //WvJ2kroPU3cmzsINnEFe70lKobdBtt3SId3owcU1      //mshoaib@yopmail.com       //Main User
        //yR2YClO8XTK5DK6lD1fcTJMPX5UOBVEGQntKwYVi      //masif@yopmail.com         //Sub user

        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        }

        $user_id = $utility->getUserIdByAuthToken($access_token);
        $parentId = $utility->getParent($user_id);

        if($utility->isParent($user_id) == 1) {
            $allUserIds = $utility->getSubusers($parentId);
        } else {
            $allUserIds = [$user_id];
        }

        $getApiHitCount = Userinfo::where('user_id', $parentId)->select('hit_count')->first();
        $addupdateapiaccesslogs = $utility->addupdateapiaccesslogs($user_id, 'getGettemplates v3', $data, $getApiHitCount['hit_count']);
        if($addupdateapiaccesslogs == 'exceed') {
            $this->apiCallLimitExceedMessage = str_replace('#hitCuntNo', $getApiHitCount['hit_count'], $this->apiCallLimitExceedMessage);
            return Response::json(['status' => 'error', 'result' => $this->apiCallLimitExceedMessage]);
        }

        /* $getUserId = Offerdocs::where('id', $templateId)->select('user_id')->first();
        if($getUserId['user_id'] != $user_id) {
            $getParentId = $utility->getParent($getUserId['user_id']);
            if($getParentId != $parentId) {
                return Response::json(['status' => 'error', 'result' => 'Invalid template_id']);
            }
        } */

        $offerDocs = new Offerdocs();
        if(isset($data['template_id']) && $data['template_id'] != '') {
            $offerDocs = $offerDocs->where('id', $data['template_id']);
        } if(isset($data['alternative_template_id']) && $data['alternative_template_id'] != '') {
            $offerDocs = $offerDocs->where('invite_user_temp_id', $data['alternative_template_id']);
        }
        /* if(isset($data['template_id']) && $data['template_id'] != '') {
            if($data['template_id'] != 4040) {
                $offerDocs = $offerDocs->where('id', $data['template_id']);
            } else {
                $offerDocs = $offerDocs->where('invite_user_temp_id', $data['template_id']);
            }
        } */

        $pageLimit = 10;
        if(isset($data['pagelimit']) && $data['pagelimit'] != '') {
            $pageLimit = $data['pagelimit'];
            $data['page_limit'] = $pageLimit;
        } elseif(isset($data['page_limit']) && $data['page_limit'] != '') {
            $data['page_limit'] = $data['page_limit'];
            $pageLimit = $data['page_limit'];
        } /* elseif(isset($data['document_limit']) && $data['document_limit'] != '') {
            $data['pagelimit'] = $data['document_limit'];
            $pageLimit = $data['document_limit'];
        } */
        //$pageLimit = (isset($data['page_limit']) && $data['page_limit'] != '' ? $data['page_limit'] : 25);
        $currentPage = (isset($data['current_page']) && $data['current_page'] != '' ? $data['current_page'] : 0);
        $skipRecords = $currentPage * $pageLimit;

        if($user_id > 0) {
            $columns = ['id AS template_id', 'order', 'name', 'visible_name', 'recipient_language', 'due_days_new', 'reminder_days_new', 'invitation_message', 'confirmation_message', 'remember_settings', 'invitation_sms_message', 'confirmation_sms_message', 'reminder_sms_message', 'reminder_email_message', 'viewing_downloading', 'document_chat', 'is_online_contract', 'is_shareable', 'user_extended_shareable', 'user_group', 'enable_preadded', 'is_retargeting', 'invite_user_temp_id'];
            $templates = $offerDocs->whereIn('user_id', $allUserIds)->select($columns)->skip($skipRecords)->take($pageLimit)->get()->toArray();
            if(!empty($templates)) {
                $allTemplates = [];
                foreach($templates as $templatesKey => $templatesValue) {
                    $templatesData = [];
                    /* if(isset($data['alternative_template_id']) && $data['alternative_template_id'] == $templatesValue['invite_user_temp_id']) {
                        $templatesData['template_id'] = $templatesValue['template_id'];
                        $templatesData['alternative_template_id'] = $templatesValue['invite_user_temp_id'];
                    } else {
                        $templatesData['template_id'] = $templatesValue['template_id'];
                    } */
                    $templatesData['template_id'] = $templatesValue['template_id'];
                    //$templatesData['alternative_template_id'] = $templatesValue['invite_user_temp_id'];
                    /* if(isset($data['template_id']) && $data['template_id'] == 4040) {
                        $templatesData['template_id'] = 4040;
                    } else {
                        $templatesData['template_id'] = $templatesValue['template_id'];
                    } */

                    if($templatesValue['visible_name'] != '') {
                        $templatesData['visible_name'] = $templatesValue['visible_name'];
                    } elseif($templatesValue['name'] != '') {
                        $templatesData['name'] = $templatesValue['name'];
                    }

                    $templatesData['document_language'] = ($templatesValue['recipient_language'] != '' ? $utility->languageName($templatesValue['recipient_language']) : '');
                    $templatesData['due_days'] = ($templatesValue['due_days_new'] != '' ? (int)$templatesValue['due_days_new'] : '');
                    $templatesData['reminder_days'] = ($templatesValue['reminder_days_new'] != '' ? (int)$templatesValue['reminder_days_new'] : '');
                    $templatesData['invitation_message'] = ($templatesValue['invitation_message'] != '' ? $templatesValue['invitation_message'] : '');
                    $templatesData['confirmation_message'] = ($templatesValue['confirmation_message'] != '' ? $templatesValue['confirmation_message'] : '');

                    $rememberSettings = (!empty($templatesValue['remember_settings']) ? json_decode($templatesValue['remember_settings'], true) : '');
                    $templatesData['custom_sms_invitation'] = (isset($rememberSettings['custom_sms']['active_custom_sms']) && $rememberSettings['custom_sms']['active_custom_sms'] == 0 ? false : true);
                    if($templatesData['custom_sms_invitation']) {
                        $templatesData['custom_invitation_sms_message'] = ($templatesValue['invitation_sms_message'] != '' ? $templatesValue['invitation_sms_message'] : '');
                        $templatesData['custom_confirmation_sms_message'] = ($templatesValue['confirmation_sms_message'] != '' ? $templatesValue['confirmation_sms_message'] : '');
                    }

                    $templatesData['custom_reminders'] = (isset($rememberSettings['custom_sms_email_reminder']['active_sms_email_reminder']) && $rememberSettings['custom_sms_email_reminder']['active_sms_email_reminder'] == 0 ? false : true);
                    if($templatesData['custom_reminders']) {
                        $templatesData['custom_reminder_sms_message'] = ($templatesValue['reminder_sms_message'] != '' ? $templatesValue['reminder_sms_message'] : '');
                        $templatesData['custom_reminder_email_message'] = ($templatesValue['reminder_email_message'] != '' ? $templatesValue['reminder_email_message'] : '');
                    }

                    $viewingDownloading = (!empty($templatesValue['viewing_downloading']) ? json_decode($templatesValue['viewing_downloading'], true) : []);
                    if(!empty($viewingDownloading)) {
                        $templatesData['document_key'] = ($viewingDownloading['activeAuthentication'] == 0 ? false : true);
                        if($viewingDownloading['viewingDownloading'] == 1) {
                            $templatesData['document_key_type'] = 'Password';
                            $templatesData['send_password_via_sms'] = ($viewingDownloading['sendPasswordWithSMS'] == '' ? false : true);
                        } elseif($viewingDownloading['viewingDownloading'] == 2) {
                            $templatesData['document_key_type'] = 'Pin via SMS';
                        } elseif($viewingDownloading['viewingDownloading'] == 3) {
                            $templatesData['document_key_type'] = 'BankID';
                        }
                    }
                    $templatesData['chat'] = ($templatesValue['document_chat'] == 0 ? false : true);
                    $templatesData['contract_flow'] = (isset($rememberSettings['link_template']['select_link_template']) && $rememberSettings['link_template']['select_link_template'] == 0 ? false : true);
                    $templatesData['convert_to_e_form'] = ($templatesValue['is_online_contract'] == 0 ? false : true);
                    $templatesData['share_template'] = ($templatesValue['is_shareable'] == 0 ? false : true);
                    $templatesData['import_retargeting_code'] = ($templatesValue['is_retargeting'] == 0 ? false : true);
                    //remaining work add specific recipient fields
                    if(isset($rememberSettings['bcc_emails']) && isset($rememberSettings['bcc_emails']['offer_bcc_emails_setting']) && $rememberSettings['bcc_emails']['offer_bcc_emails_setting'] == 1) {
                        $templatesData['bcc_recipient'] = ($rememberSettings['bcc_emails']['offer_bcc_emails_setting'] == 0 ? false : true);
                        $templatesData['subject'] = (isset($rememberSettings['bcc_emails']['bcc_subject']) && $rememberSettings['bcc_emails']['bcc_subject'] != '' ? $rememberSettings['bcc_emails']['bcc_subject'] : '');
                        $templatesData['email'] = (isset($rememberSettings['bcc_emails']['bcc_email']) && $rememberSettings['bcc_emails']['bcc_email'] != '' ? $rememberSettings['bcc_emails']['bcc_email'] : '');
                    }
                    //remaining work settings for archive
                    //remaining work settings for history
                    $templatesData['pre_added_recipients'] = ($templatesValue['enable_preadded'] == 0 ? false : true);
                    if($templatesData['pre_added_recipients']) {
                        $preAddedRecipients = Preadded::where('offer_doc_id', $templatesValue['template_id'])->select('id')->get();
                        if(!empty($preAddedRecipients)) {
                            $preAddedIds = [];
                            foreach($preAddedRecipients as $preAddedRecipientsKey => $preAddedRecipientsValue) {
                                array_push($preAddedIds, $preAddedRecipientsValue['id']);
                            }
                            $preAddedCompleteInformation = Preadded::whereIn('preadded_customers.id', $preAddedIds)
                            ->select('preadded_customers.id as preadded_customer_id', 'customers.id as customers_id', 'organizations.id as organizations_id', 'recipient_fields_roles.id as recipient_fields_roles_id',
                            'customers.full_name', 'customers.last_name', 'customers.email', 'customers.address', 'customers.city', 'customers.personnr', 'customers.zip', 'customers.mobile', 'customers.extra_fields', 'customers.extra_fields_new',
                            'organizations.name as organization_name', 'organizations.reg_no as organization_reg_no', 'organizations.address as organization_address', 'organizations.zip as organization_zip', 'organizations.city as organization_city', 'organizations.mobile as organization_mobile', 'organizations.extra_fields as organization_extra_fields',
                            'recipient_fields_roles.tab_components', 'recipient_fields_roles.tab_fields', 'customers.organization_id', 'preadded_customers.pre_added_details', 'preadded_customers.pre_added_details')
                            ->leftjoin('customers', 'customers.id', '=', 'preadded_customers.customer_id')
                            ->leftjoin('organizations', 'organizations.id', '=', 'customers.organization_id')
                            ->leftjoin('recipient_fields_roles', 'recipient_fields_roles.id', '=', 'preadded_customers.role_id')->get();
                            if(!empty($preAddedCompleteInformation)) {
                                $recipients = [];
                                foreach($preAddedCompleteInformation as $preAddedCompleteInformationKey => $preAddedCompleteInformationValue) {
                                    $eachRecipients = [];
                                    $preAddedCompleteInformation[$preAddedCompleteInformationKey]['full_name'] = (!empty($preAddedCompleteInformationValue['full_name']) ? Tcrypt::decrypter($preAddedCompleteInformationValue['full_name']) : '');
                                    $preAddedCompleteInformation[$preAddedCompleteInformationKey]['last_name'] = (!empty($preAddedCompleteInformationValue['last_name']) ? Tcrypt::decrypter($preAddedCompleteInformationValue['last_name']) : '');
                                    $preAddedCompleteInformation[$preAddedCompleteInformationKey]['email'] = (!empty($preAddedCompleteInformationValue['email']) ? trim(preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', Tcrypt::decrypter($preAddedCompleteInformationValue['email']))) : '');
                                    $preAddedCompleteInformation[$preAddedCompleteInformationKey]['organization_name'] = (!empty($preAddedCompleteInformationValue['organization_name']) ? Tcrypt::decrypter($preAddedCompleteInformationValue['organization_name']) : '');
                                    $tabFields = (isset($preAddedCompleteInformationValue['tab_fields']) && !empty($preAddedCompleteInformationValue['tab_fields']) ? json_decode($preAddedCompleteInformationValue['tab_fields'], true) : []);
                                    if(!empty($tabFields)) {
                                        if(isset($preAddedCompleteInformation[$preAddedCompleteInformationKey]['full_name']) && !empty($preAddedCompleteInformation[$preAddedCompleteInformationKey]['full_name'])) {
                                            $eachRecipients['first_name'] = $preAddedCompleteInformation[$preAddedCompleteInformationKey]['full_name'];
                                        } else {
                                            $eachRecipients['first_name'] = '';
                                        } if(isset($tabFields['recinfo_fields']) && !empty($tabFields['recinfo_fields']) && isset($tabFields['recinfo_fields']['last_name']) && $tabFields['recinfo_fields']['last_name'] == 1) {
                                            $eachRecipients['last_name'] = (isset($preAddedCompleteInformation[$preAddedCompleteInformationKey]['last_name']) && !empty($preAddedCompleteInformation[$preAddedCompleteInformationKey]['last_name']) ? $preAddedCompleteInformation[$preAddedCompleteInformationKey]['last_name'] : '');
                                        } if(isset($preAddedCompleteInformation[$preAddedCompleteInformationKey]['email']) && !empty($preAddedCompleteInformation[$preAddedCompleteInformationKey]['email'])) {
                                            $eachRecipients['email'] = $preAddedCompleteInformation[$preAddedCompleteInformationKey]['email'];
                                        } else {
                                            $eachRecipients['email'] = '';
                                        } if(isset($tabFields['recinfo_fields']) && !empty($tabFields['recinfo_fields']) && isset($tabFields['recinfo_fields']['personnr']) && $tabFields['recinfo_fields']['personnr'] == 1) {
                                            $eachRecipients['personal_id_number'] = (isset($preAddedCompleteInformationValue['personnr']) && $preAddedCompleteInformationValue['personnr'] != '' ? $preAddedCompleteInformationValue['personnr'] : '');
                                        } if(isset($tabFields['recinfo_fields']) && !empty($tabFields['recinfo_fields']) && isset($tabFields['recinfo_fields']['mobile']) && $tabFields['recinfo_fields']['mobile'] == 1) {
                                            $eachRecipients['mobile'] = (isset($preAddedCompleteInformationValue['mobile']) && $preAddedCompleteInformationValue['mobile'] != '' ? $preAddedCompleteInformationValue['mobile'] : '');
                                        } if(isset($tabFields['recinfo_fields']) && !empty($tabFields['recinfo_fields']) && isset($tabFields['recinfo_fields']['address']) && $tabFields['recinfo_fields']['address'] == 1) {
                                            $eachRecipients['address'] = (isset($preAddedCompleteInformationValue['address']) && $preAddedCompleteInformationValue['address'] != '' ? $preAddedCompleteInformationValue['address'] : '');
                                        } if(isset($tabFields['recinfo_fields']) && !empty($tabFields['recinfo_fields']) && isset($tabFields['recinfo_fields']['zip']) && $tabFields['recinfo_fields']['zip'] == 1) {
                                            $eachRecipients['zip_code'] = (isset($preAddedCompleteInformationValue['zip']) && $preAddedCompleteInformationValue['zip'] != '' ? $preAddedCompleteInformationValue['zip'] : '');
                                        } if(isset($tabFields['recinfo_fields']) && !empty($tabFields['recinfo_fields']) && isset($tabFields['recinfo_fields']['city']) && $tabFields['recinfo_fields']['city'] == 1) {
                                            $eachRecipients['city'] = (isset($preAddedCompleteInformationValue['city']) && $preAddedCompleteInformationValue['city'] != '' ? $preAddedCompleteInformationValue['city'] : '');
                                        } if(isset($tabFields['recinfo_fields']) && !empty($tabFields['recinfo_fields']) && isset($tabFields['recinfo_fields']['custom_fields']) && !empty($tabFields['recinfo_fields']['custom_fields'])) {
                                            $recipientCustomFields = (isset($tabFields['recinfo_fields']['custom_fields']) && !empty($tabFields['recinfo_fields']['custom_fields']) ? json_decode($tabFields['recinfo_fields']['custom_fields'], true) : []);
                                            if(!empty($recipientCustomFields)) {
                                                $extraFieldsNew = (isset($preAddedCompleteInformationValue['extra_fields_new']) && !empty($preAddedCompleteInformationValue['extra_fields_new']) ? json_decode($preAddedCompleteInformationValue['extra_fields_new'], true) : []);
                                                foreach($recipientCustomFields as $recipientCustomFieldsKey => $recipientCustomFieldsValue) {
                                                    if($recipientCustomFieldsValue == 1) {
                                                        $recipientField = ['fieldName' => $recipientCustomFieldsKey, 'fieldValue' => ''];
                                                        $recipientFieldIndex = array_search($recipientCustomFieldsKey, array_column($extraFieldsNew, 'fieldName'));
                                                        if($recipientFieldIndex !== false && isset($extraFieldsNew[$recipientFieldIndex])){
                                                            $recipientField = $extraFieldsNew[$recipientFieldIndex];
                                                        }
                                                        $eachRecipients[$recipientCustomFieldsKey] = (isset($recipientField['fieldValue']) && $recipientField['fieldValue'] != '' ? $recipientField['fieldValue'] : '');
                                                    }
                                                }
                                            }
                                        }
                                        //organization fields
                                        if(isset($tabFields['orginfo_fields']) && !empty($tabFields['orginfo_fields']) && isset($tabFields['orginfo_fields']['org_name']) && $tabFields['orginfo_fields']['org_name'] == 1) {
                                            $eachRecipients['organization_name'] = (isset($preAddedCompleteInformation[$preAddedCompleteInformationKey]['organization_name']) && $preAddedCompleteInformation[$preAddedCompleteInformationKey]['organization_name'] != '' ? $preAddedCompleteInformation[$preAddedCompleteInformationKey]['organization_name'] : '');
                                        } if(isset($tabFields['orginfo_fields']) && !empty($tabFields['orginfo_fields']) && isset($tabFields['orginfo_fields']['org_reg_no']) && $tabFields['orginfo_fields']['org_reg_no'] == 1) {
                                            $eachRecipients['organization_reg_no'] = (isset($preAddedCompleteInformationValue['organization_reg_no']) && $preAddedCompleteInformationValue['organization_reg_no'] != '' ? $preAddedCompleteInformationValue['organization_reg_no'] : '');
                                        } if(isset($tabFields['orginfo_fields']) && !empty($tabFields['orginfo_fields']) && isset($tabFields['orginfo_fields']['org_mobile']) && $tabFields['orginfo_fields']['org_mobile'] == 1) {
                                            $eachRecipients['organization_phone_no'] = (isset($preAddedCompleteInformationValue['organization_mobile']) && $preAddedCompleteInformationValue['organization_mobile'] != '' ? $preAddedCompleteInformationValue['organization_mobile'] : '');
                                        } if(isset($tabFields['orginfo_fields']) && !empty($tabFields['orginfo_fields']) && isset($tabFields['orginfo_fields']['org_address']) && $tabFields['orginfo_fields']['org_address'] == 1) {
                                            $eachRecipients['organization_address'] = (isset($preAddedCompleteInformationValue['organization_address']) && $preAddedCompleteInformationValue['organization_address'] != '' ? $preAddedCompleteInformationValue['organization_address'] : '');
                                        } if(isset($tabFields['orginfo_fields']) && !empty($tabFields['orginfo_fields']) && isset($tabFields['orginfo_fields']['org_zip']) && $tabFields['orginfo_fields']['org_zip'] == 1) {
                                            $eachRecipients['organization_zip_code'] = (isset($preAddedCompleteInformationValue['organization_zip']) && $preAddedCompleteInformationValue['organization_zip'] != '' ? $preAddedCompleteInformationValue['organization_zip'] : '');
                                        } if(isset($tabFields['orginfo_fields']) && !empty($tabFields['orginfo_fields']) && isset($tabFields['orginfo_fields']['org_city']) && $tabFields['orginfo_fields']['org_city'] == 1) {
                                            $eachRecipients['organization_city'] = (isset($preAddedCompleteInformationValue['organization_city']) && $preAddedCompleteInformationValue['organization_city'] != '' ? $preAddedCompleteInformationValue['organization_city'] : '');
                                        } if(isset($tabFields['orginfo_fields']) && !empty($tabFields['orginfo_fields']) && isset($tabFields['orginfo_fields']['custom_fields']) && !empty($tabFields['orginfo_fields']['custom_fields'])) {
                                            $organizationCustomFields = (isset($tabFields['orginfo_fields']['custom_fields']) && !empty($tabFields['orginfo_fields']['custom_fields']) ? json_decode($tabFields['orginfo_fields']['custom_fields'], true) : []);
                                            if(!empty($organizationCustomFields)) {
                                                //organization_extra_fields
                                                $organizationExtraFields = (isset($preAddedCompleteInformationValue['organization_extra_fields']) && !empty($preAddedCompleteInformationValue['organization_extra_fields']) ? json_decode($preAddedCompleteInformationValue['organization_extra_fields'], true) : []);
                                                foreach($organizationCustomFields as $organizationCustomFieldsKey => $organizationCustomFieldsValue) {
                                                    if($organizationCustomFieldsValue == 1) {
                                                        $organizationField = ['fieldName' => $organizationCustomFieldsKey, 'fieldValue' => ''];
                                                        $organizationFieldIndex = array_search($organizationCustomFieldsKey, array_column($organizationExtraFields, 'fieldName'));
                                                        if($organizationFieldIndex !== false && isset($organizationExtraFields[$organizationFieldIndex])){
                                                            $organizationField = $organizationExtraFields[$organizationFieldIndex];
                                                        }
                                                        $eachRecipients[$organizationCustomFieldsKey] = (isset($organizationField['fieldValue']) && $organizationField['fieldValue'] != '' ? $organizationField['fieldValue'] : '');
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        $eachRecipients['first_name'] = '';
                                        $eachRecipients['email'] = '';
                                        $eachRecipients['personal_id_number'] = '';
                                        $eachRecipients['mobile'] = '';
                                        $eachRecipients['address'] = '';
                                        $eachRecipients['zip_code'] = '';
                                        $eachRecipients['city'] = '';
                                    }
                                    array_push($recipients, $eachRecipients);
                                }
                            }
                        }
                    }
                    if(!empty($recipients)) {
                        $templatesData['recipients'] = $recipients;
                    }
                    if(!empty($templatesValue['order'])) {
                        $orderColumn = json_decode($templatesValue['order'], true);
                        $pdfTemplateIds = $templateIds = [];
                        foreach($orderColumn as $orderColumnKey => $orderColumnValue) {
                            if($orderColumnValue['type'] == 'pdf') {
                                array_push($pdfTemplateIds, $orderColumnValue['contentid']);
                            } elseif($orderColumnValue['type'] == 'template') {
                                array_push($templateIds, $orderColumnValue['contentid']);
                            }
                        }
                        $allContentPages = '';
                        //getting pdf data from pdf table
                        $pdfTemplatesData = Pdftemplate::whereIn('id', $pdfTemplateIds)->select('id', 'content')->get();
                        if(!empty($pdfTemplatesData)) {
                            foreach($pdfTemplatesData as $pdfTemplatesDataKey => $pdfTemplatesDataValue) {
                                $allContentPages .= Tcrypt::decrypter($pdfTemplatesDataValue['content']);
                            }
                        }
                        //getting template data from template table
                        $templatesDataResult = Template::whereIn('id', $templateIds)->select('id', 'content')->get();
                        if(!empty($templatesDataResult)) {
                            foreach($templatesDataResult as $templatesDataResultKey => $templatesDataResultValue) {
                                $allContentPages .= $templatesDataResultValue['content'];
                            }
                        }
                        //looping through content variable
                        if(!empty($allContentPages)) {
                            $fieldsResponseArray = $tagsResponseArray = [];
                            $html = new \Htmldom($allContentPages);
                            foreach($html->find('.text') as $findKey => $findValue) {
                                $fieldsName = $fieldsValue = '';
                                if(strpos($findValue->getAttribute('class'), 'field_box_popupcontainer') !== false) {
                                    $fieldsName = $findValue->selectedtype;
                                    $fieldsValue = $findValue->find('h4', 0)->innertext;
                                } if(strpos($findValue->getAttribute('class'), 'check_box_popupcontainer') !== false) {
                                    $fieldsName = $findValue->fieldlabelname;
                                    if(strpos($findValue->find('.check_icon', 0)->getAttribute('style'), 'visible')) {
                                        $fieldsValue = 'Yes';
                                    } else {
                                        $fieldsValue = 'No';
                                    }
                                } if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false) {
                                    if($findValue->find('span.texthere', 0)) {
                                        $fieldsName = $findValue->dropdownlabel;
                                        $fieldsValue = $findValue->find('span.texthere', 0)->innertext;
                                    }
                                } if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'dropdown_radioList_api') !== false) {
                                    if($findValue->find('.fa-dot-circle-o', 0)) {
                                        $fieldsName = $findValue->dropdownlabel;
                                        $fieldsValue = $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext;
                                    }
                                } if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'multi_choice_option') !== false) {
                                    if($findValue->find('.ionIconsCheck')) {
                                        $faCheckValues = [];
                                        foreach($findValue->find('.ionIconsCheck') as $checkBoxKey => $checkBoxValue) {
                                            if(strpos($checkBoxValue->getAttribute('class'), 'fa-check') !== false) {
                                                $faCheckValues[] = $checkBoxValue->parent()->parent()->find('label', 0)->innertext;
                                            }
                                        }
                                        $totalFaCheckValues = count($faCheckValues);
                                        if($totalFaCheckValues > 1) {
                                            $faCheckValues = implode(', ' , array_slice($faCheckValues,0,$totalFaCheckValues-1)) . ' and ' . end($faCheckValues);
                                        } else {
                                            $faCheckValues = implode(', ' , $faCheckValues);
                                        }
                                        $fieldsName = $findValue->dropdownlabel;
                                        $fieldsValue = $faCheckValues;
                                    }
                                } if(strpos($findValue->getAttribute('class'), 'signature_box_popupcontainer') !== false) {
                                    //didn't work on signature box because after placing on contract area it has Recipient 1 default name instead of role name
                                    if($findValue->find('h4', 0)) {
                                        $fieldsName = 'Signature box';
                                        $fieldsValue = $findValue->find('h4', 0)->innertext;
                                    }
                                } if(isset($fieldsResponseArray[$findValue->rectooltip])) {
                                    //innertext will get complete inner html
                                    //$fieldsResponseArray[$findValue->rectooltip][$findValue->selectedtype] = $findValue->find('h4', 0)->innertext;
                                    $fieldsResponseArray[$findValue->rectooltip][$fieldsName] = $fieldsValue;
                                } else {
                                    //$fieldsResponseArray[$findValue->rectooltip] = [$findValue->selectedtype => $findValue->find('h4', 0)->innertext];
                                    $fieldsResponseArray[$findValue->rectooltip] = [$fieldsName => $fieldsValue];
                                }
                            }
                            foreach($html->find('.dynamicTag') as $findTagKey => $findTagValue) {
                                $tagsResponseArray[$findTagValue->tagname] = $findTagValue->innertext;
                            }
                        }
                    }

                    unset($templates[$templatesKey]['recipient_language']);
                    unset($templates[$templatesKey]['order']);
                    unset($templates[$templatesKey]['due_days_new']);
                    unset($templates[$templatesKey]['reminder_days_new']);
                    unset($templates[$templatesKey]['invitation_sms_message']);
                    unset($templates[$templatesKey]['confirmation_sms_message']);
                    unset($templates[$templatesKey]['reminder_sms_message']);
                    unset($templates[$templatesKey]['reminder_email_message']);
                    unset($templates[$templatesKey]['document_chat']);
                    unset($templates[$templatesKey]['remember_settings']);
                    unset($templates[$templatesKey]['viewing_downloading']);
                    unset($templates[$templatesKey]['is_online_contract']);
                    unset($templates[$templatesKey]['is_shareable']);
                    unset($templates[$templatesKey]['user_extended_shareable']);
                    unset($templates[$templatesKey]['user_group']);
                    unset($templates[$templatesKey]['enable_preadded']);
                    unset($templates[$templatesKey]['is_retargeting']);
                    if(!empty($fieldsResponseArray)) {
                        $templatesData['fields'] = $fieldsResponseArray;
                    } if(!empty($tagsResponseArray)) {
                        $templatesData['tags'] = $tagsResponseArray;
                    }
                    array_push($allTemplates, $templatesData);
                }

                $templates = Offersent::where('sender_id', $user_id)->where('offer_status', 7)->orderBy('created_date', 'desc')->select('id AS template_id', 'name', 'created_date')->skip(0)->take(3)->get()->toArray();
                foreach($templates as $key => $value) {
                    $templates[$key]['name'] = ($value['name'] != '' ? Tcrypt::decrypter($value['name']) : '');
                }
                //return response()->json(['status' => 'success', 'result' => $templates], 200, ['Content-Type' => 'application/json; charset=UTF-8'], JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
                return response()->json(['status' => 'success', 'result' => ['templates' => $allTemplates, 'drafts' => $templates]], 200, ['Content-Type' => 'application/json; charset=UTF-8'], JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
            } else {
                return Response::json(['status' => 'error', 'result' => 'No record found']);
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }

    public function getTemplate() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');
        //WvJ2kroPU3cmzsINnEFe70lKobdBtt3SId3owcU1      //mshoaib@yopmail.com       //Main User
        //yR2YClO8XTK5DK6lD1fcTJMPX5UOBVEGQntKwYVi      //masif@yopmail.com         //Sub user

        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        } if(isset($data['template_id']) && $data['template_id'] != '') {
            $templateId = $data['template_id'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'template_id is missing']);
        }

        $user_id = $utility->getUserIdByAuthToken($access_token);
        $parentId = $utility->getParent($user_id);

        $getUserId = Offerdocs::where('id', $templateId)->select('user_id')->first();
        if($getUserId['user_id'] != $user_id) {
            $getParentId = $utility->getParent($getUserId['user_id']);
            if($getParentId != $parentId) {
                return Response::json(['status' => 'error', 'result' => 'Invalid template_id']);
            }
        }

        if($user_id > 0) {
            $columns = ['id AS template_id', 'order', 'name', 'visible_name', 'recipient_language', 'due_days_new', 'reminder_days_new', 'invitation_message', 'confirmation_message', 'remember_settings', 'invitation_sms_message', 'confirmation_sms_message', 'reminder_sms_message', 'reminder_email_message', 'viewing_downloading', 'document_chat', 'is_online_contract', 'is_shareable', 'user_extended_shareable', 'user_group', 'enable_preadded', 'is_retargeting'];
            $templates['template'] = Offerdocs::where('id', $templateId)->select($columns)->first();
            if(!empty($templates['template'])) {
                if($templates['template']['visible_name'] != '') {
                    $templates['template']['visible_name'] = $templates['template']['visible_name'];
                } elseif($templates['template']['name'] != '') {
                    $templates['template']['name'] = $templates['template']['name'];
                }
                $templates['template']['document_language'] = ($templates['template']['recipient_language'] != '' ? $utility->languageName($templates['template']['recipient_language']) : '');
                $templates['template']['due_days'] = ($templates['template']['due_days_new'] != '' ? (int)$templates['template']['due_days_new'] : '');
                $templates['template']['reminder_days'] = ($templates['template']['reminder_days_new'] != '' ? (int)$templates['template']['reminder_days_new'] : '');
                $templates['template']['invitation_message'] = ($templates['template']['invitation_message'] != '' ? $templates['template']['invitation_message'] : '');
                $templates['template']['confirmation_message'] = ($templates['template']['confirmation_message'] != '' ? $templates['template']['confirmation_message'] : '');
                    
                $rememberSettings = (!empty($templates['template']['remember_settings']) ? json_decode($templates['template']['remember_settings'], true) : '');
                    
                $templates['template']['custom_sms_invitation'] = (isset($rememberSettings['custom_sms']['active_custom_sms']) && $rememberSettings['custom_sms']['active_custom_sms'] == 0 ? false : true);
                if($templates['template']['custom_sms_invitation']) {
                    $templates['template']['custom_invitation_sms_message'] = ($templates['template']['invitation_sms_message'] != '' ? $templates['template']['invitation_sms_message'] : '');
                    $templates['template']['custom_confirmation_sms_message'] = ($templates['template']['confirmation_sms_message'] != '' ? $templates['template']['confirmation_sms_message'] : '');
                }
                $templates['template']['custom_reminders'] = (isset($rememberSettings['custom_sms_email_reminder']['active_sms_email_reminder']) && $rememberSettings['custom_sms_email_reminder']['active_sms_email_reminder'] == 0 ? false : true);
                if($templates['template']['custom_reminders']) {
                    $templates['template']['custom_reminder_sms_message'] = ($templates['template']['reminder_sms_message'] != '' ? $templates['template']['reminder_sms_message'] : '');
                    $templates['template']['custom_reminder_email_message'] = ($templates['template']['reminder_email_message'] != '' ? $templates['template']['reminder_email_message'] : '');
                }

                $viewingDownloading = (!empty($templates['template']['viewing_downloading']) ? json_decode($templates['template']['viewing_downloading'], true) : []);
                if(!empty($viewingDownloading)) {
                    $templates['template']['document_key'] = ($viewingDownloading['activeAuthentication'] == 0 ? false : true);
                    if($viewingDownloading['viewingDownloading'] == 1) {
                        $templates['template']['document_key_type'] = 'Password';
                        $templates['template']['send_password_via_sms'] = ($viewingDownloading['sendPasswordWithSMS'] == '' ? false : true);
                    } elseif($viewingDownloading['viewingDownloading'] == 2) {
                        $templates['template']['document_key_type'] = 'Pin via SMS';
                    } elseif($viewingDownloading['viewingDownloading'] == 3) {
                        $templates['template']['document_key_type'] = 'BankID';
                    }
                }
                $templates['template']['chat'] = ($templates['template']['document_chat'] == 0 ? false : true);
                $templates['template']['contract_flow'] = (isset($rememberSettings['link_template']['select_link_template']) && $rememberSettings['link_template']['select_link_template'] == 0 ? false : true);
                $templates['template']['convert_to_e_form'] = ($templates['template']['is_online_contract'] == 0 ? false : true);
                $templates['template']['share_template'] = ($templates['template']['is_shareable'] == 0 ? false : true);
                $templates['template']['import_retargeting_code'] = ($templates['template']['is_retargeting'] == 0 ? false : true);
                //remaining work add specific recipient fields
                if(isset($rememberSettings['bcc_emails']) && isset($rememberSettings['bcc_emails']['offer_bcc_emails_setting']) && $rememberSettings['bcc_emails']['offer_bcc_emails_setting'] == 1) {
                    $templates['template']['bcc_recipient'] = ($rememberSettings['bcc_emails']['offer_bcc_emails_setting'] == 0 ? false : true);
                    $templates['template']['subject'] = (isset($rememberSettings['bcc_emails']['bcc_subject']) && $rememberSettings['bcc_emails']['bcc_subject'] != '' ? $rememberSettings['bcc_emails']['bcc_subject'] : '');
                    $templates['template']['email'] = (isset($rememberSettings['bcc_emails']['bcc_email']) && $rememberSettings['bcc_emails']['bcc_email'] != '' ? $rememberSettings['bcc_emails']['bcc_email'] : '');
                }
                //remaining work settings for archive
                //remaining work settings for history
                $templates['template']['pre_added_recipients'] = ($templates['template']['enable_preadded'] == 0 ? false : true);
                if($templates['template']['enable_preadded']) {
                    $preAddedRecipients = Preadded::where('offer_doc_id', $templateId)->select('id')->get();
                    if(!empty($preAddedRecipients)) {
                        $preAddedIds = [];
                        foreach($preAddedRecipients as $preAddedRecipientsKey => $preAddedRecipientsValue) {
                            array_push($preAddedIds, $preAddedRecipientsValue['id']);
                        }
                        //DB::enableQueryLog();
                        $preAddedCompleteInformation = Preadded::whereIn('preadded_customers.id', $preAddedIds)
                        ->select('preadded_customers.id as preadded_customer_id', 'customers.id as customers_id', 'organizations.id as organizations_id', 'recipient_fields_roles.id as recipient_fields_roles_id',
                        'customers.full_name', 'customers.last_name', 'customers.email', 'customers.address', 'customers.city', 'customers.personnr', 'customers.zip', 'customers.mobile', 'customers.extra_fields', 'customers.extra_fields_new',
                        'organizations.name as organization_name', 'organizations.reg_no as organization_reg_no', 'organizations.address as organization_address', 'organizations.zip as organization_zip', 'organizations.city as organization_city', 'organizations.mobile as organization_mobile', 'organizations.extra_fields as organization_extra_fields',
                        'recipient_fields_roles.tab_components', 'recipient_fields_roles.tab_fields', 'customers.organization_id', 'preadded_customers.pre_added_details', 'preadded_customers.pre_added_details')
                        ->leftjoin('customers', 'customers.id', '=', 'preadded_customers.customer_id')
                        ->leftjoin('organizations', 'organizations.id', '=', 'customers.organization_id')
                        ->leftjoin('recipient_fields_roles', 'recipient_fields_roles.id', '=', 'preadded_customers.role_id')->get();
                        //print_r(DB::getQueryLog());
                        //role_id: 158, 172, 173
                        if(!empty($preAddedCompleteInformation)) {
                            $recipients = [];
                            foreach($preAddedCompleteInformation as $preAddedCompleteInformationKey => $preAddedCompleteInformationValue) {
                                $eachRecipients = [];
                                $preAddedCompleteInformation[$preAddedCompleteInformationKey]['full_name'] = (!empty($preAddedCompleteInformationValue['full_name']) ? Tcrypt::decrypter($preAddedCompleteInformationValue['full_name']) : '');
                                $preAddedCompleteInformation[$preAddedCompleteInformationKey]['last_name'] = (!empty($preAddedCompleteInformationValue['last_name']) ? Tcrypt::decrypter($preAddedCompleteInformationValue['last_name']) : '');
                                $preAddedCompleteInformation[$preAddedCompleteInformationKey]['email'] = (!empty($preAddedCompleteInformationValue['email']) ? trim(preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', Tcrypt::decrypter($preAddedCompleteInformationValue['email']))) : '');
                                $preAddedCompleteInformation[$preAddedCompleteInformationKey]['organization_name'] = (!empty($preAddedCompleteInformationValue['organization_name']) ? Tcrypt::decrypter($preAddedCompleteInformationValue['organization_name']) : '');
                                $tabFields = (isset($preAddedCompleteInformationValue['tab_fields']) && !empty($preAddedCompleteInformationValue['tab_fields']) ? json_decode($preAddedCompleteInformationValue['tab_fields'], true) : []);
                                if(!empty($tabFields)) {
                                    if(isset($preAddedCompleteInformation[$preAddedCompleteInformationKey]['full_name']) && !empty($preAddedCompleteInformation[$preAddedCompleteInformationKey]['full_name'])) {
                                        $eachRecipients['first_name'] = $preAddedCompleteInformation[$preAddedCompleteInformationKey]['full_name'];
                                    } else {
                                        $eachRecipients['first_name'] = '';
                                    } if(isset($tabFields['recinfo_fields']) && !empty($tabFields['recinfo_fields']) && isset($tabFields['recinfo_fields']['last_name']) && $tabFields['recinfo_fields']['last_name'] == 1) {
                                        $eachRecipients['last_name'] = (isset($preAddedCompleteInformation[$preAddedCompleteInformationKey]['last_name']) && !empty($preAddedCompleteInformation[$preAddedCompleteInformationKey]['last_name']) ? $preAddedCompleteInformation[$preAddedCompleteInformationKey]['last_name'] : '');
                                    } if(isset($preAddedCompleteInformation[$preAddedCompleteInformationKey]['email']) && !empty($preAddedCompleteInformation[$preAddedCompleteInformationKey]['email'])) {
                                        $eachRecipients['email'] = $preAddedCompleteInformation[$preAddedCompleteInformationKey]['email'];
                                    } else {
                                        $eachRecipients['email'] = '';
                                    } if(isset($tabFields['recinfo_fields']) && !empty($tabFields['recinfo_fields']) && isset($tabFields['recinfo_fields']['personnr']) && $tabFields['recinfo_fields']['personnr'] == 1) {
                                        $eachRecipients['personal_id_number'] = (isset($preAddedCompleteInformationValue['personnr']) && $preAddedCompleteInformationValue['personnr'] != '' ? $preAddedCompleteInformationValue['personnr'] : '');
                                    } if(isset($tabFields['recinfo_fields']) && !empty($tabFields['recinfo_fields']) && isset($tabFields['recinfo_fields']['mobile']) && $tabFields['recinfo_fields']['mobile'] == 1) {
                                        $eachRecipients['mobile'] = (isset($preAddedCompleteInformationValue['mobile']) && $preAddedCompleteInformationValue['mobile'] != '' ? $preAddedCompleteInformationValue['mobile'] : '');
                                    } if(isset($tabFields['recinfo_fields']) && !empty($tabFields['recinfo_fields']) && isset($tabFields['recinfo_fields']['address']) && $tabFields['recinfo_fields']['address'] == 1) {
                                        $eachRecipients['address'] = (isset($preAddedCompleteInformationValue['address']) && $preAddedCompleteInformationValue['address'] != '' ? $preAddedCompleteInformationValue['address'] : '');
                                    } if(isset($tabFields['recinfo_fields']) && !empty($tabFields['recinfo_fields']) && isset($tabFields['recinfo_fields']['zip']) && $tabFields['recinfo_fields']['zip'] == 1) {
                                        $eachRecipients['zip_code'] = (isset($preAddedCompleteInformationValue['zip']) && $preAddedCompleteInformationValue['zip'] != '' ? $preAddedCompleteInformationValue['zip'] : '');
                                    } if(isset($tabFields['recinfo_fields']) && !empty($tabFields['recinfo_fields']) && isset($tabFields['recinfo_fields']['city']) && $tabFields['recinfo_fields']['city'] == 1) {
                                        $eachRecipients['city'] = (isset($preAddedCompleteInformationValue['city']) && $preAddedCompleteInformationValue['city'] != '' ? $preAddedCompleteInformationValue['city'] : '');
                                    } if(isset($tabFields['recinfo_fields']) && !empty($tabFields['recinfo_fields']) && isset($tabFields['recinfo_fields']['custom_fields']) && !empty($tabFields['recinfo_fields']['custom_fields'])) {
                                        $recipientCustomFields = (isset($tabFields['recinfo_fields']['custom_fields']) && !empty($tabFields['recinfo_fields']['custom_fields']) ? json_decode($tabFields['recinfo_fields']['custom_fields'], true) : []);
                                        if(!empty($recipientCustomFields)) {
                                            $extraFieldsNew = (isset($preAddedCompleteInformationValue['extra_fields_new']) && !empty($preAddedCompleteInformationValue['extra_fields_new']) ? json_decode($preAddedCompleteInformationValue['extra_fields_new'], true) : []);
                                            foreach($recipientCustomFields as $recipientCustomFieldsKey => $recipientCustomFieldsValue) {
                                                if($recipientCustomFieldsValue == 1) {
                                                    $recipientField = ['fieldName' => $recipientCustomFieldsKey, 'fieldValue' => ''];
                                                    $recipientFieldIndex = array_search($recipientCustomFieldsKey, array_column($extraFieldsNew, 'fieldName'));
                                                    if($recipientFieldIndex !== false && isset($extraFieldsNew[$recipientFieldIndex])){
                                                        $recipientField = $extraFieldsNew[$recipientFieldIndex];
                                                    }
                                                    $eachRecipients[$recipientCustomFieldsKey] = (isset($recipientField['fieldValue']) && $recipientField['fieldValue'] != '' ? $recipientField['fieldValue'] : '');
                                                }
                                            }
                                            /* if(!empty($extraFieldsNew)) {
                                                foreach($extraFieldsNew as $extraFieldsNewKey => $extraFieldsNewVal){
                                                    if(isset($recipientCustomFields[$extraFieldsNewVal['fieldName']]) && $recipientCustomFields[$extraFieldsNewVal['fieldName']] == 1){
                                                        //array_push($extraFieldsPush, $extraFieldsNewVal);
                                                        $eachRecipients[$extraFieldsNewVal['fieldName']] = (isset($extraFieldsNewVal['fieldValue']) && $extraFieldsNewVal['fieldValue'] != '' ? $extraFieldsNewVal['fieldValue'] : '');
                                                    }
                                                }
                                            } */
                                        }
                                    }
                                    //organization fields
                                    if(isset($tabFields['orginfo_fields']) && !empty($tabFields['orginfo_fields']) && isset($tabFields['orginfo_fields']['org_name']) && $tabFields['orginfo_fields']['org_name'] == 1) {
                                        $eachRecipients['organization_name'] = (isset($preAddedCompleteInformation[$preAddedCompleteInformationKey]['organization_name']) && $preAddedCompleteInformation[$preAddedCompleteInformationKey]['organization_name'] != '' ? $preAddedCompleteInformation[$preAddedCompleteInformationKey]['organization_name'] : '');
                                    } if(isset($tabFields['orginfo_fields']) && !empty($tabFields['orginfo_fields']) && isset($tabFields['orginfo_fields']['org_reg_no']) && $tabFields['orginfo_fields']['org_reg_no'] == 1) {
                                        $eachRecipients['organization_reg_no'] = (isset($preAddedCompleteInformationValue['organization_reg_no']) && $preAddedCompleteInformationValue['organization_reg_no'] != '' ? $preAddedCompleteInformationValue['organization_reg_no'] : '');
                                    } if(isset($tabFields['orginfo_fields']) && !empty($tabFields['orginfo_fields']) && isset($tabFields['orginfo_fields']['org_mobile']) && $tabFields['orginfo_fields']['org_mobile'] == 1) {
                                        $eachRecipients['organization_phone_no'] = (isset($preAddedCompleteInformationValue['organization_mobile']) && $preAddedCompleteInformationValue['organization_mobile'] != '' ? $preAddedCompleteInformationValue['organization_mobile'] : '');
                                    } if(isset($tabFields['orginfo_fields']) && !empty($tabFields['orginfo_fields']) && isset($tabFields['orginfo_fields']['org_address']) && $tabFields['orginfo_fields']['org_address'] == 1) {
                                        $eachRecipients['organization_address'] = (isset($preAddedCompleteInformationValue['organization_address']) && $preAddedCompleteInformationValue['organization_address'] != '' ? $preAddedCompleteInformationValue['organization_address'] : '');
                                    } if(isset($tabFields['orginfo_fields']) && !empty($tabFields['orginfo_fields']) && isset($tabFields['orginfo_fields']['org_zip']) && $tabFields['orginfo_fields']['org_zip'] == 1) {
                                        $eachRecipients['organization_zip_code'] = (isset($preAddedCompleteInformationValue['organization_zip']) && $preAddedCompleteInformationValue['organization_zip'] != '' ? $preAddedCompleteInformationValue['organization_zip'] : '');
                                    } if(isset($tabFields['orginfo_fields']) && !empty($tabFields['orginfo_fields']) && isset($tabFields['orginfo_fields']['org_city']) && $tabFields['orginfo_fields']['org_city'] == 1) {
                                        $eachRecipients['organization_city'] = (isset($preAddedCompleteInformationValue['organization_city']) && $preAddedCompleteInformationValue['organization_city'] != '' ? $preAddedCompleteInformationValue['organization_city'] : '');
                                    } if(isset($tabFields['orginfo_fields']) && !empty($tabFields['orginfo_fields']) && isset($tabFields['orginfo_fields']['custom_fields']) && !empty($tabFields['orginfo_fields']['custom_fields'])) {
                                        $organizationCustomFields = (isset($tabFields['orginfo_fields']['custom_fields']) && !empty($tabFields['orginfo_fields']['custom_fields']) ? json_decode($tabFields['orginfo_fields']['custom_fields'], true) : []);
                                        if(!empty($organizationCustomFields)) {
                                            //organization_extra_fields
                                            $organizationExtraFields = (isset($preAddedCompleteInformationValue['organization_extra_fields']) && !empty($preAddedCompleteInformationValue['organization_extra_fields']) ? json_decode($preAddedCompleteInformationValue['organization_extra_fields'], true) : []);
                                            foreach($organizationCustomFields as $organizationCustomFieldsKey => $organizationCustomFieldsValue) {
                                                if($organizationCustomFieldsValue == 1) {
                                                    $organizationField = ['fieldName' => $organizationCustomFieldsKey, 'fieldValue' => ''];
                                                    $organizationFieldIndex = array_search($organizationCustomFieldsKey, array_column($organizationExtraFields, 'fieldName'));
                                                    if($organizationFieldIndex !== false && isset($organizationExtraFields[$organizationFieldIndex])){
                                                        $organizationField = $organizationExtraFields[$organizationFieldIndex];
                                                    }
                                                    $eachRecipients[$organizationCustomFieldsKey] = (isset($organizationField['fieldValue']) && $organizationField['fieldValue'] != '' ? $organizationField['fieldValue'] : '');
                                                }
                                            }
                                            /* if(!empty($organizationExtraFields)) {
                                                foreach($organizationExtraFields as $organizationExtraFieldsKey => $organizationExtraFieldsValue) {
                                                    if(isset($organizationCustomFields[$organizationExtraFieldsValue['fieldName']]) && $organizationCustomFields[$organizationExtraFieldsValue['fieldName']] == 1) {
                                                        $eachRecipients[$organizationExtraFieldsValue['fieldName']] = (isset($organizationExtraFieldsValue['fieldValue']) && $organizationExtraFieldsValue['fieldValue'] != '' ? $organizationExtraFieldsValue['fieldValue'] : '');
                                                    }
                                                }
                                            } */
                                        }
                                    }
                                    //!empty($eachRecipients) this was in if condition and it had also else condition
                                } else {
                                    $eachRecipients['first_name'] = '';
                                    $eachRecipients['email'] = '';
                                    $eachRecipients['personal_id_number'] = '';
                                    $eachRecipients['mobile'] = '';
                                    $eachRecipients['address'] = '';
                                    $eachRecipients['zip_code'] = '';
                                    $eachRecipients['city'] = '';
                                }
                                array_push($recipients, $eachRecipients);
                            }
                        }
                    }
                }
                if(!empty($recipients)) {
                    $templates['template']['recipients'] = $recipients;
                }
                if(!empty($templates['template']['order'])) {
                    $orderColumn = json_decode($templates['template']['order'], true);
                    $pdfTemplateIds = $templateIds = [];
                    foreach($orderColumn as $orderColumnKey => $orderColumnValue) {
                        if($orderColumnValue['type'] == 'pdf') {
                            array_push($pdfTemplateIds, $orderColumnValue['contentid']);
                        } elseif($orderColumnValue['type'] == 'template') {
                            array_push($templateIds, $orderColumnValue['contentid']);
                        }
                    }
                    $allContentPages = '';
                    //getting pdf data from pdf table
                    $pdfTemplatesData = Pdftemplate::whereIn('id', $pdfTemplateIds)->select('id', 'content')->get();
                    if(!empty($pdfTemplatesData)) {
                        foreach($pdfTemplatesData as $pdfTemplatesDataKey => $pdfTemplatesDataValue) {
                            $allContentPages .= Tcrypt::decrypter($pdfTemplatesDataValue['content']);
                        }
                    }
                    //getting template data from template table
                    $templatesData = Template::whereIn('id', $templateIds)->select('id', 'content')->get();
                    if(!empty($templatesData)) {
                        foreach($templatesData as $templatesDataKey => $templatesDataValue) {
                            $allContentPages .= $templatesDataValue['content'];
                        }
                    }
                    //looping through content variable
                    if(!empty($allContentPages)) {
                        $fieldsResponseArray = $tagsResponseArray = [];
                        $html = new \Htmldom($allContentPages);
                        foreach($html->find('.text') as $findKey => $findValue) {
                            $fieldsName = $fieldsValue = '';
                            if(strpos($findValue->getAttribute('class'), 'field_box_popupcontainer') !== false) {
                                $fieldsName = $findValue->selectedtype;
                                $fieldsValue = $findValue->find('h4', 0)->innertext;
                            } if(strpos($findValue->getAttribute('class'), 'check_box_popupcontainer') !== false) {
                                $fieldsName = $findValue->fieldlabelname;
                                if(strpos($findValue->find('.check_icon', 0)->getAttribute('style'), 'visible')) {
                                    $fieldsValue = 'Yes';
                                } else {
                                    $fieldsValue = 'No';
                                }
                            } if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false) {
                                if($findValue->find('span.texthere', 0)) {
                                    $fieldsName = $findValue->dropdownlabel;
                                    $fieldsValue = $findValue->find('span.texthere', 0)->innertext;
                                }
                            } if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'dropdown_radioList_api') !== false) {
                                if($findValue->find('.fa-dot-circle-o', 0)) {
                                    $fieldsName = $findValue->dropdownlabel;
                                    $fieldsValue = $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext;
                                }
                            } if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'multi_choice_option') !== false) {
                                if($findValue->find('.ionIconsCheck')) {
                                    $faCheckValues = [];
                                    foreach($findValue->find('.ionIconsCheck') as $checkBoxKey => $checkBoxValue) {
                                        if(strpos($checkBoxValue->getAttribute('class'), 'fa-check') !== false) {
                                            $faCheckValues[] = $checkBoxValue->parent()->parent()->find('label', 0)->innertext;
                                        }
                                    }
                                    $totalFaCheckValues = count($faCheckValues);
                                    if($totalFaCheckValues > 1) {
                                        $faCheckValues = implode(', ' , array_slice($faCheckValues,0,$totalFaCheckValues-1)) . ' and ' . end($faCheckValues);
                                    } else {
                                        $faCheckValues = implode(', ' , $faCheckValues);
                                    }
                                    $fieldsName = $findValue->dropdownlabel;
                                    $fieldsValue = $faCheckValues;
                                }
                            } if(strpos($findValue->getAttribute('class'), 'signature_box_popupcontainer') !== false) {
                                //didn't work on signature box because after placing on contract area it has Recipient 1 default name instead of role name
                                if($findValue->find('h4', 0)) {
                                    $fieldsName = 'Signature box';
                                    $fieldsValue = $findValue->find('h4', 0)->innertext;
                                }
                            } /* if(strpos($findValue->getAttribute('class'), 'datepickerfields_new') !== false) {
                                //didn't work on date field because after placing on contract area it doesn't have rectooltip attribute
                                $fieldsName = $findValue->selectedtype;
                                $fieldsValue = $findValue->find('h4', 0)->innertext;
                            } */

                            if(isset($fieldsResponseArray[$findValue->rectooltip])) {
                                //innertext will get complete inner html
                                //$fieldsResponseArray[$findValue->rectooltip][$findValue->selectedtype] = $findValue->find('h4', 0)->innertext;
                                $fieldsResponseArray[$findValue->rectooltip][$fieldsName] = $fieldsValue;
                            } else {
                                //$fieldsResponseArray[$findValue->rectooltip] = [$findValue->selectedtype => $findValue->find('h4', 0)->innertext];
                                $fieldsResponseArray[$findValue->rectooltip] = [$fieldsName => $fieldsValue];
                            }
                        }
                        foreach($html->find('.dynamicTag') as $findTagKey => $findTagValue) {
                            $tagsResponseArray[$findTagValue->tagname] = $findTagValue->innertext;
                        }
                    }
                }

                unset($templates['template']['recipient_language']);
                unset($templates['template']['order']);
                unset($templates['template']['due_days_new']);
                unset($templates['template']['reminder_days_new']);
                unset($templates['template']['invitation_sms_message']);
                unset($templates['template']['confirmation_sms_message']);
                unset($templates['template']['reminder_sms_message']);
                unset($templates['template']['reminder_email_message']);
                unset($templates['template']['document_chat']);
                unset($templates['template']['remember_settings']);
                unset($templates['template']['viewing_downloading']);
                unset($templates['template']['is_online_contract']);
                unset($templates['template']['is_shareable']);
                unset($templates['template']['user_extended_shareable']);
                unset($templates['template']['user_group']);
                unset($templates['template']['enable_preadded']);
                unset($templates['template']['is_retargeting']);
                if(!empty($fieldsResponseArray)) {
                    $templates['template']['fields'] = $fieldsResponseArray;
                } if(!empty($tagsResponseArray)) {
                    $templates['template']['tags'] = $tagsResponseArray;
                }

                /* $templates['drafts'] = Offersent::where('sender_id', $user_id)->where('offer_status', 7)->orderBy('created_date', 'desc')->select('id AS template_id', 'name', 'created_date')->skip(0)->take(3)->get()->toArray();
                if(!empty($templates['drafts'])) {
                    foreach($templates['drafts'] as $key => $value) {
                        $templates['drafts'][$key]['name'] = ($value['name'] != '' ? Tcrypt::decrypter($value['name']) : '');
                    }
                } */
                return response()->json(['status' => 'success', 'result' => $templates], 200, ['Content-Type' => 'application/json; charset=UTF-8'], JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
            } else {
                return Response::json(['status' => 'error', 'result' => 'No record found']);
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }

    public function postCreatetemplate() {
        ini_set('max_execution_time', 800);
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');
        $template_id = $allowEditing = $isPublish = 0;

        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status'=>'error','result' => 'access_token is missing']);
        } if(isset($data['template_id']) && $data['template_id'] != '') {
            $template_id = $data['template_id'];
        }

        if(!isset($data['file']) || empty($data['file'])) {
            return Response::json(['status' => 'error', 'result' => 'file is missing']);
        } else {
            $file = $data['file'];
        }
        if(isset($data['restrict_editing']) && $data['restrict_editing'] != 0) {
            $allowEditing = $data['restrict_editing'];
        }
        if(isset($data['is_publish']) && $data['is_publish'] != 0) {
            $isPublish = $data['is_publish'];
        }

        $user_id = $utility->getUserIdByAuthToken($access_token);
        $parentId = $utility->getParent($user_id);

        if($user_id > 0) {
            $uniqid = uniqid();
            $file = $data['file'];
            //adding condition starting
            $fileTypes = array('docx','doc','xls','xlsx','csv','ppt','pptx','pdf');
            if(!in_array(strtolower($file->getClientOriginalExtension()), $fileTypes)) {
                return Response::json(['status' => 'error', 'result' => 'Invalid document file type, only document files are acceptable']);
            }
            //adding condition ending

            $file_original_name = $file->getClientoriginalName();
            $file_ext = strtolower($file->getClientOriginalExtension());
            $filename = pathinfo($file_original_name, PATHINFO_FILENAME);

            $file_name = $file_original_name;
            $name = 'pdftemplate_'.$uniqid.'.pdf';
            $name_new = 'pdftemplate_'.$uniqid.'.'.$file_ext;
            $destination = public_path().'/uploads/contractpdf';

            $Allowed_Ext = array('docx','doc','xls','xlsx','csv','ppt','pptx');
            if(in_array($file_ext,$Allowed_Ext)) {
                $file->move($destination, $name_new);
                $file_path = $destination.'/'.$name_new;
                $Conversionapi = new Conversionapi();
                try {
                    $Conversionapi->convert($file_path, $destination.'/'.$name);
                } catch(\Exception $e) {
                    if(file_exists($file_path)) {
                        unlink($file_path);
                    }
                    return Response::json(['status' => 'error', 'result' => 'Unable to load this file']);
                } if(file_exists($file_path)) {
                    unlink($file_path);
                }
            } else {
                $file->move($destination, $name);
            }

            $userTemplate = new usertemplateController();
            $template_id = $userTemplate->createPdfTemplate($template_id, $destination, $name, $file_name, $access_token,'isapi','',$allowEditing,$isPublish);

            return Response::json(['status' => 'success', 'result' => ['template_id' => $template_id]]);
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }

     public function postGenerateiframe() {
         
        ini_set('max_execution_time', 800);
        $data = Input::all();
        $utility = new Utility();
        
        $domain_name = asset('/');
        $template_id = $allowEditing = $isPublish = $deleteParameters = 0;
        
        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status'=>'error','result' => 'access_token is missing']);
        } if(isset($data['template_id']) && $data['template_id'] != '') {
            $template_id = $data['template_id'];
        } else {
            if(!isset($data['file']) || empty($data['file'])) {
                return Response::json(['status' => 'error', 'result' => 'file is missing']);
            } else {
                $file = $data['file'];
            }
        }

        /* $external_document_id = rand(10000, 99999);
        $external_document_id2 = rand(10000, 99999);  session_key*/
        //rand() function generated duplicate id and shown in API response in document_id (external_doc_id) so now we are gonna use new mt_rand() function recommended by PHP
        $external_document_id = mt_rand(1, 100000);
        $external_document_id2 = mt_rand(1, 100000);
       // if(isset($data['external_document_id']) && $data['external_document_id'] != "") {
            //$external_document_id = $data['external_document_id'];
            $external_document_id2 = "&document_id=".$external_document_id;
        //}

        
        if(isset($data['restrict_editing']) && $data['restrict_editing'] != 0) {
            $allowEditing = $data['restrict_editing'];
        }
        if(isset($data['is_publish']) && $data['is_publish'] != 0) {
            $isPublish = $data['is_publish'];
        }

        $user_id = $utility->getUserIdByAuthToken($access_token);
        //$utility->addupdateapiaccesslogs($user_id, 'postGenerateiframe',$data);
        $checkUserData = User::where('id', $user_id)->select('email')->first();
        $parentId = $utility->getParent($user_id);

        $userSettings = $utility->getUserSettings($parentId);
        $getApiHitCount = Userinfo::where('user_id', $parentId)->select('hit_count')->first();
        $addupdateapiaccesslogs = $utility->addupdateapiaccesslogs($user_id, 'postGenerateiframe v3', $data, $getApiHitCount['hit_count']);
        if($addupdateapiaccesslogs == 'exceed') {
            $this->apiCallLimitExceedMessage = str_replace('#hitCuntNo', $getApiHitCount['hit_count'], $this->apiCallLimitExceedMessage);
            return Response::json(['status' => 'error', 'result' => $this->apiCallLimitExceedMessage]);
        }

        if($user_id > 0) {
            if(isset($data['template_id']) && $data['template_id'] != '') {
                $documentFields = '';
                if(isset($data['documentfields']) && !empty($data['documentfields'])) {
                    //$documentFields = "&documentfields=".$data['documentfields'];
                }
                $whereofer['id'] = $data['template_id'];
                $whereofer['user_id'] = $user_id;
                $offerData = $utility->getItem("offer_docs",$whereofer);
                if(!$offerData || $offerData == '' || empty($offerData)) {
                    return Response::json(['status'=>'error','result' => 'contract not found']);
                } else {
                    $iframeUrl = asset('/')."api/v3/request/external?email=".trim($checkUserData->email)."&access_token=".$access_token."&template_id=".$data['template_id']."&htmlview=1&generate=1".$external_document_id2;
                    return Response::json(['status' => 'success', 'result' => ['iframeUrl' => $iframeUrl,'document_id' => $external_document_id]]);
                }
            }
            $uniqid = uniqid();
            $file = $data['file'];
            //adding condition starting
            $fileTypes = array('docx','doc','xls','xlsx','csv','ppt','pptx','pdf');
            if(!in_array(strtolower($file->getClientOriginalExtension()), $fileTypes)) {
                return Response::json(['status' => 'error', 'result' => 'Invalid document file type, only document files are acceptable']);
            }
            //adding condition ending

            $file_original_name = $file->getClientoriginalName();
            $file_ext = strtolower($file->getClientOriginalExtension());
            $filename = pathinfo($file_original_name, PATHINFO_FILENAME);

            $file_name = $file_original_name;
            $name = 'pdftemplate_'.$uniqid.'.pdf';
            $name_new = 'pdftemplate_'.$uniqid.'.'.$file_ext;
            $destination = public_path().'/uploads/contractpdf';

            $Allowed_Ext = array('docx','doc','xls','xlsx','csv','ppt','pptx');
            if(in_array($file_ext,$Allowed_Ext)) {
                $file->move($destination, $name_new);
                $file_path = $destination.'/'.$name_new;
                $Conversionapi = new Conversionapi();
                try {
                    $Conversionapi->convert($file_path, $destination.'/'.$name);
                } catch(\Exception $e) {
                    if(file_exists($file_path)) {
                        unlink($file_path);
                    }
                    return Response::json(['status' => 'error', 'result' => 'Unable to load this file']);
                } if(file_exists($file_path)) {
                    unlink($file_path);
                }
            } else {
                $file->move($destination, $name);
            }

            $userTemplate = new usertemplateController();
            $template_id = $userTemplate->createPdfTemplate($template_id, $destination, $name, $file_name, $access_token,'isapi','',$allowEditing,$isPublish);
            // https ://esign.simplesign.io/api/v3/request/external?email={användarens mail}&access_token={API token}&htmlview=1 
            $iframeUrl = asset('/')."api/v3/request/external?email=".trim($checkUserData->email)."&access_token=".$access_token."&template_id=".$template_id."&htmlview=1&generate=1".$external_document_id2;
            return Response::json(['status' => 'success', 'result' => ['iframeUrl' => $iframeUrl,'document_id' => $external_document_id]]);
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }

    public function getGettemplates_old() {
        $utility = new Utility();
        $data = Input::all();
        if(isset($data['access_token'])) {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }

        $user_id = $utility->getUserIdByAuthToken($access_token);
        if(!empty($user_id) && $user_id > 0) {
            $where['id'] = $user_id;
            $parentObj = $utility->getItem("users_login", $where, array('parent_id'));
            $parentid = $parentObj->parent_id;
            $where1['user_id'] = $user_id;
            $coloumns = array('offer_docs.id','offer_docs.name');

            if($parentid == 0) {
                $offername['templates'] = $utility->getItems("offer_docs",$where1,null,$coloumns);
            } else {
                $coloumns = array('offer_docs.id','offer_docs.name','users_login.parent_id','users_info.full_name');
                $offername['templates'] = DB::table('offer_docs')->where('offer_docs.user_id', '=', $user_id)->join('users_login', 'offer_docs.user_id', '=', 'users_login.id')->join('users_info', 'offer_docs.user_id', '=', 'users_info.user_id')->orWhere(function ($query) use ($parentid){
                    $query->where('offer_docs.user_id', '=', $parentid)->where('is_shareable', '=', '1')->join('users_login', 'offer_docs.user_id', '=', 'users_login.parent_id')->join('users_info', 'users_login.parent_id', '=', 'users_info.user_id');
                })->select($coloumns)->get();
            }

            /*Get un send contract for drafts*/
            $where2['sender_id'] = $user_id;
            $where2['offer_status'] = 7; //7 for un send contfacts
            $offername['drafts'] = $utility->getItems("offer_sent",$where2,array('column'=>'created_date','order'=>'desc'),array('id', 'name', 'created_date'),1,3);
            foreach($offername['drafts'] as $key => $value) {
                $offername['drafts'][$key]->name = $value->name != '' ? Tcrypt::decrypter($value->name) : '';
            }
            return Response::json(['status' => 'success', 'result' => $offername]);
        } else {
            return Response::json(['status' => 'error', 'result' => 'invalid access_token']);
        }
    }

    /**
     * Function to get sentoffers history (for API)
     */
    public function getHistory(){
        // ini_set('display_errors', 1);
        // ini_set('display_startup_errors', 1);
        // error_reporting(E_ALL);
        $data = Input::all();
        if(isset($data['access_token']) && $data['access_token'] != ''){
                $access_token = $data['access_token'];
        }else{
                return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
        $dataArray = [];
        $dataArray['access_token'] = $access_token;
        $dataArray['pagelimit'] = (isset($data['pagelimit']) && $data['pagelimit']!=''?$data['pagelimit']:10);
        $dataArray['current_page'] = (isset($data['current_page']) && $data['current_page']!=''?$data['current_page']:0);
        $dataArray['status_filter'] = 9;
        $dataArray['searchfilter'] = (isset($data['searchfilter']) && $data['searchfilter'] != '' ? $data['searchfilter'] : '');
        $dataArray['query_filter'] = (isset($data['query_filter']) && $data['query_filter'] != '' ? $data['query_filter'] : '');
        $dataArray['is_extension'] = (isset($data['is_extension']) && $data['is_extension'] != '' ? $data['is_extension'] : '');
        $dataArray['archive_merge'] = 1;
        $dataArray['viewtype'] = 1;
        $dataArray['subfilter'] = 1;
        $overview = new overviewController();
        return $overview->postSentoffers('history',$dataArray);
        //return $overview->postSentoffers('api');
    }

    //public function getDocumenthistory() {
    public function getAlldocuments() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');
        $template_id = 0;
        //setMajorDB();
        $offerSentIds = $caseManagementOfferSentIds = [];

        //access_token validation starting
        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
        //access_token validation ending

        $user_id = $utility->getUserIdByAuthToken($access_token);
        $parent_id = $utility->getParent($user_id);
        $userTimeZone = $utility->getUsertimezone($parent_id);
        $getUserAPITimeZone = $utility->getUserAPITimeZone($parent_id);
        $getApiHitCount = Userinfo::where('user_id', $parent_id)->select('hit_count')->first();
        $addupdateapiaccesslogs = $utility->addupdateapiaccesslogs($user_id, 'getAlldocuments v3', $data, $getApiHitCount['hit_count']);
        if($addupdateapiaccesslogs == 'exceed') {
            $this->apiCallLimitExceedMessage = str_replace('#hitCuntNo', $getApiHitCount['hit_count'], $this->apiCallLimitExceedMessage);
            return Response::json(['status' => 'error', 'result' => $this->apiCallLimitExceedMessage]);
        }

        $subUserId = 0;
        if(isset($data['user_id']) && $data['user_id'] != '') {
            $subUserId = $data['user_id'];
            $checkUser = User::where('id', $subUserId)->where('parent_id', $user_id)->count();
            if(!$checkUser) {
                return Response::json(['status' => 'error', 'result' => 'invalid user_id']);
            }
        }

        if($utility->isParent($user_id) == 1) {
            $allUserIds = $utility->getSubusers($parent_id);
        } else {
            $allUserIds = [$user_id];
        }

        if($subUserId > 0) {
            $allUserIds = [$subUserId];
        }

        $userSettings = $utility->getUserSettings($parent_id);

        if($utility->checkAdminStripe($user_id)) {
            return Response::json(['status' => 'error', 'result' => 'Account is locked make payment in order to continue Simplesign']);
        }

        $pageLimit = 25;
        if(isset($data['documentlimit']) && $data['documentlimit'] != '') {
            $pageLimit = $data['documentlimit'];
            $data['document_limit'] = $pageLimit;
        } elseif(isset($data['document_limit']) && $data['document_limit'] != '') {
            $data['document_limit'] = $data['document_limit'];
            $pageLimit = $data['document_limit'];
        }
        //$pageLimit = (isset($data['documentlimit']) && $data['documentlimit'] != '' ? $data['documentlimit'] : 25);
        $currentPage = (isset($data['current_page']) && $data['current_page'] > 0 && $data['current_page'] != '' ? ($data['current_page']-1) : 0);
        $skipRecords = $currentPage * $pageLimit;

        $offerSentObject = new Offersent();

        $whereRaw = '(1=1)';
        $fromDate = '';
        $dateTime = new \DateTime();
        if(isset($data['from_date']) && !empty($data['from_date'])) {
            if($dateTime->createFromFormat('Y-m-d', $data['from_date']) !== FALSE) {
                $fromDate = $data['from_date'].' 00:00:00';
            } elseif($dateTime->createFromFormat('Y-m-d-H-i-s', $data['from_date']) !== FALSE) {
                $fromDate = $dateTime->createFromFormat('Y-m-d-H-i-s', $data['from_date'])->format('Y-m-d H:i:s');
            } else {
                return Response::json(['status' => 'error', 'result' => 'from_date format is invalid']);
            }
        } if(isset($data['to_date']) && !empty($data['to_date'])) {
            if($dateTime->createFromFormat('Y-m-d', $data['to_date']) !== FALSE) {
                $toDate = $data['to_date'].' 23:59:59';
            } elseif($dateTime->createFromFormat('Y-m-d-H-i-s', $data['to_date']) !== FALSE) {
                $toDate = $dateTime->createFromFormat('Y-m-d-H-i-s', $data['to_date'])->format('Y-m-d H:i:s');
            } else {
                return Response::json(['status' => 'error', 'result' => 'to_date format is invalid']);
            }
        } elseif($fromDate != '') {
            //elseif used because if user didn't pass to_date so variable just add date value by default
            if($dateTime->createFromFormat('Y-m-d', $fromDate) !== FALSE) {
                $toDate = date('Y-m-d').' 23:59:59';
            } elseif($dateTime->createFromFormat('Y-m-d-H-i-s', $fromDate) !== FALSE) {
                $toDate = date('Y-m-d H:i:s');
            } else {
                $toDate = date('Y-m-d').' 23:59:59';
            }
        }
        if($fromDate != '' && $toDate != '') {
            /* if(strtotime($toDate) < strtotime($fromDate)) {
                return Response::json(['status' => 'error', 'result' => 'from_date is greater than to_date']);
            } */
            //$userTimeZone = $utility->getUsertimezone($parent_id);
            //if($_SERVER['HTTP_HOST'] == 'acceptance.simplesign.io') {
                $fromDate = $utility->changeTimeZone($fromDate, 'Y-m-d H:i:s', $userTimeZone, 'UTC');
                $toDate = $utility->changeTimeZone($toDate, 'Y-m-d H:i:s', $userTimeZone, 'UTC');
            /* } else {
                $fromDate = $utility->changeTimeZone($fromDate, 'Y-m-d H:i:s', $userTimeZone, 'UTC');
                $toDate = $utility->changeTimeZone($toDate, 'Y-m-d H:i:s', $userTimeZone, 'UTC');
            } */
            $whereRaw = "(";
            $whereRaw .= "(simplesign_offer_sent.last_event != '0000-00-00 00:00:00' ";
            $whereRaw .= "AND simplesign_offer_sent.last_event BETWEEN '".$fromDate."' AND '".$toDate."') ";
            $whereRaw .= "OR (simplesign_offer_sent.created_date BETWEEN '".$fromDate."' AND '".$toDate."') ";
            $whereRaw .= ")";
            $offerSentObject = $offerSentObject->whereRaw($whereRaw);
        }

        if((isset($data['task_name']) && $data['task_name'] != '') || (isset($data['task_status']) && $data['task_status'] != '')) {
            $offerSentObject = $offerSentObject->join('offersent_data', 'offer_sent.id', '=', 'offersent_data.sent_id');
        } if((isset($data['task_filter']) && $data['task_filter'] != '') || (isset($data['completed_fromdate']) && $data['completed_fromdate'] != '' || isset($data['completed_todate']) && $data['completed_todate'] != '')) {
            $offerSentObject = $offerSentObject->join('offersent_data as ofsd', 'offer_sent.id', '=', 'ofsd.sent_id');
        }

        //case managment filter starting
        $getAddOnObjectData = settings::where('user_id', $parent_id)->select('new_addon_obj')->first();
        if((isset($data['task_name']) && $data['task_name'] != '') || (isset($data['task_status']) && $data['task_status'] != '')) {
            if($getAddOnObjectData['new_addon_obj'] != '') {
                $newAddonObjJsonDataForCaseManagment = json_decode($getAddOnObjectData['new_addon_obj'], true);
                if(isset($newAddonObjJsonDataForCaseManagment['mark_as_completed_addon']) && $newAddonObjJsonDataForCaseManagment['mark_as_completed_addon'] == 1) {
                    $markAsCompletedAddonSetting = (isset($newAddonObjJsonDataForCaseManagment['mark_as_completed_addon_setting']) && $newAddonObjJsonDataForCaseManagment['mark_as_completed_addon_setting'] != '' ? json_decode($newAddonObjJsonDataForCaseManagment['mark_as_completed_addon_setting'], true) : []);
                    if(!empty($markAsCompletedAddonSetting)) {
                        if(isset($markAsCompletedAddonSetting['mark_tasks_array']) && !empty($markAsCompletedAddonSetting['mark_tasks_array'])) {
                            if(isset($data['task_status']) && ($data['task_status'] == 'yes' || $data['task_status'] == 'Yes' || $data['task_status'] == 'YES' || $data['task_status'] == 'yEs' || $data['task_status'] == 'YeS' || $data['task_status'] == 'YEs')) {
                                $data['task_status'] = 'done';
                            } if(isset($data['task_status']) && ($data['task_status'] == 'in process' || $data['task_status'] == 'in Process' || $data['task_status'] == 'in_process' || $data['task_status'] == 'in_Process' || $data['task_status'] == 'In process' || $data['task_status'] == 'In Process' || $data['task_status'] == 'In_process' || $data['task_status'] == 'In_Process' || $data['task_status'] == 'inprocess' || $data['task_status'] == 'inProcess' || $data['task_status'] == 'Inprocess' || $data['task_status'] == 'inProcess' || $data['task_status'] == 'in-process' || $data['task_status'] == 'in-Process' || $data['task_status'] == 'In-process' || $data['task_status'] == 'In-Process')) {
                                $data['task_status'] = 'in_process';
                            } if(isset($data['task_status']) && ($data['task_status'] == 'no' || $data['task_status'] == 'No' || $data['task_status'] == 'NO' || $data['task_status'] == 'nO')) {
                                $data['task_status'] = 'no';
                            }
                            foreach($markAsCompletedAddonSetting['mark_tasks_array'] as $markTasksArrayKey => $markTasksArrayValue) {
                                if($markTasksArrayValue['tasknames'] == $data['task_name']) {
                                    //$index = ($markTasksArrayKey+1);
                                    $index = $markTasksArrayKey;
                                    if(isset($data['task_status']) && $data['task_status'] != '') {
                                        $offerSentObjectNew = $offerSentObject->where('offersent_data.multi_case_management', 'like', '%'.($index).'%')->where('offersent_data.multi_case_management', 'like', '%'.$data['task_status'].'%');
                                    } else {
                                        $offerSentObjectNew = $offerSentObject->where('offersent_data.multi_case_management', 'like', '%'.($index).'%');
                                    }
                                    $offerSentObjectNew = $offerSentObjectNew->select('offer_sent.id', 'offer_sent.offer_id', 'offer_sent.offer_status', 'offersent_data.contract_type_id', 'offersent_data.multi_case_management')->orderBy('offer_sent.id', 'desc')->skip($skipRecords)->take($pageLimit)->get()->toArray();
                                    if($offerSentObjectNew) {
                                        foreach($offerSentObjectNew as $offerSentObjectNewKey => $offerSentObjectNewValue) {
                                            if(in_array($offerSentObjectNewValue['contract_type_id'], $markTasksArrayValue['contract_type_selected']) && (in_array($offerSentObjectNewValue['offer_status'], $markTasksArrayValue['marked_addon_status']) || in_array("", $markTasksArrayValue['marked_addon_status']))) {
                                            //if(in_array($offerSentObjectNewValue['contract_type_id'], $markTasksArrayValue['contract_type_selected']) && (in_array($offerSentObjectNewValue['offer_status'], $markTasksArrayValue['marked_addon_status']))) {
                                                if($offerSentObjectNewValue['multi_case_management'] != '') {
                                                    $multiCaseManagementJsonDecodeForFilter = json_decode($offerSentObjectNewValue['multi_case_management'], true);
                                                    foreach($multiCaseManagementJsonDecodeForFilter as $multiCaseManagementJsonDecodeForFilterKey => $multiCaseManagementJsonDecodeForFilterValue) {
                                                        if(isset($data['task_status']) && $data['task_status'] != '') {
                                                            if($multiCaseManagementJsonDecodeForFilterValue['status_text'] == $data['task_status'] && isset($multiCaseManagementJsonDecodeForFilterValue['task_no']) && $multiCaseManagementJsonDecodeForFilterValue['task_no'] == $index && $multiCaseManagementJsonDecodeForFilterValue['task_no'] != -1 && !in_array($offerSentObjectNewValue['id'], $caseManagementOfferSentIds)) {
                                                                array_push($caseManagementOfferSentIds, $offerSentObjectNewValue['id']);
                                                            } elseif($multiCaseManagementJsonDecodeForFilterValue['status_text'] == $data['task_status'] && isset($multiCaseManagementJsonDecodeForFilterValue['task_no']) && $multiCaseManagementJsonDecodeForFilterValue['task_no'] == $index && $multiCaseManagementJsonDecodeForFilterValue['task_no'] == -1 && !in_array($offerSentObjectNewValue['id'], $caseManagementOfferSentIds)) {
                                                                array_push($caseManagementOfferSentIds, $offerSentObjectNewValue['id']);
                                                            }
                                                        } else {
                                                            if(isset($multiCaseManagementJsonDecodeForFilterValue['task_no']) && $multiCaseManagementJsonDecodeForFilterValue['task_no'] == $index && $multiCaseManagementJsonDecodeForFilterValue['task_no'] != -1 && !in_array($offerSentObjectNewValue['id'], $caseManagementOfferSentIds)) {
                                                                array_push($caseManagementOfferSentIds, $offerSentObjectNewValue['id']);
                                                            } elseif(isset($multiCaseManagementJsonDecodeForFilterValue['task_no']) && $multiCaseManagementJsonDecodeForFilterValue['task_no'] == $index && $multiCaseManagementJsonDecodeForFilterValue['task_no'] == -1 && !in_array($offerSentObjectNewValue['id'], $caseManagementOfferSentIds)) {
                                                                array_push($caseManagementOfferSentIds, $offerSentObjectNewValue['id']);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                } else {
                    return Response::json(['status' => 'error', 'result' => 'Task management feature is not enabled in your account, Contact Simplesign support for task management activation.']);
                }
            }
            if(count($caseManagementOfferSentIds) > 0) {
                $offerSentObject = $offerSentObject->whereIn('offer_sent.id', $caseManagementOfferSentIds);
            } else {
                return Response::json(['status' => 'error', 'result' => 'No record(s) found.']);
            }
        } if(isset($data['task_filter']) && $data['task_filter'] != '') {
            $caseManagementOfferSentIds = [];
            if($this->is_JSON($data['task_filter'])) {
                $taskFilter = json_decode($data['task_filter'], true);
                $taskFilterArray = [];
                //If casemanagement column is empty, we don't fetch it with filter, but in UI it shows by default "No" value.
                $valueArray = ['yes', 'no', 'in process', 'in_process', 'inprocess', 'in-process'];
                if($getAddOnObjectData['new_addon_obj'] != '' && !empty($taskFilter)) {
                    $newAddonObjJsonDataForCaseManagment = json_decode($getAddOnObjectData['new_addon_obj'], true);
                    if(isset($newAddonObjJsonDataForCaseManagment['mark_as_completed_addon']) && $newAddonObjJsonDataForCaseManagment['mark_as_completed_addon'] == 1) {
                        $markAsCompletedAddonSetting = (isset($newAddonObjJsonDataForCaseManagment['mark_as_completed_addon_setting']) && $newAddonObjJsonDataForCaseManagment['mark_as_completed_addon_setting'] != '' ? json_decode($newAddonObjJsonDataForCaseManagment['mark_as_completed_addon_setting'], true) : []);
                        if(!empty($markAsCompletedAddonSetting)) {
                            if(isset($markAsCompletedAddonSetting['mark_tasks_array']) && !empty($markAsCompletedAddonSetting['mark_tasks_array'])) {
                                $taskManagementWhere = '';
                                foreach($taskFilter as $taskFilterKey => $taskFilterValue) {
                                    $task_index = null;
                                    if(!in_array(strtolower($taskFilterValue), $valueArray)) {
                                        return Response::json(['status' => 'error', 'result' => "value should be yes, no or in_process for $taskFilterKey"]);
                                    }
                                    if(isset($taskFilterValue) && ($taskFilterValue == 'yes' || $taskFilterValue == 'Yes' || $taskFilterValue == 'YES' || $taskFilterValue == 'yEs' || $taskFilterValue == 'yES' || $taskFilterValue == 'YeS' || $taskFilterValue == 'YEs')) {
                                        $taskFilterValue = 'done';
                                    } if(isset($taskFilterValue) && ($taskFilterValue == 'in process' || $taskFilterValue == 'in Process' || $taskFilterValue == 'in_process' || $taskFilterValue == 'in_Process' || $taskFilterValue == 'In process' || $taskFilterValue == 'In Process' || $taskFilterValue == 'In_process' || $taskFilterValue == 'In_Process' || $taskFilterValue == 'inprocess' || $taskFilterValue == 'inProcess' || $taskFilterValue == 'Inprocess' || $taskFilterValue == 'inProcess' || $taskFilterValue == 'in-process' || $taskFilterValue == 'in-Process' || $taskFilterValue == 'In-process' || $taskFilterValue == 'In-Process')) {
                                        $taskFilterValue = 'in_process';
                                    } if(isset($taskFilterValue) && ($taskFilterValue == 'no' || $taskFilterValue == 'No' || $taskFilterValue == 'NO' || $taskFilterValue == 'nO')) {
                                        $taskFilterValue = 'no';
                                    }
                                    foreach($markAsCompletedAddonSetting['mark_tasks_array'] as $markTasksArrayKey => $markTasksArrayValue) {
                                        if($markTasksArrayValue['tasknames'] == $taskFilterKey) {
                                            $contractType = $markTasksArrayValue['contract_type_selected'];
                                            $marked_offer_status = $markTasksArrayValue['marked_addon_status'];
                                            $task_index = $markTasksArrayKey;
                                            if($taskManagementWhere != '') {
                                                $taskManagementWhere .= " AND ";
                                            }
                                            $taskManagementWhere .= " ( ";
                                            $taskManagementWhere .= " JSON_EXTRACT(`simplesign_ofsd`.`multi_case_management`, '$.*.task_no') LIKE '%\"$markTasksArrayKey\"%' AND JSON_EXTRACT(`simplesign_ofsd`.`multi_case_management`, '$.*.status_text') LIKE '%\"$taskFilterValue\"%' ";
                                            if($contractType) {
                                                $taskManagementWhere .= " AND simplesign_ofsd.contract_type_id in (".join(",", $contractType).")  ";
                                            }
                                            if($marked_offer_status && isset($marked_offer_status[0]) && $marked_offer_status[0]) {
                                                $taskManagementWhere .= " AND simplesign_offer_sent.offer_status in (".join(",", $marked_offer_status).")  ";
                                            }
                                            $taskManagementWhere .= " )";
                                        }
                                    }
                                    if($task_index !== null) {
                                        $taskFilterArray[] = ['task_name' => $taskFilterKey, 'task_val' => $taskFilterValue, 'task_index' => $task_index];
                                    } else {
                                        return Response::json(['status' => 'error', 'result' => "Task filter $taskFilterKey not found"]);
                                    }
                                }

                                $offerSentObjectForIds = $offerSentObject->whereRaw($taskManagementWhere);
                                $offerSentObjectForIds = $offerSentObjectForIds->select('offer_sent.id', 'offer_sent.unique_id', 'offer_sent.offer_status', 'ofsd.multi_case_management', 'ofsd.contract_type_id')->orderBy('offer_sent.id', 'desc')->get()->toArray();
                                foreach($offerSentObjectForIds as $offerSentObjectForIdsKey => $offerSentObjectForIdsValue) {
                                    $MatchingStatus = false;
                                    if($offerSentObjectForIdsValue['multi_case_management'] != '') {
                                        $matchingNum = 0;
                                        $multiCaseManagementJsonDecodeForFilter = json_decode($offerSentObjectForIdsValue['multi_case_management'], true);
                                        foreach($multiCaseManagementJsonDecodeForFilter as $taskSKey1 => $taskSVal1) {
                                            foreach($taskFilterArray as $taskFKey1 => $taskFVal1) {
                                                if($taskSVal1['status_text'] == $taskFVal1['task_val'] && isset($taskSVal1['task_no']) && $taskSVal1['task_no'] == $taskFVal1['task_index']) {
                                                    $matchingNum++;
                                                }
                                            }
                                        }
                                        if(count($taskFilterArray) == $matchingNum) {
                                            $MatchingStatus = true;
                                        }
                                    }
                                    if($MatchingStatus) {
                                        array_push($caseManagementOfferSentIds, $offerSentObjectForIdsValue['id']);
                                    }
                                }
                                if(!$offerSentObjectForIds || $taskManagementWhere == '') {
                                    return Response::json(['status' => 'error', 'result' => 'No record(s) found.']);
                                }
                            }
                        }
                    } else {
                        return Response::json(['status' => 'error', 'result' => 'Task management feature is not enabled in your account, Contact Simplesign support for task management activation.']);
                    }
                }
                if(count($caseManagementOfferSentIds) > 0) {
                    $offerSentObject = $offerSentObject->whereIn('offer_sent.id', $caseManagementOfferSentIds);
                } else {
                    return Response::json(['status' => 'error', 'result' => 'No record(s) found.']);
                }
            } else {
                return Response::json(['status'=>'error','result' => 'Task filter is invalid format, JSON is required']);
            }
        }
        //case managment filter ending

        if(isset($data['completed_fromdate']) && $data['completed_fromdate'] != '') {
            $timeZone = 'UTC';
            $taskFromDate = $taskTodate = $yearMonthDateFormatFrom = $yearMonthDateFormatTo = '';
            if($dateTime->createFromFormat('Y-m-d', $data['completed_fromdate']) !== FALSE) {
                $yearMonthDateFormatFrom = 'Y-m-d';
                $taskFromDate = $dateTime->createFromFormat($yearMonthDateFormatFrom, $data['completed_fromdate'])->format($yearMonthDateFormatFrom);
            } elseif($dateTime->createFromFormat('Y-m-d-H-i-s', $data['completed_fromdate']) !== FALSE) {
                $yearMonthDateFormatFrom = 'Y-m-d H:i:s';
                $taskFromDate = $dateTime->createFromFormat('Y-m-d-H-i-s', $data['completed_fromdate'])->format($yearMonthDateFormatFrom);
            }
            //if($_SERVER['HTTP_HOST'] == 'acceptance.simplesign.io') {
                $taskFromDate = $utility->changeTimeZone($taskFromDate, $yearMonthDateFormatFrom, $userTimeZone, $timeZone);
            /* } else {
                $taskFromDate = $utility->changeTimeZone($taskFromDate, $yearMonthDateFormatFrom, $userTimeZone, $timeZone);
            } */
            if(isset($data['completed_todate']) && $data['completed_todate'] != '') {
                if($dateTime->createFromFormat('Y-m-d', $data['completed_todate']) !== FALSE) {
                    $yearMonthDateFormatTo = 'Y-m-d';
                    $taskTodate = $dateTime->createFromFormat($yearMonthDateFormatTo, $data['completed_todate'])->format($yearMonthDateFormatTo);
                } elseif($dateTime->createFromFormat('Y-m-d-H-i-s', $data['completed_todate']) !== FALSE) {
                    $yearMonthDateFormatTo = 'Y-m-d H:i:s';
                    $taskTodate = $dateTime->createFromFormat('Y-m-d-H-i-s', $data['completed_todate'])->format($yearMonthDateFormatTo);
                }
                //if($_SERVER['HTTP_HOST'] == 'acceptance.simplesign.io') {
                    $taskTodate = $utility->changeTimeZone($taskTodate, $yearMonthDateFormatTo, $userTimeZone, $timeZone);
                /* } else {
                    $taskTodate = $utility->changeTimeZone($taskTodate, $yearMonthDateFormatTo, $userTimeZone, $timeZone);
                } */
            } elseif($taskFromDate != '') {
                //elseif used because if user didn't pass completed_todate so variable just add date value by default
                if($dateTime->createFromFormat('Y-m-d', $taskFromDate) !== FALSE) {
                    $taskTodate = date('Y-m-d').' 23:59:59';
                } elseif($dateTime->createFromFormat('Y-m-d-H-i-s', $taskFromDate) !== FALSE) {
                    $taskTodate = date('Y-m-d H:i:s');
                } else {
                    $taskTodate = date('Y-m-d').' 23:59:59';
                }
            }
            $caseManagementOfferSentIds = [];
            $taskFilterArrayDate = [];
            if($getAddOnObjectData['new_addon_obj'] != '') {
                $newAddonObjJsonDataForCaseManagment = json_decode($getAddOnObjectData['new_addon_obj'], true);
                if(isset($newAddonObjJsonDataForCaseManagment['mark_as_completed_addon']) && $newAddonObjJsonDataForCaseManagment['mark_as_completed_addon'] == 1) {
                    $markAsCompletedAddonSetting = (isset($newAddonObjJsonDataForCaseManagment['mark_as_completed_addon_setting']) && $newAddonObjJsonDataForCaseManagment['mark_as_completed_addon_setting'] != '' ? json_decode($newAddonObjJsonDataForCaseManagment['mark_as_completed_addon_setting'], true) : []);
                    if(!empty($markAsCompletedAddonSetting)) {
                        if(isset($markAsCompletedAddonSetting['mark_tasks_array']) && !empty($markAsCompletedAddonSetting['mark_tasks_array'])) {
                            $taskManagementWhere = '';
                            $task_index = null;
                            foreach($markAsCompletedAddonSetting['mark_tasks_array'] as $markTasksArrayKey => $markTasksArrayValue) {
                                if($markTasksArrayValue['tasknames']) {
                                    $contractType = $markTasksArrayValue['contract_type_selected'];
                                    $marked_offer_status = $markTasksArrayValue['marked_addon_status'];
                                    $task_index = $markTasksArrayKey;
                                    if($taskManagementWhere != '') {
                                        $taskManagementWhere .= " AND ";
                                    }
                                    $taskManagementWhere .= " ( ";
                                    //AND JSON_EXTRACT(`simplesign_ofsd`.`multi_case_management`, '$.*.status_text') LIKE '%done%'
                                    $taskManagementWhere .= " JSON_EXTRACT(`simplesign_ofsd`.`multi_case_management`, '$.*.task_no') LIKE '%\"$markTasksArrayKey\"%' ";
                                    $taskManagementWhere .= " AND simplesign_ofsd.mark_completed = '1' AND simplesign_ofsd.mark_completed_date BETWEEN '$taskFromDate' AND '$taskTodate' ";
                                    if($contractType) {
                                        $taskManagementWhere .= " AND simplesign_ofsd.contract_type_id in (".join(",", $contractType).")  ";
                                    }
                                    if($marked_offer_status && isset($marked_offer_status[0]) && $marked_offer_status[0]) {
                                        $taskManagementWhere .= " AND simplesign_offer_sent.offer_status in (".join(",", $marked_offer_status).")  ";
                                    }
                                    $taskManagementWhere .= " )";
                                }
                            }
                            if($task_index !== null) {
                                $taskFilterArrayDate[] = ['task_index' => $task_index];
                            } else {
                                return Response::json(['status' => 'error', 'result' => "Task filter not found"]);
                            }
                            $offerSentObjectForIds = $offerSentObject->whereRaw($taskManagementWhere);
                            $offerSentObjectForIds = $offerSentObjectForIds->select('offer_sent.sender_id', 'offer_sent.id', 'offer_sent.unique_id', 'offer_sent.offer_status', 'ofsd.multi_case_management', 'ofsd.contract_type_id')->orderBy('offer_sent.id', 'desc')->get()->toArray();
                            foreach($offerSentObjectForIds as $offerSentObjectForIdsKey => $offerSentObjectForIdsValue) {
                                $MatchingStatus = false;
                                if($offerSentObjectForIdsValue['multi_case_management'] != '') {
                                    $matchingNum = 0;
                                    $multiCaseManagementJsonDecodeForFilter = json_decode($offerSentObjectForIdsValue['multi_case_management'], true);
                                    foreach($multiCaseManagementJsonDecodeForFilter as $taskSKey1 => $taskSVal1) {
                                        foreach($taskFilterArrayDate as $taskFKey1 => $taskFVal1) {
                                            if(isset($taskSVal1['task_no']) && $taskSVal1['task_no'] == $taskFVal1['task_index']) {
                                                $matchingNum++;
                                            }
                                        }
                                    }
                                    if(count($taskFilterArrayDate) == $matchingNum) {
                                        $MatchingStatus = true;
                                    }
                                }
                                if($MatchingStatus) {
                                    array_push($caseManagementOfferSentIds, $offerSentObjectForIdsValue['id']);
                                }
                            }
                            if(!$offerSentObjectForIds || $taskManagementWhere == '') {
                                return Response::json(['status' => 'error', 'result' => 'No record(s) found']);
                            }
                        }
                    }
                } else {
                    return Response::json(['status' => 'error', 'result' => 'Task management feature is not enabled in your account, Contact Simplesign support for task management activation.']);
                }
            }
            if(count($caseManagementOfferSentIds) > 0) {
                $offerSentObject = $offerSentObject->whereIn('offer_sent.id', $caseManagementOfferSentIds);
            } else {
                return Response::json(['status' => 'error', 'result' => 'No record(s) found']);
            }
        }

        $offerSentObject = $offerSentObject->where('offer_sent.offer_status', '!=', 7)->where('offer_sent.offer_type', '!=', 5)->where('offer_sent.offer_status', '!=', 10)->whereIn('offer_sent.sender_id', $allUserIds);
        if(isset($data['document_id']) && $data['document_id'] != '') {
            $offerSentObject = $offerSentObject->where('offer_sent.id', $data['document_id']);
        }
        $offerSentObject = $offerSentObject->orWhere(function ($query) use($allUserIds, $whereRaw, $data, $caseManagementOfferSentIds) {
            $query->where('offer_sent.offer_status', '>', 3)->where('offer_sent.offer_type', '=', 5)->whereIn('offer_sent.sender_id', $allUserIds)->whereRaw($whereRaw);
            if(count($caseManagementOfferSentIds) > 0) {
                $query = $query->whereIn('offer_sent.id', $caseManagementOfferSentIds);
            }
            if(isset($data['document_id']) && $data['document_id'] != '') {
                $query = $query->where('offer_sent.id', $data['document_id']);
            }
        })->select('offer_sent.id', 'offer_sent.offer_id', 'offer_sent.language_id', 'offer_sent.timedateformat', 'offer_sent.visible_name', 'offer_sent.name', 'offer_sent.created_date', 'offer_sent.signed_date', 'offer_sent.due_days', 'offer_sent.due_date', 'offer_sent.reminder_days', 'offer_sent.offer_status', 'offer_sent.offer_type', 'offer_sent.sender_id');

        //})->select('offer_sent.id', 'offer_sent.offer_id', 'offer_sent.language_id', 'offer_sent.timedateformat', 'offer_sent.visible_name', 'offer_sent.name', 'offer_sent.created_date', 'offer_sent.signed_date', 'offer_sent.due_days', 'offer_sent.due_date', 'offer_sent.reminder_days', 'offer_sent.offer_status', 'offer_sent.offer_type', 'offer_sent.sender_id', 'offer_sent.content');

        if(isset($data['document_id']) && $data['document_id'] != '') {
            $offerSentData = $offerSentObject->first();
            if($offerSentData) {
                $totalOfferSentData = $offerSentObject->count();
                $offerSentData = array($offerSentData);
            }
        } else {
            $totalOfferSentData = $offerSentObject->count();
            $offerSentData = $offerSentObject->orderBy('offer_sent.id', 'desc')->skip($skipRecords)->take($pageLimit)->get()->toArray();
        }

        if(empty($offerSentData)) {
            return Response::json(['status' => 'error', 'result' => 'No record(s) found']);
        }

        foreach($offerSentData as $sentDataKey => $sentDataValue) {
            array_push($offerSentIds, $sentDataValue['id']);
        }

        //collect content
        $contentRecords = Offersent::whereIn('id', $offerSentIds)->select('id', 'content')->get()->toArray();
        $contentRecords = collect($contentRecords);

        $selectRaw = "CAST(AES_DECRYPT(simplesign_offer_send_details.user_details,'".env('ENCRYPT_KEY')."','".env('ENCRYPT_IV')."') AS CHAR) as user_details";
        DB::statement(' SET block_encryption_mode = \''.env('ENCRYPT_CIPHER').'\'');

        $contractData = Offersentdetails::whereIn('offer_sent_id', $offerSentIds)->select('offer_send_details.offer_status', DB::raw($selectRaw), 'is_sender', 'offer_send_details.id AS detail_id', 'offer_sent_id', 'req_attached', 'document_read_date', 'signed_date', 'authentication_method', 'role', 'invitation_type', 'invitation_order', 'offer_confirmation', 'id_attachments', 'id', 'unique_id', 'forward_status', 'forward_user_details', 'forward_signed')->get()->toArray();

        //DB::enableQueryLog();
        //print_r(DB::getQueryLog());
        if($user_id > 0) {
            if($contractData) {
                $responseArray = $pagination = $sentIdsForIndexdata = [];
                foreach($offerSentData as $sentIdsKey => $sentIdsValue) {
                    $sentIdsValue['content'] = $contentRecords->where('id', $sentIdsValue['id'])->pluck('content')->first();
                    $eachSentId = $sentIdsValue['id'];
                    $languageId = $sentIdsValue['language_id'];
                    array_push($sentIdsForIndexdata, $sentIdsValue['id']);
                    $peoples = $senderDetails = $documentFields = $accountDetails = $documentDetails = [];
                    foreach($contractData as $contractDataKey => $contractDataValue) {
                        $peopleFields = $organizationFields = $details = $inviteAndForwardDetails = [];
                        $nameExplode = $uniqueId = $documentLink = '';
                        
                        $recipientUserDetailsJsonDecode = json_decode($contractDataValue['user_details'], true);
                        //$peopleFields['detail_id'] = $contractDataValue['detail_id'];
                        //$peopleFields['offer_sent_id'] = $contractDataValue['offer_sent_id'];
                        $userRole = (isset($recipientUserDetailsJsonDecode['recrolename']) && $recipientUserDetailsJsonDecode['recrolename'] != '' ? $recipientUserDetailsJsonDecode['recrolename'] : (isset($recipientUserDetailsJsonDecode['partyname']) && $recipientUserDetailsJsonDecode['partyname'] != '' ? $recipientUserDetailsJsonDecode['partyname'] : ''));

                        if($contractDataValue['offer_sent_id'] == $eachSentId && $contractDataValue['is_sender'] == 1) {
                        //for regular contract sender use full_name key and for online contract sender use first_name key
                            $senderDetails['name'] = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? trim($recipientUserDetailsJsonDecode['full_name']) : (isset($recipientUserDetailsJsonDecode['first_name']) && $recipientUserDetailsJsonDecode['first_name'] != '' ? trim($recipientUserDetailsJsonDecode['first_name']) : ''));
                            $senderDetails['email'] = (isset($recipientUserDetailsJsonDecode['email']) && $recipientUserDetailsJsonDecode['email'] != '' ? trim(preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $recipientUserDetailsJsonDecode['email'])) : '');

                            $userCustomFields = (isset($recipientUserDetailsJsonDecode['user_customfields']) && $recipientUserDetailsJsonDecode['user_customfields'] != '' ? json_decode($recipientUserDetailsJsonDecode['user_customfields'], true) : []);
                            if(!empty($userCustomFields)) {
                                foreach($userCustomFields as $userCustomFldkey => $userCustomFldValue) {
                                    $senderDetails[trim($userCustomFldkey)] = (isset($userCustomFldValue) && $userCustomFldValue != '' ? trim($userCustomFldValue) : '');
                                }
                            }

                            $accountDetails['company'] = (isset($recipientUserDetailsJsonDecode['company']) && $recipientUserDetailsJsonDecode['company'] != '' ? trim($recipientUserDetailsJsonDecode['company']) : '');
                            $accountDetails['reg_no'] = (isset($recipientUserDetailsJsonDecode['reg_no']) && $recipientUserDetailsJsonDecode['reg_no'] != '' ? trim($recipientUserDetailsJsonDecode['reg_no']) : '');
                            $accountDetails['address'] = (isset($recipientUserDetailsJsonDecode['address']) && $recipientUserDetailsJsonDecode['address'] != '' ? trim($recipientUserDetailsJsonDecode['address']) : '');
                            $accountDetails['phone_no'] = (isset($recipientUserDetailsJsonDecode['mobile']) && $recipientUserDetailsJsonDecode['mobile'] != '' ? trim($recipientUserDetailsJsonDecode['mobile']) : (isset($recipientUserDetailsJsonDecode['telephone']) && $recipientUserDetailsJsonDecode['telephone'] != '' ? trim($recipientUserDetailsJsonDecode['telephone']) : ''));
                            $accountDetails['zipcode'] = (isset($recipientUserDetailsJsonDecode['zipcode']) && $recipientUserDetailsJsonDecode['zipcode'] != '' ? trim($recipientUserDetailsJsonDecode['zipcode']) : (isset($recipientUserDetailsJsonDecode['post_code']) && $recipientUserDetailsJsonDecode['post_code'] != '' ? trim($recipientUserDetailsJsonDecode['post_code']) : ''));
                            $accountDetails['city'] = (isset($recipientUserDetailsJsonDecode['city']) && $recipientUserDetailsJsonDecode['city'] != '' ? trim($recipientUserDetailsJsonDecode['city']) : '');

                            $documentLink = $domain_name.'document/view/'.$contractDataValue['detail_id'].'/'.$contractDataValue['unique_id'];
                        }

                        $uniqueId = $contractDataValue['unique_id'];
                        $recipientFieldsRolesTabFields = (isset($recipientUserDetailsJsonDecode['Recipient_fields_roles_tab_fields']) && !empty($recipientUserDetailsJsonDecode['Recipient_fields_roles_tab_fields']) ? json_decode($recipientUserDetailsJsonDecode['Recipient_fields_roles_tab_fields'], true) : '');
                        $recinfoFields = ($recipientFieldsRolesTabFields != '' ? $recipientFieldsRolesTabFields['recinfo_fields'] : '');
                        //getting recipient data starting
                        if($contractDataValue['offer_sent_id'] == $eachSentId && $contractDataValue['is_sender'] == 0) {
                            //for regular contract recipient use full_name key
                            if(isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '') {
                                if((isset($recinfoFields['last_name']) && $recinfoFields['last_name'] == 1) || (isset($recipientUserDetailsJsonDecode['last_name']) && $recipientUserDetailsJsonDecode['last_name'] != '')) {
                                    $nameExplode = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($recipientUserDetailsJsonDecode['full_name'])) : '');
                                    if(isset($recipientUserDetailsJsonDecode['last_name']) && $recipientUserDetailsJsonDecode['last_name'] != '' && isset($nameExplode[1]) && $nameExplode[1] != '' && $nameExplode[1] != $recipientUserDetailsJsonDecode['last_name']) {
                                        $peopleFields['first_name'] = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? $recipientUserDetailsJsonDecode['full_name'] : '');
                                        $peopleFields['last_name'] = (isset($recipientUserDetailsJsonDecode['last_name']) && $recipientUserDetailsJsonDecode['last_name'] != '' ? $recipientUserDetailsJsonDecode['last_name'] : '');
                                    } else {
                                        $peopleFields['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                                        $peopleFields['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                                    }
                                } else {
                                    $nameExplode = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($recipientUserDetailsJsonDecode['full_name'])) : '');
                                    $peopleFields['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                                    $peopleFields['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                                }
                                /* if((isset($recinfoFields['last_name']) && $recinfoFields['last_name'] == 1) || (isset($recipientUserDetailsJsonDecode['last_name']) && $recipientUserDetailsJsonDecode['last_name'] != '')) {
                                    $peopleFields['first_name'] = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? $recipientUserDetailsJsonDecode['full_name'] : '');
                                    $peopleFields['last_name'] = (isset($recipientUserDetailsJsonDecode['last_name']) && $recipientUserDetailsJsonDecode['last_name'] != '' ? $recipientUserDetailsJsonDecode['last_name'] : '');
                                } else {
                                    $nameExplode = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($recipientUserDetailsJsonDecode['full_name'])) : '');
                                    $peopleFields['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                                    $peopleFields['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                                } */
                            } elseif(isset($recipientUserDetailsJsonDecode['name']) && $recipientUserDetailsJsonDecode['name'] != '') {
                                //for online contract recipient use name key
                                $nameExplode = (isset($recipientUserDetailsJsonDecode['name']) && $recipientUserDetailsJsonDecode['name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($recipientUserDetailsJsonDecode['name'])) : '');
                                $peopleFields['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                                $peopleFields['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                            }

                            //recipient information in peopleFields starting
                            $peopleFields['email'] = (isset($recipientUserDetailsJsonDecode['email']) && $recipientUserDetailsJsonDecode['email'] != '' ? trim(preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $recipientUserDetailsJsonDecode['email'])) : '');
                            //$peopleFields['personal_no'] = (isset($recipientUserDetailsJsonDecode['personnr']) && $recipientUserDetailsJsonDecode['personnr'] != '' ? trim($recipientUserDetailsJsonDecode['personnr']) : '');
                            //$peopleFields['personal_no'] = (isset($recipientUserDetailsJsonDecode['personnr']) && $recipientUserDetailsJsonDecode['personnr'] != '' ? (strlen(trim($recipientUserDetailsJsonDecode['personnr'])) == 12 || strlen(trim($recipientUserDetailsJsonDecode['personnr'])) == 13 ? substr(trim($recipientUserDetailsJsonDecode['personnr']), 2) : trim($recipientUserDetailsJsonDecode['personnr'])) : '');
                            if($parent_id == 12665 || $parent_id == 15307) {
                                $peopleFields['personal_no'] = (isset($recipientUserDetailsJsonDecode['personnr']) && $recipientUserDetailsJsonDecode['personnr'] != '' ? (strlen(trim($recipientUserDetailsJsonDecode['personnr'])) == 12 || strlen(trim($recipientUserDetailsJsonDecode['personnr'])) == 13 ? substr(trim($recipientUserDetailsJsonDecode['personnr']), 2) : trim($recipientUserDetailsJsonDecode['personnr'])) : '');
                            } else {
                                $peopleFields['personal_no'] = (isset($recipientUserDetailsJsonDecode['personnr']) && $recipientUserDetailsJsonDecode['personnr'] != '' ? trim($recipientUserDetailsJsonDecode['personnr']) : '');
                            }
                            $peopleFields['mobile'] = (isset($recipientUserDetailsJsonDecode['mobile']) && $recipientUserDetailsJsonDecode['mobile'] != '' ? trim($recipientUserDetailsJsonDecode['mobile']) : '');
                            $peopleFields['address'] = (isset($recipientUserDetailsJsonDecode['address']) && $recipientUserDetailsJsonDecode['address'] != '' ? trim($recipientUserDetailsJsonDecode['address']) : '');
                            $peopleFields['city'] = (isset($recipientUserDetailsJsonDecode['city']) && $recipientUserDetailsJsonDecode['city'] != '' ? trim($recipientUserDetailsJsonDecode['city']) : '');
                            $peopleFields['zipcode'] = (isset($recipientUserDetailsJsonDecode['zipcode']) && $recipientUserDetailsJsonDecode['zipcode'] != '' ? trim($recipientUserDetailsJsonDecode['zipcode']) : (isset($recipientUserDetailsJsonDecode['zip']) && $recipientUserDetailsJsonDecode['zip'] != '' ? trim($recipientUserDetailsJsonDecode['zip']) : ''));
                            //recipient information in peopleFields ending

                            //people information of new fields starting
                            if(isset($recipientUserDetailsJsonDecode['extra_fields']) && !empty($recipientUserDetailsJsonDecode['extra_fields'])) {
                                $recipientFieldsWithoutValue = (isset($recipientUserDetailsJsonDecode['recipientfields']) && !empty($recipientUserDetailsJsonDecode['recipientfields']) ? json_decode($recipientUserDetailsJsonDecode['recipientfields'], true) : []);

                                $extraFields = (isset($recipientUserDetailsJsonDecode['extra_fields']) && !empty($recipientUserDetailsJsonDecode['extra_fields']) ? json_decode($recipientUserDetailsJsonDecode['extra_fields'], true) : []);
                                if($extraFields) {
                                    $intersect = array_uintersect($extraFields, $recipientFieldsWithoutValue, function($val1, $val2) {
                                        return strcmp($val1['fieldName'], $val2['fieldName']);
                                    });
                                    $intersect = array_values($intersect);
                                } else {
                                    $intersect = [];
                                }

                                //$intersect = array_values($intersect);
                                if(!empty($intersect)) {
                                    foreach($intersect as $extraFldKey => $extraFldValue) {
                                        $peopleFields[$extraFldValue['fieldName']] = $extraFldValue['fieldValue'];
                                    }
                                }
                            }
                            //people information of new fields ending

                            //organization information of recipient starting
                            if(isset($recipientUserDetailsJsonDecode['organization_fields'])) {
                                $orgFields = json_decode($recipientUserDetailsJsonDecode['organization_fields'], true);
                                foreach($orgFields as $orgFldsKey => $orgFldsValue) {
                                    $orgFldsValue['orgFieldName'] = str_replace('name', 'organization_name', $orgFldsValue['orgFieldName']);
                                    $orgFldsValue['orgFieldName'] = str_replace('org_no', 'organization_no', $orgFldsValue['orgFieldName']);
                                    $orgFldsValue['orgFieldName'] = str_replace('phone', 'organization_phone', $orgFldsValue['orgFieldName']);
                                    $orgFldsValue['orgFieldName'] = str_replace('address', 'organization_address', $orgFldsValue['orgFieldName']);
                                    $orgFldsValue['orgFieldName'] = str_replace('city', 'organization_city', $orgFldsValue['orgFieldName']);
                                    $orgFldsValue['orgFieldName'] = str_replace('zipcode', 'organization_zipcode', $orgFldsValue['orgFieldName']);
                                    $organizationFields[$orgFldsValue['orgFieldName']] = $orgFldsValue['orgFieldValue'];
                                }
                            } else {
                                if(isset($recipientUserDetailsJsonDecode['org_name']) && $recipientUserDetailsJsonDecode['org_name'] != '') {
                                    $organizationFields['organization_name'] = $recipientUserDetailsJsonDecode['org_name'];
                                }
                                if(isset($recipientUserDetailsJsonDecode['org_reg_no']) && $recipientUserDetailsJsonDecode['org_reg_no'] != '') {
                                    $organizationFields['organization_no'] = $recipientUserDetailsJsonDecode['org_reg_no'];
                                }
                                if(isset($recipientUserDetailsJsonDecode['org_mobile']) && $recipientUserDetailsJsonDecode['org_mobile'] != '') {
                                    $organizationFields['organization_phone'] = $recipientUserDetailsJsonDecode['org_mobile'];
                                }
                                if(isset($recipientUserDetailsJsonDecode['org_address']) && $recipientUserDetailsJsonDecode['org_address'] != '') {
                                    $organizationFields['organization_address'] = $recipientUserDetailsJsonDecode['org_address'];
                                }
                                if(isset($recipientUserDetailsJsonDecode['org_city']) && $recipientUserDetailsJsonDecode['org_city'] != '') {
                                    $organizationFields['organization_city'] = $recipientUserDetailsJsonDecode['org_city'];
                                }
                                if(isset($recipientUserDetailsJsonDecode['org_zip']) && $recipientUserDetailsJsonDecode['org_zip'] != '') {
                                    $organizationFields['organization_zipcode'] = $recipientUserDetailsJsonDecode['org_zip'];
                                }
                            }
                            //organization information of recipient ending

                            //organization information of new fields starting
                            if(isset($recipientUserDetailsJsonDecode['org_extra_fields']) && !empty($recipientUserDetailsJsonDecode['org_extra_fields'])) {
                                $organizationFieldsWithoutValue = (isset($recipientUserDetailsJsonDecode['organizationfields']) && !empty($recipientUserDetailsJsonDecode['organizationfields']) ? json_decode($recipientUserDetailsJsonDecode['organizationfields'], true) : []);

                                $orgExtraFields = (isset($recipientUserDetailsJsonDecode['org_extra_fields']) && !empty($recipientUserDetailsJsonDecode['org_extra_fields']) ? json_decode($recipientUserDetailsJsonDecode['org_extra_fields'], true) : []);
                                if($orgExtraFields) {
                                    $intersectOrg = array_uintersect($orgExtraFields, $organizationFieldsWithoutValue, function($val1, $val2) {
                                        return strcmp($val1['fieldName'], $val2['fieldName']);
                                    });
                                    $intersectOrg = array_values($intersectOrg);
                                } else {
                                    $intersectOrg = [];
                                }

                                if(!empty($intersectOrg)) {
                                    foreach($intersectOrg as $orgExtraFldKey => $orgExtraFldValue) {
                                        $organizationFields[$orgExtraFldValue['fieldName']] = $orgExtraFldValue['fieldValue'];
                                    }
                                }
                            }
                            /*if(isset($recipientUserDetailsJsonDecode['org_extra_fields']) && !empty($recipientUserDetailsJsonDecode['org_extra_fields'])) {
                                $orgExtraFields = json_decode($recipientUserDetailsJsonDecode['org_extra_fields'], true);
                                if(!empty($orgExtraFields)) {
                                    foreach($orgExtraFields as $orgExtraFldKey => $orgExtraFldValue) {
                                        $organizationFields[$orgExtraFldValue['fieldName']] = $orgExtraFldValue['fieldValue'];
                                    }
                                }
                            }*/
                            //organization information of new fields ending

                            //organization information of fields which are placed at document starting
                            $content = Tcrypt::decrypter($sentIdsValue['content']);
                            if($content != '') {
                                $html = new \Htmldom($content);
                                foreach($html->find('.text') as $findKey => $findValue) {
                                    //codition for regular contract starting
                                    if(isset($recipientUserDetailsJsonDecode['id']) && $recipientUserDetailsJsonDecode['id'] == $findValue->recipientselectedid) {
                                        if(strpos($findValue->getAttribute('class'), 'peopleNewField') !== false) {
                                            if($findValue->find('h4', 0)) {
                                                $peopleFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                            } else {
                                                if($findValue->find('p', 0)) {
                                                    $peopleFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                                }
                                            }
                                        } if(strpos($findValue->getAttribute('class'), 'organizationNewField') !== false) {
                                            if($findValue->find('h4', 0)) {
                                                $organizationFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                            } else {
                                                if($findValue->find('p', 0)) {
                                                    $organizationFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                                }
                                            }
                                        }
                                        //codition for regular contract ending
                                    } else {
                                        //codition for online contract starting
                                        //if($userRole == $findValue->parent()->parent()->whowillfill) {
                                        if($userRole == $findValue->recipientselected) {
                                            if(strpos($findValue->getAttribute('class'), 'peopleNewField') !== false) {
                                                if($findValue->find('h4', 0)) {
                                                    $peopleFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                                } else {
                                                    //right now paragraph tag is showing and will be replaced by h4 near future starting
                                                    if($findValue->find('p', 0)) {
                                                        $peopleFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                                    }
                                                    //right now paragraph tag is showing and will be replaced by h4 near future ending
                                                }
                                            } if(strpos($findValue->getAttribute('class'), 'organizationNewField') !== false) {
                                                if($findValue->find('h4', 0)) {
                                                    $organizationFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                                } else {
                                                    //right now paragraph tag is showing and will be replaced by h4 near future starting
                                                    if($findValue->find('p', 0)) {
                                                        $organizationFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                                    }
                                                    //right now paragraph tag is showing and will be replaced by h4 near future ending
                                                }
                                            }
                                        }
                                        //codition for online contract ending
                                    }
                                }   //foreach loop condition ends here

                                $dynamicElements = [];
                                foreach($html->find('.template_container') as $temConKey => $temConValue) {
                                    $arrayPush = [];
                                    foreach($temConValue->find('.formElement') as $findKey => $findValue) {
                                        
                                        $elementStyle = $findValue->getAttribute('style');
                                        $arrCSS = $utility->parse_css($elementStyle);
                                        $parentDiv = $findValue->parent()->parent();

                                        //Fixing Position when field is inside the borderbox or textbox START
                                        $addtop = 0;
                                        $addleft = 0;
                                        if(strpos($parentDiv->getAttribute('class'), 'dynamic_border') !== false && strpos($parentDiv->getAttribute('class'), 'insert_box_div') === false) {
                                            $parentCSS = $utility->parse_css($parentDiv->getAttribute('style'));
                                            $addtop = (isset($parentCSS['top']) && $parentCSS['top'] != '' ? round($parentCSS['top']) : 0);
                                            $addleft = (isset($parentCSS['left']) && $parentCSS['left'] != '' ? round($parentCSS['left']) : 0);
                                        } elseif(strpos($parentDiv->getAttribute('class'), 'insert_box_div') !== false && strpos($parentDiv->getAttribute('class'), 'dynamic_border') === false) {
                                            $parentCSS = $utility->parse_css($parentDiv->getAttribute('style'));
                                            $addtop = (isset($parentCSS['top']) && $parentCSS['top'] != '' ? round($parentCSS['top']) : 0);
                                            $addleft = (isset($parentCSS['left']) && $parentCSS['left'] != '' ? round($parentCSS['left']) : 0);
                                        } elseif(strpos($parentDiv->getAttribute('class'), 'insert_box_div') !== false  && strpos($parentDiv->getAttribute('class'), 'dynamic_border') !== false) {
                                            $parentCSS = $utility->parse_css($parentDiv->getAttribute('style'));
                                            $addtop = (isset($parentCSS['top']) && $parentCSS['top'] != '' ? round($parentCSS['top']) : 0);
                                            $addleft = (isset($parentCSS['left']) && $parentCSS['left'] != '' ? round($parentCSS['left']) : 0);
                                        }
                                        //Fixing Position when field is inside the borderbox or textbox END

                                        $topPosition = (isset($arrCSS['top']) && $arrCSS['top'] != '' ? round($arrCSS['top'])+$addtop : 0);
                                        $leftPosition = (isset($arrCSS['left']) && $arrCSS['left'] != '' ? round($arrCSS['left'])+$addleft : 0);
                                        array_push($arrayPush, ['top' => $topPosition, 'left' => $leftPosition, 'dynamic_id' => $findValue->dynamic_id]);

                                    }   //formElement loop ends here
                                    if(!empty($arrayPush)) {
                                        sort($arrayPush);
                                        array_push($dynamicElements, $arrayPush);
                                    }
                                }   //template_container loop ends here

                                foreach($dynamicElements as $eachPageKey => $eachPageValue) {
                                    foreach($eachPageValue as $eachElementKey => $eachElementValue) {
                                        $eachDynamic_id = $eachElementValue['dynamic_id'];
                                        $mainDiv = $html->find('[dynamic_id="'.$eachElementValue['dynamic_id'].'"]', 0);
                                        if(!$mainDiv->find('.text', 0)) {
                                            continue;
                                        }
                                        $findValue = $mainDiv->find('.text', 0);
                                        //getting document text fields
                                        if(strpos($findValue->getAttribute('class'), 'documentField') !== false) {
                                            if($findValue->selectedtype != '0') {
                                                $apiAttributeOrSelectedType = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->selectedtype);
                                                if($parent_id == 10719) {
                                                    $apiAttributeOrSelectedType = str_replace(' ', '_', $apiAttributeOrSelectedType);
                                                }
                                                if($findValue->find('h4', 0) && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                                    //$documentFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                                    $documentFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                                } elseif($findValue->find('p', 0) && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                                    //$documentFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                                    $documentFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('p', 0)->plaintext)));
                                                } elseif(strpos($mainDiv->getAttribute('class'), 'relationDisable') === false && (!isset($documentFields[$findValue->selectedtype]))) {
                                                    //comments below line of code and add this condition with elseif and === false
                                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrSelectedType] = '';
                                                }/* elseif(!isset($documentFields[$findValue->selectedtype])) {
                                                    $documentFields[$apiAttributeOrSelectedType] = '';
                                                }

                                                if(strpos($mainDiv->getAttribute('class'), 'relationDisable') !== false && (!isset($documentFields[$findValue->selectedtype]))) {
                                                    $documentFields[$apiAttributeOrSelectedType] = '';
                                                } */
                                            }   //not equal condition ends here
                                        }   //getting document text fields ends here
                                        //getting custom text fields
                                        try {
                                            if(strpos($findValue->getAttribute('class'), 'field_box_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'datepickerfields_new') === false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                                //$documentFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                                $apiAttributeOrSelectedType = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->selectedtype);
                                                if($parent_id == 10719) {
                                                    $apiAttributeOrSelectedType = str_replace(' ', '_', $apiAttributeOrSelectedType);
                                                }
                                                //comment below line on 4 & 5 August 2020 for not show the key if value is empty
                                                //$documentFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                                if(isset($findValue->find('h4', 0)->plaintext) && $findValue->find('h4', 0)->plaintext != '') {
                                                    $documentFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                                }
                                                if(isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '') {
                                                    $documentFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('p', 0)->plaintext)));
                                                }
                                            }
                                        } catch(\Exception $e) {}

                                        try {
                                            if(strpos($findValue->getAttribute('class'), 'field_box_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'datepickerfields_new') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                                //$documentFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                                $apiAttributeOrSelectedType = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->selectedtype);
                                                if($parent_id == 10719) {
                                                    $apiAttributeOrSelectedType = str_replace(' ', '_', $apiAttributeOrSelectedType);
                                                }
                                                //comment below line on 4 & 5 August 2020 for not show the key if value is empty
                                                //$documentFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                                if(isset($findValue->find('h4', 0)->plaintext) && $findValue->find('h4', 0)->plaintext != '') {
                                                    $documentFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                                }
                                                if(isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '') {
                                                    $documentFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('p', 0)->plaintext)));
                                                }
                                            }
                                        } catch(\Exception $e) {}
                                        //getting datepicker fields

                                        //getting document checkbox elements
                                        if(strpos($findValue->getAttribute('class'), 'documentFieldCheckbox') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                            //all values of checkboxes are showing
                                            $apiAttributeOrFieldLabelName = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->fieldlabelname);
                                            if($parent_id == 10719) {
                                                $apiAttributeOrFieldLabelName = str_replace(' ', '_', $apiAttributeOrFieldLabelName);
                                            }
                                            if($findValue->find('.check_icon', 0) && (strpos($findValue->find('.check_icon', 0)->getAttribute('style'), 'visible') !== false || strpos($findValue->getAttribute('class'), 'isChecked') !== false)) {
                                                $documentFields[$apiAttributeOrFieldLabelName] = 'Yes';
                                            } else {
                                                $documentFields[$apiAttributeOrFieldLabelName] = 'No';
                                            }
                                        }   //getting document checkbox elements ends here
                                        //getting custom checkbox elements
                                        if(strpos($findValue->getAttribute('class'), 'check_box_popupcontainer') !== false && strpos($mainDiv->getAttribute('class'), 'chechBoxCustom') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                            $apiAttributeOrFieldLabelName = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->fieldlabelname);
                                            if($parent_id == 10719) {
                                                $apiAttributeOrFieldLabelName = str_replace(' ', '_', $apiAttributeOrFieldLabelName);
                                            }
                                            if($findValue->find('.check_icon', 0) && strpos($findValue->find('.check_icon', 0)->getAttribute('style'), 'visible')) {
                                                $documentFields[$apiAttributeOrFieldLabelName] = 'Yes';
                                            } else {
                                                $documentFields[$apiAttributeOrFieldLabelName] = 'No';
                                            }
                                        }

                                        //getting document droplist elements
                                        $jsonDecodeDropDownValues = (isset($findValue->dropdownvalues) && !empty($findValue->dropdownvalues) ? json_decode(html_entity_decode($findValue->dropdownvalues), true) : []);
                                        $jsonDecodeDropDownAlternativeValues = (isset($findValue->dropdownvalues_alternate) && !empty($findValue->dropdownvalues_alternate) ? json_decode(html_entity_decode($findValue->dropdownvalues_alternate), true) : []);
                                        if(strpos($findValue->getAttribute('class'), 'documentFieldDroplist') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                                            if($parent_id == 10719) {
                                                $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                                            }
                                            if($findValue->find('span.texthere', 0)) {
                                                if(!empty($jsonDecodeDropDownValues) && $findValue->dropdownlabel != trim($findValue->find('span.texthere', 0)->plaintext)) {
                                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('span.texthere', 0)->plaintext))));
                                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->plaintext) && $findValue->find('span.texthere', 0)->plaintext != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                                    }
                                                } elseif(array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('span.texthere', 0)->plaintext))));
                                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->plaintext) && $findValue->find('span.texthere', 0)->plaintext != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                                    }
                                                } else {
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '' ? trim($findValue->selected_altvalue) : ''));
                                                    if(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    }
                                                }
                                            } else {
                                                //for online
                                                if(!empty($jsonDecodeDropDownValues) && $findValue->dropdownlabel != trim($findValue->find('p', 0)->plaintext)) {
                                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('p', 0)->plaintext))));
                                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    } elseif(isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('p', 0)->plaintext);
                                                    }
                                                } elseif(array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('p', 0)->plaintext))));
                                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    } elseif(isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('p', 0)->plaintext);
                                                    }
                                                } else {
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : ''));
                                                    if(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    }
                                                }
                                            }
                                            //remove commented code from here on 5 August 2020
                                        }   //getting document droplist elements ends here
                                        //getting custom droplist elements
                                        if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                                            if($parent_id == 10719) {
                                                $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                                            }
                                            if($findValue->find('span.texthere', 0)) {
                                                if(!empty($jsonDecodeDropDownValues) && $findValue->dropdownlabel != trim($findValue->find('span.texthere', 0)->plaintext)) {
                                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('span.texthere', 0)->plaintext))));
                                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->plaintext) && $findValue->find('span.texthere', 0)->plaintext != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                                    }
                                                } elseif(isset($findValue->find('span.texther', 0)->plaintext) && array_search(trim($findValue->find('span.texther', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('span.texthere', 0)->plaintext))));
                                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->plaintext) && $findValue->find('span.texthere', 0)->plaintext != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                                    }
                                                } else {
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : ''));
                                                    if(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    }
                                                }
                                            } else {
                                                if(!empty($jsonDecodeDropDownValues) && $findValue->dropdownlabel != trim($findValue->find('span.texthere', 0)->plaintext)) {
                                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('p', 0)->plaintext))));
                                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    } elseif(isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('p', 0)->plaintext);
                                                    }
                                                } elseif(isset($findValue->find('span.texther', 0)->plaintext) && array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('p', 0)->plaintext))));
                                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    } elseif(isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('p', 0)->plaintext);
                                                    }
                                                } else {
                                                    //comment below line on 5 August 2020 for not show the key if value is empty
                                                    //$documentFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : ''));
                                                    if(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                                        $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                                    }
                                                }
                                            }
                                            /* if($findValue->find('span.texthere', 0)) {
                                                $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                            } elseif($findValue->find('p', 0)) {
                                                $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('p', 0)->plaintext);
                                            } */
                                        }

                                        //document field droplist with multiple radio button
                                        if(strpos($findValue->getAttribute('class'), 'documentFieldDroplist') !== false && strpos($findValue->getAttribute('class'), 'dropdown_radioList_api') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                                            if($parent_id == 10719) {
                                                $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                                            }
                                            if($findValue->find('.fa-dot-circle-o', 0)) {
                                                //$documentFields[$apiAttributeOrDropDownLabel] = $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext;
                                                $getArrayKey = array_search(trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext), $jsonDecodeDropDownValues);
                                                //comment below line on 5 August 2020 for not show the key if value is empty
                                                //$documentFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? $jsonDecodeDropDownAlternativeValues[$getArrayKey] : $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext);
                                                if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                                    $documentFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                                } elseif(isset($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext) && $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext != '') {
                                                    $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext);
                                                }
                                            } else {
                                                //comment below line on 5 August 2020 for not show the key if value is empty
                                                //$documentFields[$apiAttributeOrDropDownLabel] = '';
                                            }
                                        }
                                        //document field droplist with multiple radio button of custom and me
                                        if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'dropdown_radioList_api') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                                            if($parent_id == 10719) {
                                                $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                                            }
                                            if($findValue->find('.fa-dot-circle-o', 0)) {
                                                //$documentFields[$apiAttributeOrDropDownLabel] = $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext;
                                                $getArrayKey = array_search(trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext), $jsonDecodeDropDownValues);
                                                //comment below line on 5 August 2020 for not show the key if value is empty
                                                $documentFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '' ? $jsonDecodeDropDownAlternativeValues[$getArrayKey] : $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext);
                                                if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                                    $documentFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                                } elseif(isset($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext) && $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext != '') {
                                                    $documentFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext);
                                                }
                                            } else {
                                                //comment below line on 5 August 2020 for not show the key if value is empty
                                                //$documentFields[$apiAttributeOrDropDownLabel] = '';
                                            }
                                        }
                                        //document field droplist with multiple checkboxes
                                        if(strpos($findValue->getAttribute('class'), 'documentFieldDroplist') !== false && strpos($findValue->getAttribute('class'), 'multi_choice_option') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                                            if($parent_id == 10719) {
                                                $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                                            }
                                            //$comma = (count($data["requesttypes"]) > 0 ? ($key+1 == count($data["requesttypes"])-1 ? ' and ' : ($key+1 < count($data["requesttypes"]) ? ', ' : '')) : '');
                                            if($findValue->find('.fa-check', 0)) {
                                                $faCheckValues = [];
                                                foreach($findValue->find('.ionIconsCheck') as $checkBoxKey => $checkBoxValue) {
                                                    if(strpos($checkBoxValue->getAttribute('class'), 'fa-check') !== false) {
                                                        //$faCheckValues[] = $checkBoxValue->parent()->parent()->find('label', 0)->innertext;
                                                        $faCheckValues[] = (isset($jsonDecodeDropDownAlternativeValues[$checkBoxKey]) && $jsonDecodeDropDownAlternativeValues[$checkBoxKey] != '' ? $jsonDecodeDropDownAlternativeValues[$checkBoxKey] : $checkBoxValue->parent()->parent()->find('label', 0)->innertext);
                                                    }
                                                }
                                                if(!empty($faCheckValues)) {
                                                    $totalFaCheckValues = count($faCheckValues);
                                                    if($totalFaCheckValues > 1) {
                                                        $faCheckValues = implode(', ' , array_slice($faCheckValues,0,$totalFaCheckValues-1)) . ' and ' . end($faCheckValues);
                                                    } else {
                                                        $faCheckValues = implode(', ' , $faCheckValues);
                                                    }
                                                    $documentFields[$apiAttributeOrDropDownLabel] = $faCheckValues;
                                                }
                                                //$documentFields[$apiAttributeOrDropDownLabel] = $findValue->find('.fa-check', 0)->parent()->parent()->find('label', 0)->innertext;
                                            } else {
                                                //comment below line on 5 August 2020 for not show the key if value is empty
                                                //$documentFields[$apiAttributeOrDropDownLabel] = '';
                                            }
                                        }
                                        //document field droplist with multiple checkboxes of custom and me
                                        if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'multi_choice_option') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                            $apiAttributeOrDropDownLabel = (isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                                            if($parent_id == 10719) {
                                                $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                                            }
                                            if($findValue->find('.fa-check', 0)) {
                                                //$comma = (count($data["requesttypes"]) > 0 ? ($key+1 == count($data["requesttypes"])-1 ? ' and ' : ($key+1 < count($data["requesttypes"]) ? ', ' : '')) : '');
                                                $faCheckValues = [];
                                                foreach($findValue->find('.ionIconsCheck') as $checkBoxKey => $checkBoxValue) {
                                                    if(strpos($checkBoxValue->getAttribute('class'), 'fa-check') !== false) {
                                                        //$faCheckValues[] = $checkBoxValue->parent()->parent()->find('label', 0)->innertext;
                                                        $faCheckValues[] = (isset($jsonDecodeDropDownAlternativeValues[$checkBoxKey]) && $jsonDecodeDropDownAlternativeValues[$checkBoxKey] != '' ? $jsonDecodeDropDownAlternativeValues[$checkBoxKey] : $checkBoxValue->parent()->parent()->find('label', 0)->innertext);
                                                    }
                                                }
                                                if(!empty($faCheckValues)) {
                                                    $totalFaCheckValues = count($faCheckValues);
                                                    if($totalFaCheckValues > 1) {
                                                        $faCheckValues = implode(', ' , array_slice($faCheckValues,0,$totalFaCheckValues-1)) . ' and ' . end($faCheckValues);
                                                    } else {
                                                        $faCheckValues = implode(', ' , $faCheckValues);
                                                    }
                                                    $documentFields[$apiAttributeOrDropDownLabel] = $faCheckValues;
                                                }
                                            } else {
                                                //comment below line on 5 August 2020 for not show the key if value is empty
                                                //$documentFields[$apiAttributeOrDropDownLabel] = '';
                                            }
                                        } //selectcolor_popupcontainer condition ends here
                                    }   //second foreach loop ends here
                                }   //first foreach loop ends here

                                //document tags names showing and its loop starting
                                /* foreach($html->find('.dynamicTag') as $findTagKey => $findTagValue) {
                                    if(strpos($findTagValue->getAttribute('class'), 'documenttagName') !== false) {
                                        $apiAttributeOrTagName = (isset($findTagValue->apitagattribute) && $findTagValue->apitagattribute != '' ? $findTagValue->apitagattribute : $findTagValue->tagname);
                                        //$documentFields[$findTagValue->tagname] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? trim($findTagValue->plaintext) : '');
                                        //$documentFields[$apiAttributeOrTagName] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, trim($findTagValue->plaintext)) : '');

                                        $jsonDecodeDropDownValues = (isset($findTagValue->dropdownvalues) && !empty($findTagValue->dropdownvalues) ? json_decode(html_entity_decode($findTagValue->dropdownvalues), true) : []);
                                        $jsonDecodeDropDownAlternativeValues = (isset($findTagValue->dropdownvalues_alternate) && !empty($findTagValue->dropdownvalues_alternate) ? json_decode(html_entity_decode($findTagValue->dropdownvalues_alternate), true) : []);                        
                                        if(isset($findTagValue->plaintext) && $findTagValue->plaintext != '') {
                                            $getArrayKey = array_search(trim($findTagValue->plaintext), $jsonDecodeDropDownValues);
                                            $documentFields[$apiAttributeOrTagName] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && !empty($jsonDecodeDropDownAlternativeValues[$getArrayKey]) ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : $utility->convertDateMonthNameToInteger($languageId, trim($findTagValue->plaintext)));
                                        } else {
                                            $documentFields[$apiAttributeOrTagName] = '';
                                        }
                                    }
                                } */
                                foreach($html->find('.dynamicTag') as $findTagKey => $findTagValue) {
                                    if(strpos($findTagValue->getAttribute('class'), 'documenttagName') !== false) {
                                        $apiAttributeOrTagName = (isset($findTagValue->apitagattribute) && $findTagValue->apitagattribute != '' ? $findTagValue->apitagattribute : $findTagValue->tagname);
                                        if($parent_id == 10719) {
                                            $apiAttributeOrTagName = str_replace(' ', '_', $apiAttributeOrTagName);
                                        }
                                        $jsonDecodeDropDownValues = (isset($findTagValue->dropdownvalues) && !empty($findTagValue->dropdownvalues) ? json_decode(html_entity_decode($findTagValue->dropdownvalues), true) : []);
                                        $jsonDecodeDropDownAlternativeValues = (isset($findTagValue->dropdownvalues_alternate) && !empty($findTagValue->dropdownvalues_alternate) ? json_decode(html_entity_decode($findTagValue->dropdownvalues_alternate), true) : []);
                
                                        if(strpos($findTagValue->getAttribute('class'), 'documentdroplisttagname') !== false) {
                                            if(isset($findTagValue->dropdownapi) && $findTagValue->dropdownapi != '') {
                                                $documentFields[$apiAttributeOrTagName] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                                            } else {
                                                $tagValuesArray = [];
                                                foreach($jsonDecodeDropDownValues as $dropDownKey => $dropDownValues) {
                                                    if(isset($findTagValue->plaintext) && !empty($findTagValue->plaintext) && isset($dropDownValues) && !empty($dropDownValues)) {
                                                        if(strpos($findTagValue->plaintext, $dropDownValues) > -1) {
                                                            $getArrayKey = array_search(trim($dropDownValues), $jsonDecodeDropDownValues);
                                                            $tagValuesArray[] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && !empty($jsonDecodeDropDownAlternativeValues[$getArrayKey]) ? $jsonDecodeDropDownAlternativeValues[$getArrayKey] : $utility->convertDateMonthNameToInteger($languageId, trim($dropDownValues)));
                                                        } else {
                                                            $documentFields[$apiAttributeOrTagName] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                                                        }
                                                    }
                                                }
                                                $totalTagValuesArray = count($tagValuesArray);
                                                if($totalTagValuesArray > 1) {
                                                    $tagValuesArray = implode(', ' , array_slice($tagValuesArray,0,$totalTagValuesArray-1)) . ' and ' . end($tagValuesArray);
                                                } else {
                                                    $tagValuesArray = implode(', ' , $tagValuesArray);
                                                }
                                                $documentFields[$apiAttributeOrTagName] = $tagValuesArray;
                                            }
                                        } else {
                                            $documentFields[$apiAttributeOrTagName] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                                        }
                                    }
                                }
                                //document tags names showing and its loop ending

                                if($html->find('.billecta_GetBankInfo_h5')) {
                                    foreach($html->find('.billecta_GetBankInfo_h5') as $findBillectaKey => $findBillectaValue) {
                                        if(isset($findBillectaValue->billecta_row)) {
                                            if($html->find('.billecta_row_'.$findBillectaValue->billecta_row)) {
                                                if($findBillectaValue->innertext != '&nbsp;' && $findBillectaValue->innertext != '<br>') {
                                                    //$documentFields[$findBillectaValue->innertext] = $html->find('.billecta_row_'.$findBillectaValue->billecta_row, 0)->innertext;
                                                    $documentFields[$findBillectaValue->innertext] = str_replace(',', ' ', $html->find('.billecta_row_'.$findBillectaValue->billecta_row, 0)->innertext);
                                                }
                                            }
                                        }
                                    }
                                }
                            }   //not empty condition on content ends here
                            //organization information of fields which are placed at document ending

                            //recipient information in details starting
                            if(isset($recipientUserDetailsJsonDecode['details_fields'])) {
                                $detailsFields = json_decode($recipientUserDetailsJsonDecode['details_fields'], true);
                                foreach($detailsFields as $orgFldsKey => $orgFldsValue) {
                                    $details[$orgFldsValue['detailsFieldName']] = $orgFldsValue['detailsFieldValue'];
                                }
                            } else {
                                $details['recipient_role'] = (isset($recipientUserDetailsJsonDecode['recrolename']) && $recipientUserDetailsJsonDecode['recrolename'] != '' ? $recipientUserDetailsJsonDecode['recrolename'] : (isset($recipientUserDetailsJsonDecode['partyname']) && $recipientUserDetailsJsonDecode['partyname'] != '' ? $recipientUserDetailsJsonDecode['partyname'] : ''));
                                if($contractDataValue['role'] == 2) {
                                    $contractDataValue['authentication_method'] = 8;
                                }
                                $details['authentication'] = $utility->authenticationMethodName($contractDataValue['authentication_method']);
                                if(isset($contractDataValue['invitation_type']) && $contractDataValue['invitation_type'] != '') {
                                    $details['invitation_type'] = $utility->invitationTypeName($contractDataValue['invitation_type']);
                                }
                                if($contractDataValue['invitation_order'] != 0) {
                                    $details['invitation_order'] = $contractDataValue['invitation_order'];
                                }
                                if(isset($contractDataValue['offer_confirmation']) && $contractDataValue['offer_confirmation'] != '') {
                                    $details['confirmation'] = $utility->offerConfirmationName($contractDataValue['offer_confirmation']);
                                }
                                $details['id_attachment'] = $utility->idAttachmentName($contractDataValue['id_attachments']);
                            }

                            $details['request_attachment'] = ($contractDataValue['req_attached'] != '' ? 'yes' : 'no');
                            if($contractDataValue['document_read_date'] != '' && $contractDataValue['document_read_date'] != '0000-00-00 00:00:00') {
                                //if($_SERVER['HTTP_HOST'] == 'acceptance.simplesign.io') {
                                    $details['last_viewing_date'] = ($contractDataValue['document_read_date'] != '' ? $utility->changeTimeZone($contractDataValue['document_read_date'], 'Y-m-d H:i:s', 'UTC', $userTimeZone) : '');
                                /* } else {
                                    $details['last_viewing_date'] = ($contractDataValue['document_read_date'] != '' ? $utility->changeTimeZone($contractDataValue['document_read_date'], 'Y-m-d H:i:s', 'UTC', $userTimeZone) : '');
                                } */
                            }
                            $details['signed_date'] = '';
                            if($contractDataValue['signed_date'] != '' && $contractDataValue['signed_date'] != '0000-00-00 00:00:00' && $contractDataValue['offer_status'] == 4 && $contractDataValue['role'] == 1) {
                                //if($_SERVER['HTTP_HOST'] == 'acceptance.simplesign.io') {
                                    $details['signed_date'] = $utility->changeTimeZone($contractDataValue['signed_date'], 'Y-m-d H:i:s', 'UTC', $userTimeZone);
                                /* } else {
                                    $details['signed_date'] = $contractDataValue['signed_date'];
                                } */
                            } elseif($contractDataValue['signed_date'] != '' && $contractDataValue['signed_date'] != '0000-00-00 00:00:00' && $contractDataValue['offer_status'] == 3 && $contractDataValue['role'] == 2) {
                                //if($_SERVER['HTTP_HOST'] == 'acceptance.simplesign.io') {
                                    $details['signed_date'] = $utility->changeTimeZone($contractDataValue['signed_date'], 'Y-m-d H:i:s', 'UTC', $userTimeZone);
                                /* } else {
                                    $details['signed_date'] = $contractDataValue['signed_date'];
                                } */
                            }
                            //$details['signed_date'] = ($contractDataValue['signed_date'] != '' && $contractDataValue['signed_date'] != '0000-00-00 00:00:00' ? $utility->changeTimeZone($contractDataValue['signed_date'], 'Y-m-d H:i:s', 'UTC', $userTimeZone) : '');
                            if($contractDataValue['offer_status'] == 4 && $contractDataValue['forward_status'] == 1 && $contractDataValue['forward_signed'] == 1) {
                                $details['status'] = 'Forwarded to sign';
                            } elseif($contractDataValue['offer_status'] < 4 && $contractDataValue['forward_status'] == 1 && $contractDataValue['forward_signed'] == 0) {
                                $details['status'] = 'Invited to view';
                            } else {
                                $details['status'] = (isset($contractDataValue['offer_status']) != '' ? $utility->offerStatusName($contractDataValue['offer_status']) : '');
                            }
                            //$details['status'] = (isset($contractDataValue['offer_status']) != '' ? $utility->offerStatusName($contractDataValue['offer_status']) : '');
                            if($contractDataValue['forward_user_details'] != '') {
                                $forwardUserDetails = Tcrypt::decrypter($contractDataValue['forward_user_details']);
                                if($forwardUserDetails != '') {
                                    $forwardUserDetailsJsonDecode = json_decode($forwardUserDetails, true);
                                    $forwaredFullName = (isset($forwardUserDetailsJsonDecode['full_name']) && $forwardUserDetailsJsonDecode['full_name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($forwardUserDetailsJsonDecode['full_name'])) : '');
                                    $inviteAndForwardDetails['first_name'] = (isset($forwaredFullName[0]) && $forwaredFullName[0] != '' ? trim($forwaredFullName[0]) : '');
                                    $inviteAndForwardDetails['last_name'] = (isset($forwaredFullName[1]) && $forwaredFullName[1] != '' ? trim($forwaredFullName[1]) : '');
                                    //$inviteAndForwardDetails['email'] = (isset($forwardUserDetailsJsonDecode['email']) && $forwardUserDetailsJsonDecode['email'] != '' ? trim($forwardUserDetailsJsonDecode['email']) : '');
                                    //$inviteAndForwardDetails['mobile'] = (isset($forwardUserDetailsJsonDecode['mobile']) && $forwardUserDetailsJsonDecode['mobile'] != '' ? trim($forwardUserDetailsJsonDecode['mobile']) : '');

                                    /* test condition as per zain suggestion when signing role is forwarded */
                                    /* Setting keys in the object for signature role sender and reciever */
                                    if($contractDataValue['offer_status'] == 4 && $contractDataValue['forward_status'] == 1 && $contractDataValue['forward_signed'] == 1) {
                                        $details['forwarded_signing_role_to'] = $inviteAndForwardDetails['first_name'].' '.$inviteAndForwardDetails['last_name'];
                                    } elseif((($contractDataValue['offer_status'] <= 4 && $contractDataValue['role'] == 1) || ($contractDataValue['offer_status'] == 3 && $contractDataValue['role'] == 2)) && $contractDataValue['forward_status'] == 2 && isset($recipientUserDetailsJsonDecode['forward_to_sign']) && $recipientUserDetailsJsonDecode['forward_to_sign'] == 1) {
                                        $details['invited_to_sign_by'] = $inviteAndForwardDetails['first_name'].' '.$inviteAndForwardDetails['last_name'];
                                    }
                                    //echo ($contractDataValue['forward_status']. ' ' .$recipientUserDetailsJsonDecode['email'].' '.$contractDataValue['forward_signed'].' '.(isset($forwardUserDetailsJsonDecode['invited_to_view']) ? $forwardUserDetailsJsonDecode['invited_to_view'] : "") );echo'<br>';
                                    /* test condition as per zain suggestion when only invited to view */
                                    /* Setting keys in the object for sender and reciever of invitation to view only*/
                                    if($contractDataValue['forward_status'] == 1 && $contractDataValue['forward_signed'] == 0) {
                                        $details['invited_to_view_only'] = $inviteAndForwardDetails['first_name'].' '.$inviteAndForwardDetails['last_name'];
                                    } elseif($contractDataValue['forward_status'] == 2 && isset($recipientUserDetailsJsonDecode['invited_to_view']) && $recipientUserDetailsJsonDecode['invited_to_view'] == 1) {
                                        $details['invited_to_view_only_by'] = $inviteAndForwardDetails['first_name'].' '.$inviteAndForwardDetails['last_name'];
                                    }
                                }
                            }
                            //this is for rejected to show in sender status
                            if($contractDataValue['offer_status'] == 5) {
                                $documentDetails['status'] = $utility->offerStatusName(5);
                            } if($contractDataValue['offer_status'] == 6) {
                                $documentDetails['status'] = $utility->offerStatusName(6);
                            }
                            //recipient information in details ending

                            if(!empty($organizationFields)) {
                                $eachArray = ['people_fields' => $peopleFields, 'organization_fields' => $organizationFields, 'details' => $details];
                            } else {
                                $eachArray = ['people_fields' => $peopleFields, 'details' => $details];
                            }
                            array_push($peoples, $eachArray);
                        }   //getting recipient data ending
                        elseif($contractDataValue['offer_sent_id'] == $eachSentId && $contractDataValue['is_sender'] == 1) {
                            $documentDetails['template_name'] = (isset($sentIdsValue['visible_name']) && $sentIdsValue['visible_name'] != '' ? trim(Tcrypt::decrypter($sentIdsValue['visible_name'])) : trim(Tcrypt::decrypter($sentIdsValue['name'])));
                            $documentDetails['document_id'] = $sentIdsValue['id'];
                            $documentDetails['template_id'] = $sentIdsValue['offer_id'];
                            $documentDetails['language'] = (isset($sentIdsValue['language_id']) && $sentIdsValue['language_id'] != '' ? $utility->languageName($sentIdsValue['language_id']) : 'English');
                            //if($_SERVER['HTTP_HOST'] == 'acceptance.simplesign.io') {
                                $documentDetails['sent_date'] = (isset($sentIdsValue['created_date']) && $sentIdsValue['created_date'] != '' && $sentIdsValue['created_date'] != '0000-00-00 00:00:00' ? $utility->changeTimeZone(trim($sentIdsValue['created_date']), 'Y-m-d H:i:s', 'UTC', $userTimeZone) : '');
                                $documentDetails['signed_date'] = (isset($sentIdsValue['signed_date']) && $sentIdsValue['signed_date'] != '' && $sentIdsValue['signed_date'] != '0000-00-00 00:00:00' ? $utility->changeTimeZone(trim($sentIdsValue['signed_date']), 'Y-m-d H:i:s', 'UTC', $userTimeZone) : '');
                                $documentDetails['due_date'] = (isset($sentIdsValue['due_date']) && $sentIdsValue['due_date'] != '' && $sentIdsValue['due_date'] != '0000-00-00 00:00:00' ? $utility->changeTimeZone(trim(date('Y-m-d', strtotime($sentIdsValue['due_date']))), 'Y-m-d', 'UTC', $userTimeZone) : '');
                            /* } else {
                                $documentDetails['sent_date'] = (isset($sentIdsValue['created_date']) && $sentIdsValue['created_date'] != '' && $sentIdsValue['created_date'] != '0000-00-00 00:00:00' ? $utility->changeTimeZone(trim($sentIdsValue['created_date']), 'Y-m-d H:i:s', 'UTC', $userTimeZone) : '');
                                $documentDetails['signed_date'] = (isset($sentIdsValue['signed_date']) && $sentIdsValue['signed_date'] != '' && $sentIdsValue['signed_date'] != '0000-00-00 00:00:00' ? $utility->changeTimeZone(trim($sentIdsValue['signed_date']), 'Y-m-d H:i:s', 'UTC', $userTimeZone) : '');
                                $documentDetails['due_date'] = (isset($sentIdsValue['due_date']) && $sentIdsValue['due_date'] != '' && $sentIdsValue['due_date'] != '0000-00-00 00:00:00' ? trim(date('Y-m-d', strtotime($sentIdsValue['due_date']))) : '');
                            } */
                            $documentDetails['status'] = (isset($sentIdsValue['offer_status']) ? $utility->offerStatusName($sentIdsValue['offer_status']) : '');
                            
                            //$getAddOnObjectData = settings::where('user_id', $parent_id)->select('new_addon_obj')->first();
                            $markCompleted = Offersent_data::where('sent_id', $eachSentId)->pluck('mark_completed');
                            $multiCaseManagement = Offersent_data::where('sent_id', $eachSentId)->pluck('multi_case_management');
                            $contractTypeId = Offersent_data::where('sent_id', $eachSentId)->pluck('contract_type_id');
                            $markCompletedDate = Offersent_data::where('sent_id', $eachSentId)->pluck('mark_completed_date');
                            $costmargin = "";
                            /* Adding gross margin and total cost in Api response */
                            $costmargin = Offersent_data::where('sent_id', $eachSentId)->whereNotNull('document_cost')->whereNotNull('document_margin')->whereNotNull('document_price')->select('document_price', 'document_cost', 'document_margin')->first();
                            if(!empty($getAddOnObjectData['new_addon_obj'])) {
                                $newAddonObjJesonDecode = json_decode($getAddOnObjectData['new_addon_obj'], true);
                                if(isset($newAddonObjJesonDecode['mark_as_completed_addon']) && $newAddonObjJesonDecode['mark_as_completed_addon'] == 1) {
                                    if((isset($data['task_name']) && $data['task_name'] != '') || (isset($data['task_status']) && $data['task_status'] != '')) {
                                        if(isset($newAddonObjJesonDecode['mark_as_completed_addon_setting']) && !empty($newAddonObjJesonDecode['mark_as_completed_addon_setting'])) {
                                            $markAsCompletedAddonSettingJsonDecode = json_decode($newAddonObjJesonDecode['mark_as_completed_addon_setting'], true);
                                            $multiCaseManagementJsonDecode = (isset($multiCaseManagement) && !empty($multiCaseManagement) ? json_decode($multiCaseManagement, true) : []);
                                            if(isset($markAsCompletedAddonSettingJsonDecode['mark_tasks_array']) && !empty($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'])) {
                                                $numberIncrement = 0;
                                                foreach($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'] as $markAsCompletedAddonSettingJsonDecodeKey => $markAsCompletedAddonSettingJsonDecodeValue) {
                                                    $numberIncrement++;
                                                    if(isset($data['task_status']) && $data['task_status'] != '') {
                                                        if(isset($multiCaseManagementJsonDecode[$numberIncrement]) && !empty($multiCaseManagementJsonDecode[$numberIncrement]) && $multiCaseManagementJsonDecode[$numberIncrement]['status_text'] == $data['task_status'] && isset($markAsCompletedAddonSettingJsonDecodeValue['tasknames']) && !empty($markAsCompletedAddonSettingJsonDecodeValue['tasknames']) && $markAsCompletedAddonSettingJsonDecodeValue['tasknames'] == $data['task_name']) {
                                                            if(in_array($contractTypeId, $markAsCompletedAddonSettingJsonDecodeValue['contract_type_selected']) && (in_array($sentIdsValue['offer_status'], $markAsCompletedAddonSettingJsonDecodeValue['marked_addon_status']) || in_array("", $markAsCompletedAddonSettingJsonDecodeValue['marked_addon_status']))) {
                                                                //in_array condtion for offer_status from offer_sent and in_array('') empty for any which we are showing in the case management add status
                                                                $conditionalText = '';
                                                                if(isset($multiCaseManagementJsonDecode[$numberIncrement]) && !empty($multiCaseManagementJsonDecode[$numberIncrement])) {
                                                                    if(isset($multiCaseManagementJsonDecode[$numberIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numberIncrement]['status_text'] == 'done') {
                                                                        $conditionalText = 'Yes';
                                                                    } elseif(isset($multiCaseManagementJsonDecode[$numberIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numberIncrement]['status_text'] == 'in_process') {
                                                                        $conditionalText = 'In process';
                                                                    } elseif(isset($multiCaseManagementJsonDecode[$numberIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numberIncrement]['status_text'] == 'no') {
                                                                        $conditionalText = 'No';
                                                                    }
                                                                    if(isset($multiCaseManagementJsonDecode[$numberIncrement]['task_no']) && isset($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'][$multiCaseManagementJsonDecode[$numberIncrement]['task_no']])) {
                                                                        $documentDetails[$markAsCompletedAddonSettingJsonDecode['mark_tasks_array'][$multiCaseManagementJsonDecode[$numberIncrement]['task_no']]['tasknames']] = $conditionalText;//$multiCaseManagementJsonDecode[$numberIncrement]['status_text'];
                                                                    } else {
                                                                        if(isset($multiCaseManagementJsonDecode[$numberIncrement]['task_no'])) {
                                                                            $documentDetails[$markAsCompletedAddonSettingJsonDecodeValue['tasknames']] = 'No';
                                                                        }
                                                                    }
                                                                } else {
                                                                    $documentDetails[$markAsCompletedAddonSettingJsonDecodeValue['tasknames']] = 'No';
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if(isset($multiCaseManagementJsonDecode[$numberIncrement]) && !empty($multiCaseManagementJsonDecode[$numberIncrement]) && isset($markAsCompletedAddonSettingJsonDecodeValue['tasknames']) && !empty($markAsCompletedAddonSettingJsonDecodeValue['tasknames']) && $markAsCompletedAddonSettingJsonDecodeValue['tasknames'] == $data['task_name']) {
                                                            if(in_array($contractTypeId, $markAsCompletedAddonSettingJsonDecodeValue['contract_type_selected']) && (in_array($sentIdsValue['offer_status'], $markAsCompletedAddonSettingJsonDecodeValue['marked_addon_status']) || in_array("", $markAsCompletedAddonSettingJsonDecodeValue['marked_addon_status']))) {
                                                                //in_array condtion for offer_status from offer_sent and in_array('') empty for any which we are showing in the case management add status
                                                                $conditionalText = '';
                                                                if(isset($multiCaseManagementJsonDecode[$numberIncrement]) && !empty($multiCaseManagementJsonDecode[$numberIncrement])) {
                                                                    if(isset($multiCaseManagementJsonDecode[$numberIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numberIncrement]['status_text'] == 'done') {
                                                                        $conditionalText = 'Yes';
                                                                    } elseif(isset($multiCaseManagementJsonDecode[$numberIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numberIncrement]['status_text'] == 'in_process') {
                                                                        $conditionalText = 'In process';
                                                                    } elseif(isset($multiCaseManagementJsonDecode[$numberIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numberIncrement]['status_text'] == 'no') {
                                                                        $conditionalText = 'No';
                                                                    }
                                                                    if(isset($multiCaseManagementJsonDecode[$numberIncrement]['task_no']) && isset($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'][$multiCaseManagementJsonDecode[$numberIncrement]['task_no']])) {
                                                                        $documentDetails[$markAsCompletedAddonSettingJsonDecode['mark_tasks_array'][$multiCaseManagementJsonDecode[$numberIncrement]['task_no']]['tasknames']] = $conditionalText;//$multiCaseManagementJsonDecode[$numberIncrement]['status_text'];
                                                                    } else {
                                                                        if(isset($multiCaseManagementJsonDecode[$numberIncrement]['task_no'])) {
                                                                            $documentDetails[$markAsCompletedAddonSettingJsonDecodeValue['tasknames']] = 'No';
                                                                        }
                                                                    }
                                                                } else {
                                                                    $documentDetails[$markAsCompletedAddonSettingJsonDecodeValue['tasknames']] = 'No';
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        //show all task managemnt tasks without any 
                                        if(isset($newAddonObjJesonDecode['mark_as_completed_addon_setting']) && !empty($newAddonObjJesonDecode['mark_as_completed_addon_setting'])) {
                                            $markAsCompletedAddonSettingJsonDecode = json_decode($newAddonObjJesonDecode['mark_as_completed_addon_setting'], true);
                                            $multiCaseManagementJsonDecode = (isset($multiCaseManagement) && !empty($multiCaseManagement) ? json_decode($multiCaseManagement, true) : []);
                                            if(isset($markAsCompletedAddonSettingJsonDecode['mark_tasks_array']) && !empty($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'])) {
                                                $numbetIncrement = 0;
                                                $flagForCompletedKey = false;
                                                $completeStatus = 'Not completed';
                                                foreach($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'] as $markAsCompletedAddonSettingJsonDecodeKey => $markAsCompletedAddonSettingJsonDecodeValue) {
                                                    if(in_array($contractTypeId, $markAsCompletedAddonSettingJsonDecodeValue['contract_type_selected']) && (in_array($sentIdsValue['offer_status'],$markAsCompletedAddonSettingJsonDecodeValue['marked_addon_status']) || in_array("",$markAsCompletedAddonSettingJsonDecodeValue['marked_addon_status']))) {
                                                        if(isset($data['task_filter']) && $data['task_filter'] != '' && array_search($markAsCompletedAddonSettingJsonDecodeValue['tasknames'], array_column($taskFilterArray, 'task_name')) === false) {
                                                            continue;
                                                        }
                                                        //in_array condtion for offer_status from offer_sent and in_array('') empty for any which we are showing in the case management add status
                                                        $numbetIncrement++;
                                                        $conditionalText = '';
                                                        if(isset($multiCaseManagementJsonDecode[$numbetIncrement]) && !empty($multiCaseManagementJsonDecode[$numbetIncrement])) {
                                                            if(isset($multiCaseManagementJsonDecode[$numbetIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numbetIncrement]['status_text'] == 'done') {
                                                                $conditionalText = 'Yes';
                                                            } elseif(isset($multiCaseManagementJsonDecode[$numbetIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numbetIncrement]['status_text'] == 'in_process') {
                                                                $conditionalText = 'In process';
                                                            } elseif(isset($multiCaseManagementJsonDecode[$numbetIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numbetIncrement]['status_text'] == 'no') {
                                                                $conditionalText = 'No';
                                                            }
                                                            if($conditionalText && isset($multiCaseManagementJsonDecode[$numbetIncrement]['task_no']) && isset($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'][$multiCaseManagementJsonDecode[$numbetIncrement]['task_no']])) {
                                                                $documentDetails[$markAsCompletedAddonSettingJsonDecode['mark_tasks_array'][$multiCaseManagementJsonDecode[$numbetIncrement]['task_no']]['tasknames']] = $conditionalText;
                                                                $flagForCompletedKey = true;
                                                            } else {
                                                                if(isset($multiCaseManagementJsonDecode[$numbetIncrement]['task_no']) && $multiCaseManagementJsonDecode[$numbetIncrement]['task_no'] != '') {
                                                                    $documentDetails[$markAsCompletedAddonSettingJsonDecodeValue['tasknames']] = 'No';
                                                                    $flagForCompletedKey = true;
                                                                }
                                                            }
                                                        } else {
                                                            if($markCompleted != 1) {
                                                                $documentDetails[$markAsCompletedAddonSettingJsonDecodeValue['tasknames']] = 'No';
                                                            }
                                                            $flagForCompletedKey = true;
                                                        }
                                                        if(isset($multiCaseManagementJsonDecode[$numbetIncrement]) && !empty($multiCaseManagementJsonDecode[$numbetIncrement]) && isset($multiCaseManagementJsonDecode[$numbetIncrement]['status_activity']) && !empty($multiCaseManagementJsonDecode[$numbetIncrement]['status_activity'])) {
                                                            $flagForCompletedKey = true;
                                                            //if(count($multiCaseManagementJsonDecode) == $isCompleted && $markAsCompletedAddonSettingJsonDecodeKey == count($markAsCompletedAddonSettingJsonDecode['mark_tasks_array']) -1) {
                                                            //if($taskCounter == $isCompleted) {
                                                            if($markCompleted == 1) {
                                                                //if($_SERVER['HTTP_HOST'] == 'acceptance.simplesign.io') {
                                                                    $completeStatus = $utility->changeTimeZone($markCompletedDate, 'Y-m-d H:i:s', 'UTC', $userTimeZone);
                                                                /* } else {
                                                                    $completeStatus = $utility->changeTimeZone($markCompletedDate, 'Y-m-d H:i:s', 'UTC', $userTimeZone);
                                                                } */
                                                            }
                                                        }   //status_activity
                                                    }
                                                }
                                                //if(!empty($multiCaseManagementJsonDecode)) {
                                                if(!empty($flagForCompletedKey)) {
                                                    $documentDetails['completed'] = $completeStatus;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            //$documentDetails['completed'] = ($markCompleted == 1 ? 'Yes' : 'No');
                            $documentDetails['pdf'] = $domain_name.'avtal/downloadpdf/'.$sentIdsValue['id'].'/'.$uniqueId;
                            $documentDetails['document_url'] = $documentLink;

                            if ($costmargin != "") {
                                if ($costmargin['document_cost'] != "NULL") {
                                    $documentDetails['document_cost'] =  $costmargin['document_cost'];
                                }

                                if ($costmargin['document_margin'] != "NULL") {
                                    $documentDetails['document_margin'] =  $costmargin['document_margin'];
                                }

                                if ($costmargin['document_price'] != "NULL") {
                                    $documentDetails['document_price'] =  $costmargin['document_price'];
                                }
                            }
                        }
                    }   //details foreach loop ends here

                    $responseArray[$sentIdsKey]['peoples'] = $peoples;
                    if(!empty($documentFields)) {
                        //showing alphbats order to show document fields data
                        ksort($documentFields);
                        $responseArray[$sentIdsKey]['document_fields'] = $documentFields;
                    }
                    $responseArray[$sentIdsKey]['sender_details'] = $senderDetails;
                    $responseArray[$sentIdsKey]['account_details'] = $accountDetails;

                    //alldocuments API
                    $templatetabledata = $this->templateTables($sentIdsValue['id']);
                    foreach ($templatetabledata['producttables'] as $tablekey => $tabledata) {
                        $tablename = $tabledata['table_name'];
                        $tablecurrency = $tabledata['table_currency'];
                        $itemcollection = array();
                        foreach ($tabledata['tableitems'] as $itemkey => $itemdata) {
                            $itemdetails = array();
                            $itemdetails['product name'] = $itemdata['item_name'];
                            if ( isset($data['fromoverview']) && $data['fromoverview'] == 1 ) {
                                $itemdetails[$itemdata['item_name'].' (description)'] = ($itemdata['item_description'] != 'NULL' ? $itemdata['item_description'] : '');
                                $itemdetails[$itemdata['item_name'].' (quantity)'] = $itemdata['item_qty'];
                                $itemdetails[$itemdata['item_name'].' (price)'] = $itemdata['item_price'].' '.$tablecurrency;
                                if ($itemdata['item_discount'] != 0) {
                                    $itemdetails[$itemdata['item_name'].' (discount)'] = $itemdata['item_discount'].' %';
                                }
                                $itemdetails[$itemdata['item_name'].' (cost)'] = $itemdata['item_cost'].' '.$tablecurrency;
                                $itemdetails[$itemdata['item_name'].' (margin)'] = $itemdata['item_margin'].' '.$tablecurrency;
                            } else {
                                $itemdetails['description'] = ($itemdata['item_description'] != 'NULL' ? $itemdata['item_description'] : '');
                                $itemdetails['quantity'] = $itemdata['item_qty'];
                                if ($itemdata['item_discount'] != 0) {
                                    $itemdetails['item_discount'] = $itemdata['item_discount'].'%';
                                }
                                $itemdetails['price'] = $itemdata['item_price'].' '.$tablecurrency;
                                $itemdetails['cost'] = $itemdata['item_cost'].' '.$tablecurrency;
                                $itemdetails['margin'] = $itemdata['item_margin'].' '.$tablecurrency;
                            }
                            array_push($itemcollection, $itemdetails);
                            $responseArray[$sentIdsKey][$tablename] = $itemcollection;
                        }
                    }

                    $responseArray[$sentIdsKey]['document_details'] = $documentDetails;
                } //sent foreach loop ends here

                $updatedIndexData = DB::table('document_indexdata')->whereIn('document_id', $sentIdsForIndexdata)->get();
                if(!empty($updatedIndexData)) {
                    foreach($responseArray as $responseArrayKey => $responseArrayValue) { //loop on main array
                        $documentId = $responseArrayValue['document_details']['document_id'];
                        foreach($responseArrayValue['peoples'] as $peoplesKey => $peoplesValue) {
                            $recRole = $peoplesValue['details']['recipient_role'];
                            foreach($updatedIndexData as $updatedIndexDataKey => $updatedIndexDataValue) {
                                if($updatedIndexDataValue->rec_role == $recRole && $updatedIndexDataValue->document_id == $documentId) {
                                    if(in_array($updatedIndexDataValue->object_type, array_keys($peoplesValue))) {
                                        $orginalFields = json_decode($updatedIndexDataValue->old_field, true);
                                        $newFields = json_decode($updatedIndexDataValue->new_field, true);
                                        $fieldName = array_keys($orginalFields)[0]; // getting field name orginal as it can't be changed from UI
                                        $updatedFieldValue = array_values($newFields)[0]; // getting updated values of that particular field
                                        $responseArray[$responseArrayKey]['peoples'][$peoplesKey][$updatedIndexDataValue->object_type][$fieldName] = $updatedFieldValue;
                                    }
                                }
                            }
                        }
                        foreach($responseArrayValue['document_details'] as $documentDetailsKey => $documentDetailsValue) {
                            foreach($updatedIndexData as $updatedIndexDataKey => $updatedIndexDataValue) {
                                if($updatedIndexDataValue->document_id == $documentId && $updatedIndexDataValue->object_type == 'document_details') {
                                    $orginalFields = json_decode($updatedIndexDataValue->old_field, true);
                                    $newFields = json_decode($updatedIndexDataValue->new_field, true);
                                    $fieldName = array_keys($orginalFields)[0]; // getting field name orginal as it can't be changed from UI
                                    $updatedFieldValue = array_values($newFields)[0]; // getting updated values of that particular field
                                    $responseArray[$responseArrayKey]['document_details'][$fieldName] = $updatedFieldValue;
                                }
                            }
                        }
                    }
                }
                $pagination['totalrecords'] = $totalOfferSentData;
                $pagination['documentlimit'] = (int)$pageLimit;
                $pagination['currentpage'] = ($currentPage+1);
                return response()->json(['status' => 'success', 'result' => $responseArray, 'pagination' => $pagination], 200, ['Content-Type' => 'application/json; charset=UTF-8'], JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
            } else {
                return Response::json(['status' => 'error', 'result' => 'No record(s) found']);
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }


    /*
     * Method for API Sent Offers by Status
     */
    public function getSentoffersbystatus()
    {
        $data = Input::all();
        if(isset($data['access_token'])){
            $access_token = $data['access_token'];
        }else{
            return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
        if(!isset($data['status']) || $data['status'] == ''){
            return Response::json(['status'=>'error','result' => 'status is missing']);
        }
        $overview = new overviewController();
        return $overview->postSentoffersbystatus('api');
    }

    /*
    * Getting right menu details for each offer
    */
    public function getOfferdetails()
    {
        $data = Input::all();
        $utility = new Utility();
        $offer_id = '';
        
        if(isset($data['access_token']))
        {
          $access_token = $data['access_token'];
        }else{
          return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
        $user_id = $utility->getUserIdByAuthToken($access_token);
        if(!empty($user_id) && $user_id > 0){

            if(isset($data['contract_id']) && !empty($data['contract_id'])){
                $offer_id = $data['contract_id'];
            }else if(isset($data['rowid'])){
                $offer_id = $data['rowid'];
            }else{
                return Response::json(['status'=>'error','result' => 'contract_id is missing']);
            }
            $getoffers = Offersent::where('id', $offer_id)->get()->toArray();
            $num = 0;
         
            foreach($getoffers as $key => $eachOffer)
            {   
                $getoffers[$key]['content'] =  Tcrypt::decrypter($eachOffer['content']);
                $getoffers[$key]['name']=$eachOffer['name']!=''?Tcrypt::decrypter($eachOffer['name']):'';
                $getoffers[$key]['visible_name']=$eachOffer['visible_name']!=''?Tcrypt::decrypter($eachOffer['visible_name']):'';
                $getoffersDetails = Offersentdetails::where('offer_sent_id',$offer_id)->get()->toArray();
                //Unset for API
                unset($getoffers[$key]['content']);

                foreach($getoffersDetails as $key2 => $value2){
                    //Unset for API
                    unset($value2['signature']);
                    unset($value2['evidence_data']);
                    unset($value2['signature_type']);
                    unset($value2['signature_font']);
                    unset($value2['signature_contrast']);
                    unset($value2['overview_deleted']);
                    unset($value2['bankid_encdata']);

                    $value2['user_details'] = Tcrypt::decrypter($value2['user_details']);
                    $value2['email'] = Tcrypt::decrypter($value2['email']);
                    if($value2['is_sender'] == 1){
                        $senderDetails[0] = $value2;
                    }else{
                        $recipientDetails[$num] = $value2;
                        $num++;
                    }
                }
                //$senderDetails = Offersentdetails::where('offer_sent_id',$offer_id)->where('is_sender',1)->get()->toArray();
                $getoffers[$key]['senderDetails'] = $senderDetails;
                $getoffers[$key]['details'] = $recipientDetails;
                
            }
            return Response::json(['status'=>'success','result' => $getoffers]);
        }
        else{
           return Response::json(['status'=>'error','result' =>'invalid access_token']);
        }      
    }

    
    public function getGetcontractpdf() {
        $domain_name = asset('/');
        $utility = new Utility();
        $data = Input::all();
        
        if(isset($data['access_token']) && $data['access_token'] != "") {
            $accessToken = $data['access_token'];
        } else {
            return Response::json(["status" => "error", "result" => "access_token required"]);
        }
        if(isset($data["contract_id"]) && $data["contract_id"] != "") {
            $contractId = $data["contract_id"];
        } else {
            return Response::json(["status" => "error", "result" => "contract_id required"]);
        }

        $user_id = $utility->getUserIdByAuthToken($accessToken);
        $offerContracts = Offersent::where("id", $contractId)->where("sender_id", $user_id)->first();
        $offerContractDetails = Offersentdetails::where('offer_sent_id',$contractId)->where('is_sender',1)->select('unique_id')->first();
        if($offerContracts && $offerContractDetails) {
            $pdfLink = $domain_name.'avtal/downloadpdf/'.$offerContracts['id'].'/'.$offerContractDetails['unique_id'];
            $pdfLink = str_replace('\/', '/', $pdfLink);
            return Response::json(["status" => "success", "result" => $pdfLink]);
        } else {
            return Response::json(["status" => "error", "result" => "contract not found"]);
        }
    }

    public function getGetdocumentpdf() {
        $domain_name = asset('/');
        $utility = new Utility();
        $data = Input::all();
        //Downloaddocumentpdf function for download PDF
        
        if(isset($data['access_token']) && $data['access_token'] != "") {
            $accessToken = $data['access_token'];
        } else {
            return Response::json(["status" => "error", "result" => "access_token required"]);
        }
        if(isset($data["document_id"]) && $data["document_id"] != "") {
            $contractId = $data["document_id"];
        } else {
            return Response::json(["status" => "error", "result" => "document_id required"]);
        }

        $user_id = $utility->getUserIdByAuthToken($accessToken);
        $parent_id = $utility->getParent($user_id);
        //$parent_id = $utility->getParent($user->id);
        $getApiHitCount = Userinfo::where('user_id', $parent_id)->select('hit_count')->first();
        $addupdateapiaccesslogs = $utility->addupdateapiaccesslogs($user_id, 'getGetdocumentpdf', $data, $getApiHitCount['hit_count']);
        if($addupdateapiaccesslogs == 'exceed') {
            $this->apiCallLimitExceedMessage = str_replace('#hitCuntNo', $getApiHitCount['hit_count'], $this->apiCallLimitExceedMessage);
            return Response::json(['status' => 'error', 'result' => $this->apiCallLimitExceedMessage]);
        }
        if($utility->isParent($user_id) == 1) {
            $allUserIds = $utility->getSubusers($parent_id);
        } else {
            $allUserIds = [$user_id];
        }
        //$offerContracts = Offersent::where("id", $contractId)->where("sender_id", $user_id)->first();
        $offerContracts = Offersent::where("id", $contractId)->whereIn("sender_id", $allUserIds)->first();
        $offerContractDetails = Offersentdetails::where('offer_sent_id', $contractId)->where('is_sender', 1)->select('unique_id')->first();
        if($offerContracts && $offerContractDetails) {
            $pdfLink = $domain_name.'avtal/downloadpdf/'.$offerContracts['id'].'/'.$offerContractDetails['unique_id'];
            $pdfLink = str_replace('\/', '/', $pdfLink);
            return Response::json(["status" => "success", "result" => $pdfLink]);
        } else {
            return Response::json(["status" => "error", "result" => "document not found"]);
        }
    }

    /**
     * 
     * @return type User list
     * get sub user list by main user
     */
    public function getGetuserlist()
    {
        $data = Input::all();
        $utility = new Utility();
        if(isset($data['access_token'])){
                $access_token = $data['access_token'];
        }else{
                return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
        $parentId = $utility->getUserIdByAuthToken($access_token);
        if($parentId > 0) {
            $userController = new userController();
            $userArray['userList'] = $userController->getSubUserByParent($parentId);
            $totalUsers = count($userArray['userList']);
            $where['id'] = $parentId;
            $user = $utility->getItem("users_login",$where,array('total_users','is_paid'));

            //adding one user in used total users
            if($user->is_paid == 1 && $user->total_users > 0){
                $totalUsers = $totalUsers+1;
            }

            $userArray['total_users'] = $totalUsers;
            $userArray['is_paid'] = $user->is_paid;
            $userArray['users_limit'] = $user->total_users;
            return Response::json(['status'=>'success','result' =>$userArray]);
        } else {
            return Response::json(['status'=>'error','result' =>'Invalid access_token']);
        }
    }
    
    /*
    * Sending Reminder to Recipients
    */
    public function postRemindertorecipients_old() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');
        
        if(!isset($data['access_token']) || $data['access_token'] == '') {
            return Response::json(['status'=>'error','result' => 'access_token is missing']);
        } elseif(isset($data['document_id']) && !empty($data['document_id'])) {
            $data['offer_id'] = $data['document_id'];
        } elseif(!isset($data['offer_id']) || $data['offer_id'] == '') {
            return Response::json(['status'=>'error','result' => 'document_id is missing']);
        } elseif(!isset($data['reminder_type']) || $data['reminder_type'] == '') {
            return Response::json(['status'=>'error','result' => 'reminder_type is missing']);
        }
        
        $user_id = $utility->getUserIdByAuthToken($data['access_token']);
        //1 Email, 2 SMS, 3 SMS & Email
        $remindertype = $data['reminder_type'];
        $smsbodyOriginal = "Hi {rec_firstname}, Did you get the contract I sent you? Please let me know if you have questions. Click here to read it: {contract_url} Sincerely {user_name} ({user_companyname})";//$data['smsbody'];
        $emailSubject = "Don't forget";//"Påminnelse";//$data['emailSubject'];
        $emailbody = "Hi {rec_firstname}, I recently sent you a contract, did you have time to check it? To view it again, just click here to view it {contract_url} Let me know if you have any questions! Sincerely {user_name} ({user_companyname})";//$data['emailbody'];        
        
        $currentDT = date('Y-m-d H:i:s', time());
        $currentDT_STR = strtotime(date('Y-m-d H:i:s', time()));
        $offerSentId = $data['offer_id'];
        $offerSentData = Offersent::where('id', $offerSentId)->where('offer_status','!=', 7)->where('sender_id',$user_id)->first();
        if(!$offerSentData) {
            return Response::json(['status'=>'error','result' => 'offer not found']);
        }
        
        //Reminder Already Sent Conditions START
        $last_sent_emailreminderSTR_24Hr = strtotime('+24 hours',strtotime($offerSentData['last_sent_emailreminder']));
        $last_sent_smsreminderSTR_24Hr = strtotime('+24 hours',strtotime($offerSentData['last_sent_smsreminder']));
        if($remindertype == 1 && $currentDT_STR < $last_sent_emailreminderSTR_24Hr) {
            $datetime1 = new \DateTime(date('Y-m-d H:i:s', $currentDT_STR));//start time
            $datetime2 = new \DateTime(date('Y-m-d H:i:s', $last_sent_emailreminderSTR_24Hr));//end time
            $interval = $datetime1->diff($datetime2);
            return Response::json(['status'=>'error','result' => 'You have already sent reminder for this contract, You can send reminder again after '.$interval->format('%H hours %i minutes')]);
        } elseif($remindertype == 2 && $currentDT_STR < $last_sent_smsreminderSTR_24Hr) {
            $datetime1 = new \DateTime(date('Y-m-d H:i:s', $currentDT_STR));//start time
            $datetime2 = new \DateTime(date('Y-m-d H:i:s', $last_sent_smsreminderSTR_24Hr));//end time
            $interval = $datetime1->diff($datetime2);
            return Response::json(['status'=>'error','result' => 'You have already sent reminder for this contract, You can send reminder again after '.$interval->format('%H hours %i minutes')]);
        } elseif($remindertype == 3 && ($currentDT_STR < $last_sent_emailreminderSTR_24Hr || $currentDT_STR < $last_sent_smsreminderSTR_24Hr)) {
            return Response::json(['status'=>'error','result' => 'You have already sent reminder for this contract']);
        }
        //Reminder Already Sent Conditions END
        
        //Checking if contract language is Swedish START
        if($offerSentData['language_id'] == 'sv') {
            $smsbodyOriginal = "Hej {rec_firstname}, Här kommer en påminnelse på avtalet du mottagit tidigare. Gå till: {contract_url} Hälsningar {user_name} ({user_companyname})";
            $emailSubject = "Påminnelse";
            $emailbody = "Hej {rec_firstname}, Här kommer en påminnelse på avtalet du fått. För att läsa avtalet, vänligen se länken: {contract_url} Hör av dig om du har några frågor Mvh {user_name} ({user_companyname})";
        }
        //Checking if contract language is Swedish END
        
        $emailbody = nl2br($emailbody);
        $emailbodyOriginal = trim($emailbody);
        $senderId = $offerSentData['sender_id'];
        $recDetails = Offersentdetails::where('offer_sent_id',$offerSentId)->where('is_sender','!=',1)->get();
        $senderDetails = Offersentdetails::where('offer_sent_id',$offerSentId)->where('is_sender','=',1)->first();
        $senderDetails['user_details'] = Tcrypt::decrypter($senderDetails['user_details']);
        $senderDetails['email'] = Tcrypt::decrypter($senderDetails['email']);
        $phpmailersix = new phpmailersix();
        $gridMailer = new Gridmailer();
        foreach($recDetails as $key => $eachdetail) {  
            $eachdetail['user_details'] = Tcrypt::decrypter($eachdetail['user_details']);
            $eachdetail['email'] = Tcrypt::decrypter($eachdetail['email']);
            //echo $eachdetail['email'];continue;
            //Removing Special Characters from Email
            $eachdetail['email'] = preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $eachdetail['email']);
            if($eachdetail['is_sender'] != 1 && $eachdetail['offer_status'] != 4) {
                //$url = $domain_name.'offer/view/'.$eachdetail['id'].'/'.$eachdetail['unique_id'];
                $url = $domain_name.'document/view/'.$eachdetail['id'].'/'.$eachdetail['unique_id'];
                $urlAnchor = '<a href="'.$url.'">'.$domain_name.'offer/view..</a>';
                $recUserdetails = json_decode($eachdetail['user_details'], true);
                $recMobile = (isset($recUserdetails['mobile']) && $recUserdetails['mobile'] != '' ? $recUserdetails['mobile'] : '');
                if(($remindertype==1 || $remindertype==3) && $emailbodyOriginal !='') {
                    //updating last sent Email reminder date
                    $emailbody = $emailbodyOriginal;
                    Offersent::where('id', $offerSentId)->update(['last_sent_emailreminder' => $currentDT]);
                    $breakName = explode(' ', $eachdetail['first_name']);
                    $emailbody = str_replace("{rec_firstname}",$breakName[0],$emailbody);
                    $emailbody = str_replace("{rec_fullname}",$eachdetail['first_name'],$emailbody);
                    $emailbody = str_replace("{contract_url}",$urlAnchor,$emailbody);
                    $emailbody = str_replace("{user_name}",$senderDetails['first_name'],$emailbody);
                    $emailbody = ($senderDetails['company'] != '' ? str_replace("{user_companyname}",$senderDetails['company'],$emailbody) : str_replace("({user_companyname})",'',$emailbody));
                    $emailbody = str_replace("{user_companyname}",$senderDetails['company'],$emailbody);
                    $emailbody = (isset($eachdetail['company']) && $eachdetail['company'] != '' ? str_replace("{rec_companyname}",$eachdetail['company'],$emailbody) : str_replace("({rec_companyname})",'',$emailbody));
                    $emailbody = str_replace("{rec_companyname}",$eachdetail['company'],$emailbody);
                    
                    $mailArray = array();
                    $mailArray['from_name'] = (isset($senderDetails['first_name']) && $senderDetails['first_name'] != '' ? $senderDetails['first_name'] : '');
                    //$mailArray['from_email'] = $sender_email;
                    $mailArray['from_email'] = 'noreply@simplesign.io';
                    $mailArray['to_name'] = $eachdetail['first_name'];
                    $mailArray['to_email'] = $eachdetail['email'];
                    $mailArray['reply_to'] = 'noreply@simplesign.io'; //$reciver_email;
                    $mailArray['subject'] = $emailSubject;
                    $mailArray['body'] = $emailbody;
                    $mailArray['bodyplain'] = '';//$plainText;
                    /* $mailArray['custom_arg']['sender_id'] = $sender_id;
                    $mailArray['custom_arg']['from_domain'] = $emailhost;
                    $mailArray['custom_arg']['sent_detail_id'] = $offerDetailId;
                    $mailArray['custom_arg']['sent_id'] = $offer_sent_id;
                    $mailArray['custom_arg']['email_type'] = '1'; */
                    $mailsend = $gridMailer->sendGridEmail($mailArray);
                    
                    //$utility->sendemail($emailSubject,'noreply@simplesign.io',$eachdetail['email'],$eachdetail['first_name'],$emailbody);
                    //echo $eachdetail['email'].' | ';
                }
                $MainUserId = $utility->getParent($senderId);
                $totalRemSMS = $utility->checkRemainingSMS($MainUserId);
                if(($remindertype== 2 || $remindertype==3) && ($smsbodyOriginal != '' && $totalRemSMS > 0)) {
                    //updating last sent SMS reminder date
                    Offersent::where('id', $offerSentId)->update(['last_sent_smsreminder' => $currentDT]);
                    $smsbody = $smsbodyOriginal;
                    $smsbody = str_replace("{rec_firstname}",$eachdetail['first_name'],$smsbody);
                    $smsbody = str_replace("{contract_url}",$url,$smsbody);
                    $smsbody = str_replace("{user_name}",$senderDetails['first_name'],$smsbody);
                    $smsbody = ($senderDetails['company'] != '' ? str_replace("{user_companyname}",$senderDetails['company'],$smsbody) : str_replace("({user_companyname})",'',$smsbody));
                    $smsbody = str_replace("{user_companyname}",$senderDetails['company'],$smsbody);
                    $utility->sendsms($recMobile,$smsbody,$senderId);
                    //add sms logs starting
                    $smsLogsData = array(
                        "user_id" => $senderId,
                        "offer_sent_id" => $offerSentId,
                        "offersent_detail_id" => $eachdetail['id'],
                        "phone_number" => $recMobile,
                        "message" => $smsbody,
                        "section_name" => "Reminder Overview"
                    );
                    $smsLogsId = $utility->addItem("sms_logs", $smsLogsData);
                    //add sms logs ending
                    $utility->updateSentsms($senderId);
                    if(!$utility->isSuperuser($senderId)) {
                        $where1['id'] = $MainUserId;
                        $update1['total_remaing_sms'] = $totalRemSMS-1;
                        $utility->updateItem('users_login',$where1,$update1);
                    }
                    //echo $recMobile.' | ';
                }
            }
        }//foreach loop ends here
        return Response::json(['status'=>'success','result' => 'reminder sent']);
    }

    public function postRemindertorecipients() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');
        
        if(!isset($data['access_token']) || $data['access_token'] == '') {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        } elseif(isset($data['document_id']) && !empty($data['document_id'])) {
            $data['offer_id'] = $data['document_id'];
        } elseif(!isset($data['offer_id']) || $data['offer_id'] == '') {
            return Response::json(['status' => 'error', 'result' => 'document_id is missing']);
        } if(!isset($data['reminder_type']) || $data['reminder_type'] == '') {
            return Response::json(['status' => 'error', 'result' => 'reminder_type is missing']);
        }
        
        $user_id = $utility->getUserIdByAuthToken($data['access_token']);
        $parentId = $utility->getParent($user_id);
        $getApiHitCount = Userinfo::where('user_id', $parentId)->select('hit_count')->first();
        $addupdateapiaccesslogs = $utility->addupdateapiaccesslogs($user_id, 'postRemindertorecipients v3', $data, $getApiHitCount['hit_count']);
        if($addupdateapiaccesslogs == 'exceed') {
            $this->apiCallLimitExceedMessage = str_replace('#hitCuntNo', $getApiHitCount['hit_count'], $this->apiCallLimitExceedMessage);
            return Response::json(['status' => 'error', 'result' => $this->apiCallLimitExceedMessage]);
        }
        if($user_id > 0) {
            $offerSentId = $data['offer_id'];
            $offerSentData = Offersent::where('id', $offerSentId)->where('offer_status','!=', 7)->where('sender_id', $user_id)->first();
            if(!$offerSentData) {
                return Response::json(['status' => 'error', 'result' => 'document not found']);
            }
            
            $data['activity'] = 1;
            //1 Email, 2 SMS, 3 SMS & Email
            $reminderType = $data['reminder_type'];
            $senderId = $offerSentData['sender_id'];
            $parentId = $utility->getParent($senderId);
            $currentDateTime = date('Y-m-d H:i:s', time());
            $totalRemSMS = $utility->checkRemainingSMS($parentId);
            $getTranslation = $utility->GeneralTranslations($offerSentData['language_id']);
            $documentName = ($offerSentData['visible_name'] != '' ? Tcrypt::decrypter($offerSentData['visible_name']) : '');
            $recipientDetails = Offersentdetails::where('offer_sent_id', $offerSentId)->where('is_sender', 0)->get()->toArray();
            $senderDetails = Offersentdetails::where('offer_sent_id', $offerSentId)->where('is_sender', 1)->select('first_name', 'company')->first();
            $senderFirstName = $senderDetails['first_name'];
            foreach($recipientDetails as $recipientDetailsKey => $recipientDetailsValue) {
                $userDetails = $recipientDetailsValue['user_details'];
                $recipientUserDetails = Tcrypt::decrypter($userDetails);
                $recipientDetailsValue['user_details'] = $recipientUserDetails;
                $recipientUserDetails = json_decode($recipientUserDetails, true);
                if(($recipientDetailsValue['is_sender'] != 1 && $recipientDetailsValue['offer_status'] != 4 && $recipientDetailsValue['role'] != 2) || ($recipientDetailsValue['is_sender'] != 1 && $recipientDetailsValue['role'] == 2 && $recipientDetailsValue['offer_status'] < 3)) {
                    $recipientEmail = Tcrypt::decrypter($recipientDetailsValue['email']);
                    $recipientEmail = preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $recipientEmail);
                    $recipientFullName = (isset($recipientUserDetails['full_name']) ? $recipientUserDetails['full_name'] : '');

                    $recipientMobile = (isset($recipientUserDetails['mobile']) && $recipientUserDetails['mobile'] != '' ? $recipientUserDetails['mobile'] : '');
                    //$recipientFirstName = $recipientDetailsValue['first_name'];
                    //$breakName = explode(' ', $recipientFirstName);
                    if($reminderType == 1 || $reminderType == 3) {
                        $recipientDetailsValue['user_details'] = $userDetails;
                        $recipientDetailsValue['send_reminder'] = 1;
                        $utility->sendOfferinvitation($recipientDetailsValue, $offerSentData);
                    }
                    if(($reminderType == 2 || $reminderType == 3) && $totalRemSMS > 0 && $recipientMobile != "") {
                        $url = $domain_name.'document/view/'.$recipientDetailsValue['id'].'/'.$recipientDetailsValue['unique_id'];
                        //$smsbody = str_replace("{rec_firstname}", $breakName[0], $smsbody);
                        //$smsbody = str_replace("{contract_url}", $url, $smsbody);
                        //$smsbody = str_replace("{user_name}", $senderFirstName, $smsbody);
                        //$smsbody = ($senderDetails['company'] != '' ? str_replace("{user_companyname}", $senderDetails['company'], $smsbody) : str_replace("({user_companyname})", '', $smsbody));
                        //$smsbody = str_replace("{user_companyname}", $senderDetails['company'], $smsbody);
                        $message = $getTranslation[318].' '.$recipientFullName.',%0a';
                        $message .= $senderFirstName.' '.$getTranslation[463].': '.$documentName.'.%0a '.$getTranslation[786].':%0a'.$url;
                        $smsbody = $getTranslation[2063].":"."\n" . $message;
                        $utility->sendsms($recipientMobile, urldecode($smsbody), $senderId);
                        //add sms logs starting
                        $smsLogsData = array(
                            "user_id" => $senderId, "offer_sent_id" => $offerSentId, "offersent_detail_id" => $recipientDetailsValue['id'], "phone_number" => $recipientMobile,
                            "message" => $smsbody, "section_name" => "Reminder Overview"
                        );
                        $smsLogsId = $utility->addItem("sms_logs", $smsLogsData);
                        //add sms logs ending
                        $utility->updateSentsms($senderId);
                        if(!$utility->isSuperuser($senderId)) {
                            $where['id'] = $parentId;
                            $update['total_remaing_sms'] = ($totalRemSMS-1);
                            $utility->updateItem('users_login', $where, $update);
                        }
                    }
                    Offersent::where('id', $offerSentId)->update(['last_sent_smsreminder' => $currentDateTime]);
                    if(array_key_exists("activity", $data) && $data['activity'] == 1) {
                        $activityInfo = [];
                        $commentObject = ['reminder_type' => $reminderType, 'mobileno' => $recipientMobile, 'email' => $recipientEmail];
                        $activityInfo['recipient_id'] = 0;
                        $activityInfo['user_id'] = 0;
                        $activityInfo['offer_sent_id'] = $offerSentId;
                        $activityInfo['offer_detail_id'] = $recipientDetailsValue['id'];
                        $activityInfo['comment'] = json_encode($commentObject);
                        $activityInfo['activity'] = 'sent the reminder to';
                        $activityInfo['user_name'] = $senderFirstName;
                        $activityInfo['type'] = '2';
                        $activityInfo['created_at'] = date('Y-m-d H:i:s');
                        $activityInfo['sharedwith_activity'] = $recipientDetailsValue['first_name'];
                        $utility->addItem('signingarea_chat_and_logs', $activityInfo);
                        //Sending activity of open contract to socket
                        $activityInfo['user_activity'] = 1;
                        $activityObj = json_encode($activityInfo);
                        $utility->getCheckupdateinserver($activityObj);
                    }
                } else {
                    return Response::json(['status' => 'error', 'result' => 'Document not found']);
                }
            }//foreach loop ends here
            return Response::json(['status' => 'success', 'result' => 'reminder sent']);
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access token']);
        }
    }

    public function getVerifyaccount() {
        if(!Input::has('email') || Input::get('email') == '' || !filter_var(Input::get('email'), FILTER_VALIDATE_EMAIL)) {
            return Response::json(['status'=>'error','result' => 'email is missing or invalid']);
        }

        $email = Input::get('email');
        $checkPaid = User::where('email', Tcrypt::encrypter($email))->where('is_paid', 1)->count();
        if($checkPaid) {
            $whereRaw = "(";
            $whereRaw .= 'CAST(AES_DECRYPT(`simplesign_users_login`.`email`,\''.env('ENCRYPT_KEY').'\', \''.env('ENCRYPT_IV').'\') AS CHAR) = ? ';
            $whereRaw .= ")";
            DB::statement(' SET block_encryption_mode = \''.env('ENCRYPT_CIPHER').'\'');

            $user = User::whereRaw($whereRaw, [$email])->select('id')->first();
            if($user) {
                //return Response::json(['status'=>'error','result' => 'Account already exists', 'user_id' => $user['id'], 'email' => $email]);
                return response()->json(['status'=>'error','result' => 'Account already exists', 'user_id' => $user['id'], 'email' => $email], 200, ['Content-Type' => 'application/json; charset=UTF-8'], JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
            } else {
                return Response::json(['status'=>'success','result' => 'Account does not exists']);
            }
        } else {
            return Response::json(['status'=>'error','result' => 'Not paid Account']);
        }

        /*if(!Input::has('email') || Input::get('email') == '' || !filter_var(Input::get('email'), FILTER_VALIDATE_EMAIL)){
            return Response::json(['status'=>'error','result' => 'email is missing or invalid']);
        }
        $email = Input::get('email');
        $whereRaw = "(";
        $whereRaw .= 'CAST(AES_DECRYPT(`simplesign_users_login`.`email`,\''.env('ENCRYPT_KEY').'\', \''.env('ENCRYPT_IV').'\') AS CHAR) = ? ';
        //\''.$email.'\'
        $whereRaw .= ")";
        DB::statement(' SET block_encryption_mode = \''.env('ENCRYPT_CIPHER').'\'');
        $user = User::whereRaw($whereRaw,[$email])->select('id')->first();
        if($user){
            return Response::json(['status'=>'error','result' => 'Account already exists', 'user_id' => $user['id'], 'email' => $email]);  
        }else{
            return Response::json(['status'=>'success','result' => 'Account does not exists']);   
        }*/

    }

     /**
     * deactivate sub user
     * @return type sub user list
     */

    public function putChangeuserstatus()
    {
        $utility = new Utility();
        $data = Input::all();
        if(isset($data['access_token']) && !empty($data['access_token'])){
                $access_token = $data['access_token'];
        }else{
                return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
        if(isset($data['status']) && $data['status'] !=""){
                $status = $data['status'];
        }else{
                return Response::json(['status'=>'error','result' => 'status is missing']);
        }
        if(isset($data['user_id']) && !empty($data['user_id'])){
            $parent_id = $utility->getUserIdByAuthToken($access_token);
            $user_id = $data['user_id'];
            if($user_id > 0 && $parent_id != $user_id){
                $userArray['is_active'] = $status;
                $where['parent_id'] = $parent_id;
                $where['id'] = $user_id;
                $update = $utility->updateItem("users_login",$where,$userArray);
                if($update){
                    return Response::json(['status'=>'success','result' => 'Status Changed successfully']);
                }else{
                    return Response::json(['status'=>'error','result' => 'nothing to update or invalid user_id']);
                }
            }else{
                return Response::json(['status'=>'error','result' => 'invalid user_id']);
            }
        }else{
            return Response::json(['status'=>'error','result' => 'user_id is missing']);
        }
    }
    //Webhook
    public function postSubscribezapier(){
        $gridMailer = new Gridmailer();
        $data = Input::all();
        $utility = new Utility();
        $error = array(
                ['status' => 'error', 'message' => 'Invalid Access Token'],
              );

        date_default_timezone_set('Asia/Karachi');
        $curDate=date('Y-m-d H:i:s');
        $event = (isset($data['event']) && $data['event'] != '' ? $data['event'] : '');
        $target_url = (isset($data['target_url']) && $data['target_url'] != '' ? $data['target_url'] : '');
        $access_token = (isset($data['access_token']) && $data['access_token'] != '' ? $data['access_token'] : '');
        $subscription_url = (isset($data['subscription_url']) && $data['subscription_url'] != '' ? $data['subscription_url'] : '');
        if(isset($data['access_token']) && !empty($data['access_token'])){
            $user_id = $utility->getUserIdByAuthToken($access_token);
        }else{
            return Response::json($error,404);
        }
        if(empty($user_id)){
            return Response::json($error,404);
        }
        if($target_url == '' || $event == ''){
            $error = array(
                ['status' => 'error', 'message' => 'Zapier Information is missing'],
              );
            return Response::json($error,404);
        }
        $ZapierArray = array(
                             'user_id' => $user_id,
                             'event' => $event,
                             'access_token' => $access_token,
                             'target_url' => $target_url,
                             'subscription_url' => $subscription_url,
                             'status' => 1,
                             'updated_at' => $curDate,
                             );
        $oldEntry = Zapier::where('user_id', $user_id)->where('target_url', $target_url)->where('event',$event)->select('id')->first();
        if($oldEntry){
            $oldEntryId = (isset($oldEntry['id']) && $oldEntry['id'] != '' ? $oldEntry['id'] : '');
            if($oldEntryId != ''){
                Zapier::where('id', $oldEntryId)->update($ZapierArray);
            }
        }else{
            Zapier::insert($ZapierArray);
        }
        
        $myemail['from_email'] = 'noreply@simplesign.io';
        $myemail['from_name'] = 'Simple Sign';
        $myemail['subject'] = 'Zapier Subscribe';
        $myemail['body'] = print_r($data,true);
        $myemail['to_email'] = trim('rahibali@yopmail.com');
        $myemail['reply_to'] = 'noreply@simplesign.io';
        $myemail['to_name'] = '';
        $myemail['bodyplain'] = 'Zapier Subscribe';
        $mailsend = $gridMailer->sendGridEmail($myemail);
        //$utility->sendemail('Zapier Subscribe','noreply@simplesign.io','rahibali@yopmail.com','Rahib Aly',print_r($data,true));
    }
    //Webhook
    public function anyUnsubscribezapier(){
        $gridMailer = new Gridmailer();
        $data = Input::all();
        $utility = new Utility();
        $error = array(
                ['status' => 'error', 'message' => 'Invalid Access Token'],
              );
        date_default_timezone_set('Asia/Karachi');
        $curDate=date('Y-m-d H:i:s');
        $target_url = (isset($data['target_url']) && $data['target_url'] != '' ? $data['target_url'] : '');
        $access_token = (isset($data['access_token']) && $data['access_token'] != '' ? $data['access_token'] : '');
        if(isset($data['access_token']) && !empty($data['access_token'])){
            $user_id = $utility->getUserIdByAuthToken($access_token);
        }else{
            return Response::json($error,404);
        }
        if(empty($user_id)){
            return Response::json($error,404);
        }
        if($target_url == ''){
            $error = array(
                ['status' => 'error', 'message' => 'Zapier Information is missing'],
              );
            return Response::json($error,404);
        }
        //Zapier::where('user_id', $user_id)->where('target_url', $target_url)->update(['status' => 0, 'updated_at' => $curDate]);
        Zapier::where('user_id', $user_id)->where('target_url', $target_url)->delete();
        $myemail['from_email'] = 'noreply@simplesign.io';
        $myemail['from_name'] = 'Simple Sign';
        $myemail['subject'] = 'Zapier UnSubscribe';
        $myemail['body'] = print_r($data,true);
        $myemail['to_email'] = trim('rahibali@yopmail.com');
        $myemail['reply_to'] = 'noreply@simplesign.io';
        $myemail['to_name'] = '';
        $myemail['bodyplain'] = 'Zapier UnSubscribe';
        $mailsend = $gridMailer->sendGridEmail($myemail);
        //$utility->sendemail('Zapier Subscribe','noreply@simplesign.io','rahibali@yopmail.com','Rahib Aly',print_r($data,true));
    }
    public function anySendformtherefore(){
    $utility = new Utility();
    $data         = Input::all();
    $email        = $data['email'];
    $access_token = $data['access_token'];
    if(!isset($email) || !filter_var($email, FILTER_VALIDATE_EMAIL)){
     return Response::json(['status'=>'error','result' => 'Invalid or missing  email']);
    }
    else if(!isset($access_token) || $access_token == "")
    {
     return Response::json(['status'=>'error','result' => 'access_token is missing']);
    }
    $email = Tcrypt::encrypter($email);
    $userData = User::where('super_access_token', $access_token)->where('email', $email)->select('id','parent_id','email','super_access_token')->first();
    if($userData)
    {
      $user_id          = $userData['id'];
      $language         = Userinfo::where('user_id', '=', $user_id)->select('language')->first();  
      $lang_id          = $language['language']; 
      $getTranslation   = $utility->GeneralTranslations($lang_id);  

       Input::merge(array('access_token'=> $access_token,'email'=>$email));

       $Fetchsendcontractfieldsdata = json_decode($this->postFetchsendcontractfields()->getContent(), true);
      
      if(!isset($data['update_view']))
      {
        return view('contract.sendform_therefore_update')
        ->with('userData', $userData)
        ->with('getTranslation', $getTranslation)
        ->with("update_view",1)
        ->with('addrectrans', $getTranslation[911])
        ->with('searcgrectrans', $getTranslation[172]) 
        ->with('sendcontractrectrans', $getTranslation[600])
         ->with('Hideoptions', $getTranslation[684])
         ->with('Moreoptions', $getTranslation[683])
         ->with('Fetchsendcontractfieldsdata',$Fetchsendcontractfieldsdata['result']); 
         
      }
      else
      {
      return view('contract.sendform_therefore')
     ->with('userData', $userData)
     ->with('getTranslation', $getTranslation);
     
      }
      
      
    }
    else
    {
    return Response::json(['status'=>'error','result' =>'Mismatch email and access_token']);
    }

     
    }

    public function anyLoginformtherefore()
    {
        return view('contract.sendform_therefore_login');
    }

    public function anyLogindesktop()
    {
        return view('contract.sendform_desktop_login');
    }

    public function anyLogin()
    {

        $externalData = Input::all();
        if (isset($externalData['appAtuh'])) {
            Session::put('pd_appauth',1);
        }
        
        return view('external.external_login')->with('externalData',$externalData);
    }
    public function anyExtensioniframe(){
        return view('external.extension_documentview');
    }
    //check simple sign extenssion user alive/expire
    public function anyIsloginsession() {
       
        if (Session::has('user_id') && session()->get('user_id') !="") {
            return Response::json(['status'=>'success','user_id' =>session()->get('user_id')]);    
        }
        else {
            return Response::json(['status'=>'error','result' =>session()->all()]);
        }
    }
    /**
    *switch user between the accounts in order to user pipe drive app
    */
    public function postSwitchpdaccount() {
        
        $previousUserId = Input::get('prev_user');

        $newUserId = Input::get('new_user');
        
        $utility = new Utility();

        if (!Input::has('isFail')) {

            $pdData = $utility->getSpecificUserData(['id'=>$previousUserId],'pipedrive_data');

        
            $utility->updateItem('users_login',['id'=>$newUserId],['pipedrive_data'=>$pdData->pipedrive_data]);

            $utility = null;

            return Response::json(['status'=>'success']);
        }
        else {

            $pdData = $utility->getSpecificUserData(['id'=>$previousUserId],'pipedrive_data');
            
            if (strlen($pdData->pipedrive_data) == 0) {

                $status = 'error';
                
                $msg = 'This expired Simple Sign account is not associated with Simple Sign pipe drive app, make sure you are using same Simple Sign account which was used to install app.';          
            }
            else {

                $status = 'success';
                
                $msg = 'Successfully data switched.';
                
                $utility->updateItem('users_login',['id'=>$newUserId],['pipedrive_data'=>$pdData->pipedrive_data]); 
            }

            $utility = null;

            return Response::json(['status'=>$status,'message'=>$msg]);   
        }
        
    }
    /**
    * authenticate pipe drive user
    */
    public function anyAuthpipedriveuser() {
        
        $pipDriveData = Input::all();
        if(isset($pipDriveData['urlData']) && $pipDriveData['urlData'] != ""){
            $pipDriveData = json_decode(base64_decode($pipDriveData['urlData']),true);
        }

        $pipDriveData['from'] = 'deal';

        $pipDriveData['isPripeDrive'] = '1';
        
        $domain = "https://".$_SERVER['HTTP_HOST'];
        $utility = new Utility();
        $whereLogin = [];
        $whereLogin['pipe_drive_userid'] = $pipDriveData['userId'];
        $userData = $utility->getItem("users_login",$whereLogin,["id", "pipe_drive_userid","super_access_token","email"]);
        if(isset($pipDriveData['switchaccount']) && $pipDriveData['switchaccount'] == 1){
        return view('external.external_login')->with('externalData',$pipDriveData);
        }
        if($userData && $userData->pipe_drive_userid != 0){
            $domain_name = asset('/');
            $accessToken = $userData->super_access_token;
            $user_id     = $userData->id;
            $email     =   Tcrypt::decrypter($userData->email);
            $email = preg_replace('/\s+/', '', $email);
            //echo $email."&access_token=".$accessToken;
            $urlDataobject = ['email'=>$email,'access_token'=>$accessToken,'htmlview'=>1,'_userId'=>$user_id];
            $urlDataobject = array_merge($urlDataobject,$pipDriveData);
            $urlDataobject = json_encode($urlDataobject);

            //$urlData  = "email=".$email."&access_token=".$accessToken."&htmlview=1&_userId=".$user_id."&".http_build_query($pipDriveData);
            
            $url = $domain_name."api/v3/request/external?urlData=".base64_encode($urlDataobject);
            
            //echo "Redirect url:".Auth::user()->email;
            //var_dump(Auth::user());
            return Redirect::to($url);
        
        }else{
        return view('external.external_login')->with('externalData',$pipDriveData);
        }
        exit();
        if (1==2 && $domain == "https://beta.simplesign.io") {
            return view('external.external_login')->with('externalData',$pipDriveData);
        }
        else {
            $userAuth = Auth::check();
            if ($userAuth) {
                $domain_name = asset('/');
                $accessToken = Auth::user()->super_access_token;
                $user_id     = Auth::user()->id;
                $email     = Auth::user()->email;
                $email = preg_replace('/\s+/', '', $email);
                //echo $email."&access_token=".$accessToken;
                $urlDataobject = ['email'=>$email,'access_token'=>$accessToken,'htmlview'=>1,'_userId'=>$user_id];
                $urlDataobject = array_merge($urlDataobject,$pipDriveData);
                $urlDataobject = json_encode($urlDataobject);
                
                $url = $domain_name."api/v3/request/external?urlData=".base64_encode($urlDataobject);

                


                
                //$url = $domain_name."api/v3/request/external?email=".$email."&access_token=".$accessToken."&htmlview=1&_userId=".$user_id."&".http_build_query($pipDriveData);
                //echo "Redirect url:".Auth::user()->email;
                //var_dump(Auth::user());
                return Redirect::to($url);
            }
            else {
                return view('external.external_login')->with('externalData',$pipDriveData);
            }
        }    
    }

    public function anyLoginuser()
    {
        return view('external.api_login');
    }

    public function getFetchdocumentfields() {
        $utility = new Utility();
        $data = Input::all();
        $domain_name = asset('/');

        if(!isset($data['access_token']) || $data['access_token'] == "") {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        } elseif(!isset($data['email']) || !filter_var($data['email'], FILTER_VALIDATE_EMAIL)) {
            return Response::json(['status' => 'error', 'result' => 'Invalid or missing  email']);
        } elseif(!isset($data['contract_id']) || $data['contract_id'] == "") {
            return Response::json(['status' => 'error', 'result' => 'contract_id is missing']);
        }

        $access_token = $data['access_token'];
        $offerSentId = $data['contract_id'];
        $email = Tcrypt::encrypter($data['email']);
        $user_id = $utility->getUserIdByAuthToken($access_token);

        //http://beta.simplesign.io/offer/view/121224/5c2a198579c11
        //$utility->getContractUrl($offerSentId)

        if($user_id > 0) {
            $userData = User::where('super_access_token', $access_token)->where('email', $email)->select('id', 'parent_id', 'email', 'super_access_token')->where('is_active', 1)->first();
            $sentData = Offersent::where('id', $offerSentId)->where('sender_id', $user_id)->select('content', 'offer_status', 'visible_name', 'name')->first();
            if($sentData) {
                $detailData = Offersentdetails::where('offer_sent_id', $offerSentId)->where('is_sender', 0)->select('customer_id', 'user_details')->get();
                $OfferHTML = (isset($sentData['content']) && $sentData['content'] != '' ? Tcrypt::decrypter($sentData['content']) : '');
                $html = new \Htmldom($OfferHTML);

                $recipientData = [];
                $documentName = ($sentData['visible_name'] != '' ? Tcrypt::decrypter($sentData['visible_name']) : Tcrypt::decrypter($sentData['name']));
                $recipientKeys = array('full_name', 'email', 'company', 'personal_no', 'personnr', 'mobile', 'address', 'city', 'zipcode', 'zip');
                foreach($detailData as $detDataKey => $detDataValue) {
                    $userDetails = Tcrypt::decrypter($detDataValue['user_details']);
                    $userDetailsDecode = json_decode($userDetails, true);
                    $recipientFullName = $userDetailsDecode['full_name'];
                    $recipientEmail = $userDetailsDecode['email'];
                    $recipientRoleName = (isset($userDetailsDecode['recrolename']) && $userDetailsDecode['recrolename'] != '' ? $userDetailsDecode['recrolename'] : '');

                    $contractData = $extraFieldsArray = $newFieldsArray = [];
                    foreach($html->find(".text") as $key => $element) {
                        $elementsArray = ['type' => '', 'value' => '', 'label' => ''];
                        //if(in_array(trim($element->getAttribute('selectedtype')), $recipientKeys)) {
                            if($element->getAttribute('recipientselectedid') == $detDataValue['customer_id'] && strpos($element->getAttribute('class'), 'signature_box_popupcontainer') === false && strpos($element->getAttribute('class'), 'check_box_popupcontainer') === false && strpos($element->getAttribute('class'), 'selectcolor_popupcontainer') === false) {

                                /*if($element->getAttribute('rectooltip') != null && $element->getAttribute('rectooltip') != "") {
                                    $contractData[$key]['recipient_role'] = trim($element->getAttribute('rectooltip'));
                                }*/

                                //$contractData[$key]['type'] = 'text';
                                $elementsArray['type'] = 'text';
                                //$contractData[$key]['recipient_name'] = trim($element->getAttribute('recipientselected'));

                                if($sentData['offer_status'] == 4 || $element->getAttribute('prechecked') == 1) {
                                    $elementsArray['value'] = (isset($element->find('p', 0)->plaintext) && $element->find('p', 0)->plaintext != '' ? trim($element->find('p', 0)->plaintext) : (isset($element->find('h4', 0)->plaintext) && $element->find('h4', 0)->plaintext != '' ? trim($element->find('h4', 0)->plaintext) : ''));
                                } else {
                                    $elementsArray['value'] = '';
                                }

                                if($element->getAttribute('selectedtype') != null && $element->getAttribute('selectedtype') != "") {
                                    $elementsArray['label'] = trim($element->getAttribute('selectedtype'));
                                }

                                /*if($element->getAttribute('prechecked') != null && $element->getAttribute('prechecked') != "") {
                                    $contractData[$key]['prefilled'] = trim($element->getAttribute('prechecked'));
                                }*/

                                if($element->getAttribute('dropdownlabel') != null && $element->getAttribute('dropdownlabel') != "") {
                                    $elementsArray['type'] = 'drop down';
                                    $elementsArray['label'] = trim($element->getAttribute('dropdownlabel'));
                                    $elementsArray['value'] = trim(htmlspecialchars_decode($element->getAttribute('dropdownvalues')));
                                }

                                /*if($element->getAttribute('data-document-ismadatory') != null && $element->getAttribute('data-document-ismadatory') != "") {
                                    $contractData[$key]['document'] = trim("document field");
                                }*/
                            }//condition ends here
                        //}//in_array condition ends here
                        if($elementsArray['label'] != '' && !in_array($elementsArray['label'], $recipientKeys)) {
                            array_push($extraFieldsArray, $elementsArray);
                        } elseif($elementsArray['label'] != '') {
                            array_push($contractData, $elementsArray);
                        }
                    }//loop ends here

                    /*$recipientKeys = array('name', 'email', 'personal_no', 'mobile', 'address', 'city', 'zipcode');
                    if(isset($recipient['people_fields'])) {
                        $extAndDocFldsArray = array();
                        foreach($recipient['people_fields'] as $pepleFldKey => $pepleFldValue) {
                            if(!in_array($pepleFldKey, $recipientKeys)) {
                                array_push($extAndDocFldsArray, array('extAndDocFieldName' => $pepleFldKey, 'extAndDocFieldValue' => $pepleFldValue));
                            }
                        }
                        $extraAndDocumentFields = json_encode($extAndDocFldsArray);
                    }*/

                    $fullNameSearch = array_search('full_name', array_column($contractData, 'label'));
                    $emailSearch = array_search('email', array_column($contractData, 'label'));
                    $companySearch = array_search('company', array_column($contractData, 'label'));
                    $regNoSearch = array_search('reg_no', array_column($contractData, 'label'));
                    $personnrSearch = array_search('personnr', array_column($contractData, 'label'));
                    $personalNoSearch = array_search('personal_no', array_column($contractData, 'label'));
                    $mobileSearch = array_search('mobile', array_column($contractData, 'label'));
                    $addressSearch = array_search('address', array_column($contractData, 'label'));
                    $citySearch = array_search('city', array_column($contractData, 'label'));
                    $zipCodeSearch = array_search('zipcode', array_column($contractData, 'label'));
                    if($fullNameSearch === false && isset($userDetailsDecode['full_name']) && $userDetailsDecode['full_name'] != '') {
                        $newFieldsArray['type'] = 'text';
                        $newFieldsArray['value'] = (isset($recipientFullName) && $recipientFullName != '' ? $recipientFullName : '');
                        $newFieldsArray['label'] = 'full_name';
                    } if($emailSearch === false && isset($userDetailsDecode['email']) && $userDetailsDecode['email'] != '') {
                        $newFieldsArray['type'] = 'text';
                        $newFieldsArray['value'] = (isset($recipientEmail) && $recipientEmail != '' ? $recipientEmail : '');
                        $newFieldsArray['label'] = 'email';
                    } if($companySearch === false && isset($userDetailsDecode['company']) && $userDetailsDecode['company'] != '') {
                        $newFieldsArray['type'] = 'text';
                        $newFieldsArray['value'] = (isset($userDetailsDecode['company']) && $userDetailsDecode['company'] != '' ? $userDetailsDecode['company'] : '');
                        $newFieldsArray['label'] = 'company';
                    } if($regNoSearch === false && isset($userDetailsDecode['reg_no']) && $userDetailsDecode['reg_no'] != '') {
                        $newFieldsArray['type'] = 'text';
                        $newFieldsArray['value'] = (isset($userDetailsDecode['reg_no']) && $userDetailsDecode['reg_no'] != '' ? $userDetailsDecode['reg_no'] : '');
                        $newFieldsArray['label'] = 'reg_no';
                    } if($personnrSearch === false && isset($userDetailsDecode['personnr']) && $userDetailsDecode['personnr'] != '') {
                        $newFieldsArray['type'] = 'text';
                        $newFieldsArray['value'] = (isset($userDetailsDecode['personnr']) && $userDetailsDecode['personnr'] != '' ? $userDetailsDecode['personnr'] : '');
                        $newFieldsArray['label'] = 'personnr';
                    } if($personalNoSearch === false && isset($userDetailsDecode['personal_no']) && $userDetailsDecode['personal_no'] != '') {
                        $newFieldsArray['type'] = 'text';
                        $newFieldsArray['value'] = (isset($userDetailsDecode['personal_no']) && $userDetailsDecode['personal_no'] != '' ? $userDetailsDecode['personal_no'] : '');
                        $newFieldsArray['label'] = 'personal_no';
                    } if($mobileSearch === false && isset($userDetailsDecode['mobile']) && $userDetailsDecode['mobile'] != '') {
                        $newFieldsArray['type'] = 'text';
                        $newFieldsArray['value'] = (isset($userDetailsDecode['mobile']) && $userDetailsDecode['mobile'] != '' ? $userDetailsDecode['mobile'] : '');
                        $newFieldsArray['label'] = 'mobile';
                    } if($addressSearch === false && isset($userDetailsDecode['address']) && $userDetailsDecode['address'] != '') {
                        $newFieldsArray['type'] = 'text';
                        $newFieldsArray['value'] = (isset($userDetailsDecode['address']) && $userDetailsDecode['address'] != '' ? $userDetailsDecode['address'] : '');
                        $newFieldsArray['label'] = 'address';
                    } if($citySearch === false && isset($userDetailsDecode['city']) && $userDetailsDecode['city'] != '') {
                        $newFieldsArray['type'] = 'text';
                        $newFieldsArray['value'] = (isset($userDetailsDecode['city']) && $userDetailsDecode['city'] != '' ? $userDetailsDecode['city'] : '');
                        $newFieldsArray['label'] = 'city';
                    } if($zipCodeSearch === false && isset($userDetailsDecode['zipcode']) && $userDetailsDecode['zipcode'] != '') {
                        $newFieldsArray['type'] = 'text';
                        $newFieldsArray['value'] = (isset($userDetailsDecode['zipcode']) && $userDetailsDecode['zipcode'] != '' ? $userDetailsDecode['zipcode'] : '');
                        $newFieldsArray['label'] = 'zipcode';
                    }
                    if(count($newFieldsArray)) {
                        array_push($contractData, $newFieldsArray);
                    }
                    $extraFields = (isset($userDetailsDecode['extra_fields']) && $userDetailsDecode['extra_fields'] != '' ? json_decode($userDetailsDecode['extra_fields'], true) : '');
                    if($extraFields != '') {
                        foreach($extraFields as $extFldKey => $extFldValue) {
                            array_push($extraFieldsArray, array('type' => 'text', 'value' => $extFldValue['fieldValue'], 'label' => $extFldValue['fieldName']));
                        }
                    }
                    $documentData = ['recipient_name' => $recipientFullName, 'recipient_email' => $recipientEmail, 'recipient_role' => $recipientRoleName, 'fields' => $contractData, 'custom_fields' => $extraFieldsArray];
                    array_push($recipientData, $documentData);
                }

                return Response::json(['status' => 'success', 'result' => ['document_name' => $documentName, 'recipient_details' => $recipientData]]);
                //return Response::json(['status' => 'success', 'result' => $contractData]);
            } else {
                return Response::json(['status' => 'error', 'result' => 'Invalid access token or contract id']);
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access token']);
        }
    }
    
    public function anyFetchcontractfields() {
        $utility = new Utility();
        $data = Input::all();
        $actual_link = "http://".$_SERVER['HTTP_HOST'];
        
        if(!isset($data['email']) || !filter_var($data['email'], FILTER_VALIDATE_EMAIL)) {
            return Response::json(['status'=>'error','result' => 'Invalid or missing  email']);
        } elseif(!isset($data['access_token']) || $data['access_token'] == "") {
            return Response::json(['status'=>'error','result' => 'access_token is missing']);
        } elseif(!isset($data['contract_id']) || $data['contract_id'] == "") {
            return Response::json(['status'=>'error','result' => 'contract_id is missing']);
        }

        //$email = $data['email'];
        $access_token = $data['access_token'];
        $offerSentid = $data['contract_id'];
        $email = Tcrypt::encrypter($data['email']);
        $userData = User::where('super_access_token', $access_token)->where('email', $email)->select('id','parent_id','email','super_access_token')->where('is_active', '1')->first();
        if($userData) {
            $contractData = [];
            $sentData = Offersent::where('id', $offerSentid)->select('content', 'offer_status')->first();
            if($sentData) {
                $OfferHTML = (isset($sentData['content']) && $sentData['content'] != '' ? Tcrypt::decrypter($sentData['content']) : '');
                $html = new \Htmldom($OfferHTML);
                //$OfferHTML = new \Htmldom($OfferHTML);

                $count = 0;
                foreach($html->find(".text") as $key => $element) {
                    if($element->getAttribute('recipientselectedid') != 101) {
                        $contractData[$key]['recipientselected'] = trim($element->getAttribute('recipientselected'));

                        //$contractData[$key]['recipientselectedid'] = $element->getAttribute('recipientselectedid');
                        if($sentData['offer_status'] == 4 || $element->getAttribute('prechecked') == 1) {
                            $contractData[$key]['value'] = (isset($element->find('p', 0)->plaintext) && $element->find('p', 0)->plaintext != '' ? trim($element->find('p', 0)->plaintext) : (isset($element->find('h4', 0)->plaintext) && $element->find('h4', 0)->plaintext != '' ? trim($element->find('h4', 0)->plaintext) : ''));
                        } else {
                            $contractData[$key]['value'] = '';
                        }

                        if($element->getAttribute('selectedtype') != null && $element->getAttribute('selectedtype') != "")
                            $contractData[$key]['type'] = trim($element->getAttribute('selectedtype'));

                        if($element->getAttribute('prechecked') != null && $element->getAttribute('prechecked') != "")
                            $contractData[$key]['prefilled'] = trim($element->getAttribute('prechecked'));

                        if($element->getAttribute('dropdownlabel') != null && $element->getAttribute('dropdownlabel') != ""){
                            $contractData[$key]['type'] = "select box";
                            $contractData[$key]['dropdownlabel'] = trim($element->getAttribute('dropdownlabel'));
                            $contractData[$key]['dropdownvalues'] = trim(htmlspecialchars_decode($element->getAttribute('dropdownvalues')));
                        }

                        if($element->getAttribute('selectedprechecked') != null && $element->getAttribute('selectedprechecked') != "") {
                            $contractData[$key]['type'] = 'checkbox';
                            $contractData[$key]['fieldlabelname'] = trim($element->getAttribute('fieldlabelname'));
                            $contractData[$key]['selectedprechecked'] = trim(htmlspecialchars_decode($element->getAttribute('selectedprechecked')));
                        }

                        if($element->getAttribute('signtype') != null && $element->getAttribute('signtype') != "") {
                            $contractData[$key]['type'] = 'signature box';
                        }

                        if($element->getAttribute('rectooltip') != null && $element->getAttribute('rectooltip') != "") {
                            $contractData[$key]['role'] = trim($element->getAttribute('rectooltip'));
                        }

                        if($element->getAttribute('data-document-ismadatory') != null && $element->getAttribute('data-document-ismadatory') != "") {
                            $contractData[$key]['document'] = "document field";
                        }

                        /*if(isset($element->getAttribute('rectooltip') && $element->getAttribute('rectooltip') != "")) {
                            $contractData[$key]['role'] = $element->getAttribute('rectooltip');
                        }*/
                    }
                }
                //return Response::json(['status' => 'success', 'result' => $contractData]);
                return response()->json(['status' => 'success', 'result' => $contractData], 200, ['Content-Type' => 'application/json; charset=UTF-8'], JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
            }
        }
    }
    public function anyUpdaterec(){
       $curl = curl_init();

// set our url with curl_setopt()
curl_setopt($curl, CURLOPT_URL, "api.example.com");

// return the transfer as a string, also with setopt()
curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);

// curl_exec() executes the started curl session
// $output contains the output string
$output = curl_exec($curl);

// close curl resource to free up system resources
// (deletes the variable made by curl_init)
curl_close($curl);
exit();
        $utility = new Utility();
        $whereSent['offer_id'] = 14564;
        //$whereSent['unique_id'] = '5ef3aca159fc9';
         
        $count = 0;
        $offer_sent  = $utility->getItems("offer_sent",$whereSent,null,array('id','unique_id'));
       
        foreach($offer_sent as $contractDataKeyoffer_sent => $contractDataValueoffer_sent) {
         $count++;
         echo "count=".$count;
         echo "<hr>";
        echo "unique_id = ".$contractDataValueoffer_sent->unique_id;
         echo "<hr>";
        $contractData = Offersentdetails::where('offer_sent_id', $contractDataValueoffer_sent->id)->where('is_sender',0)->select('user_details','customer_id','id')->get();
        
        foreach($contractData as $contractDataKey => $contractDataValue) {
         $customer_id  = $contractDataValue['customer_id'];
         echo "customer_id = ".$customer_id;
         $getRecipients = Recipient::where('customers.id', $customer_id)
                            ->leftjoin("organizations","organizations.id","=","customers.organization_id")
                            ->where('customers.from_user_api', 0)
                            ->select("customers.id","organizations.name","organizations.reg_no","organizations.city")
                            ->first();

         $recipientUserDetails = json_decode(Tcrypt::decrypter($contractDataValue['user_details']),true);
         if($getRecipients && isset($getRecipients['name']) && $getRecipients['name'] != ""){
            $recipientUserDetails['company'] = Tcrypt::decrypter($getRecipients['name']);
            $recipientUserDetails['reg_no']  = $getRecipients['reg_no'];
            $recipientUserDetails['city']  = $getRecipients['city'];
         }else{
            $recipientUserDetails['company'] = "";
            $recipientUserDetails['reg_no']  = "";
            $recipientUserDetails['city']  = $getRecipients['city'];
         }
         $recipientUserDetails = Tcrypt::encrypter(json_encode($recipientUserDetails));
         Offersentdetails::where('id', $contractDataValue['id'])->update(['user_details'=>$recipientUserDetails]);
        }

        Offersent::where('id', $contractDataValueoffer_sent->id)->update(['thumb'=>1,'isreadpdf'=>1]);
        
        }
    }
    public function anySociallogin(){
        return view('external.extension_social');
    }
    public function anyExtensionexternal(){
        $utility = new Utility();
        $data           = Input::all();
        $email          = $data['email'];
        $email_original = $data['email'];
        $access_token   = $data['access_token'];
        $actual_link    = "https://".$_SERVER['HTTP_HOST'];
        if(isset($data['template_id']) &&  $data['template_id'] !=""){
            $template_id = $data['template_id'];
        }else{
            $template_id = ($_SERVER['HTTP_HOST'] == "beta.simplesign.io" ? 74 : 89); 
        }
       
        // if(!isset($email)){
        //     return Response::json(['status'=>'error','result' => 'Invalid or missing  email']);
        // }
        if(!isset($access_token) || $access_token == "")
        {
            return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
       // $email = Tcrypt::encrypter($email);
        $emailData = User::where(['super_access_token' => $access_token])->select('email')->first();
        $email = Tcrypt::encrypter(trim($emailData['email']));
        $userData = User::where('super_access_token', $access_token)->where('is_active', '1')->first();
        if($userData)
            {
            if(isset($data['template_id']) && $data['template_id'] != $template_id){
                $whereofer['id'] = $data['template_id'];
                $whereofer['user_id'] = $userData->id;
                $offerData = $utility->getItem("offer_docs",$whereofer);
                if(!$offerData || $offerData == '' || empty($offerData)){
                    return Response::json(['status'=>'error','result' => 'contract not found']);
                }
            }   
            //New code to Fix Same Site Issue in iFrame (RJ) START
            /*$params = '?access_token='.$access_token.'&email='.$email_original.'&template_id='.$template_id.'&login_from=ss_extension&sesid='.Session::getId();
            $redirectURL = asset('/')."home/start/sendcontract/11/".$params;
            header("Location: ".$redirectURL);
            exit();*/
            //New code to Fix Same Site Issue in iFrame (RJ) END
            Auth::logout();
            Auth::login($userData);
            Session::put('is_from_ms_dynamics',0);
            Session::put('external_doc_id',0);
            if($template_id != ""){
                Session::put('contract_id',$template_id);
            }
            
            Session::put('external_doc_id',"");
            Session::put('external_login',1);
            Session::put('chromext_login',1);
            Session::put('checkthirdparty',1);
            $sendcontract = new sendcontractController();
            Input::merge(array('template_id' => $template_id,'access_token'=>$data['access_token']));
            $offerSentid = json_decode($sendcontract->postCreatecontract()->getContent(), true);
            Session::put('user_id',$userData->id);
            return Redirect::to('/home/start/sendcontract/11/'.$offerSentid["Result"]); 
        
        }
        else
        {
            return Response::json(['status'=>'error','result' =>'Mismatch email and access_token']);
        }
    }
    public function getCheck(){
        print_rj(Session::all(),1);
    }
    public function anyClickcheck() {
        
    return view('external.clickcheck');

    }
    public function getExternal() {
       // if($actual_link == "http://beta.simplesign.io") {

      //  $domain_name = asset('/');
     //   $domain_name = "https://acceptance.simplesign.io/";
        
        //var_dump(exec("ping -c 1 $domain_name 2>&1", $output, $return_var));
       //  exec("nohup lynx -dump $domain_name/textpress/sendverificationemail/1033617 > /dev/null 2>&1 &");
        /* $pid = "nohup lynx -dump $domain_name/textpress/sendverificationemail/1033617 > /dev/null 2>&1 &";
        exec($pid);
         echo 3;
         exit();*/
                      
            //}       
       
/*        if(function_exists('exec')){
   echo 'Function exists';
}else{
   echo 'Function does not exists';
}
exit();
        function disabled_functions(){
  $disabled = explode(',', ini_get('disable_functions'));
  return $disabled;
}
echo "<pre>";
print_r(disabled_functions());
exit();*/
        $utility = new Utility();
        $actual_link = "https://".$_SERVER['HTTP_HOST'];
        //Code for Logs Starting
        $url = $utility->getCurrentUrl();
        $logs_uniqid = uniqid();
        
        //Code for Logs Ending

        $data = Input::all();
        $access_token = "";
        if(isset($data['access_token'])){
        $access_token = $data['access_token'];  
        }else if(isset($data['session_key'])){
        $user_id = base64_decode($data['session_key']);
        }
        

        $user_id = $utility->getUserIdByAuthToken($access_token);

        $parentidcechk = $utility->getParent($user_id);
        if(isset($parentidcechk) && $parentidcechk == 19190){/*
        $data['generate'] = 1;
        if(isset($data['session_key'])){
         unset($data['session_key']); 
         return Response::json(['status'=>'error','result' =>'Please pass recipients object from query string']);  
        }
        if(isset($data['recipients']) && $data['recipients'] != "") {   
            if($this->is_JSON($data['recipients'])) {
            }else{
                return Response::json(['status'=>'error','result' =>'Mismatch recipients object, please check recipients object from querystring']);
            }
        
        }else{
            return Response::json(['status'=>'error','result' =>'Please pass recipients object from query string']);
         }

        */}
        
/*
        if(isset($data['session_key']) && $data['session_key'] != '' ){
          $user_id = base64_decode($data['session_key']);
           $user_data = settings::where('user_id', $user_id)->select('iframe_data','generate_external')->first();
           if(isset($user_data->generate_external) && $user_data->generate_external == 1){

            }else{ 
           
            if($user_data){
                $data = json_decode($user_data->iframe_data,true);
               
            }else{
                exit('Something went wrong');
            }
            }
        }
        else if(isset($data['urlData']) && $data['urlData'] != ""){
     
            $data = json_decode(base64_decode($data['urlData']),true);
          
            
            
        }*/

        if(isset($data['session_key']) && $data['session_key'] != '' ){
            $user_id = base64_decode($data['session_key']);
            $user_data = settings::where('user_id', $user_id)->select('iframe_data')->first();
            if($user_data){
                $data = json_decode($user_data->iframe_data,true);
            }else{
                exit('Something went wrong');
            }
        }
        else if(isset($data['urlData']) && $data['urlData'] != ""){
            //echo $data['urlData'] ;
            //exit();
            $data = json_decode(base64_decode($data['urlData']),true);
          
            
            
        }

       /* print_r($data);
        exit();
*/

//
        if(isset($data['print']) && $data['print'] == 1){
            print_rj($data,1);
        }

        $email = $data['email'];        
        $access_token = $data['access_token'];
        $user_id = $utility->getUserIdByAuthToken($access_token);

        $this->insertIframeLogs(['line_no'=> __LINE__,'data'=>$url,'uniq_id'=>$logs_uniqid],$user_id);
        
         if(!isset($data['session_key']) && $utility->isSuperuser($user_id) ){
            $session_key = base64_encode($user_id);
            $data['session_key'] = $session_key;
            settings::where('user_id', $user_id)->update(['iframe_data' => json_encode($data)]);
            $url = $actual_link.'/api/v3/request/external?session_key='.$session_key;
            return Redirect::to($url);
        } 
     /*   if(!isset($data['session_key']) && $utility->isSuperuser($user_id) ){
            $user_data2 = settings::where('user_id', $user_id)->select('iframe_data','generate_external')->first();
            if(isset($user_data2->generate_external) && $user_data2->generate_external == 1){

            }
            else if(isset($data['generate'])){
            $session_key = base64_encode($user_id);
            settings::where('user_id', $user_id)->update(['iframe_data' => "",'generate_external' => 1]);
            }else{
            $session_key = base64_encode($user_id);
            $data['session_key'] = $session_key;
            settings::where('user_id', $user_id)->update(['iframe_data' => json_encode($data),'generate_external' => 0]);
            $url = $actual_link.'/api/v3/request/external?session_key='.$session_key;
            return Redirect::to($url); 
            }
           
        } */
        
        $personsDetail = array();
        $superofficeDocs = array();
        $pipeDriveTagData = array();
        $final_product_data=[];
        $fromPipeDrive = 0;
        $callback = "";
        //pipe drive crm integation
        if(isset($data['template_id']) && $data['template_id'] != "") {
            $data['contract_id'] = $data['template_id'];
        }

        $this->insertIframeLogs(['line_no'=> __LINE__,'data'=> json_encode($data),'uniq_id'=>$logs_uniqid]);
        if(isset($data['companyId']) && !empty($data['companyId'])) {
            $count = 0;
            $persons = array();
            $fromPipeDrive = 1;
            $utility->updateItem('users_login',['pipe_drive_userid'=>$data['userId']],['pipe_drive_userid'=>0]);
            
            $utility->updateItem('users_login',['super_access_token'=>$access_token],['pipe_drive_userid'=>$data['userId']]);
            $param = ["isexternal" => 1, "userid" => $data['_userId'], "dealid" => $data['selectedIds']];
            
            $url = $actual_link."/api/v2/pipedrive/externaldealdata";
            /* Curl to call thelist items function from every Offline tab Controller */
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL,$url);
            curl_setopt($ch, CURLOPT_POST, 1);
            curl_setopt($ch, CURLOPT_POSTFIELDS,$param);
            
            // receive server response ...
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            
            // Server Respose...
            $server_output = curl_exec ($ch);
            // $output = curl_exec($ch);
            if(curl_error($ch)) {
                echo $error_msg = curl_error($ch);
            } else {
                $server_output = json_decode($server_output);
                
                //this if code will go live for custom org fields
                if(!empty($server_output->status) && $server_output->status == 1) {
                    $dealData = $server_output->dealData;
                    
                    DB::table('pipedrive_logs')->insert(['simplesign_userid' => $data['_userId'], 'pipedrive_userid' => $data['userId'], 'pipedrive_dealid' => $data['selectedIds'], 'pipedrive_dealdata' => json_encode($server_output)]);

                    $recipientData = $server_output->dealParticipients;
                    $customFields = $server_output->customFields;
                    $orgData = $server_output->orgData;
                    $dealProductsData = $server_output->dealProducts;
                    
                    $org_id = "";
                    $org_name = "";
                    $org_address = "";
                    
                    if(!empty($dealData->org_id->value)) {
                        $org_id = $dealData->org_id->value;
                        Session::put('orgid',$dealData->org_id->value);
                        Session::put('owner_id',$dealData->org_id->owner_id);
                    }
                    if(!empty($dealData->org_id->name)) {
                        $org_name = $dealData->org_id->name;
                    }
                    if(!empty($dealData->org_id->address)) {
                        $org_address = $dealData->org_id->address;
                    }
                    
                    Session::put('dealid',$dealData->id);
                    Session::put('deal_title',$dealData->title);
                    
                    $objDealData = json_encode($dealData);
                    $arrDealData = json_decode($objDealData, true);
                    //will use this code
                    
                    $arrOrgData = array();
                    if($orgData != "" && count($orgData) > 0) {
                        $ObjOrgData = json_encode($orgData);
                        $arrOrgData = json_decode($ObjOrgData, true);
                    }
                   
                    $regex = '/^[A-Za-z0-9 ]{40,40}$/';
                    foreach($customFields as $customField) {
                        $custField = preg_match($regex, $customField->key);
                        if($custField) {
                            if($customField->field_type == "org" && isset($arrDealData[$customField->key]['name']) && $arrDealData[$customField->key]['name'] !="") {
                                $pipeDriveTagData['Deal.'.preg_replace('/\s+/','_',$customField->name)] = $arrDealData[$customField->key]['name'];
                            }
                            elseif($customField->field_type == "org") {
                                $pipeDriveTagData['Deal.'.preg_replace('/\s+/','_',$customField->name)] = $dealData->org_name;
                            }
                            elseif($customField->field_type == "user") {
                                $pipeDriveTagData['Deal.'.preg_replace('/\s+/','_',$customField->name)] = $dealData->user_id->name;
                            }
                            elseif(isset($arrDealData[$customField->key]) && !is_object($arrDealData[$customField->key]) && $customField->field_type == "people") {
                                if(isset($arrDealData[$customField->key]['name']))
                                $pipeDriveTagData['Deal.'.preg_replace('/\s+/','_g',$customField->name)] = $arrDealData[$customField->key]['name'];
                            }
                            elseif($customField->field_type == "people" && isset($customField->name) && isset($dealData->person_id->name)) {
                                $pipeDriveTagData['Deal.'.preg_replace('/\s+/','_',$customField->name)] = $dealData->person_id->name;
                            }
                            elseif($customField->field_type == "set" && isset($customField->options)) {
                                $val = "";
                                foreach($customField->options as $option) {
                                   if(isset($arrDealData[$customField->key]) && $arrDealData[$customField->key] !=""){ 
                                   $arr =  explode(",",$arrDealData[$customField->key]);
                                   $count = sizeof($arr); 
                                    if(in_array($option->id, $arr)){
                                    $val .= ($option->label." ") ? "dd_".$option->label."|" : $option->label."|";

                                    }
                                    }
                                        
                                }
                            $pipeDriveTagData['Deal.'.preg_replace('/\s+/','_',$customField->name)] = $val;
                            }elseif($customField->field_type == "enum" && isset($customField->options) && isset($arrOrgData[$customField->key])){
                                $val = "";
                                
                                foreach($customField->options as $option) {
                                    if(isset($arrOrgData[$customField->key]) && $arrOrgData[$customField->key] == $option->id){
                                    $val = $option->label;
                                    }
                                        
                                }
                                $pipeDriveTagData['Deal.'.preg_replace('/\s+/','_',$customField->name)] = ($val) ? "dd_".$val : $val;
                            }elseif($customField->field_type == "enum" && isset($customField->options)) {
                                $val = "";
                                
                                foreach($customField->options as $option) {
                                    if(isset($arrDealData[$customField->key]) && $arrDealData[$customField->key] == $option->id){
                                    $val = $option->label;
                                    }
                                        
                                }
                                $pipeDriveTagData['Deal.'.preg_replace('/\s+/','_',$customField->name)] = ($val) ? "dd_".$val : $val;
                            }
                            elseif(isset($arrDealData[$customField->key]) && !is_object($arrDealData[$customField->key])) {
                                if(isset($customField->field_type) && $customField->field_type  == 'date') {
                                    $yrdata = strtotime($arrDealData[$customField->key]);
                                    $yrdata = date('Y-m-d', $yrdata);
                                    $arrDealData[$customField->key] = $yrdata;
                                }
                                $pipeDriveTagData['Deal.'.preg_replace('/\s+/','_',$customField->name)] = $arrDealData["".$customField->key.""];
                            }
                            elseif(isset($arrOrgData[$customField->key]) && !is_object($arrOrgData[$customField->key])) {
                                if(isset($customField->field_type) && $customField->field_type  == 'date') {
                                    $yrdata = strtotime($arrOrgData[$customField->key]);
                                    $yrdata = date('Y-m-d', $yrdata);
                                    $arrOrgData[$customField->key] = $yrdata;
                                }
                                $pipeDriveTagData['Deal.'.preg_replace('/\s+/','_',$customField->name)] = $arrOrgData["".$customField->key.""];
                            }
                        }
                    }
                    // print_rj($pipeDriveTagData,1);
                    //pipe drive two way data
                    $pipeDriveTagData['Deal.CCEmail'] = $dealData->cc_email;
                    $pipeDriveTagData['Deal.FormattedValue'] = $dealData->formatted_value;
                    $pipeDriveTagData['Deal.ID'] = $dealData->id;
                    $pipeDriveTagData['Deal.OrganizationName'] = $dealData->org_name;
                    $pipeDriveTagData['Deal.OwnerName'] = $dealData->owner_name;
                    $pipeDriveTagData['Deal.PersonName'] = $dealData->person_name;
                    $pipeDriveTagData['Deal.Created'] = $dealData->add_time;
                    $pipeDriveTagData['Deal.Status'] = $dealData->status;
                    $pipeDriveTagData['Deal.ExpectedCloseDate'] = $dealData->expected_close_date;
                    $pipeDriveTagData['Deal.Title'] = $dealData->title;
                    $pipeDriveTagData['Deal.Value'] = $dealData->value;
                    $pipeDriveTagData['Deal.WeightedValue'] = isset($dealData->weighted_value) ? $dealData->weighted_value : "";
                    $pipeDriveTagData['Deal.OrganizationAddress'] = $org_address;
                    $pipeDriveTagData['Deal.OrganizationOwnerName'] = $dealData->owner_name;
                    $pipeDriveTagData['Deal.OrganizationID'] = $org_id;
                    $pipeDriveTagData['Deal.OrganizationName'] = $org_name;
                    
                    /*$dealRecipientData                  = $dealData->person_id;
                    $personsDetail[$count]['name']      = $dealRecipientData->name;
                    $personsDetail[$count]['fullname']  = $dealRecipientData->name;
                    $personsDetail[$count]['value']     = $dealRecipientData->name;
                    $personsDetail[$count]['org_id']    = 0;
                    $personsDetail[$count]['data']      = 0;
                    $personsDetail[$count]['email']     = $dealRecipientData->email[0]->value;
                    $personsDetail[$count]['mobile']    = $dealRecipientData->phone[0]->value;
                    $personsDetail[$count]['city']      =  '';
                    $personsDetail[$count]['zip']       = '';
                    $personsDetail[$count]['pipedrive'] = 1;  /**/
                   /* echo "<pre>";
                    print_r($recipientData->data);
                    exit();*/
                    $count = 0;
                    //$persons = array();
                    if(isset($recipientData->data) && !empty($recipientData->data)) {
                        foreach($recipientData->data as $recipient) {
                            $personsDetail[$count]['name'] = $recipient->name;
                            $personsDetail[$count]['fullname'] =$recipient->name;
                            $personsDetail[$count]['value'] = $recipient->name;
                            $personsDetail[$count]['org_id'] = 0;
                            $personsDetail[$count]['data'] = 0;
                            $personsDetail[$count]['email'] = $recipient->email[0]->value;
                            $personsDetail[$count]['mobile'] = $recipient->phone[0]->value;
                            $personsDetail[$count]['city'] =  '';
                            $personsDetail[$count]['zip'] = '';
                            $personsDetail[$count]['participant_id'] = $recipient->id;
                            if($recipient->org_name == null){
                             $recipient->org_name = "";   
                            }
                            $personsDetail[$count]['company'] = $recipient->org_name;
                            $personsDetail[$count]['org_name'] = $recipient->org_name;
                            
                            
                            $personsDetail[$count]['pipedrive'] = 1;
                            $count++;
                        }
                    }
                  /*  echo "<pre>";
                    print_r($personsDetail);
                    exit();*/
                    curl_close($ch);

                    if(isset($dealProductsData->data) && !empty($dealProductsData->data)) {
                        foreach ($dealProductsData->data as $key => $productData) {
                            $final_product_data[$key]['product_name'] = isset($productData->product->name) ? $productData->product->name : ""; 
                            $final_product_data[$key]['product_price'] = $productData->item_price;
                            $final_product_data[$key]['item_qty'] = $productData->quantity;
                            $final_product_data[$key]['product_cost'] = $productData->item_price;
                            $final_product_data[$key]['product_sku'] = isset($productData->product->id) ? $productData->product->id : "";
                            $final_product_data[$key]['product_description'] = isset($productData->product->description) ? $productData->product->description : ""; 
                            $final_product_data[$key]['product_currency'] = $productData->currency;
                            $final_product_data[$key]['product_tax'] = $productData->tax;
                            $final_product_data[$key]['discount_percentage'] = $productData->discount_percentage;
                        }
                    }
                }
                else {
                    //Session::put("pdfrom",1);
                    //Session::put('pdfrom',1);
                    
                    //$redirectUrl=$actual_link."/api/v2/pipedrive/start";
                    //$clientId = "b102ccb7360ee958";
                    //$url = 'https://oauth.pipedrive.com/oauth/authorize?client_id='.$clientId.'&state='.$data['_userId'].'&redirect_uri='.$redirectUrl."&from=iframe";
                    //header("location:".$url);
                    if(true || $actual_link == "https://beta.simplesign.io") {
                        $userParams = $data;//Input::all();

                        $reAuthData = json_encode($userParams);
                        $utility = new Utility();
                        $utility->updateItem('users_login',['id'=>$userParams['_userId']],['pipedrive_data'=>'']);
                        DB::table('pipedrive_apps')->delete();
                        $data = ['reauthenticate_data'=>$reAuthData,'user_id'=>$userParams['_userId']];
                        $utility->addItem("pipedrive_apps", $data);
                        
                        $utility = null;

                        $redirectUrl = $actual_link."/api/v2/pipedrive/start";
                        //$clientId = "b102ccb7360ee958";
                        if($actual_link == "https://beta.simplesign.io" ) {
                            $clientId = "ccc3c903e76c02a2";
                        }else if($actual_link == "https://acceptance.simplesign.io" ) {
                            $clientId = "eebacb4ac492c191";
                        }else{
                            $clientId = "b102ccb7360ee958";
                        }
                        
                        //$clientSecret = "4ca6e91cf38918af8397876a345096e38af04c9f";
                        $url = 'https://oauth.pipedrive.com/oauth/authorize?client_id='.$clientId.'&state='.$userParams['_userId'].'&redirect_uri='.$redirectUrl;
                        return Redirect::to($url);
                    }
                    else {
                        $msg = "This Simple Sign account is not associated with Simple Sign pipe drive app, make sure you are using same Simple Sign account which was used to install app.";
                        return view('main.verifyaccount')->with("data", ["msg" => $msg]);
                    }
                }
            }
        }
        
        if(isset($data['isexternal']) && $data['isexternal'] === "superoffice") {
            $companyId      =   $data["contactId"];
            $isExternal     =   $data['isexternal'];
            $generateToken  =   new superofficeController;
            $getToken       =   $generateToken->postGeneratetoken($email);
            $getCustomerId = explode('.',$getToken->access_token);
            $getCustomerId = explode(':',$getCustomerId[0]);
            Session::put('sp_contactId', $companyId);
            // $_SESSION['sp_contactId'] = $companyId;
            $curl = curl_init();
            curl_setopt_array($curl, array(
                CURLOPT_URL => "https://sod.superoffice.com/$getCustomerId[1]/api/v1/Contact/$companyId/Persons",
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_ENCODING => "",
                CURLOPT_MAXREDIRS => 10,
                CURLOPT_TIMEOUT => 30,
                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                CURLOPT_CUSTOMREQUEST => "GET",
                CURLOPT_POSTFIELDS => "------WebKitFormBoundary7MA4YWxkTrZu0gW\r\nContent-Disposition: form-data; name=\"ContactId\"\r\n\r\n1\r\n------WebKitFormBoundary7MA4YWxkTrZu0gW--",
                CURLOPT_HTTPHEADER => array(
                    "accept: application/json",
                    "authorization: Bearer $getToken->access_token",
                    "cache-control: no-cache",
                    "content-type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW",
                    "postman-token: 5a8e6721-26cb-e594-8fb9-3cddee86694c",
                    "Accept-Language: en"
                ),
            ));
            
            $response = curl_exec($curl);
            $err = curl_error($curl);
            curl_close($curl);
            
            if($err) {
                echo "cURL Error #:" . $err;
            } else {
                $getContact = json_decode($response,true);
                $count = 0;
                $persons = array();
                foreach($getContact['value'] as $contact) {
                    $persons[$count] = $this->postPersondetail($contact['personId'],$getCustomerId[1],$getToken->access_token);
                    $personsDetail[$count]['name'] = $persons[$count]['FullName'];
                    $personsDetail[$count]['fullname'] = $persons[$count]['FullName'];
                    $personsDetail[$count]['value'] = $persons[$count]['FullName'];
                    $personsDetail[$count]['org_id'] = 0;
                    $personsDetail[$count]['data'] = 0;
                    $personsDetail[$count]['email'] = $persons[$count]['Email'];
                    $personsDetail[$count]['mobile'] = $persons[$count]['MobilePhone'];
                    $personsDetail[$count]['city'] =  '';
                    $personsDetail[$count]['zip'] = '';
                    $personsDetail[$count]['superoffice'] = 1;
                    $count++;
                }

                $superofficeDocs = $this->postGetsuperofficedocument($getCustomerId[1],$getToken->access_token,$companyId);
                $tags = $this->postGetsuperofficetags($getCustomerId[1],$companyId,$getToken->access_token);
                $pipeDriveTagData['Name']           =   $tags['Name'];
                $pipeDriveTagData['Department']     =   $tags['Department'];
                $pipeDriveTagData['Address1']       =   $tags['Address']['Postal']['Address1'];
                $pipeDriveTagData['Address2']       =   $tags['Address']['Postal']['Address2'];
                $pipeDriveTagData['Address3']       =   $tags['Address']['Postal']['Address3'];
                $pipeDriveTagData['City']           =   $tags['Address']['Postal']['City'];
                $pipeDriveTagData['County']         =   $tags['Address']['Postal']['County'];
                $pipeDriveTagData['Zipcode']        =   $tags['Address']['Postal']['Zipcode'];
                $pipeDriveTagData['Phone']          =   isset($tags['Phones'][0]) ? $tags['Phones'][0]['Value'] : '';
                $pipeDriveTagData['Fax']            =   isset($tags['Faxes'][0])?$tags['Faxes'][0]['Value']: '';
                $pipeDriveTagData['Category']       =   $tags['Category']['Value'];
                $pipeDriveTagData['Code']           =   $tags['Number1'];
                $pipeDriveTagData['Number']         =   $tags['Number2'];
                $pipeDriveTagData['VATNO']          =   $tags['OrgNr'];
                $pipeDriveTagData['Business']       =   $tags['Business']['Value'];
            }
        }
        //|| !filter_var($email, FILTER_VALIDATE_EMAIL)
        if(!isset($email)){
            return Response::json(['status'=>'error','result' => 'Invalid or missing  email']);
        }
        else if(!isset($access_token) || $access_token == "")
        {
            return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
        
        
        $emailData = User::where(['super_access_token' => $access_token])->select('email')->first();
        
        $email = Tcrypt::encrypter(trim($emailData['email']));

        $userData = User::where('super_access_token', $access_token)->select('id','parent_id','email','super_access_token')->where('is_active', '1')->first();
        
        if($userData) {
            try {
                $userData_logs =  $userData->toArray();
                $userData_logs['email'] = Tcrypt::decrypter($userData_logs['email']);
                $this->insertIframeLogs(['line_no'=> __LINE__,'data'=> json_encode($userData_logs),'uniq_id'=>$logs_uniqid]);
            } catch(\Exception $e) {}
            
            if(isset($data['contract_id'])) {
                $whereofer['id'] = $data['contract_id'];
                $whereofer['user_id'] = $userData->id;
                $offerData = $utility->getItem("offer_docs",$whereofer);
                if(!$offerData || $offerData == '' || empty($offerData)) {
                    return Response::json(['status'=>'error','result' => 'contract not found']);
                }
            }
            
            if(isset($data['productName']) && $data['productName'] == 'msdynamics') {
                $entityname = isset($data['entityname']) ? $data['entityname'] : '';
                $entityid = isset($data['entityid']) ? $data['entityid'] : '';
                $LoggedInUser = isset($data['LoggedInUser']) ? $data['LoggedInUser'] : '';
                $url = $actual_link.'/msdynamics/fetchcontracts?email='.$data['email'].'&access_token='.$data['access_token'].'&entityname='.$entityname.'&entityid='.$entityid.'&productName='.$data['productName'].'&LoggedInUser='.$LoggedInUser;
                return Redirect::to($url);
            }
            
            Auth::logout();
            Auth::login($userData);
            if(Auth::check()) {
                try {
                    $auth_data = Auth::user();
                    $auth_data = $auth_data->toArray();
                    $auth_data['email'] = Tcrypt::decrypter($auth_data['email']);
                    $this->insertIframeLogs(['line_no'=> __LINE__,'data'=>json_encode($auth_data),'uniq_id'=>$logs_uniqid]);
                } catch(\Exception $e) {}
            }
            
            if(isset($data['companyId']) && !empty($data['companyId'])) {
                Session::put('external_login',1);
                Session::put('sales_force_contract',0);
            } else {
                Session::put('external_login',1);
            }
            
            Session::put('is_from_ms_dynamics',0);
            $contract_id = "";
            if(isset($data['contract_id'])) {
                $contract_id = $data['contract_id'];
            }
            
            $external_doc_id = 0;
            if(isset($data['external_doc_id'])) {
                $external_doc_id = $data['external_doc_id'];
            }
            
            if(isset($data['document_id']) && $data['document_id'] != "") {
                $external_doc_id  = $data['document_id'];
            }
            $this->insertIframeLogs(['line_no'=> __LINE__,'data'=>"template_id: ".$contract_id.", documentId: ".$external_doc_id,'uniq_id'=>$logs_uniqid]);
            
            if($contract_id != "") {
                $count = 0;
                if(isset($data['recipients']) && $data['recipients'] != "") {
                    //$data['recipients'] = json_encode($data['recipients']);
                    $personsDetail = [];
                    $data['recipients'] = json_decode($data['recipients'], true);
                    
                    foreach($data['recipients'] as $key => $value) {
                        if(isset($value['name'])) {
                            $personsDetail[$key]['name'] = $value['name'];
                            $personsDetail[$key]['fullname'] = $value['name'];
                            $personsDetail[$key]['value'] = $value['name'];
                        }
                        if(isset($value['email']))
                        $personsDetail[$key]['email'] = $value['email'];
                        if(isset($value['address']))
                        $personsDetail[$key]['address'] = $value['address'];
                        if(isset($value['personnr']))
                        $personsDetail[$key]['personnr'] = $value['personnr'];
                        if(isset($value['zipcode']))
                        $personsDetail[$key]['zip'] = $value['zipcode'];
                        if(isset($value['mobile']))
                        $personsDetail[$key]['mobile'] = $value['mobile'];
                        if(isset($value['city']))
                        $personsDetail[$key]['city'] = $value['city'];
                        if(isset($value['authentication']))
                        $personsDetail[$key]['authentication'] = $value['authentication'];
                        else
                        $personsDetail[$key]['authentication'] = 1;

                        $personsDetail[$key]['participant_id'] = 0;
                        $personsDetail[$key]['company'] = "";
                        $personsDetail[$key]['preadded'] = 1;
                        $personsDetail[$key]['org_id'] = 0;
                        $personsDetail[$key]['data'] = 0;
                    }
                }
                
                if(isset($data['documentfields']) && $data['documentfields'] != "") {
                    $data['documentfields'] = json_decode($data['documentfields'], true);
                    //$count2 = 0;
                    //$pipeDriveTagData      = $data['documentfields'][0];
                    $pipeDriveTagData = [];
                    foreach($data['documentfields'][0] as $key => $val) {
                        //echo $key."=".$val;
                        $pipeDriveTagData[$key] = $val;
                    }
                }
            }

            Session::put('external_doc_id',$external_doc_id);
            Session::put('contract_id',$contract_id);
            if(isset($data['htmlview'])) {
                //Session::put('external_doc_id',"");
                $callback = "";
                if(isset($data['callback']) && $data['callback'] != "") {
                    $callback = $data['callback'];
                }
                Session::put('cotract_id',"");
                Session::put('checkthirdparty',1);
             /*   echo "<pre>";
                print_r($personsDetail);
                exit();*/
                if(isset($data['companyId']) && !empty($data['companyId'])) {
                    return view('external.external_Views_pipe',['opportunity_data' => $pipeDriveTagData, 'contacts_data' => $personsDetail, 'orgmode' => "", 'opportunity_id' => "", 'opportunity_name' => "", 'Attachment' => $superofficeDocs, 'salesforce_instance_url' => '','fromPipeDrive'=>$fromPipeDrive,'thsUserEmail'=>Input::get('email'),'callback'=>$callback,'pipe_companyId'=>$data['companyId'],'pipe_userId'=>$data['userId'],'pipe_selectedIds'=>$data['selectedIds'],"product_crm_data" => $final_product_data]);
                } else {
                    return view('external.external_Views',['opportunity_data' => $pipeDriveTagData, 'contacts_data' => $personsDetail, 'orgmode' => "", 'opportunity_id' => "", 'opportunity_name' => "", 'Attachment' => $superofficeDocs, 'salesforce_instance_url' => '','fromPipeDrive'=>$fromPipeDrive,'thsUserEmail'=>Input::get('email'),'callback'=>$callback,"product_crm_data" => $final_product_data]);
                }
            } elseif(isset($data['send_document']) && $data['send_document'] == 1) {
                Session::put('cotract_id',"");
                Session::put('checkthirdparty',1);
                $callback = "";
                if(isset($data['callback']) && $data['callback'] != "") {
                    $callback = $data['callback'];
                }
                return view('external.external_Views_send_document',['document_id' => $data['document_id'],'thsUserEmail'=>Input::get('email'),'callback'=>$callback,'fromPipeDrive'=>1]);
            } else {
                if($actual_link == "https://beta.simplesign.io") {
                    return Redirect::to('https://beta.simplesign.io/home/start/sendcontract/11/0');
                } else {
                    return Redirect::to('https://esign.simplesign.io/home/start/sendcontract/9/0');
                }
            }
            //return Response::json(['status'=>'success','result' =>'1']);
        } else {
            return Response::json(['status'=>'error','result' =>'Mismatch email and access_token']);
        }
    }

    /**
    *logout crm user  getexternal
    */

    public function getLogoutexternaluser() {
        Auth::logout();
        return redirect('https://app.pipedrive.com/auth/login');
    } 
    public function anyExternaltest() {
        $utility = new Utility();
        $language         = Userinfo::where('user_id', '=', 4182)->select('language')->first();  
        $lang_id          = $language['language']; 
        $getTranslation   = $utility->GeneralTranslations($lang_id);
       $getTranslation  =  json_encode($getTranslation);
        //return view('external.external_Views_optimize')->with(['getTranslation' => $getTranslation]);
        return view('external.external_Views_optimize', ['getTranslation' => $getTranslation]);

        //echo "test function";
        //return view('external.external_Views',['opportunity_data' => [], 'contacts_data' => [], 'orgmode' => "", 'opportunity_id' => "", 'opportunity_name' => "", 'Attachment' => []]);
    }

     /**
     *
     * fetch Elements Fields against UserEmail && UserAccessToken
     * @uses $_REQUEST['access_token']
     * @uses $_REQUEST['email']
     * @return json result 
    **/
    public function postFetchsendcontractfields(){
    $data  = Input::all();
     $utility = new Utility();
   /* if(!isset($data['email']) || !filter_var($data['email'], FILTER_VALIDATE_EMAIL)){
     return Response::json(['status'=>'error','result' => 'Invalid or missing  email']);
    }*/
    if(!isset($data['access_token']) || $data['access_token'] == "")
    {
     return Response::json(['status'=>'error','result' => 'access_token is missing']);
    }
    //->where('email', $email)
    $email = Tcrypt::encrypter($data['email']);
    $userData = User::where('super_access_token', $data['access_token'])->select('id','parent_id')->first();
    if($userData)
    {
    $user_id          = $userData['id'];
    $user_id = $utility->getParent($user_id);
    $language         = Userinfo::where('user_id', '=', $user_id)->select('language')->first();  
    $lang_id          = $language['language']; 
    $getTranslation   = $utility->GeneralTranslations($lang_id);
    $rememberSettings = settings::where('user_id', $user_id)->select("remember_settings","sign_bankid")->first();
    $sign_bankid      = $rememberSettings->sign_bankid;
    if($sign_bankid == 1)
    $getTranslation['189'] = $getTranslation['1025'];
        
    $rememberSettings = json_decode($rememberSettings->remember_settings, true);
    $custom_fields    = ""; 
    $company = 0;
    $reg_no = 0;
    $mobile = 0;
    $address = 0;
    $zip = 0;
    $city = 0;
    $companymandatory = 0;
    $citymandatory = 0;
    $zipmandatory = 0;
    $mobilemandatory = 0;
    $addressmandatory = 0;
    $reg_nomandatory = 0;
    $companyerrormsg = "";
    $cityerrormsg = "";
    $ziperrormsg = "";
    $mobilerrormsg ="";
    $addressrrormsg ="";
    $reg_norrormsg ="";
    if(isset($rememberSettings['recinfo_fields']['companymandatory']) && $rememberSettings['recinfo_fields']['companymandatory'] == 1)
    {
    $companymandatory = 1 ;  
    $companyerrormsg = $getTranslation[867];    
    }
    if(isset($rememberSettings['recinfo_fields']['citymandatory']) && $rememberSettings['recinfo_fields']['citymandatory'] == 1)
    {
    $citymandatory = 1 ;  
    $cityerrormsg = $getTranslation[871];       
    }

    if(isset($rememberSettings['recinfo_fields']['zipmandatory']) && $rememberSettings['recinfo_fields']['zipmandatory'] == 1)
    {
    $zipmandatory = 1 ;  
    $ziperrormsg = $getTranslation[872];       
    }
    if(isset($rememberSettings['recinfo_fields']['mobilemandatory']) && $rememberSettings['recinfo_fields']['mobilemandatory'] == 1)
    {
    $mobilemandatory = 1 ;  
    $mobilerrormsg = $getTranslation[869];       
    }
    if(isset($rememberSettings['recinfo_fields']['addressmandatory']) && $rememberSettings['recinfo_fields']['addressmandatory'] == 1)
    {
    $addressmandatory = 1 ;  
    $addressrrormsg = $getTranslation[870];       
    }
    if(isset($rememberSettings['recinfo_fields']['reg_nomandatory']) && $rememberSettings['recinfo_fields']['reg_nomandatory'] == 1)
    {
    $reg_nomandatory = 1 ;  
    $reg_norrormsg = $getTranslation[868];       
    }
    if(isset($rememberSettings['recinfo_fields']['reg_nomandatory']) && $rememberSettings['recinfo_fields']['reg_nomandatory'] == 1)
    {
    $reg_nomandatory = 1 ;  
    $personal_no_norrormsg = $getTranslation[868];       
    }
    
    if(isset($rememberSettings['recinfo_fields']['custom_fields']) && $rememberSettings['recinfo_fields']['custom_fields'] != "")
    {
    $custom_fields = $rememberSettings['recinfo_fields']['custom_fields'];
    $custom_fields = json_decode($custom_fields, true);
    }
    $companyActive=0;
    $reg_noActive =0;
    $mobileActive=0;
    $addressActive=0;
    $zipActive=0;
    $cityActive=0;
   // $personal_no_noActive=0;
    if(isset($rememberSettings['recinfo_fields']['company']))
    {
    $companyActive =  $rememberSettings['recinfo_fields']['company'];        
    }
    if(isset($rememberSettings['recinfo_fields']['reg_no']) )
    {
    $reg_noActive =  $rememberSettings['recinfo_fields']['reg_no'];
    }
    /*if(isset($rememberSettings['recinfo_fields']['personal_no']) )
    {
    $personal_no_noActive =  $rememberSettings['recinfo_fields']['personal_no'];
    }*/
    if(isset($rememberSettings['recinfo_fields']['mobile']))
    {
    $mobileActive =  $rememberSettings['recinfo_fields']['mobile'];    
    }
    if(isset($rememberSettings['recinfo_fields']['address']) )
    {
    $addressActive =  $rememberSettings['recinfo_fields']['address'];  
    }

    if(isset($rememberSettings['recinfo_fields']['zip']) )
    {
    $zipActive =  $rememberSettings['recinfo_fields']['zip'];    
    }
    if(isset($rememberSettings['recinfo_fields']['city']))
    {
    $cityActive =  $rememberSettings['recinfo_fields']['city'];           
    }
    $someJSON = '[
                {
                "label":"'.$getTranslation['50'].'",    
                "type":"text",
                "name":"name",
                "required":"1",
                "Validationmsg":"'.$getTranslation['920'].'"
                },
                {
                "label":"'.$getTranslation['51'].'",    
                "type":"email",
                "name":"email",
                "required":"1",
                "Validationmsg":"'.$getTranslation['921'].'"
                },
                {
                "label":"'.$getTranslation['52'].'",    
                "type":"text",
                "name":"company",
                "required":"'.$companymandatory.'",
                "Validationmsg":"'.$companyerrormsg.'",
                "active":"'.$companyActive.'"
                },
                {
                "label":"'.$getTranslation['53'].'",    
                "type":"text",
                "name":"reg_no",
                "required":"'.$reg_nomandatory.'",
                "Validationmsg":"'.$reg_norrormsg.'",
                "active":"'.$reg_noActive.'"
                },
                {
                "label":"'.$getTranslation['524'].'",    
                "type":"text",
                "name":"personal_no",
                "required":"",
                "Validationmsg":"",
                "active":""
                },
                {
                "label":"'.$getTranslation['54'].'",    
                "type":"text",
                "name":"mobile",
                "required":"'.$mobilemandatory.'",
                "Validationmsg":"'.$mobilerrormsg.'",
                "active":"'.$mobileActive.'"
                },
                {
                "label":"'.$getTranslation['906'].'",    
                "type":"text",
                "name":"address",
                "required":"'.$addressmandatory.'",
                "Validationmsg":"'.$addressrrormsg.'",
                "active":"'.$addressActive.'"
                },
                {
                "label":"'.$getTranslation['56'].'",    
                "type":"text",
                "name":"city",
                "required":"'.$citymandatory.'",
                "Validationmsg":"'.$cityerrormsg.'",
                "active":"'.$cityActive.'"
                },
                {
                "label":"'.$getTranslation['57'].'",    
                "type":"text",
                "name":"zip",
                "required":"'.$zipmandatory.'",
                "Validationmsg":"'.$ziperrormsg.'",
                "active":"'.$zipActive.'"
                },
                {
                "label":"'.$getTranslation['171'].'",    
                "type":"dropdown",
                "name":"dd_invitation",
                "options":[{"value":1,"title":"'.$getTranslation['51'].'"},{"value":2,"title":"'.$getTranslation['174'].'"},{"value":3,"title":"'.$getTranslation['175'].'"},{"value":4,"title":"'.$getTranslation['176'].'"}]
         
                },
                {
                "label":"'.$getTranslation['177'].'",    
                "type":"dropdown",
                "name":"dd_invitationOrder",
                "options":[{"value":1,"title":"1st"},{"value":2,"title":"2st"}]
                },
                {
                "label":"'.$getTranslation['178'].'",    
                "type":"dropdown",
                "name":"dd_confirmation",
                "options":[{"value":1,"title":"'.$getTranslation['51'].'"},{"value":2,"title":"'.$getTranslation['174'].'"}]
                },
                {
                "label":"'.$getTranslation['185'].'",    
                "type":"dropdown",
                "name":"dd_authentication",
                "options":[{"value":1,"title":"'.$getTranslation['186'].'"},{"value":3,"title":"'.$getTranslation['189'].'"},{"value":4,"title":"'.$getTranslation['187'].'"}]
                },
                {
                "label":"'.$getTranslation['179'].'",    
                "type":"dropdown",
                "name":"dd_role",
                "options":[{"value":1,"title":"'.$getTranslation['180'].'"},{"value":2,"title":"'.$getTranslation['181'].'"}]
                },
                {
                "label":"'.$getTranslation['182'].'",    
                "type":"dropdown",
                "name":"dd_request",
                "options":[{"value":0,"title":"'.$getTranslation['183'].'"},{"value":1,"title":"'.$getTranslation['184'].'"}]
                }
                
                ]';
            
            $someArray    = json_decode($someJSON, true);
          
            $result['recinfo_fields'] = $someArray;
            $result['custom_fields']  = $custom_fields;
            $result['sign_bankid']    = $sign_bankid;
            $result['getTranslation'] = $getTranslation;
            return Response::json(['result' => $result]);
         
            }
            else
            {
            return Response::json(['status'=>'error','result' =>'Mismatch email and access_token']);
            }

   
  
    }

     /**
     *
     * fetch Contract against UserAccessToken && External doc id 
     * @uses $_REQUEST['access_token']
     * @uses $_REQUEST['external_doc_id']
     * @return json result 
    **/
    public function anyFetchcontract()
    {
    $offer = new offer();    
    $data        = Input::all();
    $utility     = new Utility();
    $domain_name = asset('/'); 
    if(!isset($data['access_token']) || $data['access_token'] == ""){
     return Response::json(['status'=>'error','result' => 'Invalid or missing  access_token']);
    }
    $external_doc_id = '';
    if(isset($data['external_doc_id']) && $data['external_doc_id'] != "")
    {
     $external_doc_id   = $data['external_doc_id'];
    }
    
    $user_id = $utility->getUserIdByAuthToken($data['access_token']);
    $AllUserIds = $utility->getSubusers($user_id);
    
    if($user_id)
    {
      //  $whereSent['offer_status']      = 4;   
        $whereSent['therefor_read']     = 0;   
        if(isset($data['superoffice']) && $data['superoffice'] == 1)
        $whereSent['sales_force_opportunity_id']   = $external_doc_id;    
        else    
        $whereSent['external_doc_id']   = $external_doc_id;

        $whereSent['sender_id']         = $user_id;
        $contract                       = $utility->getItem("offer_sent",$whereSent,array('id','user_details','name','visible_name','offer_status'));
        if($contract && isset($data['external_doc_id']) && $data['external_doc_id'] != "")
        {
            $contract                       = (array)$contract;

            $contract['name']               = $contract['name']!=''?Tcrypt::decrypter($contract['name']):'';
            $contract['visible_name']       = $contract['visible_name']!=''?Tcrypt::decrypter($contract['visible_name']):'';

            $Details = Offersentdetails::where('offer_sent_id', $contract['id'])->select("unique_id")->where('is_sender',1)->first();

            //$contract['pdf_url']            = $domain_name.'textpress/downloadpdf/'.$contract['id'];
            $contract['offer_status']             = $contract['offer_status'];
            $contract['pdf_url']            = $domain_name.'avtal/downloadpdf/'.$contract['id'].'/'.$Details['unique_id'].'/';
            $contract['user_details']     = $contract['user_details']!=''?json_decode($contract['user_details']):'';
            
            return Response::json(['status'=>'success','result' =>$contract]);
        }
        else
        {     
            //$whereSent2['offer_status']      = 4;   
            $whereSent2['therefor_read']     = 0;   
            $whereSent2['sender_id']         = $user_id;
            $OffersentModel                  = new Offersent;
            $selectColumns                   = array('id', 'sender_id','user_details','visible_name', 'name', 'offer_status', 'offer_type', 'unique_id','external_doc_id');
            $pageLimit                       = (isset($data['pagelimit']) && $data['pagelimit']!=''?$data['pagelimit']:10);
            $currentPage                     = (isset($data['current_page']) && $data['current_page']!=''?$data['current_page']:0);
            $skipRecords                     = $currentPage*$pageLimit;
            $getoffers                       = $OffersentModel->select($selectColumns)
                                            ->orderBy('last_event', 'is', '0000-00-00 00:00:00')->orderBy('id', 'desc')->whereIn('sender_id',$AllUserIds)->where('external_doc_id','!=',0)->where('therefor_read','=',0)->get()->toArray();
            //->skip($skipRecords)->take($pageLimit)->
                                                
            foreach($getoffers as $key => $eachOffer)
                    {
                  
                        $getoffers[$key]['simplesign_document_id'] = $getoffers[$key]['id']!=''?$getoffers[$key]['id']:'';
                         unset($getoffers[$key]['id']);
                        unset($getoffers[$key]['offer_type']);
                        $getoffers[$key]['name']=($eachOffer['name']!=''?Tcrypt::decrypter($eachOffer['name']):'');
                        if(isset($getoffers[$key]['visible_name'])){
                            $getoffers[$key]['visible_name']=($eachOffer['visible_name']!=''?Tcrypt::decrypter($eachOffer['visible_name']):'');
                        }

                       //$getoffers[$key]['pdf_url'] = $domain_name.'avtal/downloadpdf/'.$eachOffer['id'];
                        
                        
                         
                       $Details = Offersentdetails::where('offer_sent_id', $eachOffer['id'])->select("unique_id")->where('is_sender',1)->first();
                       $getoffers[$key]['pdf_url'] = $offer->getDownloadpdf($eachOffer['id'],$Details['unique_id'],0,1); //$domain_name.'avtal/downloadpdf/'.$eachOffer['id'].'/'.$Details['unique_id'].'/';
                       
                       $getoffers[$key]['user_details'] = $getoffers[$key]['user_details']!=''?json_decode($getoffers[$key]['user_details']):'';
                    }     
            return Response::json(['status'=>'success','result' =>$getoffers]);                       
        }
    
    }
    else
    {
    return Response::json(['status'=>'error','result' =>'Mismatch access_token']);
    }
  
    }

    /**
     *
     * fetch Recipient against UserAccessToken
     * @uses $_REQUEST['access_token']
     * @return json result 
    **/
    public function postRecipientsearch()
    {
    $data    = Input::all();
    $utility = new Utility();
    if(isset($data['access_token'])){
    $access_token = $data['access_token'];
    }else{
        return Response::json(['status'=>'error','result' => 'access_token is missing']);
    }
    $user_id    = $utility->getUserIdByAuthToken($access_token);
    $parent_id = $utility->getParent($user_id);
    $AllUserIds = $utility->getSubusers($parent_id);
    if($user_id)
    {
    $searchVal = [];    
    if(isset($data['searchfilter']) && $data['searchfilter'] !=''){
            $searchVal = "%".$data['searchfilter']."%";
             $whereRaw = "(";
            $whereRaw .= 'CAST(AES_DECRYPT(`simplesign_customers`.`full_name`,\''.env('ENCRYPT_KEY').'\', \''.env('ENCRYPT_IV').'\') AS CHAR) LIKE ? ';
            $whereRaw .= 'OR CAST(AES_DECRYPT(`simplesign_customers`.`email`,\''.env('ENCRYPT_KEY').'\', \''.env('ENCRYPT_IV').'\') AS CHAR) LIKE ? ';
            $whereRaw .= 'OR CAST(AES_DECRYPT(`simplesign_customers`.`company`,\''.env('ENCRYPT_KEY').'\', \''.env('ENCRYPT_IV').'\') AS CHAR) LIKE ? ';
            //\'%'.$searchVal.'%\'
            //$whereRaw .= "OR `simplesign_customers`.`user_details`  like '%".$searchVal."%'";
            $whereRaw .= ")";
            DB::statement(' SET block_encryption_mode = \''.env('ENCRYPT_CIPHER').'\'');
            $searchVal = [$searchVal,$searchVal,$searchVal];
        }
     else
     {
        return Response::json(['status'=>'error','result' => 'search filter is missing']); 
     }   
      $getRecipients = Recipient::whereIn('registerby', $AllUserIds)->where('from_user_api', 0)->whereRaw($whereRaw,$searchVal)->orderBy('id', 'desc')
         ->get()->toArray();      
      if(count($getRecipients))
        {
            foreach ($getRecipients as $key => $value) {
               unset($getRecipients[$key]['created_date']);
               unset($getRecipients[$key]['registerby']);
               unset($getRecipients[$key]['profile_image']);
               unset($getRecipients[$key]['comments']);
               unset($getRecipients[$key]['country']);
               unset($getRecipients[$key]['from_user_api']);
               unset($getRecipients[$key]['extra_fields']);
               

                $getRecipients[$key]['email'] = ($getRecipients[$key]['email']!=''?Tcrypt::decrypter($value['email']):'');
                $getRecipients[$key]['full_name'] = ($getRecipients[$key]['full_name']!=''?Tcrypt::decrypter($value['full_name']):'');
                $getRecipients[$key]['company'] = ($getRecipients[$key]['company']!=''?Tcrypt::decrypter($value['company']):'');
               $getRecipients[$key]['email'] = preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '',$getRecipients[$key]['email']);
                $getRecipients[$key]['full_name'] = preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '',$getRecipients[$key]['full_name']);
                 $getRecipients[$key]['company'] = preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '',$getRecipients[$key]['company']);
                
            }
        }
        else
        {
        return Response::json(['status'=>'error','result' => 'Record not found']); 
        }
        return Response::json(['status'=>'success','result' => $getRecipients]);    
    }
    else
    {
    return Response::json(['status'=>'error','result' =>'Mismatch access_token']);
    }
    }
     /**
     *
     * fetch Scanthereforedocument against UserAccessToken && External doc id 
     * @uses $_REQUEST['access_token']
     * @uses $_REQUEST['external_doc_id']
    **/
    public function postScanthereforedocument()
    {
    $data    = Input::all();
    $utility = new Utility();
    
    if(isset($data['external_doc_id'])){
    $external_doc_id = $data['external_doc_id'];
    }else{
        return Response::json(['status'=>'error','result' => 'external_doc_id is missing']);
    }

    if(isset($data['simplesign_document_id'])){
    $simplesign_document_id = $data['simplesign_document_id'];
    }else{
        return Response::json(['status'=>'error','result' => 'simplesign_document_id is missing']);
    }

    //$user_id                             = $utility->getUserIdByAuthToken($access_token);    
    $offerWhere1['id']            = $simplesign_document_id;//$user_id;
    $offerWhere1['external_doc_id']      = $external_doc_id;
    $offerData1['therefor_read']         = 1;
    $offerupdate = $utility->updateItem("offer_sent",$offerWhere1,$offerData1);
    if($offerupdate){
    return Response::json(['status'=>'success','result' => $offerupdate]);
    }
    else
    {
    return Response::json(['status'=>'error','result' => 'Record not update']);
    }
    

    }

    /**
     *
     * Uploading Archive Files against  User Access Token
     * @uses $_REQUEST['access_token']
     * @return json result 
    **/
    public function postUploadfileforarchive()
    {
        $data  = Input::all();
        $utility = new Utility();
        if(!isset($data['access_token']) || $data['access_token'] == "")
        {
         return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
        $user_id = $utility->getUserIdByAuthToken($data['access_token'] );
        if(!isset($data['file']) || $data['file'] == "")
        {
         return Response::json(['status'=>'error','result' => 'file is missing']);
        }
        if(!isset($data['folder_id']) || $data['folder_id'] == "")
        {
         //return Response::json(['status'=>'error','result' => 'folder id is missing']);
            $folder_details= DB::table('archive_folders')->where('user_id',$user_id)->where('folder_name','draft')->select('id')->first();
            if(!$folder_details)
            {
                $subject_code = 'draft';//$userId.$utility->randomString(3);//$userId.substr( md5(rand()), 0, 3);
                $folder_name_storage = $user_id.'_'.uniqid();
                $AddData = array('user_id' => $user_id, 'folder_name' => 'draft', 'email_subject' => $subject_code,'folder_status' => 1, 'is_draft' => 1, 'folder_name_storage' => $folder_name_storage);
                $folder_id = $utility->addItem('archive_folders',$AddData);
            }
            else
                {
                    $folder_id = $folder_details->id;
                }

        }
        else
        {
            $folder_id = $data['folder_id'];
        }

        $userData = User::where('id', $user_id)->select('id','parent_id')->first();
        if($userData)
        {
        $whereu['user_id'] = $user_id;
        $file              = $data['file'];
        $archiveFile = DB::table('archive_folders')->where('user_id',$user_id)->where('email_subject',$folder_id)->orWhere('sharedwith_users','like','%"'.$user_id.'"%')->select('user_id','id','folder_name')->first();

        if (!in_array(strtolower($file->getClientOriginalExtension()), $this->allowed_types)){
           return Response::json(['status'=>'error','result' => 'invalid file type']);
        }
        if($archiveFile)
        {
            $folderId      = $archiveFile->id;
            $file_name     = $_FILES['file']['name'];//$data['name'];
            $new_name      = $user_id.'_'.uniqid();
            $new_file_name = $new_name.'.'.strtolower($file->getClientOriginalExtension());
            $path = public_path().'/uploads/temp';
            $filePath = $path.'/'.$new_file_name;
            $file_size = $file->getClientSize();
            $file->move($path, $new_file_name);
            $folderPath = $user_id;
            $folder_name   = '';
            $folder_name   = $archiveFile->folder_name;
            $folderPath = $user_id.'/'.$this->AllFoldersPath($folder_id);//$folder_name;
            uploadToGCS($filePath,$folderPath,$new_file_name);
            //Creating Thumbnail
            $thumbName = 'thumb_'.$new_name.'.png';
            $thumbPath = $path.'/'.$thumbName;
            //exec("gs -dBATCH -dNOPAUSE -sDEVICE=jpeg -r250x250 -sOutputFile=".$thumbPath." ".$filePath);
            exec("gs -dSAFER -dBATCH -dNOPAUSE -sDEVICE=png16m -dDownScaleFactor=3 -r100 -sOutputFile=".$thumbPath." ".$filePath);
            //exec("gs -dBATCH -dNOPAUSE sDEVICE=jpeg -r250x250 -sOutputFile=".$thumbPath." ".$filePath);
            $utility->CompressImageFile($thumbPath, $thumbName, 40, $path);
            uploadToGCS($thumbPath,$folderPath,$thumbName);

            //Deleing uploaded file from local ftp
            if(file_exists($filePath))
            {
                unlink($filePath);
            }
            if(file_exists($thumbPath))
            {
                unlink($thumbPath);
            }
            //Deleing uploaded file from local ftp
            if(file_exists($filePath))
            {
                unlink($filePath);
            }
            $filesData['user_id'] = $user_id;
            $filesData['folder_id'] = $folderId;
            $filesData['folder_name'] = $folder_name;
            $filesData['original_file_name'] = $file_name;
            $filesData['file_name'] = $new_file_name;
            $filesData['thumbnail_name'] = $thumbName;
            $filesData['file_size'] = $file_size;
            $filesData['unique_id'] = uniqid();
            $utility->addItem('archive_files', $filesData);
            //$returnpath = env('mediaUrl').$folderPath.'/'.$new_file_name;
           return Response::json(['status' => 'success', 'result' => 'uploaded successfully']); 
        }
        else
        {
         return Response::json(['status'=>'error','result' =>'Record not found ']);
        }
     }
     else
     {
        return Response::json(['status'=>'error','result' =>'Mismatch  access_token']);
     }
    }


    function AllFoldersPath($FolderId=''){
        $folderPath = '';
        if($FolderId != ''){
            $folderInfo = DB::table('archive_folders')->where('id',$FolderId)->select('id','folder_name','folder_name_storage','parent_id')->first();
            if($folderInfo){
                $folder_name = $folderInfo->folder_name;
                if($folderInfo->folder_name_storage != ''){
                    $folder_name = $folderInfo->folder_name_storage;
                }
                if($folderInfo->parent_id > 0){
                    $parentFolder = DB::table('archive_folders')->where('id',$folderInfo->parent_id)->select('id','folder_name','folder_name_storage','parent_id')->first();
                    if($parentFolder){
                        $parent_folder_name = $parentFolder->folder_name;
                        if($parentFolder->folder_name_storage != ''){
                            $parent_folder_name = $parentFolder->folder_name_storage;
                        }
                        if($parentFolder->parent_id == 0){
                            $folderPath .= $parent_folder_name.'/'.$folder_name;
                        }else if($parentFolder->parent_id > 0){
                            $grandParentFolder = DB::table('archive_folders')->where('id',$parentFolder->parent_id)->select('id','folder_name','folder_name_storage','parent_id')->first();
                            if($grandParentFolder){
                                if($grandParentFolder->parent_id == 0){
                                    $grandparent_folder_name = $grandParentFolder->folder_name;
                                    if($grandParentFolder->folder_name_storage != ''){
                                        $grandparent_folder_name = $grandParentFolder->folder_name_storage;
                                    }
                                    $folderPath .= $grandparent_folder_name.'/'.$parent_folder_name.'/'.$folder_name;
                                }
                            }
                        }
                    }
                }else{
                    $folderPath = $folder_name;
                }
            }
        }
        return $folderPath;
    }

    public function postSendemailtest()
    {
        $sentcontract = new sendcontractController();
        $offerdetails     = Offersentdetails::where('id','=','36749')->first();
        $user_details     = json_decode(Tcrypt::decrypter($offerdetails->user_details),true);
        $uniqidSender = uniqid();
        $offerdetails->first_name = "shanuss";
        $recpid       = "22666";
        $user_details['full_name']  = "shanuss";
        $user_details['email']    = "shanush@yopmail.com";
        $user_details['mobile']   = "12345";
        $userArrar = $user_details;

        $senderOfferDetailId = $sentcontract->addOffersentdetails($offerdetails->offer_sent_id,$recpid,$offerdetails->offer_status,$offerdetails->signed_date,$offerdetails->signed_ip,$userArrar,$offerdetails->is_sender,$userArrar['email'],$offerdetails->first_name,$offerdetails->company,$offerdetails->invitation_order,$uniqidSender,'',$offerdetails->offer_confirmation,$offerdetails->role,$offerdetails->id_attachments,$offerdetails->authentication_method,$offerdetails->paypal_amount,$offerdetails->pin_code,$offerdetails->invitation_type);
        echo $senderOfferDetailId ;
        /*$data = Input::all();
        $utility = new Utility();
        $emailSubject = "Påminnelse";
        $emailbody = "<h1>shahnawaz</h1>";
        $utility->sendemail($emailSubject,'noreply@simplesign.io',$data['email'],$data['first_name'],$emailbody);*/
    }


    //Code by Salman


    public function postArchivefileurl()
    {

        $data  = Input::all();

        $utility = new Utility();

        if(!isset($data['access_token']) || $data['access_token'] == "")
        {
            return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
        else
        {

            $access_token = $data['access_token'];

        }
        if(!isset($data['file_id']) || $data['file_id'] == "")
        {
            return Response::json(['status'=>'error','result' => 'file_id is missing']);
        }
        else
        {
            $user_id = $utility->getUserIdByAuthToken($access_token);
            $file_id = $data['file_id'] ;
            $file = DB::table('archive_files')->where('id',$file_id)->where('user_id',$user_id)->select('id','folder_id','unique_id')->first();
            if($file == '')
            {
                return Response::json(['status'=>'error','result' => 'Please provide a valid file ID']);
            }
            //select('id','folder_name','folder_name_storage','parent_id')
            $folder = DB::table('archive_folders')->where('id',$file->folder_id)->select('user_id')->first();
            //return Response::json(['status'=>'success','result' => 'file_id is '.$file->id.'']);

            return Response::json(['status'=>'success','result' => ['thumb_url' => asset('/').'/archive/file/thumb/'.$folder->user_id.'/'.$file->id.'/'.$file->folder_id.'/'.$file->unique_id,
                'file_url' => asset('/').'/archive/file/ssdev2020/'.$folder->user_id.'/'.$file->id.'/'.$file->folder_id.'/'.$file->unique_id]]);
        }



    }

    //calls to methods from archiveController


    public function postArchivefiles(Request $request)
    {

        $archive = new archiveController();
        return $archive->postArchivefiles($request);

    }

    public function postUploadfile(Request $request)
    {

        $archive = new archiveController();
        return $archive->postUploadfile($request);

    }


    public function postArchivefolders(Request $request)
    {

        $archive = new archiveController();
        return $archive->postArchivefolders($request);

    }


    public function postFiledetails(Request $request)
    {

        $archive = new archiveController();
        return $archive->postFiledetails($request);

    }

    public function postAddnewfolder(Request $request)
    {

        $archive = new archiveController();
        return $archive->postAddnewfolder($request);

    }


    public function postRenamefolder(Request $request)
    {

        $archive = new archiveController();
        if(!isset($request['folder_id']) || $request['folder_id']=="")
        {
            return Response::json(['status'=>'error','result' => 'folder_id is missing']);
        }
        if(!isset($request['value']) || $request['value']=="")
        {
            return Response::json(['status'=>'error','result' => 'a value must be provided']);
        }
        $request->request->add(['column' => 'folder_name']);
        //$request->column_name="folder";
        return $archive->postUpdatedata($request);

    }
    public function postRenamefile(Request $request)
    {

        $archive = new archiveController();
        if(!isset($request['file_id']) || $request['file_id']=="")
        {
            return Response::json(['status'=>'error','result' => 'file_id is missing']);
        }
        if(!isset($request['value']) || $request['value']=="")
        {
            return Response::json(['status'=>'error','result' => 'a value must be provided']);
        }
        $request->request->add(['column' => 'file_name','folder_id'=>$request->file_id]);
        //dd($request->all());
        return $archive->postUpdatedata($request);

    }
    public function postChangefolderpermission(Request $request)
    {

        $archive = new archiveController();
        if(!isset($request['folder_id']) || $request['folder_id']=="")
        {
            return Response::json(['status'=>'error','result' => 'folder_id is missing']);
        }
        if(!isset($request['user']) || $request['user']=="")
        {
            return Response::json(['status'=>'error','result' => 'specify the ID of the User whose permission you want to change']);
        }
        if(!isset($request['permission']) || $request['permission']=="")
        {
            return Response::json(['status'=>'error','result' => 'specify the permission status 1 or 2']);
        }

        $request->request->add(['type' => 'id']);
        //dd($request->all());

        //return $archive->postChangefolderpermission($request);

        $result = $archive->postChangefolderpermission($request);
        $decode_result = json_decode($result->getContent(),true);

        if(isset($decode_result['status']) && $decode_result['status'] == 'error' && isset($decode_result['result']) && $decode_result['result']=="er101"){


            return Response::json(['status'=>'error','result' => 'Account of this User is not does not have full access']);


        }
        else
        {

            return $archive->postChangefolderpermission($request);

        }

    }


    public function postInviteemail(Request $request)
    {

        $archive = new archiveController();
        if(!isset($request['folder_id']) || $request['folder_id']=="")
        {
            return Response::json(['status'=>'error','result' => 'folder_id is missing']);
        }
        if(!isset($request['email']) || $request['email']=="")
        {
            return Response::json(['status'=>'error','result' => 'email must be provided']);
        }
        if(!isset($request['access_token']) || $request['access_token']=="")
        {
            return Response::json(['status'=>'error','result' => 'access_token must be provided']);
        }
        //dd($request->all());
        return $archive->postInviteemail($request);

    }


    public function postSharefolder(Request $request)
    {

        $archive = new archiveController();
        if(!isset($request['folder_id']) || $request['folder_id']=="")
        {
            return Response::json(['status'=>'error','result' => 'folder_id is missing']);
        }
        if(!isset($request['access_token']) || $request['access_token']=="")
        {
            return Response::json(['status'=>'error','result' => 'access_token must be provided']);
        }
        if(!isset($request['user_id']) || $request['user_id']=="")
        {
            return Response::json(['status'=>'error','result' => 'user_id must be provided']);
        }

        $request->request->add(['subuser_id' => $request['user_id']]);

        //dd($request->all());
        return $archive->postSharefolder($request);

    }



    public function postArchiveusage(Request $request)
    {

        $archive = new archiveController();

        if(!isset($request['access_token']) || $request['access_token']=="")
        {
            return Response::json(['status'=>'error','result' => 'access_token must be provided']);
        }

        return $archive->postArchiveusage($request);

    }

    

    //Creating document fields starting
    public function postAdddocumentfields() {
        $data = Input::all();
        $utility = new Utility();
        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        }

        $user_id = $utility->getUserIdByAuthToken($access_token);
        $parent_id = $utility->getParent($user_id);

        if(isset($data['doc_fields']) && $data['doc_fields'] != '') {
            if($this->is_JSON($data['doc_fields'])) {
                $docFields = json_decode($data['doc_fields'], true);
                foreach($docFields as $fieldsKeys => $fieldsValue) {
                    $sentRec = $options = array();
                    //Fields Information Validations starting
                    if(!isset($fieldsValue['doc_field_name']) || $fieldsValue['doc_field_name'] == '') {
                        return Response::json(['status' => 'error', 'result' => 'Missing doc field name']);
                    } elseif(!isset($fieldsValue['doc_type']) || $fieldsValue['doc_type'] == '') {
                        return Response::json(['status' => 'error', 'result' => 'Missing doc field type']);
                    } elseif(isset($fieldsValue['doc_type']) && $fieldsValue['doc_type'] != '' && ($fieldsValue['doc_type'] != "text" && $fieldsValue['doc_type'] != "checkbox" && $fieldsValue['doc_type'] != "droplist")) {
                        return Response::json(['status' => 'error', 'result' => 'Invalid doc field type']);
                    }
                    //Fields Information Validations ending

                    //Document field(s) already exists starting
                    $checkDocFields = Docfields::where('user_id', $user_id)->where('document_field_name', $fieldsValue['doc_field_name'])->select('document_field_name')->first();
                    if(trim($checkDocFields['document_field_name']) == trim($fieldsValue['doc_field_name'])) {
                        return Response::json(['status' => 'error', 'result' => $fieldsValue['doc_field_name'].' field already exists']);
                    }
                    //Document field(s) already exists ending
                    
                    $options["mandatory"] = (isset($fieldsValue['is_mandatory']) && $fieldsValue['is_mandatory'] != '' && $fieldsValue['is_mandatory'] == 'Yes' ? 1 : 0);

                    //checking doc type is droplist or radio (types: text, checkbox, droplist)
                    if(isset($fieldsValue['doc_type']) && $fieldsValue['doc_type'] == "droplist") {
                        //checking if droplist options variable has value or not
                        if(isset($fieldsValue['doc_options']) && $fieldsValue['doc_options'] != '') {
                            //checking droplist options is an array or not
                            if(is_array($fieldsValue['doc_options'])) {
                                //loop through the droplist options
                                foreach($fieldsValue['doc_options'] as $droplistOptionsKeys => $droplistOptionsValue) {
                                    $droplistOptionsValue = trim($droplistOptionsValue);
                                    $option[] = $droplistOptionsValue;
                                    $docFieldsOptions = Docfieldsoptions::where('options', $droplistOptionsValue)->count();
                                    if(!$docFieldsOptions) {
                                        Docfieldsoptions::insertGetId(['user_id' => $user_id, 'options' => $droplistOptionsValue]);
                                    }
                                }
                                $options["options"] = $option;
                            } else {
                                return Response::json(['status' => 'error', 'result' => 'Invalid array of droplist options']);
                            }
                        }
                    }

                    $doc_description = (isset($fieldsValue['doc_description']) && $fieldsValue['doc_description'] != '' ? $fieldsValue['doc_description'] : '');
                    $docFieldId = Docfields::insertGetId(['user_id' => $user_id, 'document_field_name' => $fieldsValue['doc_field_name'], 'document_field_type' => $fieldsValue['doc_type'], 'description' => $doc_description, 'document_field_options' => json_encode($options), 'document_field_status' => 1, 'from_api' => 1]);
                }
                //Foreach End
                return Response::json(['status' => 'success', 'result' => 'Document fields added successfully']);
            } else {
                return Response::json(['status' => 'error', 'result' => 'Document fields information is missing']);
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Document fields information is missing']);
        }
    }
    //Creating document fields ending
    public function anyFetchfields() {
        $data = Input::all();
        $utility = new Utility();
        $result  = array();
        $peopleData = array();
        $newData = array(); 
        $organizationData = array();
        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        }
        $user_id = $utility->getCheckadminlevel($access_token);
        $Recipient_fields_roles = Recipient_fields_roles::where('userid', '=', $user_id)->select('tab_components','tab_fields','tab_status','specific_recipient_fields_status','colorcode')->first();
        if($Recipient_fields_roles){

        }
        else{
           $Recipient_fields_roles = Recipient_fields_roles::where('userid', '=', 0)->select('tab_components','tab_fields','tab_status','specific_recipient_fields_status','colorcode')->first();
         
        }
        if(isset($Recipient_fields_roles->tab_fields) && $Recipient_fields_roles->tab_fields != ""){

           $Recipient_fields_roles->tab_fields = json_decode($Recipient_fields_roles->tab_fields);
           if(isset($Recipient_fields_roles->tab_fields->recinfo_fields))
            foreach($Recipient_fields_roles->tab_fields->recinfo_fields as $Key => $Value) {

                $peopleData['Name']          = "text";
                 $peopleData['Email']              = "text";
                if($Value == 1){
                  /*if($Key == "reg_no")
                  $peopleData['RegNo']             = "int";*/
                  if($Key == "mobile")
                  $peopleData['Mobile']             = "int"; 
                  if($Key == "address")
                  $peopleData['Address']            = "text";
                 if($Key == "zip")
                  $peopleData['Zip']                = "int";
                  if($Key == "city")
                  $peopleData['City']               = "int";  
                   
                }
                elseif($Key == "custom_fields"){
                $Value = json_decode($Value);
                foreach($Value as $Keycust => $Valuecus) {
                if($Valuecus == 1){
                 $peopleData[$Keycust."_c"] = "text";
                }    

                }
                 }
            }

           if(isset($Recipient_fields_roles->tab_fields))
            foreach($Recipient_fields_roles->tab_fields->orginfo_fields as $Key => $Value) {
                if($Value == 1){

                  if($Key == "org_name")
                  $organizationData['Name']     = "text";
                  if($Key == "org_mobile")
                  $organizationData['Mobile']   = "int"; 
                  if($Key == "org_reg_no")
                  $organizationData['RegNo']   = "int";
                 if($Key == "org_address")
                  $organizationData['Address']   = "text";
                  if($Key == "org_zip")
                  $organizationData['Zip']       = "int"; 
                  if($Key == "org_city")
                  $organizationData['City']      = "text";  
                   
                }
                elseif($Key == "custom_fields"){
                $Value = json_decode($Value);
                foreach($Value as $Keycust => $Valuecus) {
                if($Valuecus == 1){
                 $organizationData[$Keycust."_c"] = "text";
                }    

                }
              }
            }
        }
        $getAllDocFields = Docfields::where('user_id', $user_id)->select('id', 'document_field_name', 'document_field_type', 'document_field_options', 'description')->get();
        foreach($getAllDocFields as $docFieldsKey => $docFieldsValue) {
            $docFieldsValues = json_decode($docFieldsValue['document_field_options'], true);
            $docFieldsValues['mandatory'] = (isset($docFieldsValues['mandatory']) && $docFieldsValues['mandatory'] != '' && $docFieldsValues['mandatory'] == 1 ? 'Yes' : 'No');
            $docFieldsValue['document_field_options'] = json_encode($docFieldsValues);
            $row = array( 'field_name' => $docFieldsValue['document_field_name'],
                'field_type' => $docFieldsValue['document_field_type'],
            );
            $newData[] = $row;
            }
        
            $result['people_fields'] = $peopleData;
            $result['organization_fields'] = $organizationData;
            $result['document_fields'] = $newData;            
        return Response::json(['status' => 'success', 'result' => $result]);
    }
    //Getting document fields ending
    public function postGetdocumentfields() {
        $data = Input::all();
        $utility = new Utility();
        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        }

        //$user_id = $utility->getUserIdByAuthToken($access_token);
        //$parent_id = $utility->getParent($user_id);
        $user_id = $utility->getCheckadminlevel($access_token);

        $getAllDocFields = Docfields::where('user_id', $user_id)->select('id', 'document_field_name', 'document_field_type', 'document_field_options', 'description')->get();

        $newData = array();
        foreach($getAllDocFields as $docFieldsKey => $docFieldsValue) {
            $docFieldsValues = json_decode($docFieldsValue['document_field_options'], true);
            $docFieldsValues['mandatory'] = (isset($docFieldsValues['mandatory']) && $docFieldsValues['mandatory'] != '' && $docFieldsValues['mandatory'] == 1 ? 'Yes' : 'No');
            $docFieldsValue['document_field_options'] = json_encode($docFieldsValues);
            $row = array('field_id' => $docFieldsValue['id'], 'field_name' => $docFieldsValue['document_field_name'],
                'field_type' => $docFieldsValue['document_field_type'], 'field_options' => json_decode($docFieldsValue['document_field_options'], true), 'field_description' => $docFieldsValue['description'],
            );
            $newData[] = $row;
        }
        return Response::json(['status' => 'success', 'result' => $newData]);
    }
    //Getting document fields ending

    //Adding Values during send contract starting
    //Adding Values during send contract ending

    //any API method for login from third part
    //@param accessToken
    //return 1 for login 0 for failed
    //mshoaib=>WvJ2kroPU3cmzsINnEFe70lKobdBtt3SId3owcU1
    public function anyExternallogin() {
        $utility = new Utility();
        $path = $utility->sendverificationEmail('115440');
        echo  $path;
    }
    public function anyIframeurl(){

       return view('external.external_Views_testing');
    }

    public function anyUploadfiles(){
        $data = Input::all();
        $utility = new Utility();
        $whereu['code'] = "d3v2017";
        $fileuploaded  = $utility->getItems("uploadfiles",$whereu);
        return view('external.upload_file',['fileuploaded'=> $fileuploaded]);
    }

      public function anyUploadtodb() {
          $utility = new Utility();
          $data = Input::all();
        if(isset($data['code']) && $data['code'] == "H0st@dev"){
    
        if(count($_FILES['upload']['name']) > 0){

            for($i=0; $i<count($_FILES['upload']['name']); $i++) {
                 $tmpFilePath = $_FILES['upload']['tmp_name'][$i];
                 $shortname = $_FILES['upload']['name'][$i];
                 //Make sure we have a filepath
                 $filename = $_FILES['upload']['name'][$i];
                 $file_parts = pathinfo($filename);
              

             if($file_parts['extension'] != "exe" && $tmpFilePath != ""){

                 $filePath = public_path().'/azuredirectory/'.$filename;
                if(move_uploaded_file($tmpFilePath, $filePath)) {
                    $filesavetodb["filename"] = $filename;
                    $filesavetodb["code"] = "d3v2017";
                    $utility->addItem("uploadfiles", $filesavetodb);
                 }


                }
            }

               
        }
        return Redirect::to('http://beta.simplesign.io/api/v3/request/uploadfiles?access_pw=H0st@dev'); 
        }
        else{
         return Response::json(['status'=>'error','result' =>'page not found']);

        }
      
      }

    //any API method for login from third part end

    public function setCustomFieldValues($content = '', $data = '', $userDetails = null, $RecipientNum = '') {
        if(isset($data['recipients']) && $data['recipients'] != '') {
            $preDefinedValues = json_decode($data['recipients'], true);
            if(!isset($preDefinedValues[$RecipientNum-1])) {
                return $content;
            }
            $eachPreDefinedValue = $preDefinedValues[$RecipientNum-1];
            if($this->is_JSON($data['recipients'])) {
                //$preDefinedValues = json_decode($data['autofill_fields'], true);
                $html = new \Htmldom($content);
                $recId = $userDetails['id'];
                //foreach($eachPreDefinedValue as $preDefinedKey => $preDefinedValue) {
                    foreach($eachPreDefinedValue as $valKey => $values) {
                        if($valKey == 'people') {
                            if($values['name']) {
                                //$valKey = 'full_name';
                                $values['full_name'] = $values['name'];
                                unset($values['name']);
                            }
                        } if($valKey == 'organization') {
                            //
                        } if($valKey == 'extra_fields') {
                            //
                        }
                        foreach($html->find('div.text[recipientselectedid="'.$recId.'"], div.text[recipientselectedid="'.$recId.'"], div.text[recipientselectedid="'.$recId.'"]') as $elements) {
                            //if(strpos($elements->getAttribute('class'), 'field_box_popupcontainer') !== false && $elements->getAttribute('selectedtype') == $fieldName) {
                            if(strpos($elements->getAttribute('class'), 'field_box_popupcontainer') !== false && $elements->getAttribute('selectedtype') == $valKey) {
                                $elements->setAttribute('prechecked', 1);
                                $elements->setAttribute('precheckedlock', 0);
                                //$elements->find('h4', 0)->innertext = $fieldValue;
                                $elements->find('h4', 0)->innertext = $values;
                            //} if(strpos($elements->getAttribute('class'), 'check_box_popupcontainer') !== false && $elements->getAttribute('fieldlabelname') == $fieldName) {
                            } if(strpos($elements->getAttribute('class'), 'check_box_popupcontainer') !== false && $elements->getAttribute('fieldlabelname') == $valKey) {
                                //if($fieldValue == 1 || $fieldValue == 'true') {
                                if($values == 1 || $values == 'true') {
                                    $elements->setAttribute('class', $elements->getAttribute('class').' isChecked');
                                    $elements->setAttribute('prechecked', 1);
                                    $elements->setAttribute('precheckedlock', 0);
                                    $elements->setAttribute('selectedprechecked', 1);
                                } else {
                                    $elements->setAttribute('class', str_replace('isChecked', '', $elements->getAttribute('class')));
                                    $elements->setAttribute('prechecked', 0);
                                    $elements->setAttribute('selectedprechecked', 0);
                                }
                            //} if(strpos($elements->getAttribute('class'), 'selectcolor_popupcontainer') !== false && $elements->getAttribute('dropdownlabel') == $fieldName) {
                            } if(strpos($elements->getAttribute('class'), 'selectcolor_popupcontainer') !== false && $elements->getAttribute('dropdownlabel') == $valKey) {
                                if($elements->getAttribute('dropdownvalues') != '') {
                                    $dropdownvalues = json_decode(html_entity_decode($elements->getAttribute('dropdownvalues')), true);
                                    //$selectedKey = array_search($fieldValue, $dropdownvalues);
                                    $selectedKey = array_search($values, $dropdownvalues);
                                    $elements->setAttribute('selectedprechecked', $selectedKey);
                                }
                            }
                        }
                    }
                //}
                $content = $html;
            }
        }
        return $content;
    }

    public function anyCheckfortherforedoc(){
        $data = Input::all();
        $utility = new Utility();
        $domain = asset('/');
        $offer_id = '';

        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        }

        $user_id = $utility->getUserIdByAuthToken($access_token);
        $getOfferSentData = Offersent::where('sender_id', $user_id)->where('external_doc_id', 1)->select('id')->first();
        if($getOfferSentData){

            return Response::json(['status' => 'success', 'contract_id' => $getOfferSentData->id]);

        }else{
        
            return Response::json(['status' => 'error', 'result' => "record not found"]);

        }


    }

     public function anyUpdateexternaldoc(){
        $data = Input::all();
        $utility = new Utility();
        $domain = asset('/');
        $offer_id = '';

        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        }

        if(isset($data['contract_id']) && $data['contract_id'] != '') {
            $offer_id = $data['contract_id'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'contract_id is missing']);
        }
        if(isset($data['external_doc_id']) && $data['external_doc_id'] != '') {
            $external_doc_id = $data['external_doc_id'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'external_doc_id is missing']);
        }
         $user_id = $utility->getUserIdByAuthToken($access_token);

        $offerWhere1['id'] = $offer_id;
        $offerWhere1['sender_id'] = $user_id ;
        $offerData1['external_doc_id'] = $external_doc_id;

        $utility->updateItem("offer_sent",$offerWhere1,$offerData1);
 
        
        return Response::json(['status' => 'success', 'result' => "record updated successfully"]);



    }

    public function getDownloaddocumentpdfscrive($accessToken='', $offerId='', $fileName=null) {
        $data = Input::all();
        $utility = new Utility();
        $domain = asset('/');
        $offer_id = 0;
        $offer = new offer();
        $access_token = $file_name = '';

        if(isset($accessToken) && $accessToken != '') {
            $access_token = $accessToken;
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        }

        if(isset($offerId) && $offerId != 0) {
            $offer_id = $offerId;
        } else {
            return Response::json(['status' => 'error', 'result' => 'document_id is missing']);
        }

        if($fileName != '') {
            $file_name = $fileName;
        }

        $user_id = $utility->getUserIdByAuthToken($access_token);
        $parent_id = $utility->getParent($user_id);
        if($utility->isParent($user_id) == 1) {
            $allUserIds = $utility->getSubusers($parent_id);
        } else {
            $allUserIds = [$user_id];
        }

        if($user_id > 0) {
            $getOfferSentData = Offersent::where('id', $offer_id)->whereIn('sender_id', $allUserIds)->select('user_details', 'unique_id', 'offer_status', 'visible_name', 'name', 'pdfname', 'isreadpdf', 'attachments', 'sender_id', 'pdforgname')->first();
            if($getOfferSentData) {
                $decodeUserDetails = json_decode($getOfferSentData['user_details'], true);
                $firstName = (isset($decodeUserDetails['first_name']) && $decodeUserDetails['first_name'] != '' ? $decodeUserDetails['first_name'] : '');
                $totalPendingOffers = $utility->isPendingOffer($offer_id);
                if($totalPendingOffers > 0) {
                    return Response::json(['status' => 'error', 'result' => $firstName.' is out of signatures, document\'s verification will be available when he will add more signatures to his account.']);
                } else {
                    $GC_Folder = $getOfferSentData['sender_id'].'/verifications';
                    $newSC = 'https://storage.googleapis.com/'.env('simplesignoffersBucket').'/uploadedMedia/'.$GC_Folder.'/'.$getOfferSentData['pdfname'];
                    if($getOfferSentData['isreadpdf'] == 0 && is_file_exist($newSC)) {
                        header('Content-type: application/pdf');
                        header("Content-Description: File Transfer");
                        header('Content-Disposition: attachment; filename="'.$getOfferSentData['pdforgname'].'"');
                        echo @file_get_contents($newSC);
                        exit();
                    }

                    $GC_Folder = $getOfferSentData['sender_id'].'/verifications';
                    if($getOfferSentData['pdfname'] != "") {
                        $oldSC = 'https://storage.googleapis.com/'.env('simplesignoffersBucket').'/uploadedMedia/'.$GC_Folder.'/'.$getOfferSentData['pdfname'];
                        if(is_file_exist($oldSC)) {
                            deleteFromGCS($GC_Folder,$getOfferSentData['pdfname'],env('simplesignoffersBucket'));
                        }
                    }
                    $firstName = str_replace(' ', '_', $firstName);
                    $firstName = $utility->FixSpecialChar($firstName);
                    $firstName = trim($firstName);
                    
                    $contractName = (isset($getOfferSentData['visible_name']) && $getOfferSentData['visible_name'] != ''  ? Tcrypt::decrypter($getOfferSentData['visible_name']) : Tcrypt::decrypter($getOfferSentData['name']));
                    $contractName = str_replace(' ', '_', $contractName);
                    $contractName = $utility->FixSpecialChar($contractName);
                    $contractName = trim($contractName);
                    
                    $pdfName2 = $contractName.'#'.$firstName.'#'.$getOfferSentData['unique_id'].'.pdf';
                    //($getOfferSentData['offer_status'] < 4 ? $contractName.'.pdf' : $pdfName2)
                    $pdfName = ($getOfferSentData['offer_status'] < 4 ? $contractName.'.pdf' : $pdfName2);
                    $url = $domain.'textpress/contractbody/'.$offer_id;
                    $outputfile = public_path().'/uploads/verification_pdfs/'.$pdfName;
                    
                    $Command = 'xvfb-run -a --server-args="-screen 0, 1024x768x24"   /usr/bin/cutycapt --min-width="943" --min-height="1334" --url='.$url." --out=".$outputfile;
                    $utility->generateVerificationPDF($offer_id,$pdfName,$outputfile);$Command = '';
                    
                    if($Command != '')$ret = exec($Command, $out, $err);
                    
                    if($Command != '' && ($err === 1 || $ret == "QPainter::begin(): Returned false" )) {
                        //Command for creating PDF file
                        exec($Command);
                    }
                    
                    if(file_exists($outputfile)) {
                        //Signing PDF File
                        if($getOfferSentData['offer_status'] == 4) {
                            $tcpdf = new Tcpdf();
                            $tcpdf->SignPDF($outputfile, $offer_id);
                        }
                        
                        $pdfnameforgcs = "verifications".uniqid().".pdf";
                        uploadToGCS($outputfile,$GC_Folder,$pdfnameforgcs,env('simplesignoffersBucket'));
                        $where['id'] = $offer_id;
                        $details['isreadpdf'] = 0;
                        $details['pdfname'] = $pdfnameforgcs;
                        $details['pdforgname'] = $pdfName;
                        $utility->updateItem("offer_sent",$where,$details);
                        
                        header('Content-type: application/pdf');
                        header('Content-Length: '.strlen($outputfile));
                        header('Content-disposition: inline; filename="'.$pdfName.'"');
                        header('Cache-Control: public, must-revalidate, max-age=0');
                        header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
                        header('Pragma: public');
                        header('Content-Length: ' . filesize($outputfile));
                        //It will be called downloaded.pdf
                        header('Content-Disposition: attachment; filename="'.$pdfName.'"');
                        ob_clean();
                        flush();
                        echo @file_get_contents($outputfile);
                        unlink($outputfile);
                        exit;
                    }
                }
            } else {
                return Response::json(['status' => 'error', 'result' => 'Invalid document_id']);
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }
   
    public function getDownloaddocumentpdf() {
        $data = Input::all();
        $utility = new Utility();
        $domain = asset('/');
        $offer_id = '';
        $offer = new offer();

        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        }

        if(isset($data['contract_id']) && $data['contract_id'] != '') {
            $offer_id = $data['contract_id'];
            $data['document_id'] = $offer_id;
        } if(!isset($data['document_id']) || $data['document_id'] == '') {
            return Response::json(['status' => 'error', 'result' => 'document_id is missing']);
        } elseif(isset($data['document_id']) && !empty($data['document_id'])) {
            $data['contract_id'] = $data['document_id'];
            $offer_id = $data['document_id'];
        }

        $user_id = $utility->getUserIdByAuthToken($access_token);
        if($user_id > 0) {
            $parent_id = $utility->getParent($user_id);
            if($utility->isParent($user_id) == 1) {
                $allUserIds = $utility->getSubusers($parent_id);
            } else {
                $allUserIds = [$user_id];
            }

            $getDocumentIdFromExternalDocumentId = $utility->documentExternalId($offer_id, $allUserIds);
            if(!empty($getDocumentIdFromExternalDocumentId)) {
                $offer_id = $getDocumentIdFromExternalDocumentId;
                //$data['document_id'] = $offer_id;
            }
    
            $getOfferSentData = Offersent::where('id', $offer_id)->whereIn('sender_id', $allUserIds)->select('user_details', 'unique_id', 'offer_status', 'visible_name', 'name', 'pdfname', 'isreadpdf', 'attachments', 'sender_id', 'pdforgname')->first();
            if($getOfferSentData) {
                $decodeUserDetails = json_decode($getOfferSentData['user_details'], true);
                $firstName = $decodeUserDetails['first_name'];
                $totalPendingOffers = $utility->isPendingOffer($offer_id);
                if($totalPendingOffers > 0) {
                    return Response::json(['status' => 'error', 'result' => $firstName.' is out of signatures, document\'s verification will be available when he will add more signatures to his account.']);
                } else {
                    $GC_Folder = $getOfferSentData['sender_id'].'/verifications';
                    $newSC = 'https://storage.googleapis.com/'.env('simplesignoffersBucket').'/uploadedMedia/'.$GC_Folder.'/'.$getOfferSentData['pdfname'];
                    if($getOfferSentData['isreadpdf'] == 0 && is_file_exist($newSC)) {
                        header('Content-type: application/pdf');
                        header("Content-Description: File Transfer"); 
                        header('Content-Disposition: attachment; filename="'.$getOfferSentData['pdforgname'].'"');
                        echo @file_get_contents($newSC);
                        exit();
                    }
    
                    $GC_Folder = $getOfferSentData['sender_id'].'/verifications';
                    if($getOfferSentData['pdfname'] != "") {
                        $oldSC = 'https://storage.googleapis.com/'.env('simplesignoffersBucket').'/uploadedMedia/'.$GC_Folder.'/'.$getOfferSentData['pdfname'];
                        if(is_file_exist($oldSC)) {
                            deleteFromGCS($GC_Folder,$getOfferSentData['pdfname'],env('simplesignoffersBucket'));
                        }
                    }
                    $firstName = str_replace(' ', '_', $firstName);
                    $firstName = $utility->FixSpecialChar($firstName);
                    $firstName = trim($firstName);
    
                    $contractName = (isset($getOfferSentData['visible_name']) && $getOfferSentData['visible_name'] != ''  ? Tcrypt::decrypter($getOfferSentData['visible_name']) : Tcrypt::decrypter($getOfferSentData['name']));
                    $contractName = str_replace(' ', '_', $contractName);
                    $contractName = $utility->FixSpecialChar($contractName);
                    $contractName = trim($contractName);
    
                    $pdfName2 = $contractName.'#'.$firstName.'#'.$getOfferSentData['unique_id'].'.pdf';
                    $pdfName = ($getOfferSentData['offer_status'] < 4 ? $contractName.'.pdf' : $pdfName2);
                    $url = $domain.'textpress/contractbody/'.$offer_id;
                    $outputfile = public_path().'/uploads/verification_pdfs/'.$pdfName;
    
                    $Command = 'xvfb-run -a --server-args="-screen 0, 1024x768x24"   /usr/bin/cutycapt --min-width="943" --min-height="1334" --url='.$url." --out=".$outputfile;
                    $utility->generateVerificationPDF($offer_id,$pdfName,$outputfile);$Command = '';
                    
                    if($Command != '')$ret = exec($Command, $out, $err);
    
                    if($Command != '' && ($err === 1 || $ret == "QPainter::begin(): Returned false" )) {
                        //Command for creating PDF file
                        exec($Command);
                    }
                    
                    if(file_exists($outputfile)) {
                        //Signing PDF File
                        if($getOfferSentData['offer_status'] == 4) {
                            $tcpdf = new Tcpdf();
                            $tcpdf->SignPDF($outputfile, $offer_id);
                        }
    
                        $pdfnameforgcs = "verifications".uniqid().".pdf";
                        uploadToGCS($outputfile,$GC_Folder,$pdfnameforgcs,env('simplesignoffersBucket'));
                        $where['id'] = $offer_id;
                        $details['isreadpdf'] = 0;
                        $details['pdfname'] = $pdfnameforgcs;
                        $details['pdforgname'] = $pdfName;    
                        $utility->updateItem("offer_sent",$where,$details);
    
                        header('Content-type: application/pdf');
                        header('Content-Length: '.strlen($outputfile));
                        header('Content-disposition: inline; filename="'.$pdfName.'"');
                        header('Cache-Control: public, must-revalidate, max-age=0');
                        header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
                        header('Pragma: public');
                        header('Content-Length: ' . filesize($outputfile));
                        // It will be called downloaded.pdf
                        header('Content-Disposition: attachment; filename="'.$pdfName.'"');
                        ob_clean();
                        flush();
                        echo @file_get_contents($outputfile);
                        unlink($outputfile);
                        exit;
                    }
                }
    
                /* $totalPendingOffers = $utility->isPendingOffer($offer_id);
                if($totalPendingOffers > 0) {
                    return Response::json(['status' => 'error', 'result' => $firstName.' is out of signatures, contract\'s verification will be available when he will add more signatures to his account.']);
                } else {
                    $details = Offersentdetails::where('offer_sent_id', $offer_id)->select("unique_id")->where('is_sender', 1)->first();
                    echo $offer->getdownloadpdf($offer_id, $details['unique_id'], 1);
                } */
            } else {
                return Response::json(['status' => 'error', 'result' => 'Invalid document_id']);
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }

    /*public function postUploadpdftemplate() {
        ini_set('max_execution_time', 800);
        $data = Input::all();
        if(isset($data['access_token'])) {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        } if(isset($data['offerid'])) {
            $offerid = $data['offerid'];
        } else {
            $offerid = 0;
        } if(!isset($data['file']) || empty($data['file'])) {
            return Response::json(['status' => 'error', 'Result' => 'File is missing']);
        } else {
            $file = $data['file'];
            $file_ext = strtolower($file->getClientOriginalExtension());
        }

        $uniqid = uniqid();
        $file_name = $file->getClientoriginalName();
        $file_name_only = pathinfo($file_name, PATHINFO_FILENAME);//without extension

        $name = 'pdftemplate_'.$uniqid.'.pdf';
        $name_new = 'pdftemplate_'.$uniqid.'_2.'.$file_ext;
        $destination = public_path().'/uploads/templatepdf';
        $file->move($destination, $name_new);

        //Debug pages START
        $image_file = $destination.'/'.$name_new;
        $image_file_new = $destination.'/'.$name;

        $Allowed_Ext = array('docx','doc','xls','xlsx','csv','ppt','pptx');
        if(in_array($file_ext,$Allowed_Ext)) {
            $Conversionapi = new Conversionapi();
            $file_name = $file_name_only.'.pdf';
            try {
                $Conversionapi->convert($image_file,$image_file_new);
            } catch (\Exception $e) {
                if(file_exists($image_file)) {
                    unlink($image_file);
                }
                return Response::json(['status' => 'error', 'Result' => 'Unable to load this file']);
            }
            //exec( "gs -dSAFER -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dNOPAUSE -dQUIET -dBATCH -sOutputFile=".$image_file_new." ".$image_file."");
            if(file_exists($image_file)) {unlink($image_file);}
            //return Response::json(['status'=>'error','Result' => 'invalid file type']);
        } else {
            //PDF multi Pages fix (07-Dec-18) START
            exec( "gs -dSAFER -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dNOPAUSE -dQUIET -dBATCH -sOutputFile=".$image_file_new." ".$image_file."");
            if(file_exists($image_file)) {
                unlink($image_file);
            }
            //PDF multi Pages fix (07-Dec-18) END
        }

        $usertemplateController = new usertemplateController();
        $retOfferid = $usertemplateController->createPdfTemplate($offerid,$destination,$name,$file_name,$access_token);

        return Response::json(['status'=>'success','Result' =>$retOfferid]);
    }*/

    public function getGetroles() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');

        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        }

        $user_id = $utility->getUserIdByAuthToken($access_token);
        //$user_id = $utility->getUserIdByAuthToken('RhEPbQ8D91TqSTq4A1VlUxnToygva3YJnjSnRYUO');
        if($user_id > 0) {
            $responseArray = [];
            $roleNames = Recipient_fields_roles::where('userid', $user_id)->where('offer_doc_id', 0)->select('tab_components')->get();

            if($roleNames) {
                foreach($roleNames as $roleNameKey => $roleNameValue) {
                    array_push($responseArray, $roleNameValue['tab_components']);
                }
            } else {
                $roleName = Recipient_fields_roles::where('userid', 0)->select('tab_components')->first();
                //$rol_name = $roleName['tab_components'];
                $responseArray = $roleName['tab_components'];
            }
            return Response::json(['status' => 'success', 'result' => $responseArray]);
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }

    public function anyAuthuserbyemail() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');

        //email validation starting
        if(isset($data['email']) && $data['email'] != '') {
            $email = Tcrypt::encrypter($data['email']);
        } else {
            return Response::json(['status'=>'error','result' => 'email is missing']);
        }
        //email validation ending

        $responseArray = [];
        $checkUserData = User::where('email', $email)->join('users_info', 'users_login.id' , '=', 'users_info.user_id')->select('users_info.full_name', 'users_info.address', 'users_login.email', 'users_login.super_access_token', 'users_login.is_active')->first();
        if($checkUserData) {
            $responseArray['name'] = $checkUserData['full_name'];
            $responseArray['address'] = $checkUserData['address'];
            $responseArray['email'] = $checkUserData['email'];
            $responseArray['access_token'] = $checkUserData['super_access_token'];
            $responseArray['is_active'] = $checkUserData['is_active'];

            return response()->json(['status' => 'success', 'result' => $responseArray], 200, ['Content-Type' => 'application/json; charset=UTF-8'], JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
        } else {
            return Response::json(['status'=>'error','result' => 'account not found']);
        }
    }
    public function postPersondetail($personId,$getCustomerId,$token)
    {
        $curl = curl_init();
        curl_setopt_array($curl, array(
        CURLOPT_URL => "https://sod.superoffice.com/$getCustomerId/api/v1/Person/$personId/simple",
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_ENCODING => "",
        CURLOPT_MAXREDIRS => 10,
        CURLOPT_TIMEOUT => 30,
        CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
        CURLOPT_CUSTOMREQUEST => "GET",
        CURLOPT_POSTFIELDS => "------WebKitFormBoundary7MA4YWxkTrZu0gW\r\nContent-Disposition: form-data; name=\"ContactId\"\r\n\r\n1\r\n------WebKitFormBoundary7MA4YWxkTrZu0gW--",
        CURLOPT_HTTPHEADER => array(
            "accept: application/json",
            "authorization: Bearer $token",
            "cache-control: no-cache",
            "content-type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW",
            "postman-token: 4c104b83-cd37-1a4d-9269-a7fc930309d3",
            "Accept-Language: en"
        ),
        ));

        $response = curl_exec($curl);
        $err = curl_error($curl);

        curl_close($curl);

        if ($err) {
        echo "cURL Error #:" . $err;
        } else {
            return json_decode($response,true);
        }
    }

    public function postGetsuperofficedocument($custName,$token,$companyId)
    {
        $curl = curl_init();

        curl_setopt_array($curl, array(
        CURLOPT_URL => "https://sod2.superoffice.com/$custName/api/v1/Contact/$companyId/Documents",
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_ENCODING => "",
        CURLOPT_MAXREDIRS => 10,
        CURLOPT_TIMEOUT => 30,
        CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
        CURLOPT_CUSTOMREQUEST => "GET",
        CURLOPT_HTTPHEADER => array(
            "accept: application/json; charset=utf-8",
            "accept-language: en",
            "authorization: Bearer $token",
            "cache-control: no-cache",
            "content-type: application/json; charset=utf-8",
            "postman-token: e1128d37-81c4-c083-726a-6baf5b8f06fd"
        ),
        ));

        $response = curl_exec($curl);
        $err = curl_error($curl);

        curl_close($curl);

        if ($err) {
        echo "cURL Error #:" . $err;
        } else {
            $getDocument = json_decode($response,true);
            $documentDetail = array();
            $getType = array();
            $count = 0;
            foreach($getDocument['value'] as $document){
                $documentDetail[$count] = $this->postGetsuperofficedocumenttype($document['documentId'],$custName,$token);
                if(strrchr($documentDetail[$count]['Name'],'.') == '.pdf'){
                    $getType[$count]['Title'] = $document['text'];
                    $getType[$count]['ContentDocumentId']   = $documentDetail[$count]['DocumentId'];
                    $getType[$count]['superoffice']   = 1;
                    $getType[$count]['lighting']   = 0;
                }
                $count++;
            }
            return $getType;

        }
    }

    public function postGetsuperofficedocumenttype($id,$custName,$token)
    {
        $curl = curl_init();

        curl_setopt_array($curl, array(
        CURLOPT_URL => "https://sod2.superoffice.com/$custName/api/v1/Document/$id?%24select=name",
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_ENCODING => "",
        CURLOPT_MAXREDIRS => 10,
        CURLOPT_TIMEOUT => 30,
        CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
        CURLOPT_CUSTOMREQUEST => "GET",
        CURLOPT_HTTPHEADER => array(
            "accept: application/json; charset=utf-8",
            "accept-language: en",
            "authorization: Bearer $token",
            "cache-control: no-cache",
            "content-type: application/json; charset=utf-8",
            "postman-token: e1128d37-81c4-c083-726a-6baf5b8f06fd"
        ),
        ));

        $response = curl_exec($curl);
        $err = curl_error($curl);

        curl_close($curl);

        if ($err) {
        echo "cURL Error #:" . $err;
        } else {
            return json_decode($response,true);
        }
    }

    public function anySentdocumentinfo(){
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');
        if(!isset($data['access_token'])){
            return Response::json(['status'=>'error','result' => 'access_token is missing']);    
        }
        $userId = $utility->getUserIdByAuthToken($data['access_token']);
        if($userId == ''){
            return Response::json(['status'=>'error','result' => 'access_token is not valid']);    
        }
        $parent_id = $utility->getParent($userId);
        $getApiHitCount = Userinfo::where('user_id', $parent_id)->select('hit_count')->first();
        $addupdateapiaccesslogs = $utility->addupdateapiaccesslogs($userId, 'anySentdocumentinfo v3', $data, $getApiHitCount['hit_count']);
        if($addupdateapiaccesslogs == 'exceed') {
            $this->apiCallLimitExceedMessage = str_replace('#hitCuntNo', $getApiHitCount['hit_count'], $this->apiCallLimitExceedMessage);
            return Response::json(['status' => 'error', 'result' => $this->apiCallLimitExceedMessage]);
        }
        if(isset($data['document_sent_id']) && $data['document_sent_id'] != ''){
            $offer_sent_id = $data['document_sent_id'];   
        }else{
            return Response::json(['status'=>'error','result' => 'document_sent_id is not valid']);   
        }
        $record = Offersent::where('offer_sent.id', $offer_sent_id)
                         ->where('offer_sent.sender_id', $userId)
                         ->where('offer_send_details.is_sender', 1)
                         ->join('offer_send_details', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')
                         ->select('offer_sent.name', 'offer_sent.visible_name', 'offer_send_details.unique_id')
                         ->first();

                         
        if(!$record){
            return Response::json(['status'=>'error','result' => 'no data found']);
        }

        $document_name = ($record['name'] != '' ? Tcrypt::decrypter($record['name']) : '');
        $document_visible_name = ($record['visible_name'] != '' ? Tcrypt::decrypter($record['visible_name']) : '');
        $unique_id = $record['unique_id'];
        if($document_visible_name != ""){
          $contract_name = $document_visible_name;
        }else{
          $contract_name = $document_name;
        }
        $url = "https://beta.simplesign.io/avtal/downloadpdf/$offer_sent_id/$unique_id/1?iframe=1";
        $file = @file_get_contents($url);
        $encoded_content = base64_encode($file);
        $array = array('document_name' => $contract_name, 'encoded_data' => $encoded_content, 'mime_type' => 'application/pdf');
        return Response::json(['status'=>'success','result' => $array]);
        // $content1 = base64_decode($content);
        // header('Content-type: application/pdf');
        // echo ($content1);
        
    }

    public function postGetsuperofficetags($custName,$id,$token){
        $curl = curl_init();

        curl_setopt_array($curl, array(
        CURLOPT_URL => "https://sod2.superoffice.com/$custName/api/v1/Contact/$id",
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_ENCODING => "",
        CURLOPT_MAXREDIRS => 10,
        CURLOPT_TIMEOUT => 30,
        CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
        CURLOPT_CUSTOMREQUEST => "GET",
        CURLOPT_HTTPHEADER => array(
            "accept: application/json; charset=utf-8",
            "accept-language: en",
            "authorization: Bearer $token",
            "cache-control: no-cache",
            "content-type: application/json; charset=utf-8",
            "postman-token: e1128d37-81c4-c083-726a-6baf5b8f06fd"
        ),
        ));

        $response = curl_exec($curl);
        $err = curl_error($curl);

        curl_close($curl);

        if ($err) {
        echo "cURL Error #:" . $err;
        } else {
            return json_decode($response,true);
        }
    }
    public function anyChecking()
    {
        $utility     = new Utility();
        $post_data = json_encode(array('CheckUpdatePush' => 'Contract_Status','offer_status' => 3,'offerSentId'=>100,'Contract_Status_image'=>'overview_icons_02.png'), JSON_FORCE_OBJECT);
       echo  $utility->CheckUpdateServer($post_data);
    }
    /**
     *
     * fetch external Contract against UserAccessToken && External doc id 
     * @uses $_REQUEST['access_token']
     * @uses $_REQUEST['external_doc_id']
     * @return json result 
    **/
    public function postFetchexternalcontract()
    {
    $data        = Input::all();
    $utility     = new Utility();
    $domain_name = asset('/'); 
    if(!isset($data['access_token']) || $data['access_token'] == ""){
     return Response::json(['status'=>'error','result' => 'Invalid or missing  access_token']);
    }
    $external_doc_id = '';
    if(isset($data['external_doc_id']) && $data['external_doc_id'] != "")
    {
     $external_doc_id   = $data['external_doc_id'];
    }
    
    $user_id = $utility->getUserIdByAuthToken($data['access_token']);
    if($user_id)
    {
      //  $whereSent['offer_status']      = 4;   
        $whereSent['therefor_read']     = 0;   
        if(isset($data['superoffice']) && $data['superoffice'] == 1)
        $whereSent['sales_force_opportunity_id']   = $external_doc_id;    
        else    
        $whereSent['external_doc_id']   = $external_doc_id;

        $whereSent['sender_id']         = $user_id;
        $contract                       = $utility->getItem("offer_sent",$whereSent,array('id','user_details','name','visible_name','offer_status'));
        if($contract && isset($data['external_doc_id']) && $data['external_doc_id'] != "")
        {
            $contract                       = (array)$contract;

            $contract['name']               = $contract['name']!=''?Tcrypt::decrypter($contract['name']):'';
            $contract['visible_name']       = $contract['visible_name']!=''?Tcrypt::decrypter($contract['visible_name']):'';

            $Details = Offersentdetails::where('offer_sent_id', $contract['id'])->select("unique_id")->where('is_sender',1)->get()->toArray();
            //$contract['pdf_url']            = $domain_name.'textpress/downloadpdf/'.$contract['id'];
            $contract['offer_status']             = $contract['offer_status'];
            $contract['pdf_url']            = $domain_name.'avtal/downloadpdf/'.$contract['id'].'/'.$Details['unique_id'].'/';
            $contract['user_details']     = $contract['user_details']!=''?json_decode($contract['user_details']):'';
            
            return Response::json(['status'=>'success','result' =>$contract]);
        }
        else
        {     
            //$whereSent2['offer_status']      = 4;   
            $whereSent2['therefor_read']     = 0;   
            $whereSent2['sender_id']         = $user_id;
            $OffersentModel                  = new Offersent;
            $selectColumns                   = array('id', 'sender_id','user_details','visible_name', 'name', 'offer_status', 'offer_type', 'unique_id','external_doc_id');
            $pageLimit                       = (isset($data['pagelimit']) && $data['pagelimit']!=''?$data['pagelimit']:10);
            $currentPage                     = (isset($data['current_page']) && $data['current_page']!=''?$data['current_page']:0);
            $skipRecords                     = $currentPage*$pageLimit;
            $getoffers                       = $OffersentModel->select($selectColumns)
                                            ->orderBy('last_event', 'is', '0000-00-00 00:00:00')->orderBy('id', 'desc')->where($whereSent2)->where('external_doc_id','!=',0)->get()->toArray();
            //->skip($skipRecords)->take($pageLimit)->
            foreach($getoffers as $key => $eachOffer)
                    {
                  
                        $getoffers[$key]['simplesign_document_id'] = $getoffers[$key]['id']!=''?$getoffers[$key]['id']:'';
                         unset($getoffers[$key]['id']);
                        unset($getoffers[$key]['offer_type']);
                        $getoffers[$key]['name']=($eachOffer['name']!=''?Tcrypt::decrypter($eachOffer['name']):'');
                        if(isset($getoffers[$key]['visible_name'])){
                            $getoffers[$key]['visible_name']=($eachOffer['visible_name']!=''?Tcrypt::decrypter($eachOffer['visible_name']):'');
                        }

                       //$getoffers[$key]['pdf_url'] = $domain_name.'avtal/downloadpdf/'.$eachOffer['id'];
                       $Details = Offersentdetails::where('offer_sent_id', $eachOffer['id'])->select("unique_id")->where('is_sender',1)->get()->toArray();
                       $getoffers[$key]['pdf_url'] = $domain_name.'avtal/downloadpdf/'.$eachOffer['id'].'/'.$Details['unique_id'].'/';
                       
                       $getoffers[$key]['user_details'] = $getoffers[$key]['user_details']!=''?json_decode($getoffers[$key]['user_details']):'';
                    }     
            return Response::json(['status'=>'success','result' =>$getoffers]);                       
        }
    
    }
    else
    {
    return Response::json(['status'=>'error','result' =>'Mismatch access_token']);
    }
  
    }

    public function addOffersentdetailsapi($offerSentid,$recpid,$status,$sign_date,$sign_ip,$userdetails,$is_sender,$reciver_email,$firstname,$company,$invitation_order,$uniqid,$reqAttachments,$confirmation,$role,$id_attachment,$authentication,$paypal_amount,$pin_code,$invitation_type,$recipientSpecificDetails="",$specificSigningReminderDateHidden="",$viewingAndDownloading="") {

        $utility = new Utility();
        $offersentdetails['offer_sent_id'] = $offerSentid;
        $offersentdetails['customer_id'] = $recpid;
        $offersentdetails['offer_status'] = $status;
        $offersentdetails['sent_date']   = date("Y-m-d H:i:s");
        $offersentdetails['signed_date']   = $sign_date;
        $offersentdetails['sender_ip'] = $_SERVER['REMOTE_ADDR'];
        $offersentdetails['signed_ip'] = $sign_ip;
        $offersentdetails['user_details'] = Tcrypt::encrypter(json_encode($userdetails));
        $offersentdetails['unique_id'] = $uniqid;
        $offersentdetails['is_sender'] = $is_sender;
        $offersentdetails['email'] = Tcrypt::encrypter($reciver_email);
        $offersentdetails['first_name'] = $firstname;
        $offersentdetails['company'] = $company;
        $offersentdetails['invitation_order'] = $invitation_order;
        $offersentdetails['offer_confirmation'] = $confirmation;
        $offersentdetails['role'] = $role;
        $offersentdetails['id_attachments'] = $id_attachment;
        $offersentdetails['authentication_method'] = $authentication;
        $offersentdetails['invitation_type'] = $invitation_type;
        $offersentdetails['paypal_amount'] = $paypal_amount;
        $offersentdetails['invitation_email_send'] = 1;
        $offersentdetails['pin_code'] = $pin_code;
        $offersentdetails['request_attachment'] = $reqAttachments;
        
        //is_sender 0 is for when sendcontract function hit it's first insert data for sender then for recipient so it should only insert these values for recipient
        /* if($is_sender == 0) {
            $offersentdetails['recipient_specific_details_settings'] = json_encode($recipientSpecificDetails);
            $offersentdetails['specific_signing_reminder_date'] = $specificSigningReminderDateHidden;
            if(isset($viewingAndDownloading["viewingDownloading"]) && $viewingAndDownloading["viewingDownloading"] != "") {
                $offersentdetails['viewing_downloading'] = json_encode($viewingAndDownloading);
            } else {
                $offersentdetails['viewing_downloading'] = "";
            }
        } */

        $offer_detail_id = $utility->addItem("offer_send_details",$offersentdetails);
        return $offer_detail_id;
    }

    public function addOffersentapi($user_id, $due_date, $lang, $contractname, $reminder_dates, $content, $visible_name, $invitation_message, $confirmation_message, $retargeting_code, $attachments, $offer_doc_id=0, $requestAttachment="", $forwardAllowed=0, $documentChat=0, $document_quote=0, $document_custom_smsreminder="", $document_custom_emailreminder = "", $document_custom_invitaitonSms="", $document_custom_confirmaitonSms="", $video_link="", $video_title="", $documentfieldsjson=""){
        $utility = new Utility();
        $utility->getUserTimeZone($user_id);
        //if($_SERVER["HTTP_HOST"] == "beta.simplesign.io")
        {
            date_default_timezone_set('UTC');
        }

        $where['user_id'] = $user_id;
        $userdata = $utility->getParentDetails($user_id);
        $userArrar['first_name'] = $userdata->full_name;
        $userArrar['last_name'] = $userdata->second_name;
        $userArrar['company'] = $userdata->company;
        $userArrar['email'] = $userdata->email;
        $userArrar['reg_no'] = $userdata->reg_no;
        $userArrar['address'] = $userdata->address;
        $userArrar['telephone'] = $userdata->telephone;
        $userArrar['post_code'] = $userdata->post_code;
        $userArrar['city'] = $userdata->city;
        $user_details = json_encode($userArrar);
        
        $datetime = date("Y-m-d H:i:s");

        $offersent['sender_id'] = $user_id;
        $offersent['due_date'] = $due_date;
        $offersent['offer_id'] = $offer_doc_id;
        $offersent['language_id'] = $lang;
        $offersent['name'] = ($contractname!=''?Tcrypt::encrypter($contractname):'');
        //$offersent['reminder_date'] = $reminder_date;
        $offersent['reminder_dates'] = $reminder_dates;
        $offersent['reminder_sms_message'] = $document_custom_smsreminder;
        $offersent['reminder_email_message'] = $document_custom_emailreminder;
        $offersent['content']   = Tcrypt::encrypter($content);
        $offersent['created_date'] = $datetime;
        $offersent['last_event'] = $datetime;
        $offersent['offer_type']   = 1;
        $offersent['unique_id']   = uniqid();
        $offersent['user_details']   = $user_details;
        $offersent['visible_name'] = ($visible_name!=''?Tcrypt::encrypter($visible_name):'');
        $offersent['invitation_message'] = $invitation_message;
        $offersent['confirmation_message'] = $confirmation_message;
        $offersent['invitation_sms_message'] = $document_custom_invitaitonSms;
        $offersent['confirmation_sms_message'] = $document_custom_confirmaitonSms;
        $offersent['offer_status'] = 7;
        $offersent['retargeting_code'] = $retargeting_code;
        $offersent['attachments'] = $attachments;
        $offersent['request_attachment'] = (isset($requestAttachment) && $requestAttachment != "" ? $requestAttachment : "");
        $attachmentsArray = json_decode($attachments,true);
        $offersent['allow_forward'] = (isset($forwardAllowed) && $forwardAllowed != "" ? $forwardAllowed : "");
        $offersent['contract_chat'] = (isset($documentChat) && $documentChat != "" ? $documentChat : "");
        $offersent['hide_quote_pages'] = (isset($document_quote) && $document_quote != "" ? $document_quote : "");
        $offersent['video_link'] = $video_link;
        $offersent['video_title'] = $video_title;
        
        $offersent['documentfieldsjson'] = $documentfieldsjson;

        //if($_SERVER['HTTP_HOST'] == 'beta.simplesign.io') 
        {
            $parent_settings = Settings::where('user_id', $utility->getParent($user_id))->select('time_zone','time_format','date_format')->first();
            $timedateformat = json_encode( ['time_zone' => $parent_settings['time_zone'],'time_format'=>$parent_settings['time_format'],'date_format'=>$parent_settings['date_format']] );
            $offersent['timedateformat'] = $timedateformat;
        }
        $offer_sent_id = $utility->addItem("offer_sent",$offersent);
       
        return $offer_sent_id;
    }

    public function createPdfContract($offerSentid, $destination,$name,$file_name,$access_token,$pdfcontent,$countPages=0,$isapi='',$pdfImage='',$data=null){

        $domain_name =  asset('/');
        $utility = new Utility();
        $user_id = $utility->getUserIdByAuthToken($access_token);

        //ws
        $parent_id=$utility->getParent($user_id);
        $language = Userinfo::where('user_id', '=', $user_id)->select('language')->first();  
        $lang_id = $language['language']; 
        $getTranslation = $utility->GeneralTranslations($lang_id);
        //end ws

        $orderArray = array();
        if(isset($pdfcontent) && $pdfcontent != ''){
            $pdfcontent = Tcrypt::decrypter($pdfcontent);
        }
        if(isset($offerid) && $offerid >0 ){
            $where['id'] = $offerid;
            $offerOrder = $utility->getItem("offer_docs",$where,'order');
            $orderArray = json_decode($offerOrder->order);
            $countPages = count($orderArray);
        }
        
        $editorVersion = "";
        if($offerSentid == 0){
            $editorVersion = "longpage";
        }
        // for api only
        $documentfieldsHTML = '';
        if($isapi != '' && $isapi == 'isapi') {
            $editorVersion = "longpage";
            //Making Document Fields START (RJ)
            if($pdfImage == 1 && isset($data['documentfields']) && !empty($data['documentfields']) && $this->is_JSON($data['documentfields'])) {
                $documentFields = json_decode($data['documentfields'], true);
                foreach($documentFields as $docFieldKey => $docFieldValue) {
                    if(isset($docFieldValue['document_fields'])){
                        foreach($docFieldValue['document_fields'] as $documentFieldsKey => $documentFieldsValue) {
                            $documentfieldsHTML .= '
                                                    <div class="formElement hide" dynamic_id="'.uniqid().'">
                                                        <div class="text documentField created_from_send_api" apiattribute="'.$documentFieldsKey.'" selectedtype="'.$documentFieldsKey.'">
                                                            <h4>'.$documentFieldsValue.'</h4>
                                                        </div>
                                                    </div>
                                                    ';
                        }
                    }
                }
            }
            //Making Document Fields END (RJ)
        }

        $uniqid = uniqid();
        $image_file = $destination.'/'.$name;


        $pdf_image_loc = public_path().'/uploads/contractpdf/contractpdfimage/';
        $pdf_image = 'pdfimage_'.$uniqid;
        
        
        $file_open = fopen($image_file, 'r');
        $content = fread($file_open, File::size($image_file));
        //return $pages;
        $content = addslashes($content);
        $pages = preg_match_all("/\/Page\W/", $content);
        $ext = ".png";
        
        //return $pages;
        $extensions = explode(".", $file_name);
        
        $end_extensions = end($extensions);
        array_pop($extensions);
        $template_name = implode('.', $extensions);
        $isFromApi = '';
        $pdfImageResponse = [];
        if($isapi != '') {
            $pdfLink = 'uploads/contractpdf/'.$name;
            $tagsdata = array();
            $tagsdata2 = array();
            $out = array();

            $cmd = 'pdfgrep -n  "#signer" '.$pdfLink;
             exec($cmd,$out, $return_var);
            foreach($out as $i) {
                $explodeRes = explode(':',$i);
                if(!in_array($explodeRes[0],$tagsdata)){
                    array_push($tagsdata,trim($explodeRes[0]));
                }
                if(!in_array($i,$tagsdata2)){
                    array_push($tagsdata2,$i);
                }
            }
            $tagsdata = json_encode($tagsdata);
            $tagsdata2 = json_encode($tagsdata2);
            $isFromApi = "<input type='hidden' class='isfromapi' name='isfromapi' value='1' apiname='senddocument' apiversion='v3' tagsdata='".$tagsdata."' tagsdata2='".$tagsdata2."'>";
        }
        if(in_array(strtolower($end_extensions),$this->allowed_types)){
            if($pages>1){
                exec("gs -dSAFER -dBATCH -dNOPAUSE -sDEVICE=png16m -dDownScaleFactor=3 -r600 -sOutputFile=".$pdf_image_loc.$pdf_image."-%02d".$ext." ".$image_file);
                $pdfcontent = '';
                for($i=1;$i<=$pages;$i++){
                    $pageno = $countPages + $i;
                    $imageno = sprintf('%02d', $i);
                    $pdfname = $pdf_image."-".$imageno.$ext;
                    $imgPath = $pdf_image_loc.$pdfname;
                    if(!file_exists($imgPath)){continue;}//Skip Not Found Pages(RJ)

                    $utility->compressImage($imgPath, $imgPath, 95);

                    $pdfData['user_id'] = $user_id;
                    $pdfData['created_date'] = date("Y-m-d H:i:s");
                    $userpdfid = $utility->addItem("pdf",$pdfData);

                    //Uploading to Google Cloud Server
                    uploadToGCS($imgPath,$user_id.'/offerdata',$pdfname,env('simplesignoffersBucket'));

                    //Deleing uploaded file from local ftp
                    if(file_exists($imgPath)){unlink($imgPath);}
                    $newPath = $utility->get_GCS_url($user_id,'offerdata',$pdfname);
                    //100% !important
                    //$pdfcontent .= "<div class='template_container template_container_new new_padding_template template_container_new browsweZoom dynamicPage".$pageno."' lastelem='0' lastborder='0' dynamicPage='".$pageno."' type='1'  zoomin='0' zoomout='0' contentid='".$userpdfid."' style='background-size: 100% !important;background-position: 50% 0%;background-repeat: no-repeat;width:100%;height:100%;background-image:url(".$newPath.") !important'>$isFromApi</div>";
                    if($editorVersion == "longpage")
                    {
                        if($i==1)
                            $pdfcontent .= "<div class='template_container long-pdf template_container_new new_padding_template browsweZoom dynamicPage".$pageno." long-pdf ui-sortable ui-droppable' lastelem='0' lastborder='0' dynamicPage='".$pageno."' type='1' contentid='".$userpdfid."'  zoomin='0' zoomout='0' style='' contenteditable='false'>".$isFromApi;

                            $pdfcontent .= '<div class="sortableContainerContentBox content_box_div contentSort marginbottom140">
                            '.$documentfieldsHTML.'
                            <div class="pdfbg" style="background-image: url('.$newPath.')"></div>
                            <div class="pdfUploadloaderContainer"><div class="loader vertical-align-middle loader-circle signingPageLoader" type="default" style=""></div></div>    
    
                            <div class="highlightSortContentBox"><i class="fa fa-bars" aria-hidden="true"></i><p>Text</p></div>
                            <div class="fieldElementRes box-target content_box_divInner" child="0" style="position: relative !important;">
                            <div class="box-inner-container ui-droppable" style="min-height: inherit;width:100%; top:0;left:0;outline: none;" contenteditable="false">
                                <div class="summernote summernote-new content_box_div_new autopdfheightclass">
                                    <p><br></p>
                                </div>
                                    </div>
                            </div>
                            <div class="insert_box_images topIcons contentBoxTopIcons" style="padding-right: 0;right: inherit;left: 0;" contenteditable="false">
                                <i class="fa fa-file-text sortContentBox" aria-hidden="true"></i>
                            </div>
                            <div class="insert_box_images topIcons contentBoxTopIcons" style="padding-right: 0" contenteditable="false">
                                <i class="fa fa-ellipsis-v hide" aria-hidden="true"></i>
    
                                <div class="btn-group">
                                    <button type="button" class="btn btn-outline btn-default dropdown-toggle btn-sm" id="exampleSizingDropdown3" data-toggle="dropdown" aria-expanded="true" style="background: no-repeat;border: none;box-shadow: none;padding: 0;width: 100%;">
                                    <i class="icon wb-more-horizontal" aria-hidden="true" style="margin: 0;display: inline;"></i>
                                    </button>
                                    <ul class="dropdown-menu dropdownMenuContentBox" aria-labelledby="exampleSizingDropdown3" role="menu" style="left: inherit;right: 0;">
                                    </ul>
                                </div>
                            </div>
                            </div>';
                        
                        if($i==$pages)
                            $pdfcontent .= "</div>";
                    }else{
                        $pdfcontent .= "<div class='template_container template_container_new new_padding_template template_container_new browsweZoom dynamicPage".$pageno." long-pdf ui-sortable ui-droppable' lastelem='0' lastborder='0' dynamicPage='".$pageno."' type='1'  zoomin='0' zoomout='0' contentid='".$userpdfid."' style='background-size: 100% !important;background-position: 50% 0%;background-repeat: no-repeat;width:100%;height:100%;background-image:url(".$newPath.") !important' contenteditable='false'>$isFromApi</div>";
                    }
                    //$pdfImage $pdfImageResponse
                    if($pdfImage == 1) {
                        array_push($pdfImageResponse, $newPath);
                    }
                    //updating data to pdf table for content SaveSendContract functionality
                    $where1['id'] = $userpdfid;
                    $pdfdata1['content'] = Tcrypt::encrypter($pdfcontent);
                    $utility->updateItem("pdf",$where1,$pdfdata1);
                    array_push($orderArray,(object) array('type'=>'pdf', 'contentid'=> $userpdfid));
                }
            }else{
                
                exec("gs -dSAFER -dBATCH -dNOPAUSE -sDEVICE=png16m -dDownScaleFactor=3 -r600 -sOutputFile=".$pdf_image_loc.$pdf_image.$ext." ".$image_file);
                $pageno = $countPages + 1;

                //inserting data to pdf table for content SaveSendContract functionality
                $pdfData['user_id'] = $user_id;
                $pdfData['created_date'] = date("Y-m-d H:i:s");
                $userpdfid = $utility->addItem("pdf",$pdfData);
                $pdfname = $pdf_image.$ext;
                $imgPath = $pdf_image_loc.$pdfname;

                $utility->compressImage($imgPath, $imgPath, 95);

                //Uploading to Google Cloud Server
                uploadToGCS($imgPath,$user_id.'/offerdata',$pdfname,env('simplesignoffersBucket'));

                //Deleing uploaded file from local ftp
                //if(file_exists($imgPath)){unlink($imgPath);}
                if(file_exists($imgPath)){unlink($imgPath);}
                $newPath = $utility->get_GCS_url($user_id,'offerdata',$pdfname);

                //$pdfcontent .= "<div class='template_container template_container_new new_padding_template template_container_new browsweZoom dynamicPage".$pageno."' lastelem='0' lastborder='0' dynamicPage='".$pageno."' type='1'  zoomin='0' zoomout='0' contentid='".$userpdfid."' style='background-size: 100% !important;background-position: 50% 0%;background-repeat: no-repeat;width:100%;height:100%;background-image:url(".$newPath.") !important'>$isFromApi</div>";
                if($editorVersion == "longpage") {
                    $pdfcontent = "<div class='template_container template_container_new new_padding_template browsweZoom dynamicPage".$pageno." long-pdf ui-sortable ui-droppable' lastelem='0' lastborder='0' dynamicPage='".$pageno."' type='1' contentid='".$userpdfid."'  zoomin='0' zoomout='0' style='' contenteditable='false'>".$isFromApi;
                    
                    $pdfcontent .= '<div class="sortableContainerContentBox content_box_div contentSort marginbottom140">
                        '.$documentfieldsHTML.'
                        <div class="pdfbg" style="background-image: url('.$newPath.')"></div>
                        <div class="pdfUploadloaderContainer"><div class="loader vertical-align-middle loader-circle signingPageLoader" type="default" style=""></div></div>    
                        
                        <div class="highlightSortContentBox"><i class="fa fa-bars" aria-hidden="true"></i><p>Text</p></div>
                        <div class="fieldElementRes box-target content_box_divInner" child="0" style="position: relative !important;">
                        <div class="box-inner-container ui-droppable" style="min-height: inherit;width:100%; top:0;left:0;outline: none;" contenteditable="false">
                            <div class="summernote summernote-new content_box_div_new autopdfheightclass">
                                <p><br></p>
                            </div>
                                </div>
                        </div>
                        <div class="insert_box_images topIcons contentBoxTopIcons" style="padding-right: 0;right: inherit;left: 0;" contenteditable="false">
                            <i class="fa fa-file-text sortContentBox" aria-hidden="true"></i>
                        </div>
                        <div class="insert_box_images topIcons contentBoxTopIcons" style="padding-right: 0" contenteditable="false">
                            <i class="fa fa-ellipsis-v hide" aria-hidden="true"></i>

                            <div class="btn-group">
                                <button type="button" class="btn btn-outline btn-default dropdown-toggle btn-sm" id="exampleSizingDropdown3" data-toggle="dropdown" aria-expanded="true" style="background: no-repeat;border: none;box-shadow: none;padding: 0;width: 100%;">
                                <i class="icon wb-more-horizontal" aria-hidden="true" style="margin: 0;display: inline;"></i>
                                </button>
                                <ul class="dropdown-menu dropdownMenuContentBox" aria-labelledby="exampleSizingDropdown3" role="menu" style="left: inherit;right: 0;">
                                </ul>
                            </div>
                        </div>
                        </div>';

                    $pdfcontent .= "</div>";
                }else{
                    $pdfcontent .= "<div class='template_container template_container_new new_padding_template template_container_new browsweZoom dynamicPage".$pageno." long-pdf ui-sortable ui-droppable' lastelem='0' lastborder='0' dynamicPage='".$pageno."' type='1'  zoomin='0' zoomout='0' contentid='".$userpdfid."' style='background-size: 100% !important;background-position: 50% 0%;background-repeat: no-repeat;width:100%;height:100%;background-image:url(".$newPath.") !important' contenteditable='false'>$isFromApi</div>";
                }

                //$pdfImage $pdfImageResponse
                if($pdfImage == 1) {
                    array_push($pdfImageResponse, $newPath);
                }
                //updating data to pdf table for content SaveSendContract functionality
                $where1['id'] = $userpdfid;
                $pdfdata1['content'] = Tcrypt::encrypter($pdfcontent);
                $utility->updateItem("pdf",$where1,$pdfdata1);
                array_push($orderArray,(object) array('type'=>'pdf', 'contentid'=> $userpdfid));
            }
        }
        

        if(isset($offerSentid) && $offerSentid >0 ){
            $where['id'] = $offerSentid;
            $orderData['content'] = Tcrypt::encrypter($pdfcontent);
            $utility->updateItem("offer_sent",$where,$orderData);
            
        }else{
            //$offerSentid = $this->addOffersent($user_id,$duedate=0,$lang='',$template_name,$remdate = 0,$pdfcontent,$template_name,$invitation_message='',$confirmation_message='',$retargeting_code='',$attachment='',$offer_doc_id=0);
            $offerSentid = $this->addOffersent($user_id,$duedate=0,$lang='',$template_name,$remdate = 0,$pdfcontent,$template_name,$invitation_message='',$confirmation_message='',$retargeting_code='',$attachment='',$offer_doc_id=0,  $requestAttachment="", $forwardAllowed=0, $documentChat=0, $document_quote=0, $document_custom_smsreminder="", $document_custom_emailreminder = "", $document_custom_invitaitonSms="", $document_custom_confirmaitonSms="", $video_link="", $video_title="", $documentfieldsjson="",$editorVersion);
            
        }
        //Deleting PDF Template file from FTP(RJ)
        if(file_exists($image_file)){unlink($image_file);}

        $return['offersentid'] = $offerSentid;
        $return['pages'] = $pages;
        if($pdfImage == 1) {
            $return['responsePDFImages'] = $pdfImageResponse;
        }
        return $return;
    }

    public function createpdfcontracttesting($offerSentid, $destination,$name,$file_name,$access_token,$pdfcontent,$countPages=0,$isapi='',$pdfImage='',$data=null) {
        
	    $domain_name =  asset('/');	
        $utility = new Utility();
        $user_id = $utility->getUserIdByAuthToken($access_token);

        //ws
        $parent_id=$utility->getParent($user_id);
        $language = Userinfo::where('user_id', '=', $user_id)->select('language')->first();  
        $lang_id = $language['language']; 
        $getTranslation = $utility->GeneralTranslations($lang_id);
        //end ws

        $orderArray = array();
        if(isset($pdfcontent) && $pdfcontent != ''){
            $pdfcontent = Tcrypt::decrypter($pdfcontent);
        }
        if(isset($offerid) && $offerid >0 ){
            $where['id'] = $offerid;
            $offerOrder = $utility->getItem("offer_docs",$where,'order');
            $orderArray = json_decode($offerOrder->order);
            $countPages = count($orderArray);
        }
        
        $editorVersion = "";
        // if( $offerSentid == 0 && ($_SERVER["HTTP_HOST"] == "beta.simplesign.io" || $_SERVER["HTTP_HOST"] == "testenv.simplesign.io" || $_SERVER["HTTP_HOST"] == "acceptance.simplesign.io") )
        if($offerSentid == 0)
        {
            $editorVersion = "longpage";
        }
        // for api only
        $documentfieldsHTML = '';
        if($isapi != '' && $isapi == 'isapi') {
            $editorVersion = "longpage";
            //Making Document Fields START (RJ)
            if($pdfImage == 1 && isset($data['documentfields']) && !empty($data['documentfields']) && $this->is_JSON($data['documentfields'])) {
                $documentFields = json_decode($data['documentfields'], true);
                foreach($documentFields as $docFieldKey => $docFieldValue) {
                    if(isset($docFieldValue['document_fields'])){
                        foreach($docFieldValue['document_fields'] as $documentFieldsKey => $documentFieldsValue) {
                            $documentfieldsHTML .= '
                                                    <div class="formElement hide" dynamic_id="'.uniqid().'">
                                                        <div class="text documentField created_from_send_api" apiattribute="'.$documentFieldsKey.'" selectedtype="'.$documentFieldsKey.'">
                                                            <h4>'.$documentFieldsValue.'</h4>
                                                        </div>
                                                    </div>
                                                    ';
                        }
                    }
                }
            }
            //Making Document Fields END (RJ)
        }

        $uniqid = uniqid();
        $image_file = $destination.'/'.$name;
        //return $image_file;
        $pdf_image_loc = public_path().'/uploads/contractpdf/contractpdfimage/';
        $pdf_image = 'pdfimage_'.$uniqid;
        
        
        
        $file_open = fopen($image_file, 'r');
        $content = fread($file_open, File::size($image_file));
        $content = addslashes($content);
        $pages = preg_match_all("/\/Page\W/", $content);
        //return $pages;
        $ext = ".png";
        $extensions = explode(".", $file_name);

        $end_extensions = end($extensions);
       // return  $end_extensions;
        array_pop($extensions);
        $template_name = implode('.', $extensions);
        $isFromApi = '';
        //from api
        if($isapi != '') {
            $pdfLink = 'uploads/contractpdf/'.$name;
            $tagsdata = array();
            $tagsdata2 = array();
            $out = array();

            $cmd = 'pdfgrep -n  "#signer" '.$pdfLink;
             exec($cmd,$out, $return_var);
            foreach($out as $i) {
                $explodeRes = explode(':',$i);
                if(!in_array($explodeRes[0],$tagsdata)){
                    array_push($tagsdata,$explodeRes[0]);
                }
                if(!in_array($i,$tagsdata2)){
                    array_push($tagsdata2,$i);
                }
            }
            $tagsdata = json_encode($tagsdata);
            $tagsdata2 = json_encode($tagsdata2);
            $isFromApi = "<input type='hidden' class='isfromapi' name='isfromapi' value='1' apiname='senddocument' apiversion='v3' tagsdata='".$tagsdata."' tagsdata2='".$tagsdata2."'>";
        }
        if(in_array(strtolower($end_extensions),$this->allowed_types)){

            if($pages>1){
                exec("gs -dSAFER -dBATCH -dNOPAUSE -sDEVICE=png16m -dDownScaleFactor=3 -r600 -sOutputFile=".$pdf_image_loc.$pdf_image."-%02d".$ext." ".$image_file);
                
                $pdfcontent = '';

                for($i=1;$i<=$pages;$i++){
                    $pageno = $countPages + $i;
                    $imageno = sprintf('%02d', $i);
                    $pdfname = $pdf_image."-".$imageno.$ext;
                    $imgPath = $pdf_image_loc.$pdfname;
                    if(!file_exists($imgPath)){continue;}//Skip Not Found Pages(RJ)

                    $utility->compressImage($imgPath, $imgPath, 95);
                    // if($editorVersion=="longpage")
                    // {
                    //     try
                    //     {
                    //         $utility->trimImage($imgPath);
                    //     }
                    //     catch(\Exception $e)
                    //     {
                    //         //error
                    //     }
                    // }

                    $pdfData['user_id'] = $user_id;
                    $pdfData['created_date'] = date("Y-m-d H:i:s");
                    $userpdfid = $utility->addItem("pdf",$pdfData);

                    //Uploading to Google Cloud Server
                    uploadToGCS($imgPath,$user_id.'/offerdata',$pdfname,env('simplesignoffersBucket'));

                    //Deleing uploaded file from local ftp
                    if(file_exists($imgPath)){unlink($imgPath);}
                    $newPath = $utility->get_GCS_url($user_id,'offerdata',$pdfname);
                    //100% !important
                    // if( $_SERVER["HTTP_HOST"] == "beta.simplesign.io" || $_SERVER["HTTP_HOST"] == "testenv.simplesign.io"  || $_SERVER["HTTP_HOST"] == "acceptance.simplesign.io")
                    if($editorVersion == "longpage")
                    {
                        if($i==1)
                            $pdfcontent .= "<div class='template_container long-pdf template_container_new new_padding_template browsweZoom dynamicPage".$pageno."' lastelem='0' lastborder='0' dynamicPage='".$pageno."' type='1' contentid='".$userpdfid."'  zoomin='0' zoomout='0' style=''>".$isFromApi;

                            $pdfcontent .= '<div class="sortableContainerContentBox content_box_div contentSort marginbottom140">

                            <div class="pdfbg" style="background-image: url('.$newPath.')"></div>
                            <div class="pdfUploadloaderContainer"><div class="loader vertical-align-middle loader-circle signingPageLoader" type="default" style=""></div></div>    
    
                            <div class="highlightSortContentBox"><i class="fa fa-bars" aria-hidden="true"></i><p>Text</p></div>
                            <div class="fieldElementRes box-target content_box_divInner" child="0" style="position: relative !important;">
                            <div class="box-inner-container" style="min-height: inherit;width:100%; top:0;left:0;outline: none;">
                                <div class="summernote summernote-new content_box_div_new autopdfheightclass">
                                    <p><br></p>
                                </div>
                                    </div>
                            </div>
                            <div class="insert_box_images topIcons contentBoxTopIcons" style="padding-right: 0;right: inherit;left: 0;" contenteditable="false">
                                <i class="fa fa-file-text sortContentBox" aria-hidden="true"></i>
                            </div>
                            <div class="insert_box_images topIcons contentBoxTopIcons" style="padding-right: 0" contenteditable="false">
                                <i class="fa fa-ellipsis-v hide" aria-hidden="true"></i>
    
                                <div class="btn-group">
                                    <button type="button" class="btn btn-outline btn-default dropdown-toggle btn-sm" id="exampleSizingDropdown3" data-toggle="dropdown" aria-expanded="true" style="background: no-repeat;border: none;box-shadow: none;padding: 0;width: 100%;">
                                    <i class="icon wb-more-horizontal" aria-hidden="true" style="margin: 0;display: inline;"></i>
                                    </button>
                                    <ul class="dropdown-menu dropdownMenuContentBox" aria-labelledby="exampleSizingDropdown3" role="menu" style="left: inherit;right: 0;">
                                    </ul>
                                </div>
                            </div>
                            </div>';
                        
                        if($i==$pages)
                            $pdfcontent .= "</div>";
                    }else{
                        $pdfcontent .= "<div class='template_container template_container_new new_padding_template template_container_new browsweZoom dynamicPage".$pageno."' lastelem='0' lastborder='0' dynamicPage='".$pageno."' type='1'  zoomin='0' zoomout='0' contentid='".$userpdfid."' style='background-size: 100% !important;background-position: 50% 0%;background-repeat: no-repeat;width:100%;height:100%;background-image:url(".$newPath.") !important'>$isFromApi</div>";
                    }
                    //updating data to pdf table for content SaveSendContract functionality
                    $where1['id'] = $userpdfid;
                    $pdfdata1['content'] = Tcrypt::encrypter($pdfcontent);
                    $utility->updateItem("pdf",$where1,$pdfdata1);
                    array_push($orderArray,(object) array('type'=>'pdf', 'contentid'=> $userpdfid));
                }
            }
            else{
                exec("gs -dSAFER -dBATCH -dNOPAUSE -sDEVICE=png16m -dDownScaleFactor=3 -r600 -sOutputFile=".$pdf_image_loc.$pdf_image.$ext." ".$image_file);
                $pageno = $countPages + 1;

                //inserting data to pdf table for content SaveSendContract functionality
                $pdfData['user_id'] = $user_id;
                $pdfData['created_date'] = date("Y-m-d H:i:s");
                $userpdfid = $utility->addItem("pdf",$pdfData);
                $pdfname = $pdf_image.$ext;
                $imgPath = $pdf_image_loc.$pdfname;

                $utility->compressImage($imgPath, $imgPath, 95);
                // if($editorVersion=="longpage")
                // {
                //     try
                //     {
                //         $utility->trimImage($imgPath);
                //     }
                //     catch(\Exception $e)
                //     {
                //         //error
                //     }
                // }

                //Uploading to Google Cloud Server
                uploadToGCS($imgPath,$user_id.'/offerdata',$pdfname,env('simplesignoffersBucket'));

                //Deleing uploaded file from local ftp
                if(file_exists($imgPath)){unlink($imgPath);}
                $newPath = $utility->get_GCS_url($user_id,'offerdata',$pdfname);

                //if( $_SERVER["HTTP_HOST"] == "beta.simplesign.io" || $_SERVER["HTTP_HOST"] == "testenv.simplesign.io" || $_SERVER["HTTP_HOST"] == "acceptance.simplesign.io")
                if($editorVersion == "longpage") {
                    $pdfcontent = "<div class='template_container template_container_new new_padding_template browsweZoom dynamicPage".$pageno."' lastelem='0' lastborder='0' dynamicPage='".$pageno."' type='1' contentid='".$userpdfid."'  zoomin='0' zoomout='0' style=''>".$isFromApi;
                    
                    $pdfcontent .= '<div class="sortableContainerContentBox content_box_div contentSort marginbottom140">

                        <div class="pdfbg" style="background-image: url('.$newPath.')"></div>
                        <div class="pdfUploadloaderContainer"><div class="loader vertical-align-middle loader-circle signingPageLoader" type="default" style=""></div></div>    

                        <div class="highlightSortContentBox"><i class="fa fa-bars" aria-hidden="true"></i><p>Text</p></div>
                        <div class="fieldElementRes box-target content_box_divInner" child="0" style="position: relative !important;">
                        <div class="box-inner-container" style="min-height: inherit;width:100%; top:0;left:0;outline: none;">
                            <div class="summernote summernote-new content_box_div_new autopdfheightclass">
                                <p><br></p>
                            </div>
                                </div>
                        </div>
                        <div class="insert_box_images topIcons contentBoxTopIcons" style="padding-right: 0;right: inherit;left: 0;" contenteditable="false">
                            <i class="fa fa-file-text sortContentBox" aria-hidden="true"></i>
                        </div>
                        <div class="insert_box_images topIcons contentBoxTopIcons" style="padding-right: 0" contenteditable="false">
                            <i class="fa fa-ellipsis-v hide" aria-hidden="true"></i>

                            <div class="btn-group">
                                <button type="button" class="btn btn-outline btn-default dropdown-toggle btn-sm" id="exampleSizingDropdown3" data-toggle="dropdown" aria-expanded="true" style="background: no-repeat;border: none;box-shadow: none;padding: 0;width: 100%;">
                                <i class="icon wb-more-horizontal" aria-hidden="true" style="margin: 0;display: inline;"></i>
                                </button>
                                <ul class="dropdown-menu dropdownMenuContentBox" aria-labelledby="exampleSizingDropdown3" role="menu" style="left: inherit;right: 0;">
                                </ul>
                            </div>
                        </div>
                        </div>';

                    $pdfcontent .= "</div>";
                }else{
                    $pdfcontent .= "<div class='template_container template_container_new new_padding_template template_container_new browsweZoom dynamicPage".$pageno."' lastelem='0' lastborder='0' dynamicPage='".$pageno."' type='1'  zoomin='0' zoomout='0' contentid='".$userpdfid."' style='background-size: 100% !important;background-position: 50% 0%;background-repeat: no-repeat;width:100%;height:100%;background-image:url(".$newPath.") !important'>$isFromApi</div>";
                }

                //updating data to pdf table for content SaveSendContract functionality
                $where1['id'] = $userpdfid;
                $pdfdata1['content'] = Tcrypt::encrypter($pdfcontent);
                $utility->updateItem("pdf",$where1,$pdfdata1);
                array_push($orderArray,(object) array('type'=>'pdf', 'contentid'=> $userpdfid));
            }
        }
        

        if(isset($offerSentid) && $offerSentid >0 ){
            $where['id'] = $offerSentid;
            $orderData['content'] = Tcrypt::encrypter($pdfcontent);
            $utility->updateItem("offer_sent",$where,$orderData);
            
        }else{

            //$offerSentid = $this->addOffersent($user_id,$duedate=0,$lang='',$template_name,$remdate = 0,$pdfcontent,$template_name,$invitation_message='',$confirmation_message='',$retargeting_code='',$attachment='',$offer_doc_id=0);
            $offerSentid = $this->addOffersent($user_id,$duedate=0,$lang='',$template_name,$remdate = 0,$pdfcontent,$template_name,$invitation_message='',$confirmation_message='',$retargeting_code='',$attachment='',$offer_doc_id=0,  $requestAttachment="", $forwardAllowed=0, $documentChat=0, $document_quote=0, $document_custom_smsreminder="", $document_custom_emailreminder = "", $document_custom_invitaitonSms="", $document_custom_confirmaitonSms="", $video_link="", $video_title="", $documentfieldsjson="",$editorVersion);
        }
        //Deleting PDF Template file from FTP(RJ)
        if(file_exists($image_file)){unlink($image_file);}

        $return['offersentid'] = $offerSentid;
        $return['pages'] = $pages;
        return $return;
    
    }

    public function getPdffromar(){}

    public function postAddpeopleaquira() {
            //getFetchdocumentfields
            //postRemembersettings
            $data = Input::all();
            $utility = new Utility();
            $domain_name = asset('/');
    
            if(isset($data['access_token']) && $data['access_token'] != '') {
                $access_token = $data['access_token'];
            } else {
                return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
            }
            
            $user_id = $utility->getUserIdByAuthToken($access_token);
            if($user_id > 0) {
                if(isset($data['people']) && $data['people'] != '') {
                    if($this->is_JSON($data['people'])) {
                        $peoples = json_decode($data['people'], true);
                    } else {
                        return Response::json(['status' => 'error', 'result' => 'People information is invalid format, JSON is required']);
                    }
    
                    $newPeoplesIds = [];
                    foreach($peoples as $peoplesKey => $peoplesValue) {
                        $fullName = $firstName = $lastName = $email = $personNr = $mobileNo = $address = $zipcode = $city = $country = $extraFieldsNew = $extraFieldsVariable = '';
                        $peoplesValue['people_fields']['email'] = trim(preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $peoplesValue['people_fields']['email']));
                        $firstName = (isset($peoplesValue['people_fields']['first_name']) && $peoplesValue['people_fields']['first_name'] != '' ? Tcrypt::encrypter(trim($peoplesValue['people_fields']['first_name'])) : '');
                        $lastName = (isset($peoplesValue['people_fields']['last_name']) && $peoplesValue['people_fields']['last_name'] != '' ? Tcrypt::encrypter(trim($peoplesValue['people_fields']['last_name'])) : '');
                        $email = (isset($peoplesValue['people_fields']['email']) && $peoplesValue['people_fields']['email'] !=  '' && filter_var($peoplesValue['people_fields']['email'], FILTER_VALIDATE_EMAIL) ? trim(Tcrypt::encrypter(strtolower($peoplesValue['people_fields']['email']))) : '');
                        $personNr = (isset($peoplesValue['people_fields']['personal_no']) ? trim($peoplesValue['people_fields']['personal_no']) : '');
                        $mobileNo = (isset($peoplesValue['people_fields']['mobile']) ? trim($peoplesValue['people_fields']['mobile']) : '');
                        $address = (isset($peoplesValue['people_fields']['address']) ? trim($peoplesValue['people_fields']['address']) : '');
                        $zipcode = (isset($peoplesValue['people_fields']['zipcode']) ? trim($peoplesValue['people_fields']['zipcode']) : '');
                        $city = (isset($peoplesValue['people_fields']['city']) ? trim($peoplesValue['people_fields']['city']) : '');
                        $country = (isset($peoplesValue['people_fields']['country']) ? trim($peoplesValue['people_fields']['country']) : '');
                        $organizationId = 0;
                        if(isset($peoplesValue['people_fields']['organization_name']) && $peoplesValue['people_fields']['organization_name'] != '') {
                            $getOrganizationId = Organizations::where('name', Tcrypt::encrypter($peoplesValue['people_fields']['organization_name']))->where('registerby', $user_id)->select('id')->first();
                            if($getOrganizationId) {
                                $organizationId = $getOrganizationId['id'];
                            } else {
                                $organizationId = Organizations::insertGetId(['name' => Tcrypt::encrypter($peoplesValue['people_fields']['organization_name']), 'registerby' => $user_id, 'created_date' => date('Y-m-d H:i:s')]);
                            }
                        }
                        $getEmail = Recipient::where('registerby', $user_id)->where('email', $email)->count();
                        if($getEmail > 0){
                            $recinfo =  Recipient::where('registerby', $user_id)->where('email', $email)->first();
                            Recipient::where('registerby', $user_id)->where("id",$recinfo["id"])->update(["organization_id"=> $organizationId]);
                            $peoplesId = $recinfo["id"];
                        }else{
                            $peoplesId = Recipient::insertGetId([
                                'organization_id' => $organizationId,
                                'full_name' => $firstName,
                                'last_name' => $lastName,
                                'email' => $email,
                                'personnr' => $personNr,
                                'mobile' => $mobileNo,
                                'address' => $address,
                                'zip' => $zipcode,
                                'city' => $city,
                                'country' => $country,
                                //'extra_fields_new' => $extraFieldsNew,
                                'registerby' => $user_id
                            ]);
                        }
                        
                        if($peoplesId) {
                            array_push($newPeoplesIds, $peoplesId);
                        }
                    }//end foreach loop
    
                    if(count($newPeoplesIds) > 0) {
                        return Response::json(['status' => 'success', 'result' => $newPeoplesIds]);
                    } else {
                        return Response::json(['status' => 'error', 'result' => 'Already added']);
                    }
                } else {
                    return Response::json(['status' => 'error', 'result' => 'Missing or invalid people information']);
                }
            } else {
                return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
            }
        }

        public function postCofigurewebhook() {
            $data = Input::all();
            $utility = new Utility();
            $domain_name = asset('/');

            //access_token validation starting
            if(isset($data['access_token']) && $data['access_token'] != '') {
                $access_token = $data['access_token'];
            } else {
                return Response::json(['status'=>'error','result' => 'access_token is missing']);
            }
            //access_token validation ending

            //webhook_url validation starting
            if(isset($data['webhook_url']) && $data['webhook_url'] != '') {
                $webhook_url = $data['webhook_url'];
            } else {
                return Response::json(['status'=>'error','result' => 'webhook_url is missing']);
            }
            //webhook_url validation ending

            $user_id = $utility->getUserIdByAuthToken($access_token);
            $parent_id = $utility->getParent($user_id);

            if($user_id > 0) {
                if(isset($data['webhook_trigger']) && !empty($data['webhook_trigger'])) {
                    if($this->is_JSON($data['webhook_trigger'])) {
                        $webHookCall = json_decode($data['webhook_trigger'], true);
                        $jsonArray = [];
                        foreach($webHookCall as $webHookCallKey => $webHookCallValue) {
                            $getKeyForAssign = $getKeyValueForAssign = '';
                            if($webHookCallKey == 'when_document_signed') {
                                $getKeyForAssign = 'for_signeddocs';
                            } if($webHookCallKey == 'when_document_rejected') {
                                $getKeyForAssign = 'for_rejecteddocs';
                            } if($webHookCallKey == 'when_document_sent') {
                                $getKeyForAssign = 'for_senddoc';
                            } if($webHookCallKey == 'when_document_viewed') {
                                $getKeyForAssign = 'for_viewdoc';
                            }

                            if($webHookCallValue == 'on') {
                                $getKeyValueForAssign = 1;
                            } if($webHookCallValue == 'off') {
                                $getKeyValueForAssign = 0;
                            }
                            $responseArray[$getKeyForAssign] = $getKeyValueForAssign;
                        }
                        $responseArray['webhook_URL'] = $webhook_url;
                        $updatedWebHook = settings::where('user_id', $user_id)->update(['webhook_settings' => json_encode($responseArray, JSON_UNESCAPED_SLASHES)]);
                        return Response::json(['status'=>'success','result' => 'updated successfully']);
                    } else {
                        return Response::json(['status'=>'error','result' => 'invalid webhook_trigger format, JSON is required']);
                    }
                } else {
                    return Response::json(['status'=>'error','result' => 'webhook_trigger is missing']);
                }
            } else {
                return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
            }
        }

        public function postCancelscrive($accessToken='', $documentId='') {
            $data = Input::all();
            $utility = new Utility();
            $domain_name = asset('/');
            $access_token = '';
            $document_id = 0;

            if(isset($accessToken) && $accessToken != '') {
                $access_token = $accessToken;
            } else {
                return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
            }

            if(isset($documentId) && $documentId != 0) {
                $document_id = $documentId;
            } else {
                return Response::json(['status' => 'error', 'result' => 'document_id is missing']);
            }

            $user_id = $utility->getUserIdByAuthToken($access_token);
            $parentId = $utility->getParent($user_id);

            if($utility->isParent($user_id) == 1) {
                $allUserIds = $utility->getSubusers($parentId);
            } else {
                $allUserIds = [$user_id];
            }

            if($user_id > 0) {
                $offerSendDetailsData = Offersentdetails::where('offer_send_details.id', $document_id)
                ->join('offer_sent', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')
                ->whereIn('offer_sent.sender_id', $allUserIds)
                ->where('offer_send_details.offer_status', '<', 4)->select('offer_sent.id', 'offer_send_details.id')->first();

                if($offerSendDetailsData) {
                    Offersentdetails::where('id', $document_id)->update(['offer_status' => 5]);
                    return response()->json(['status' => 'success', 'result' => 'Document has been rejected.'], 200, ['Content-Type' => 'application/json; charset=UTF-8'], JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
                } else {
                    return Response::json(['status' => 'error', 'result' => 'No record found']);
                }
            } else {
                return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
            }
        }

        public function postProlongscrive($accessToken='', $documentId='', $days='') {
            $data = Input::all();
            $utility = new Utility();
            $domain_name = asset('/');
            $access_token = '';
            $document_id = $extendDays = 0;

            if(isset($accessToken) && $accessToken != '') {
                $access_token = $accessToken;
            } else {
                return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
            }

            if(isset($documentId) && $documentId != 0) {
                $document_id = $documentId;
            } else {
                return Response::json(['status' => 'error', 'result' => 'document_id is missing']);
            }

            if(isset($days) && $days != 0) {
                if(filter_var($days, FILTER_VALIDATE_INT) === false) {
                    return Response::json(['status' => 'error', 'result' => 'day(s) are not valid']);
                }
                $extendDays = $days;
            } else {
                return Response::json(['status' => 'error', 'result' => 'days are missing']);
            }

            $user_id = $utility->getUserIdByAuthToken($access_token);
            $parentId = $utility->getParent($user_id);

            if($utility->isParent($user_id) == 1) {
                $allUserIds = $utility->getSubusers($parentId);
                $userTimeZone = $utility->getUsertimezone($user_id);
            } else {
                $allUserIds = [$user_id];
                $userTimeZone = $utility->getUsertimezone($parentId);
            }

            if($user_id > 0) {
                $extendDaysNew = '';
                if($extendDays != 0) {
                    if($extendDays > 0) {
                        $extendDaysNew = date('Y-m-d', strtotime(date('Y-m-d'). " + $extendDays days"));
                    } else {
                        $extendDaysNew = date('Y-m-d');
                    }
                    $extendDaysNew = $utility->changeTimeZone($extendDaysNew, 'Y-m-d', $userTimeZone, 'UTC');

                    Offersent::where('id', $document_id)->where('sender_id', $user_id)->update(['due_date' => $extendDaysNew.' 23:50:00', 'due_days' => $extendDays]);
                    return response()->json(['status' => 'success', 'result' => 'Document deadline has been expended'], 200, ['Content-Type' => 'application/json; charset=UTF-8'], JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
                }
            } else {
                return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
            }
        }

        public function postRemindscrive($accessToken='', $documentId='', $reminderType=null) {
            $data = Input::all();
            $utility = new Utility();
            $domain_name = asset('/');
            $access_token = '';
            $document_id = 0;
            $reminder_type = 'email';
            $overview = new overviewController();

            if(isset($accessToken) && $accessToken != '') {
                $access_token = $accessToken;
            } else {
                return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
            }

            if(isset($documentId) && $documentId != 0) {
                $document_id = $documentId;
            } else {
                return Response::json(['status' => 'error', 'result' => 'document_id is missing']);
            }

            if($reminderType != null) {
                if($reminderType == 1) {
                    $reminder_type = 'email';
                } elseif($reminderType == 2) {
                    $reminder_type = 'sms';
                } elseif($reminderType == 3) {
                    $reminder_type = 'both';
                }
                //$reminder_type = $reminderType;
            }

            $user_id = $utility->getUserIdByAuthToken($access_token);
            $parentId = $utility->getParent($user_id);

            if($utility->isParent($user_id) == 1) {
                $allUserIds = $utility->getSubusers($parentId);
                $userTimeZone = $utility->getUsertimezone($user_id);
            } else {
                $allUserIds = [$user_id];
                $userTimeZone = $utility->getUsertimezone($parentId);
            }

            //$remindertype = $data['reminder_type'];//1 Email, 2 SMS, 3 SMS & Email
            if($user_id > 0) {
                $sendRemonder = $overview->postRemindertoreipients(['access_token' => $access_token,'reminder_type' => $reminder_type, 'offerids' => json_encode([$documentId]), 'fromAPI' => 1]);
                return Response::json(['status'=>'success','result' => 'reminder sent']);
            } else {
                return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
            }
        }

        public function postSetautoreminderscrive($accessToken='', $documentId='', $days=null) {
            $data = Input::all();
            $utility = new Utility();
            $domain_name = asset('/');
            $access_token = '';
            $document_id = 0;
            $reminderDays = 1;

            if(isset($accessToken) && $accessToken != '') {
                $access_token = $accessToken;
            } else {
                return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
            }

            if(isset($documentId) && $documentId != 0) {
                $document_id = $documentId;
            } else {
                return Response::json(['status' => 'error', 'result' => 'document_id is missing']);
            }

            if($days != null) {
                if(filter_var($days, FILTER_VALIDATE_INT) === false) {
                    return Response::json(['status' => 'error', 'result' => 'day(s) are not valid']);
                }
                $reminderDays = $days;
            }

            $user_id = $utility->getUserIdByAuthToken($access_token);
            $parentId = $utility->getParent($user_id);

            if($utility->isParent($user_id) == 1) {
                $allUserIds = $utility->getSubusers($parentId);
                $userTimeZone = $utility->getUsertimezone($user_id);
            } else {
                $allUserIds = [$user_id];
                $userTimeZone = $utility->getUsertimezone($parentId);
            }

            if($user_id > 0) {
                $reminderDaysNew = '';
                if($reminderDays != 0) {
                    if($reminderDays > 0) {
                        $reminderDaysNew = date('Y-m-d', strtotime(date('Y-m-d'). " + $reminderDays days"));
                    } else {
                        $reminderDaysNew = date('Y-m-d');
                    }

                    $reminderDaysNew = $utility->changeTimeZone($reminderDaysNew, 'Y-m-d', $userTimeZone, 'UTC');

                    Offersent::where('id', $document_id)->where('sender_id', $user_id)->update(['reminder_dates' => $reminderDaysNew.' 08:50:00', 'reminder_days' => $reminderDays]);
                    Offersent_data::where('sent_id', $document_id)->update(['reminder_days_recurring' => 1]);
                    return response()->json(['status' => 'success', 'result' => 'Reminder has been set'], 200, ['Content-Type' => 'application/json; charset=UTF-8'], JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
                }
            } else {
                return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
            }
        }

        public function postTrashscrive($accessToken='', $documentId='') {
            $data = Input::all();
            $utility = new Utility();
            $domain_name = asset('/');
            $access_token = '';
            $document_id = 0;

            if(isset($accessToken) && $accessToken != '') {
                $access_token = $accessToken;
            } else {
                return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
            }

            if(isset($documentId) && $documentId != 0) {
                $document_id = $documentId;
            } else {
                return Response::json(['status' => 'error', 'result' => 'document_id is missing']);
            }

            $user_id = $utility->getUserIdByAuthToken($access_token);
            $parentId = $utility->getParent($user_id);

            if($utility->isParent($user_id) == 1) {
                $allUserIds = $utility->getSubusers($parentId);
            } else {
                $allUserIds = [$user_id];
            }

            if($user_id > 0) {
                $offerSentData = Offersent::where('id', $document_id)->where('sender_id', $user_id)->select('offer_status')->first();
                if($offerSentData) {
                    $message = '';
                    if($offerSentData['offer_status'] < 4) {
                        Offersent::where('id', $document_id)->where('sender_id', $user_id)->delete();
                        $message = 'Document has been deleted';
                    } else {
                        Offersent::where('id', $document_id)->where('sender_id', $user_id)->update(['overview_deleted' => 1]);
                        $message = 'Document has been moved to trash';
                    }
                    return response()->json(['status' => 'success', 'result' => $message], 200, ['Content-Type' => 'application/json; charset=UTF-8'], JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
                } else {
                    return Response::json(['status' => 'error', 'result' => 'No record found']);
                }
            } else {
                return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
            }
        }

        public function postUpdatescrive($accessToken='', $documentId='', $documents=[]) {
            $data = Input::all();
            $utility = new Utility();
            $domain_name = asset('/');
            $access_token = $lang = '';
            $document_id = 0;
            $documentsData = [];

            if(isset($accessToken) && $accessToken != '') {
                $access_token = $accessToken;
            } else {
                return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
            }

            if(isset($documentId) && $documentId != 0) {
                $document_id = $documentId;
            } else {
                return Response::json(['status' => 'error', 'result' => 'document_id is missing']);
            }

            if(isset($documents) && !empty($documents)) {
                if($this->is_JSON($documents)) {
                //if(json_decode($documents, true) !== null) {
                    $documentsData = json_decode($documents, true);
                } else {
                    return Response::json(['status'=>'error','result' => 'Document information is invalid format, JSON is required']);
                }
            } else {
                return Response::json(['status' => 'error', 'result' => 'documents is missing']);
            }

            $user_id = $utility->getUserIdByAuthToken($access_token);
            $parentId = $utility->getParent($user_id);

            if($utility->isParent($user_id) == 1) {
                $allUserIds = $utility->getSubusers($parentId);
            } else {
                $allUserIds = [$user_id];
            }

            $recipientLanguage = Offerdocs::where('id', $document_id)->where('user_id', $user_id)->select('recipient_language')->first();
            if($recipientLanguage) {
                $lang = $recipientLanguage['recipient_language'];
            } else {
                $language = Userinfo::where('user_id', $user_id)->select('language')->first();
                $lang = $language['language'];
            }
            $getTranslation = $utility->GeneralTranslations($lang);

            if($user_id > 0) {
                $offerDocsData = Offerdocs::where('id', $document_id)->where('user_id', $user_id)->count();
                if($offerDocsData) {
                    $userTemplate = new usertemplateController();
                    $getTemplateContent = $userTemplate->getTemplateByTemplateID($document_id, $user_id);
                    if(!empty($getTemplateContent->content) && !empty($documentsData)) {
                        $orderType = [];
                        $html = new \Htmldom($getTemplateContent->content);
                        //first loop on fields
                        foreach($html->find('.text') as $textKey => $textValue) {
                            //second loop on data input from user
                            foreach($documentsData as $documentsDataKey => $documentsDataValue) {
                                if(strpos($textValue->getAttribute('class'), 'documentField') !== false) {
                                    //text fields updating
                                    if($documentsDataKey == $textValue->selectedtype) {
                                        //changing api tags in two attributes
                                        $textValue->setAttribute('apiattribute', str_replace(' ', '_', strtolower($documentsDataValue)));
                                        $textValue->setAttribute('apitagattribute', str_replace(' ', '_', strtolower($documentsDataValue)));
                                        //changing text & datepicker fields name in different attributes
                                        /* if(strpos($textValue->getAttribute('class'), 'documentFieldDate') === false && strpos($textValue->getAttribute('class'), 'datepickerfields_new') === false) {
                                            //if datepicker comes don't change label
                                        } */
                                        $textValue->parent()->parent()->find('label', 0)->innertext = $documentsDataValue;
                                        $textValue->setAttribute('selectedtype', $documentsDataValue);
                                        $textValue->find('h4', 0)->innertext = $getTranslation[1050].' '.$documentsDataValue;
                                    } if($documentsDataKey == $textValue->fieldlabelname) {
                                        //checkbox fields updating
                                        //changing api tags in attribute
                                        $textValue->setAttribute('apiattribute', str_replace(' ', '_', strtolower($documentsDataValue)));
                                        //changing checkbox name in different attributes
                                        $textValue->setAttribute('fieldlabelname', $documentsDataValue);
                                    } if($documentsDataKey == $textValue->dropdownlabel) {
                                        //muliple choice fields updating
                                        //changing api tags in attribute
                                        $textValue->setAttribute('apiattribute', str_replace(' ', '_', strtolower($documentsDataValue)));
                                        //changing muliple choice name in different attributes
                                        $textValue->parent()->parent()->find('label', 0)->innertext = $documentsDataValue;
                                        $textValue->setAttribute('data-document-field-label', $documentsDataValue);
                                        $textValue->setAttribute('dropdownlabel', $documentsDataValue);
                                        $textValue->find('h4', 0)->innertext = $documentsDataValue;
                                    }
                                    Docfields::where('user_id', $parentId)->where('document_field_name', $documentsDataKey)->update(['document_field_name' => $documentsDataValue]);
                                }
                            }   //user input loop ends here
                        }   //text fields class loop ends here
                        //echo $html;   //print the html

                        foreach($html->find('.template_container') as $templateContainerKey => $templateContainerElement) {
                            $type = $templateContainerElement->getAttribute('type');
                            $contentid = $templateContainerElement->getAttribute('contentid');
                            $where['id'] = $contentid;
                            $templateData['content'] = Tcrypt::encrypter($templateContainerElement);
                            if($type == 0) {
                                $orderType[$templateContainerKey]['type'] = 'template';
                                $orderType[$templateContainerKey]['contentid'] = $contentid;
                                $utility->updateItem("user_template", $where, $templateData);
                            } elseif($type == 1) {
                                $orderType[$templateContainerKey]['type'] = 'pdf';
                                $orderType[$templateContainerKey]['contentid'] = $contentid;
                                $utility->updateItem("pdf", $where, $templateData);
                            }
                        }
                        return response()->json(['status' => 'success', 'result' => 'Metadata updated'], 200, ['Content-Type' => 'application/json; charset=UTF-8'], JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
                    }
                } else {
                    return Response::json(['status' => 'error', 'result' => 'No record found']);
                }
            } else {
                return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
            }
        }

        public function postNewscrive($accessToken='') {
            ini_set('max_execution_time', 800);
            $data = Input::all();
            $utility = new Utility();
            $domain_name = asset('/');
            $access_token = $lang = $file = '';
            $template_id = $allowEditing = $isPublish = 0;

            if(isset($accessToken) && $accessToken != '') {
                $access_token = $accessToken;
            } else {
                return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
            }

            /* if(isset($data['restrict_editing']) && $data['restrict_editing'] != 0) {
                $allowEditing = $data['restrict_editing'];
            }
            
            if(isset($data['is_publish']) && $data['is_publish'] != 0) {
                $isPublish = $data['is_publish'];
            } */

            $user_id = $utility->getUserIdByAuthToken($access_token);
            $parentId = $utility->getParent($user_id);

            if($utility->isParent($user_id) == 1) {
                $allUserIds = $utility->getSubusers($parentId);
            } else {
                $allUserIds = [$user_id];
            }

            $language = Userinfo::where('user_id', $user_id)->select('language')->first();
            $lang = $language['language'];
            $getTranslation = $utility->GeneralTranslations($lang);

            if($user_id > 0) {
                $uniqid = uniqid();
                if(isset($data['file']) && $data['file'] != null) {
                    $file = $data['file'];
                    //adding condition starting
                    $fileTypes = array('docx','doc','xls','xlsx','csv','ppt','pptx','pdf');
                    if(!in_array(strtolower($file->getClientOriginalExtension()), $fileTypes)) {
                        return Response::json(['status' => 'error', 'result' => 'Invalid document file type, only document files are acceptable']);
                    }
                    //adding condition ending
                    
                    $file_original_name = $file->getClientoriginalName();
                    $file_ext = strtolower($file->getClientOriginalExtension());
                    $filename = pathinfo($file_original_name, PATHINFO_FILENAME);
                    
                    $file_name = $file_original_name;
                    $name = 'pdftemplate_'.$uniqid.'.pdf';
                    $name_new = 'pdftemplate_'.$uniqid.'.'.$file_ext;
                    $destination = public_path().'/uploads/contractpdf';
                    
                    $Allowed_Ext = array('docx','doc','xls','xlsx','csv','ppt','pptx');
                    if(in_array($file_ext,$Allowed_Ext)) {
                        $file->move($destination, $name_new);
                        $file_path = $destination.'/'.$name_new;
                        $Conversionapi = new Conversionapi();
                        
                        try {
                            $Conversionapi->convert($file_path, $destination.'/'.$name);
                        } catch(\Exception $e) {
                            if(file_exists($file_path)) {
                                unlink($file_path);
                            }
                            return Response::json(['status' => 'error', 'result' => 'Unable to load this file']);
                        } if(file_exists($file_path)) {
                            unlink($file_path);
                        }
                    } else {
                        $file->move($destination, $name);
                    }
                    
                    $userTemplate = new usertemplateController();
                    $template_id = $userTemplate->createPdfTemplate($template_id, $destination, $name, $file_name, $access_token, 'isapi', '', $allowEditing, $isPublish);
                } else {
                    $builtInTemplateId = 0;
                    $editorVersion = "longpage";
                    if($_SERVER['HTTP_HOST'] == 'beta.simplesign.io' || $_SERVER['HTTP_HOST'] == 'testenv.simplesign.io') {
                        $builtInTemplateId = 74;
                    } else {
                        $builtInTemplateId = 89;
                    }
                    
                    $where['id'] = $builtInTemplateId;
                    $template = $utility->getItem("templates", $where);
                    $order_type = array();
                    $contractName = $getTranslation[516];
                    
                    $offerData['user_id'] = $user_id;
                    $offerData['order'] = '';
                    $offerData['name'] = $contractName;
                    $offerData['created_date'] = date("Y-m-d H:i:s");
                    $offerData['editor_version'] = $editorVersion;
                    $offer_doc_id = $utility->addItem("offer_docs", $offerData);

                    $html = new \Htmldom($template->content);
                    $countPages = 0;
                    foreach($html->find('.template_container') as $element) {
                        $countPages = $countPages+1;
                        $template_data['user_id'] = $user_id;
                        $template_data['offer_doc_id'] = $offer_doc_id;
                        $template_data['created_date'] = date("Y-m-d H:i:s");
                        $user_template_id = $utility->addItem("user_template", $template_data);
                        
                        $element->setAttribute('contentid', $user_template_id);
                        $element->setAttribute('type', '0');
                        $classes = $element->getAttribute('class');
                        if($builtInTemplateId == 1 || ($_SERVER["HTTP_HOST"] == "beta.simplesign.io" && $builtInTemplateId == 74) || ($_SERVER["HTTP_HOST"] != "beta.simplesign.io" && $builtInTemplateId == 89)) {
                            $classes = $classes.' newfontStyleTemplate dynamicPage'.$countPages;
                        } else {
                            $classes = $classes.' buitlinTemplates dynamicPage'.$countPages;
                        }
                        $element->setAttribute('class', $classes);
                        $element->setAttribute('dynamicpage', $countPages);
                        
                        $newclass = $element->getAttribute('class')." template_container_new";
                        $newclass = $element->getAttribute('class')." browsweZoom";
                        $element->setAttribute('class', $newclass);
                        
                        $TempData['content'] = Tcrypt::encrypter($element);
                        $where['id'] = $user_template_id;
                        $where['user_id'] = $user_id;
                        $where['offer_doc_id'] = $offer_doc_id;
                        $utility->updateItem("user_template", $where, $TempData);
                        
                        $order = array('type' => 'template','contentid' => $user_template_id);
                        array_push($order_type, $order);
                    }
                    
                    $where1['id'] = $offer_doc_id;
                    $data1['order'] = json_encode($order_type);
                    $data1['is_published'] = 0;
                    $utility->updateItem("offer_docs", $where1, $data1);
                    $template_id = $offer_doc_id;
                }
                return Response::json(['status' => 'success', 'result' => ['template_id' => $template_id]]);
            } else {
                return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
            }
        }

        public function getAccountdata() {
            $data = Input::all();
            $utility = new Utility();
            $domain_name = asset('/');

            if(isset($data['access_token']) && $data['access_token'] != '') {
                $access_token = $data['access_token'];
            } else {
                return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
            }

            $user_id = $utility->getUserIdByAuthToken($access_token);
            if($user_id > 0) {
                $parentId = $utility->getParent($user_id);

                if($utility->isParent($user_id) == 1) {
                    $allUserIds = $utility->getSubusers($parentId);
                } else {
                    $allUserIds = [$user_id];
                }

                //Active users:
                //there are two columns one is created_date and second one is activation_date both columns are in users_login table
                //Remaining signature credits:
                //show current month as a key and value should be remaining signature
                //Signature credits usage:
                //Show each month usage of signatures key will be month name with year and value will be total numbers
                //BankID usage:
                //Show each and every month's usage of BankID sign
                //SMS usage:
                //Total usage of SMS each and every month

                $totalUsers = $totalSignatueUsage = $totalBankIDUsage = $totalNorwegianBankIDUsage = $totalDanishBankIDUsage = $totalFinnishBankIDUsage = $numberOfMonths = 0;
                $responseArray = $activeUsers = $remainingSignatureCredits = $signatureCreditsUsage = $bankIDUsage = $norwegianBankID = $danishBankID = $finnishBankID = $smsUage = $offerSentIds = $offerSendDetailIdsArray = [];

                $userModal = new User();
                $offerSentModal = new Offersent();
                $offerSentDetailsModal = new Offersentdetails();
                /* if(isset($data['number_of_months']) && $data['number_of_months'] != 0) {
                    $numberOfMonths = $data['number_of_months'];
                    //$userModal = $userModal->where(DB::raw('MONTH(created_date)'), $numberOfMonths);
                    //$offerSentModal = $offerSentModal->where(DB::raw('MONTH(simplesign_offer_sent.created_date)'), $numberOfMonths);
                } */

                //total active users starting
                $usersLoginData = $userModal->whereIn('id', $allUserIds)->where('is_active', '!=', -1)->select('created_date as created_at', DB::raw('count(id) AS total'), DB::raw('DATE_FORMAT(created_date, "%M %Y") AS created_date'), DB::raw('YEAR(created_date) AS years, MONTH(created_date) AS months'));
                $usersLoginData = $usersLoginData->groupBy('years', 'months')->orderBy('created_date', 'ASC')->get();
                $usersLoginData = collect($usersLoginData->toArray());
                $usersLoginData = $usersLoginData->sortBy('created_at')->values()->all();
                foreach($usersLoginData as $usersLoginDataKey => $usersLoginDataValue) {
                    $totalUsers = $usersLoginDataValue['total'];
                    if(isset($activeUsers[$usersLoginDataValue['created_date']])) {
                        $activeUsers[$usersLoginDataValue['created_date']] = ($activeUsers[$usersLoginDataValue['created_date']]+$totalUsers);
                    } else {
                        $activeUsers[$usersLoginDataValue['created_date']] = $totalUsers;
                    }
                }
                //total active users ending
                
                //total remaining signature credits starting
                $totalRemainingSugnature = $utility->checkSignatures($user_id);
                $remainingSignatureCredits[date('F Y')] = ($totalRemainingSugnature['monthly_signature']+$totalRemainingSugnature['extra_signature']);
                //total remaining signature credits ending

                //attest = 8, e-signature = 1, 2-factor (SMS)/Pin via SMS = 4, sign with paypal (coming soon) = 2, BankID = 3, read only = 6
                //total signature credits usage starting
                $totalSignatueUsageFloat = (float)$totalSignatueUsage;
                //$offerSentModal = new Offersent();
                //$offerSentDetailsModal = new Offersentdetails();

                $offerSentData = $offerSentModal->join('offer_send_details', 'offer_sent.id', '=', 'offer_send_details.offer_sent_id')->whereIn('offer_sent.sender_id', $allUserIds)->where('offer_sent.created_date', '!=', '0000-00-00 00:00:00')->where('offer_sent.offer_status', 4)->where('offer_send_details.is_sender', 0)->where('offer_send_details.authentication_method', '!=', 6)->select('offer_sent.sender_id', 'offer_send_details.authentication_method', DB::raw('DATE(simplesign_offer_sent.created_date) AS created_at'), DB::raw('count(simplesign_offer_sent.id) AS total'), DB::raw('DATE_FORMAT(simplesign_offer_sent.created_date, "%M %Y") AS created_date'), DB::raw('YEAR(simplesign_offer_sent.created_date) AS years, MONTH(simplesign_offer_sent.created_date) AS months'));
                $offerSentData = $offerSentData->groupBy('years', 'months')->orderBy('offer_sent.created_date', 'ASC')->get();
                $offerSentData = collect($offerSentData->toArray());
                $offerSentData = $offerSentData->sortBy('created_at')->values()->all();
                $paymentVersion = $userModal->where('id', $parentId)->where('is_active', '!=', -1)->pluck('payment_version');
                foreach($offerSentData as $offerSentDataKey => $offerSentDataValue) {
                    $totalSignatueUsageFloat = $offerSentDataValue['total'];
                    if($paymentVersion == 2 && $offerSentDataValue['authentication_method'] == 3) {
                        $totalSignatueUsageFloat = ($totalSignatueUsageFloat+0.25);
                    }
                    if(isset($signatureCreditsUsage[$offerSentDataValue['created_date']])) {
                        $signatureCreditsUsage[$offerSentDataValue['created_date']] = ($signatureCreditsUsage[$offerSentDataValue['created_date']]+$totalSignatueUsageFloat);
                    } else {
                        $signatureCreditsUsage[$offerSentDataValue['created_date']] = $totalSignatueUsageFloat;
                    }
                    //remove code from here on 27 March 2020
                }
                //total signature credits usage starting

                //total BankID usage starting
                $offerSentDataBankID = $offerSentModal->join('offer_send_details', 'offer_sent.id', '=', 'offer_send_details.offer_sent_id')->whereIn('offer_sent.sender_id', $allUserIds)->where('offer_sent.created_date', '!=', '0000-00-00 00:00:00')->where('offer_sent.offer_status', 4)->where('offer_send_details.is_sender', 0)->where('offer_send_details.authentication_method', 3)->select('offer_sent.sender_id', 'offer_send_details.authentication_method', DB::raw('DATE(simplesign_offer_sent.created_date) AS created_at'), DB::raw('count(simplesign_offer_sent.id) AS total'), DB::raw('DATE_FORMAT(simplesign_offer_sent.created_date, "%M %Y") AS created_date'), DB::raw('YEAR(simplesign_offer_sent.created_date) AS years, MONTH(simplesign_offer_sent.created_date) AS months'));
                $offerSentDataBankID = $offerSentDataBankID->groupBy('years', 'months')->orderBy('offer_sent.created_date', 'ASC')->get();
                $offerSentDataBankID = collect($offerSentDataBankID->toArray());
                $offerSentDataBankID = $offerSentDataBankID->sortBy('created_at')->values()->all();
                foreach($offerSentDataBankID as $offerSentDataBankIDKey => $offerSentDataBankIDValue) {
                    $totalBankIDUsage = $offerSentDataBankIDValue['total'];
                    if(isset($bankIDUsage[$offerSentDataBankIDValue['created_date']])) {
                        $bankIDUsage[$offerSentDataBankIDValue['created_date']] = ($bankIDUsage[$offerSentDataBankIDValue['created_date']]+$totalBankIDUsage);
                    } else {
                        $bankIDUsage[$offerSentDataBankIDValue['created_date']] = $totalBankIDUsage;
                    }
                }
                //total BankID usage ending

                //total SMS usage starting
                $offerSentDataIds = $offerSentModal->whereIn('sender_id', $allUserIds)->where('created_date', '!=', '0000-00-00 00:00:00')->select('id')->get();
                foreach($offerSentDataIds as $offerSentDataIdsKey => $offerSentDataIdsValue) {
                    array_push($offerSentIds, $offerSentDataIdsValue['id']);
                }
                
                //->whereRaw('(invitation_type = 2 OR invitation_type = 6 OR authentication_method = 4 OR role = 2 OR offer_confirmation = 2)')
                $offerSentDataSMSUsage = $offerSentDetailsModal->whereIn('offer_sent_id', $offerSentIds)->where('sent_date', '!=', '0000-00-00 00:00:00')->where('is_sender', 0)->select('id', 'offer_sent_id', 'authentication_method', 'invitation_type', 'offer_status', 'role', 'offer_confirmation', DB::raw('DATE(sent_date) AS created_at'), DB::raw('DATE_FORMAT(sent_date, "%M %Y") AS created_date'), DB::raw('YEAR(sent_date) AS years, MONTH(sent_date) AS months'));
                $offerSentDataSMSUsage = $offerSentDataSMSUsage->orderBy('sent_date', 'ASC')->get();
                $offerSentDataSMSUsage = collect($offerSentDataSMSUsage->toArray());
                $offerSentDataSMSUsage = $offerSentDataSMSUsage->sortBy('created_at')->values()->all();
                foreach($offerSentDataSMSUsage as $offerSentDataSMSUsageKey => $offerSentDataSMSUsageValue) {
                    array_push($offerSendDetailIdsArray, $offerSentDataSMSUsageValue['id']);
                }

                /* $checkingData = $offerSentDetailsModal->whereIn('offer_sent_id', $offerSentIds)->where('sent_date', '!=', '0000-00-00 00:00:00')->where('is_sender', 0)->whereRaw('(invitation_type = 2 OR invitation_type = 6 OR authentication_method = 4 OR role = 2 OR offer_confirmation = 2)')->whereRaw('MONTH(sent_date) = MONTH(CURRENT_DATE())')->count();
                $smsLogs = Smslogs::whereIn('offer_sent_id', $offerSentIds)->where('section_name', 'Reminder Overview')->where('send_datetime', '!=', '0000-00-00 00:00:00')->whereRaw('MONTH(send_datetime) = MONTH(CURRENT_DATE())')->count();
                print_rj($smsLogs);
                print_rj($checkingData); */

                //print_rj($offerSentIds);                    //552335
                //print_rj($offerSendDetailIdsArray, 1);      //927203
                $getSMSLogs = Smslogs::whereIn('offersent_detail_id', $offerSendDetailIdsArray)->select('id', 'offersent_detail_id', 'section_name')->get();
                $getSMSLogsCollection = collect($getSMSLogs);
                /* $Smslogs = new Smslogs();
                $invitationCount = $getSMSLogsCollection->groupBy('section_name')->map(function ($invitation) {
                    return $invitation->count();
                });
                //print_rj($invitationCount, 1);
                if(!empty($invitationCount)) {
                    $totalSMS = 0;
                    if(isset($invitationCount['Cronjob check reminder']) && !empty($invitationCount['Cronjob check reminder'])) {
                        $totalSMS = ($totalSMS+$invitationCount['Cronjob check reminder']);
                    }
                } */
                
                foreach($offerSentDataSMSUsage as $offerSentDataSMSUsageKey => $offerSentDataSMSUsageValue) {
                    $totalSMS = 0;
                    if($offerSentDataSMSUsageValue['invitation_type'] == 2) {
                        $totalSMS = ($totalSMS+1);
                    } if($offerSentDataSMSUsageValue['offer_confirmation'] == 2 && $offerSentDataSMSUsageValue['offer_status'] == 4) {
                        $totalSMS = ($totalSMS+1);
                    } if($offerSentDataSMSUsageValue['offer_status'] == 4 && $offerSentDataSMSUsageValue['authentication_method'] == 4) {
                        $totalSMS = ($totalSMS+1);
                    } if($offerSentDataSMSUsageValue['invitation_type'] == 6) {
                        $totalSMS = ($totalSMS+1);
                    } if($offerSentDataSMSUsageValue['offer_confirmation'] == 2 && $offerSentDataSMSUsageValue['offer_status'] == 3 && $offerSentDataSMSUsageValue['role'] == 2) {
                        $totalSMS = ($totalSMS+1);
                    }

                    $reminderOverview = $getSMSLogsCollection->where('offersent_detail_id', $offerSentDataSMSUsageValue['id'])->where('section_name', 'Reminder Overview')->count();
                    if($reminderOverview) {
                        $totalSMS = ($totalSMS+$reminderOverview);
                    }
                    $cronJobCheckReminder = $getSMSLogsCollection->where('offersent_detail_id', $offerSentDataSMSUsageValue['id'])->where('section_name', 'Cronjob check reminder')->count();
                    if($cronJobCheckReminder) {
                        $totalSMS = ($totalSMS+$cronJobCheckReminder);
                    }
                    $viewingAndDownloading = $getSMSLogsCollection->where('offersent_detail_id', $offerSentDataSMSUsageValue['id'])->where('section_name', 'Viewing and downloading pin via sms')->count();
                    if($viewingAndDownloading) {
                        $totalSMS = ($totalSMS+$viewingAndDownloading);
                    }
                    $invitationSMSThroughAPI = $getSMSLogsCollection->where('offersent_detail_id', $offerSentDataSMSUsageValue['id'])->where('section_name', 'Invitation SMS through API')->count();
                    if($invitationSMSThroughAPI) {
                        $totalSMS = ($totalSMS+$invitationSMSThroughAPI);
                    }
                    $cronJobRecipientSpecificDetailsCheckReminder = $getSMSLogsCollection->where('offersent_detail_id', $offerSentDataSMSUsageValue['id'])->where('section_name', 'Cronjob recipient specific details check reminder')->count();
                    if($cronJobRecipientSpecificDetailsCheckReminder) {
                        $totalSMS = ($totalSMS+$cronJobRecipientSpecificDetailsCheckReminder);
                    }
                    $onlineViewingAndDownloadPinViaSMS = $getSMSLogsCollection->where('offersent_detail_id', $offerSentDataSMSUsageValue['id'])->where('section_name', 'Online viewing and downloading pin via sms')->count();
                    if($onlineViewingAndDownloadPinViaSMS) {
                        $totalSMS = ($totalSMS+$onlineViewingAndDownloadPinViaSMS);
                    }
                    $onlineViewingAndDownloadPinViaSMSAfterSigning = $getSMSLogsCollection->where('offersent_detail_id', $offerSentDataSMSUsageValue['id'])->where('section_name', 'Online viewing and downloading pin via sms after signing')->count();
                    if($onlineViewingAndDownloadPinViaSMSAfterSigning) {
                        $totalSMS = ($totalSMS+$onlineViewingAndDownloadPinViaSMSAfterSigning);
                    }
                    $sendSMSForOrderOfNextRecipient = $getSMSLogsCollection->where('offersent_detail_id', $offerSentDataSMSUsageValue['id'])->where('section_name', 'send SMS for order of next recipient')->count();
                    if($sendSMSForOrderOfNextRecipient) {
                        $totalSMS = ($totalSMS+$sendSMSForOrderOfNextRecipient);
                    }
                    $contractPinViaSMS = $getSMSLogsCollection->where('offersent_detail_id', $offerSentDataSMSUsageValue['id'])->where('section_name', 'Contract Pin via SMS')->count();
                    if($contractPinViaSMS) {
                        $totalSMS = ($totalSMS+$contractPinViaSMS);
                    }
                    $onlineContractPinViaSMS = $getSMSLogsCollection->where('offersent_detail_id', $offerSentDataSMSUsageValue['id'])->where('section_name', 'Online contract pin via SMS')->count();
                    if($onlineContractPinViaSMS) {
                        $totalSMS = ($totalSMS+$onlineContractPinViaSMS);
                    }
                    $invitationSMSFromOrderBy = $getSMSLogsCollection->where('offersent_detail_id', $offerSentDataSMSUsageValue['id'])->where('section_name', 'Invitation SMS from order by')->count();
                    if($invitationSMSFromOrderBy) {
                        $totalSMS = ($totalSMS+$invitationSMSFromOrderBy);
                    }
                    //$profileUpdateAuthentication = $getSMSLogsCollection->where('offersent_detail_id', $offerSentDataSMSUsageValue['id'])->where('section_name', 'Profile update authentication')->count();
                    //if($profileUpdateAuthentication) {
                        //$totalSMS = ($totalSMS+1);
                    //}
                    $viewingAndDownloading = $getSMSLogsCollection->where('offersent_detail_id', $offerSentDataSMSUsageValue['id'])->where('section_name', 'Viewing And Downloading')->count();
                    if($viewingAndDownloading) {
                        $totalSMS = ($totalSMS+$viewingAndDownloading);
                    }
                    //$InvitationSMS = $getSMSLogsCollection->where('offersent_detail_id', $offerSentDataSMSUsageValue['id'])->where('section_name', 'Invitation SMS')->count();
                    //if($InvitationSMS) {
                        //$totalSMS = ($totalSMS+1);
                    //}
                    $resendDocument = $getSMSLogsCollection->where('offersent_detail_id', $offerSentDataSMSUsageValue['id'])->where('section_name', 'Resend Document')->count();
                    if($resendDocument) {
                        $totalSMS = ($totalSMS+$resendDocument);
                    }
                    $sentVerificationEmail = $getSMSLogsCollection->where('offersent_detail_id', $offerSentDataSMSUsageValue['id'])->where('section_name', 'Sent verification email')->count();
                    if($sentVerificationEmail) {
                        $totalSMS = ($totalSMS+$sentVerificationEmail);
                    }
                    $sendPendingConfirmationSMS = $getSMSLogsCollection->where('offersent_detail_id', $offerSentDataSMSUsageValue['id'])->where('section_name', 'Send pending confirmation SMS')->count();
                    if($sendPendingConfirmationSMS) {
                        $totalSMS = ($totalSMS+$sendPendingConfirmationSMS);
                    }
                    //Viewing and downloading pin via sms
                    //Reminder Overview
                    //Invitation SMS through API
                    //Cronjob check reminder
                    //Cronjob recipient specific details check reminder
                    //Online viewing and downloading pin via sms
                    //Online viewing and downloading pin via sms after signing
                    //send SMS for order of next recipient
                    //Contract Pin via SMS
                    //Online contract pin via SMS
                    //Invitation SMS from order by
                    ////Profile update authentication
                    //Viewing And Downloading
                    ////Invitation SMS
                    //Resend Document
                    //Sent verification email
                    //Send pending confirmation SMS
                    $createdDate = $offerSentDataSMSUsageValue['created_date'];
                    if(isset($smsUage[$createdDate])) {
                        $smsUage[$createdDate] = ($smsUage[$createdDate]+$totalSMS);
                    } else {
                        $smsUage[$createdDate] = $totalSMS;
                    }
                }
                //print_rj($smsUage);
                //exit;
                //print_rj($getSMSLogsCollection, 1);
                //total SMS usage ending

                if($_SERVER['HTTP_HOST'] == 'acceptance.simplesign.io') {
                    //total Norwegian BankID usage starting
                    $offerSentDataNorwegianBankID = $offerSentModal->join('offer_send_details', 'offer_sent.id', '=', 'offer_send_details.offer_sent_id')->whereIn('offer_sent.sender_id', $allUserIds)->where('offer_sent.created_date', '!=', '0000-00-00 00:00:00')->where('offer_sent.offer_status', 4)->where('offer_send_details.is_sender', 0)->where('offer_send_details.authentication_method', 9)->select('offer_sent.sender_id', 'offer_send_details.authentication_method', DB::raw('DATE(simplesign_offer_sent.created_date) AS created_at'), DB::raw('count(simplesign_offer_sent.id) AS total'), DB::raw('DATE_FORMAT(simplesign_offer_sent.created_date, "%M %Y") AS created_date'), DB::raw('YEAR(simplesign_offer_sent.created_date) AS years, MONTH(simplesign_offer_sent.created_date) AS months'));
                    $offerSentDataNorwegianBankID = $offerSentDataNorwegianBankID->groupBy('years', 'months')->orderBy('offer_sent.created_date', 'ASC')->get();
                    $offerSentDataNorwegianBankID = collect($offerSentDataNorwegianBankID->toArray());
                    $offerSentDataNorwegianBankID = $offerSentDataNorwegianBankID->sortBy('created_at')->values()->all();
                    foreach($offerSentDataNorwegianBankID as $offerSentDataNorwegianBankIDKey => $offerSentDataNorwegianBankIDValue) {
                        $totalNorwegianBankIDUsage = $offerSentDataNorwegianBankIDValue['total'];
                        if(isset($norwegianBankID[$offerSentDataNorwegianBankIDValue['created_date']])) {
                            $norwegianBankID[$offerSentDataNorwegianBankIDValue['created_date']] = ($norwegianBankID[$offerSentDataNorwegianBankIDValue['created_date']]+$totalNorwegianBankIDUsage);
                        } else {
                            $norwegianBankID[$offerSentDataNorwegianBankIDValue['created_date']] = $totalNorwegianBankIDUsage;
                        }
                    }
                    //total Norwegian BankID usage ending

                    //total Danish BankID usage starting
                    $offerSentDataDanishBankID = $offerSentModal->join('offer_send_details', 'offer_sent.id', '=', 'offer_send_details.offer_sent_id')->whereIn('offer_sent.sender_id', $allUserIds)->where('offer_sent.created_date', '!=', '0000-00-00 00:00:00')->where('offer_sent.offer_status', 4)->where('offer_send_details.is_sender', 0)->where('offer_send_details.authentication_method', 10)->select('offer_sent.sender_id', 'offer_send_details.authentication_method', DB::raw('DATE(simplesign_offer_sent.created_date) AS created_at'), DB::raw('count(simplesign_offer_sent.id) AS total'), DB::raw('DATE_FORMAT(simplesign_offer_sent.created_date, "%M %Y") AS created_date'), DB::raw('YEAR(simplesign_offer_sent.created_date) AS years, MONTH(simplesign_offer_sent.created_date) AS months'));
                    $offerSentDataDanishBankID = $offerSentDataDanishBankID->groupBy('years', 'months')->orderBy('offer_sent.created_date', 'ASC')->get();
                    $offerSentDataDanishBankID = collect($offerSentDataDanishBankID->toArray());
                    $offerSentDataDanishBankID = $offerSentDataDanishBankID->sortBy('created_at')->values()->all();
                    foreach($offerSentDataDanishBankID as $offerSentDataDanishBankIDKey => $offerSentDataDanishBankIDValue) {
                        $totalDanishBankIDUsage = $offerSentDataDanishBankIDValue['total'];
                        if(isset($danishBankID[$offerSentDataDanishBankIDValue['created_date']])) {
                            $danishBankID[$offerSentDataDanishBankIDValue['created_date']] = ($danishBankID[$offerSentDataDanishBankIDValue['created_date']]+$totalDanishBankIDUsage);
                        } else {
                            $danishBankID[$offerSentDataDanishBankIDValue['created_date']] = $totalDanishBankIDUsage;
                        }
                    }
                    //total Danish BankID usage ending

                    //total Finnish BankID usage starting
                    $offerSentDataFinnishBankID = $offerSentModal->join('offer_send_details', 'offer_sent.id', '=', 'offer_send_details.offer_sent_id')->whereIn('offer_sent.sender_id', $allUserIds)->where('offer_sent.created_date', '!=', '0000-00-00 00:00:00')->where('offer_sent.offer_status', 4)->where('offer_send_details.is_sender', 0)->where('offer_send_details.authentication_method', 11)->select('offer_sent.sender_id', 'offer_send_details.authentication_method', DB::raw('DATE(simplesign_offer_sent.created_date) AS created_at'), DB::raw('count(simplesign_offer_sent.id) AS total'), DB::raw('DATE_FORMAT(simplesign_offer_sent.created_date, "%M %Y") AS created_date'), DB::raw('YEAR(simplesign_offer_sent.created_date) AS years, MONTH(simplesign_offer_sent.created_date) AS months'));
                    $offerSentDataFinnishBankID = $offerSentDataFinnishBankID->groupBy('years', 'months')->orderBy('offer_sent.created_date', 'ASC')->get();
                    $offerSentDataFinnishBankID = collect($offerSentDataFinnishBankID->toArray());
                    $offerSentDataFinnishBankID = $offerSentDataFinnishBankID->sortBy('created_at')->values()->all();
                    foreach($offerSentDataFinnishBankID as $offerSentDataFinnishBankIDKey => $offerSentDataFinnishBankIDValue) {
                        $totalFinnishBankIDUsage = $offerSentDataFinnishBankIDValue['total'];
                        if(isset($finnishBankID[$offerSentDataFinnishBankIDValue['created_date']])) {
                            $finnishBankID[$offerSentDataFinnishBankIDValue['created_date']] = ($finnishBankID[$offerSentDataFinnishBankIDValue['created_date']]+$totalFinnishBankIDUsage);
                        } else {
                            $finnishBankID[$offerSentDataFinnishBankIDValue['created_date']] = $totalFinnishBankIDUsage;
                        }
                    }
                    //total Finnish BankID usage ending
                }

                if($_SERVER['HTTP_HOST'] == 'acceptance.simplesign.io') {
                    $responseArray = ['active_users' => $activeUsers, 'remaining_signature_credits' => $remainingSignatureCredits, 'signature_credits_usage' => $signatureCreditsUsage, 'bankID_usage' => $bankIDUsage, 'sms_uage' => $smsUage, 'norwegian_bankID_usage' => $norwegianBankID, 'danish_bankID_usage' => $danishBankID, 'finnish_bankID_usage' => $finnishBankID];
                } else {
                    $responseArray = ['active_users' => $activeUsers, 'remaining_signature_credits' => $remainingSignatureCredits, 'signature_credits_usage' => $signatureCreditsUsage, 'bankID_usage' => $bankIDUsage, 'sms_uage' => $smsUage];
                }
                //add where clause in signature_credits_usage ->where('offer_sent.created_date', '!=', '0000-00-00 00:00:00') and bankID_usage ->where('offer_sent.created_date', '!=', '0000-00-00 00:00:00')
                //$responseArray = ['active_users' => $activeUsers, 'remaining_signature_credits' => $remainingSignatureCredits, 'signature_credits_usage' => $signatureCreditsUsage, 'bankID_usage' => $bankIDUsage, 'sms_uage' => $smsUage];
                return response()->json(['status' => 'success', 'result' => $responseArray], 200, ['Content-Type' => 'application/json; charset=UTF-8'], JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
            } else {
                return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
            }
        }

        public function getCheckallcontracts($userId='') {
            if(!empty($userId)) {
                $userModal = new User();
                $checkParentId = $userModal->where('id', $userId)->select('parent_id')->first();
                if($checkParentId['parent_id'] != 0) {
                    echo 'Please provide parent user_id';
                    exit;
                } else {
                    $utility = new Utility();
                    $offerSentModal = new Offersent();
                    $offerSentDetailsModal = new Offersentdetails();
                    $parentId = $utility->getParent($userId);
                    $mainUser = $subUserOne = $subUserTwo = $subUserThree = 0;
                    if($utility->isParent($userId) == 1) {
                        $allUserIds = $utility->getSubusers($parentId);
                    } else {
                        $allUserIds = [$userId];
                    }
                    $offerSentIds = [];
                    $offerSentDataIds = $offerSentModal->where('sender_id', $userId)->where('created_date', '!=', '0000-00-00 00:00:00')->select('id')->get();
                    foreach($offerSentDataIds as $offerSentDataIdsKey => $offerSentDataIdsValue) {
                        array_push($offerSentIds, $offerSentDataIdsValue['id']);
                    }
                    $offerSentDetailsSMSData = $offerSentDetailsModal->whereIn('offer_sent_id', $offerSentIds)->where('sent_date', '!=', '0000-00-00 00:00:00')->where('is_sender', 0)->whereRaw('(invitation_type = 2 OR authentication_method = 4 OR role = 2 OR offer_confirmation = 2)')->select('id', 'authentication_method', 'invitation_type', 'offer_status', 'role', 'offer_confirmation', DB::raw('DATE(sent_date) AS created_at'), DB::raw('DATE_FORMAT(sent_date, "%M %Y") AS created_date'), DB::raw('YEAR(sent_date) AS years, MONTH(sent_date) AS months'))->get();
                    $totalSMS = $totalSMSNew = 0;
                    foreach($offerSentDetailsSMSData as $offerSentDetailsSMSDataKey => $offerSentDetailsSMSDataValue) {
                        if($offerSentDetailsSMSDataValue['invitation_type'] == 2) {
                            $totalSMS = ($totalSMS+1);
                            $totalSMSNew++;
                        } if($offerSentDetailsSMSDataValue['offer_confirmation'] == 2 && $offerSentDetailsSMSDataValue['offer_status'] == 4) {
                            $totalSMS = ($totalSMS+1);
                            $totalSMSNew++;
                        } if( $offerSentDetailsSMSDataValue['authentication_method'] == 4) {
                            $totalSMS = ($totalSMS+1);
                            $totalSMSNew++;
                        }
                        $smsLogsData = Smslogs::where('offersent_detail_id', $offerSentDetailsSMSDataValue['id'])->where('section_name', 'Viewing and downloading pin via sms')->count();
                        if($smsLogsData) {
                            $totalSMS = ($totalSMS+1);
                            $totalSMSNew++;
                        }
                    }
                    echo '<hr>';
                    echo '<hr>';
                    echo '<hr>';
                    echo '************************* Total SMS *************************';
                    echo '************************* Total SMS *************************';
                    echo '<hr>';
                    echo '<hr>';
                    echo '<hr>';
                    //DATE_FORMAT(simplesign_offer_sent.created_date, "%M %Y") AS created_date
                    echo '<pre>';
                    $getAllSubUsers = $userModal->where('parent_id', $userId)->where('is_active', '!=', -1)->select('id', DB::raw('DATE_FORMAT(DATE(created_date), "%M %Y") AS created_date'))->get();
                    foreach($getAllSubUsers as $getAllSubUsersKey => $getAllSubUsersValue) {
                        echo 'User ID: ' . $getAllSubUsersValue['id'] . ' Created Date: ' . $getAllSubUsersValue['created_date'] . '<br>';
                    }
                    echo '</pre>';
                    echo '<hr>';
                    echo '<hr>';
                    echo '<hr>';
                    //DATE(simplesign_offer_sent.created_date)
                    //'offer_sent.sender_id', 'offer_send_details.authentication_method', DB::raw('DATE(simplesign_offer_sent.created_date) AS created_at'), DB::raw('count(simplesign_offer_sent.id) AS total'), DB::raw('DATE_FORMAT(simplesign_offer_sent.created_date, "%M %Y") AS created_date'), DB::raw('YEAR(simplesign_offer_sent.created_date) AS years, MONTH(simplesign_offer_sent.created_date) AS months')
                    $mainUserOfferSentData = $offerSentModal->join('offer_send_details', 'offer_sent.id', '=', 'offer_send_details.offer_sent_id')->where('offer_sent.sender_id', $userId)->where('offer_sent.offer_status', 4)->where('offer_send_details.is_sender', 0)->where('offer_send_details.authentication_method', '!=', 6)->get();
                    foreach($mainUserOfferSentData as $mainUserOfferSentDataKey => $mainUserOfferSentDataValue) {
                        $mainUser++;
                    }

                    $subUser1OfferSentData = $offerSentModal->join('offer_send_details', 'offer_sent.id', '=', 'offer_send_details.offer_sent_id')->where('offer_sent.sender_id', 2897)->where('offer_sent.offer_status', 4)->where('offer_send_details.is_sender', 0)->where('offer_send_details.authentication_method', '!=', 6)->get();
                    foreach($subUser1OfferSentData as $subUser1OfferSentDataKey => $subUser1OfferSentDataValue) {
                        $subUserOne++;
                    }

                    $subUser2OfferSentData = $offerSentModal->join('offer_send_details', 'offer_sent.id', '=', 'offer_send_details.offer_sent_id')->where('offer_sent.sender_id', 13419)->where('offer_sent.offer_status', 4)->where('offer_send_details.is_sender', 0)->where('offer_send_details.authentication_method', '!=', 6)->get();
                    foreach($subUser2OfferSentData as $subUser2OfferSentDataKey => $subUser2OfferSentDataValue) {
                        $subUserTwo++;
                    }

                    $subUser3OfferSentData = $offerSentModal->join('offer_send_details', 'offer_sent.id', '=', 'offer_send_details.offer_sent_id')->where('offer_sent.sender_id', 13420)->where('offer_sent.offer_status', 4)->where('offer_send_details.is_sender', 0)->where('offer_send_details.authentication_method', '!=', 6)->get();
                    foreach($subUser3OfferSentData as $subUser3OfferSentDataKey => $subUser3OfferSentDataValue) {
                        $subUserThree++;
                    }
                    //$offerSentData = $offerSentData->groupBy('years', 'months')->orderBy('offer_sent.created_date', 'ASC')->get();
                    //$offerSentData = collect($offerSentData->toArray());
                    //$offerSentData = $offerSentData->sortBy('created_at')->values()->all();
                }
            } else {
                echo 'Please provide user_id';
                exit;
            }
        }

        public function getDatatimeformat($lang='en', $date='') {
            $data = Input::all();
            $utility = new Utility();
            $domain_name = asset('/');

            $getDateTimeFormat = $utility->convertDateMonthNameToInteger($lang, $date);
        }

        public function getCheckgardaalarm() {
            $data = Input::all();
            $utility = new Utility();
            $domain_name = asset('/');

            $xml_request = new \Illuminate\Http\Request();
            $xml_request->setMethod('GET');
            $xml_request->query->add(['access_token' => $data['access_token'], 'document_id' => $data['sent_id'], 'get_ftp_path' => 1]);
            //$apiv3Controller = new apiv3Controller($xml_request);
            $xml_file = $this->getGetdocumentinfoxml($xml_request);
        }

        public function getCheckuserfields($userId = '') {
            $data = Input::all();
            $utility = new Utility();
            $domain_name = asset('/');

            if($userId != '') {
                $usersInfo = Userinfo::where('user_id', $userId)->select('extra_fields')->first();
            }
        }

        public function getInsertedcontract($sentId) {
            $data = Input::all();
            $utility = new Utility();
            $domain_name = asset('/');

            if($sentId != '') {
                $content = Offersent::where('id', $sentId)->pluck('content');
                exit('19781');
            }
        }

        public function getCheckrecipient($sendId = '', $detailId = '') {
            $data = Input::all();
            $utility = new Utility();
            $domain_name = asset('/');

            if($sendId != '' && $detailId != '') {
                $OfferSentDetails = Offersentdetails::where('id', $detailId)->where('offer_sent_id', $sendId)->select('user_details')->first();
            }
        }

        public function anyCheckfiletype() {
            $data = Input::all();
            if(isset($data['file']) && !empty($data['file'])) {
                $file = $data['file'];
                //adding condition starting
                $fileTypes = array('docx','doc','xls','xlsx','csv','ppt','pptx','pdf');
                if(!in_array(strtolower($file->getClientOriginalExtension()), $fileTypes)) {
                    return Response::json(['status'=>'error','result' => 'Invalid document file type, only document files are acceptable']);
                }
                //adding condition ending
                $file_original_name = $file->getClientoriginalName();
                $file_ext = strtolower($file->getClientOriginalExtension());
                $filename = pathinfo($file_original_name, PATHINFO_FILENAME);//substr($file_original_name,0,-4);
                exit;
            } else {
                return Response::json(['status'=>'error','result' => 'provide file']);
            }
        }
        public function mime2ext($mime){
        $all_mimes = '{"png":["image\/png","image\/x-png"],"bmp":["image\/bmp","image\/x-bmp",
        "image\/x-bitmap","image\/x-xbitmap","image\/x-win-bitmap","image\/x-windows-bmp",
        "image\/ms-bmp","image\/x-ms-bmp","application\/bmp","application\/x-bmp",
        "application\/x-win-bitmap"],"gif":["image\/gif"],"jpeg":["image\/jpeg",
        "image\/pjpeg"],"xspf":["application\/xspf+xml"],"vlc":["application\/videolan"],
        "wmv":["video\/x-ms-wmv","video\/x-ms-asf"],"au":["audio\/x-au"],
        "ac3":["audio\/ac3"],"flac":["audio\/x-flac"],"ogg":["audio\/ogg",
        "video\/ogg","application\/ogg"],"kmz":["application\/vnd.google-earth.kmz"],
        "kml":["application\/vnd.google-earth.kml+xml"],"rtx":["text\/richtext"],
        "rtf":["text\/rtf"],"jar":["application\/java-archive","application\/x-java-application",
        "application\/x-jar"],"zip":["application\/x-zip","application\/zip",
        "application\/x-zip-compressed","application\/s-compressed","multipart\/x-zip"],
        "7zip":["application\/x-compressed"],"xml":["application\/xml","text\/xml"],
        "svg":["image\/svg+xml"],"3g2":["video\/3gpp2"],"3gp":["video\/3gp","video\/3gpp"],
        "mp4":["video\/mp4"],"m4a":["audio\/x-m4a"],"f4v":["video\/x-f4v"],"flv":["video\/x-flv"],
        "webm":["video\/webm"],"aac":["audio\/x-acc"],"m4u":["application\/vnd.mpegurl"],
        "pdf":["application\/pdf","application\/octet-stream"],
        "pptx":["application\/vnd.openxmlformats-officedocument.presentationml.presentation"],
        "ppt":["application\/powerpoint","application\/vnd.ms-powerpoint","application\/vnd.ms-office",
        "application\/msword"],"docx":["application\/vnd.openxmlformats-officedocument.wordprocessingml.document"],
        "xlsx":["application\/vnd.openxmlformats-officedocument.spreadsheetml.sheet","application\/vnd.ms-excel"],
        "xl":["application\/excel"],"xls":["application\/msexcel","application\/x-msexcel","application\/x-ms-excel",
        "application\/x-excel","application\/x-dos_ms_excel","application\/xls","application\/x-xls"],
        "xsl":["text\/xsl"],"mpeg":["video\/mpeg"],"mov":["video\/quicktime"],"avi":["video\/x-msvideo",
        "video\/msvideo","video\/avi","application\/x-troff-msvideo"],"movie":["video\/x-sgi-movie"],
        "log":["text\/x-log"],"txt":["text\/plain"],"css":["text\/css"],"html":["text\/html"],
        "wav":["audio\/x-wav","audio\/wave","audio\/wav"],"xhtml":["application\/xhtml+xml"],
        "tar":["application\/x-tar"],"tgz":["application\/x-gzip-compressed"],"psd":["application\/x-photoshop",
        "image\/vnd.adobe.photoshop"],"exe":["application\/x-msdownload"],"js":["application\/x-javascript"],
        "mp3":["audio\/mpeg","audio\/mpg","audio\/mpeg3","audio\/mp3"],"rar":["application\/x-rar","application\/rar",
        "application\/x-rar-compressed"],"gzip":["application\/x-gzip"],"hqx":["application\/mac-binhex40",
        "application\/mac-binhex","application\/x-binhex40","application\/x-mac-binhex40"],
        "cpt":["application\/mac-compactpro"],"bin":["application\/macbinary","application\/mac-binary",
        "application\/x-binary","application\/x-macbinary"],"oda":["application\/oda"],
        "ai":["application\/postscript"],"smil":["application\/smil"],"mif":["application\/vnd.mif"],
        "wbxml":["application\/wbxml"],"wmlc":["application\/wmlc"],"dcr":["application\/x-director"],
        "dvi":["application\/x-dvi"],"gtar":["application\/x-gtar"],"php":["application\/x-httpd-php",
        "application\/php","application\/x-php","text\/php","text\/x-php","application\/x-httpd-php-source"],
        "swf":["application\/x-shockwave-flash"],"sit":["application\/x-stuffit"],"z":["application\/x-compress"],
        "mid":["audio\/midi"],"aif":["audio\/x-aiff","audio\/aiff"],"ram":["audio\/x-pn-realaudio"],
        "rpm":["audio\/x-pn-realaudio-plugin"],"ra":["audio\/x-realaudio"],"rv":["video\/vnd.rn-realvideo"],
        "jp2":["image\/jp2","video\/mj2","image\/jpx","image\/jpm"],"tiff":["image\/tiff"],
        "eml":["message\/rfc822"],"pem":["application\/x-x509-user-cert","application\/x-pem-file"],
        "p10":["application\/x-pkcs10","application\/pkcs10"],"p12":["application\/x-pkcs12"],
        "p7a":["application\/x-pkcs7-signature"],"p7c":["application\/pkcs7-mime","application\/x-pkcs7-mime"],"p7r":["application\/x-pkcs7-certreqresp"],"p7s":["application\/pkcs7-signature"],"crt":["application\/x-x509-ca-cert","application\/pkix-cert"],"crl":["application\/pkix-crl","application\/pkcs-crl"],"pgp":["application\/pgp"],"gpg":["application\/gpg-keys"],"rsa":["application\/x-pkcs7"],"ics":["text\/calendar"],"zsh":["text\/x-scriptzsh"],"cdr":["application\/cdr","application\/coreldraw","application\/x-cdr","application\/x-coreldraw","image\/cdr","image\/x-cdr","zz-application\/zz-winassoc-cdr"],"wma":["audio\/x-ms-wma"],"vcf":["text\/x-vcard"],"srt":["text\/srt"],"vtt":["text\/vtt"],"ico":["image\/x-icon","image\/x-ico","image\/vnd.microsoft.icon"],"csv":["text\/x-comma-separated-values","text\/comma-separated-values","application\/vnd.msexcel"],"json":["application\/json","text\/json"]}';
        $all_mimes = json_decode($all_mimes,true);
        foreach ($all_mimes as $key => $value) {
        if(array_search($mime,$value) !== false) return $key;
        }
        return false;
        }

    public function getCheckxmldata() {
        
        $curl = curl_init();

        curl_setopt_array($curl, array(
            CURLOPT_URL => "http://testwebservice.creditsafe.se/GetData/getdata.asmx?wsdl",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "POST",
            CURLOPT_POSTFIELDS =>"<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:get=\"https://webservice.creditsafe.se/getdata/\">\r\n   <soap:Header/>\r\n   <soap:Body>\r\n      <get:GetDataBySecure>\r\n         <get:GetData_Request>\r\n            <get:account>\r\n               <get:UserName>SIMPLESIGNTESTIN</get:UserName>\r\n               <get:Password>Simplesigntestin123</get:Password>\r\n               <get:Language>EN</get:Language>\r\n            </get:account>\r\n            <get:Block_Name>PERSONCREDIT</get:Block_Name>\r\n            <get:SearchNumber>191703038883</get:SearchNumber>\r\n         </get:GetData_Request>\r\n      </get:GetDataBySecure>\r\n   </soap:Body>\r\n</soap:Envelope>",
            CURLOPT_HTTPHEADER => array(
            "Content-Type: text/xml"
            ),
        ));

        $response = curl_exec($curl);

        curl_close($curl);
        //header('Content-type: text/xml');
        //echo '<textarea>'.$response.'</textarea>';
        //$xml = (array)simplexml_load_string($response);
        /* $fileContents = str_replace(array("\n", "\r", "\t"), '', $response);

        $fileContents = trim(str_replace('"', "'", $fileContents));

        $simpleXml = simplexml_load_string($fileContents, 'SimpleXMLElement', LIBXML_NOCDATA); */

        /* $simpleXMLElement = new SimpleXMLElement($fileContents);
        var_dump($simpleXMLElement);
        foreach($simpleXMLElement as $simpleXMLElementKey => $simpleXMLElementValue) {
        } */
        
        /* $array = (object) (array)$simpleXml;
        var_dump($array);
        var_dump($simpleXml->asXML());
        echo $simpleXml->asXML(); */

        $simpleXml = simplexml_load_string($response, 'SimpleXMLElement', LIBXML_NOCDATA);
        //$xmlJsonDecode = json_decode(json_encode($simpleXml));
        //$array = (object) (array)$simpleXml;
        echo $simpleXml->asXML();
        echo '<hr>';
        echo $response;
        echo '<hr>';
        echo '<hr>';
        echo '<hr>';
    
    }

        public  function isBase64Encoded($str) 
        {
        try
        {
        $decoded = base64_decode($str, true);

        if ( base64_encode($decoded) === $str ) {
        return true;
        }
        else {
        return false;
        }
        }
        catch(Exception $e)
        {
        // If exception is caught, then it is not a base64 encoded string
        return false;
        }

        }
    
    public function insertIframeLogs($logs = [],$user_id=0)
    {
        $current_ip = (isset($_SERVER['REMOTE_ADDR']) && $_SERVER['REMOTE_ADDR'] != '' ? $_SERVER['REMOTE_ADDR'] : '');
        $user_agent = (isset($_SERVER['HTTP_USER_AGENT']) && $_SERVER['HTTP_USER_AGENT'] != '' ? $_SERVER['HTTP_USER_AGENT'] : '');

        $utility = new Utility();
        $data['ip_address'] = $current_ip;
        $data['user_id'] = $user_id;
        $data['line'] = $logs['line_no'];
        $data['data'] = $logs['data'];
        $data['user_agent'] = $user_agent;
        $data['uniq_id'] = $logs['uniq_id'];
        $utility->addItem("iframe_logs", $data);
        DB::table("iframe_logs")->whereDate('created_at', '<', Carbon::now()->subDays(30))->delete();
        
    }

     public function getPreaddedrecipientsconverttonew(){
        $records = Preadded::all();
        foreach($records as $addRecKey => $addRecValue) {
            $offerid = $addRecValue['offer_doc_id'];
            $role_id = $addRecValue['role_id'];
            $authentication_type = 0;
            $invitation_order =0;
            $invitation_type = 0;
            $confirmation    = 0;
            $request = 0;
            $locked  = 0;
            $pre_added_details = $addRecValue['pre_added_details'];
            if($pre_added_details && $pre_added_details != ""){
               $pre_added_details = json_decode($pre_added_details,true) ;
               if(isset($pre_added_details['authentication_type'])){
                $authentication_type = $pre_added_details['authentication_type'];
               }
               if(isset($pre_added_details['invitation_order'])){
                $invitation_order = $pre_added_details['invitation_order'];
               }
               if(isset($pre_added_details['invitation_type'])){
                $invitation_type = $pre_added_details['invitation_type'];
               }
               if(isset($pre_added_details['confirmation'])){
                $confirmation = $pre_added_details['confirmation'];
               }
               if(isset($pre_added_details['request'])){
                $request = $pre_added_details['request'];
               }
               if(isset($pre_added_details['locked'])){
                $locked = $pre_added_details['locked'];
               }
            }
            $Recipient_fields_roles = Recipient_fields_roles::where('id', $role_id)->select('id')->first();
            if($Recipient_fields_roles){
                $Recipient_fields_rolesupdate['authentication']     = $authentication_type;
                $Recipient_fields_rolesupdate['invitation_order']   = $invitation_order;
                $Recipient_fields_rolesupdate['invitation_type']    = $invitation_type;
                $Recipient_fields_rolesupdate['confirmation']       = $confirmation;
                $Recipient_fields_rolesupdate['request_id']         = $request;
                $Recipient_fields_rolesupdate['locked']             = $locked;
                $Recipient_fields_rolesupdate['customer_id']        = $addRecValue['customer_id'];
                Recipient_fields_roles::where('id', $role_id)->update($Recipient_fields_rolesupdate);
            }
        }
    }

    function formatSizeUnits($bytes) {
        if($bytes >= 1073741824) {
            $bytes = number_format($bytes / 1073741824, 2) . ' GB';
        } elseif($bytes >= 1048576) {
            $bytes = number_format($bytes / 1048576, 2) . ' MB';
        } elseif($bytes >= 1024) {
            $bytes = number_format($bytes / 1024, 2) . ' KB';
        } elseif($bytes > 1) {
            $bytes = $bytes . ' bytes';
        } elseif($bytes == 1) {
            $bytes = $bytes . ' byte';
        } else {
            $bytes = '0 bytes';
        }
        return $bytes;
    }

    public function getCheckhtmlcontent($documentId) {
        if($documentId != '') {
            $contentData = Offersent::where('id', $documentId)->select('content')->first();
            echo Tcrypt::decrypter($contentData['content']);
        }
    }

    public function postRevokedocument() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');

        //access token validation starting
        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
        //access token validation ending

        //document id validation starting
        if(isset($data['document_id']) && $data['document_id'] != '') {
            $documentId = $data['document_id'];
        } else {
            return Response::json(['status'=>'error','result' => 'document_id is missing']);
        }
        //document id validation ending

        $user_id = $utility->getUserIdByAuthToken($access_token);
        if($user_id > 0) {
            $parentId = $utility->getParent($user_id);
            $getApiHitCount = Userinfo::where('user_id', $parentId)->select('hit_count')->first();
            $addupdateapiaccesslogs = $utility->addupdateapiaccesslogs($user_id, 'postRevokedocument v3', $data, $getApiHitCount['hit_count']);
            if($addupdateapiaccesslogs == 'exceed') {
                $this->apiCallLimitExceedMessage = str_replace('#hitCuntNo', $getApiHitCount['hit_count'], $this->apiCallLimitExceedMessage);
                return Response::json(['status' => 'error', 'result' => $this->apiCallLimitExceedMessage]);
            }
            $parent_id = $utility->getParent($user_id);
            if($utility->isParent($user_id) == 1) {
                $allUserIds = $utility->getSubusers($parent_id);
            } else {
                $allUserIds = [$user_id];
            }
            $userSettings = $utility->getUserSettings($parent_id);
            $newAddonObj = (isset($userSettings['new_addon_obj']) && !empty($userSettings['new_addon_obj']) ? json_decode($userSettings['new_addon_obj'], true) : []);
            //$revokeDocumentAddonPermission = (!empty($newAddonObj) && isset($newAddonObj['revoke_addon']) && $newAddonObj['revoke_addon'] == 1 ? $newAddonObj['revoke_addon'] : 0);
            $revokeDocumentAddonPermission = 0;
            if(!empty($newAddonObj) && !isset($newAddonObj['revoke_addon'])) {
                $revokeDocumentAddonPermission = 1;
            } elseif(!empty($newAddonObj) && isset($newAddonObj['revoke_addon']) && $newAddonObj['revoke_addon'] == 1) {
                $revokeDocumentAddonPermission = 1;
            }
            if($revokeDocumentAddonPermission != 1) {
                return Response::json(['status'=>'error','result' => 'Revoke document is not enabled in your account, Contact Simplesign support for revoke document activation']);
            }

            $checkDocument = Offersent::where('id', $documentId)->whereIn('sender_id', $allUserIds)->where('offer_status', '!=', 11)->first();
            if($checkDocument) {
                //$getSignedDocument = Offersentdetails::where('offer_sent_id', $documentId)->where('is_sender', 0)->where('offer_status', 4)->count();
                $getSignedDocument = Offersent::where('id', $documentId)->where('offer_status', 4)->count();
                if($getSignedDocument) {
                    return Response::json(['status'=>'error','result' => "You can't revoke this document"]);
                }
                $fullName = DB::table('users_info')->where('user_id', $user_id)->pluck('full_name');
                $activityData = ['recipient_id' => 0, 'user_id' => $user_id, 'offer_sent_id' => $documentId, 'offer_detail_id' => 0, 'activity' => 'revoked', 'user_name' => $fullName, 'type' => 2];
                $overview = new overviewController();
                $overview->postRevokecontract(['access_token' => $access_token, 'contract_id' => $documentId, 'activity' => json_encode($activityData)]);
                return Response::json(['status' => 'success', 'result' => 'Document revoked successfully']);
            } else {
                return Response::json(['status' => 'error', 'result' => 'Invalid document_id or access_token']);
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }

    public function postTestingswedishchar() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');

        return Response::json(['status'=>'success','result' => $data['name']]);
    }

    public function setAuth($id)
    {
         $utility = new Utility;
        //creating session for checking user is coming from admin panel or regular login starting (MS)
        if(isset($_SERVER['HTTP_REFERER']) && strpos($_SERVER['HTTP_REFERER'], "admin") !== false) {
            Session::set('login_from_admin', 1);
        } else {
            Session::set('login_from_admin', 0);
        }
        Session::put('external_login',0);
        Session::put('chromext_login',0);
        
        Session::put('contract_id',"");
        Session::put('salesforce_login',"");
        Session::put('OpportunityId',"");
        Session::put('external_doc_id',"");
        Session::put('checkthirdparty',0);
        Session::put('sales_force_contract',"");
        //creating session for checking user is coming from admin panel or regular login ending (MS)
        Auth::logout();
    	$user=User::where('id',$id)->where('is_active', '1')->first();
        Auth::login($user);
        Session::put('user_id',$user->id);
    	return Auth::user();
    	//Session::put('name',$user1);

    }

    public function postAddproductlibrary() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');

        //access token validation starting
        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        }
        //access token validation ending

        //getting user id, parent id and user settings from user_setting table starting
        $user_id = $utility->getUserIdByAuthToken($access_token);
        if($user_id > 0) {
            $parent_id = $utility->getParent($user_id);
            $addupdateapiaccesslogs = $utility->addupdateapiaccesslogs($user_id, 'postAddproductlibrary v3', $data, -1);
            $userSettings = $utility->getUserSettings($parent_id);
            $newAddonObj = (isset($userSettings['new_addon_obj']) && !empty($userSettings['new_addon_obj']) ? json_decode($userSettings['new_addon_obj'], true) : []);
            $viewerPartyAddonPermission = (!empty($newAddonObj) && isset($newAddonObj['product_table_addon_permission']) && $newAddonObj['product_table_addon_permission'] == 1 ? $newAddonObj['product_table_addon_permission'] : 0);

            if($viewerPartyAddonPermission != 1) {
                return Response::json(['status' => 'error', 'result' => 'Product library feature is not enabled in your account, Contact Simplesign support for product library activation']);
            }
            
            if(isset($data['product_library']) && $data['product_library'] != '') {
                if($this->is_JSON($data['product_library'])) {
                    $productLibraryJsonDecode = json_decode($data['product_library'], true);
                    if(!empty($productLibraryJsonDecode)) {
                        foreach($productLibraryJsonDecode as $productLibraryJsonDecodeKey => $productLibraryJsonDecodeValue) {
                            if(!empty($productLibraryJsonDecodeValue['product'])) {
                                if(!is_array($productLibraryJsonDecodeValue['product'])) {
                                    return Response::json(['status' => 'error', 'result' => 'product should be array']);
                                } elseif(isset($productLibraryJsonDecodeValue['product']) && !empty($productLibraryJsonDecodeValue['product'])) {
                                    if(!isset($productLibraryJsonDecodeValue['product']['product_name']) || $productLibraryJsonDecodeValue['product']['product_name'] == '') {
                                        return Response::json(['status' => 'error', 'result' => 'Invalid or missing product_name']);
                                    }
                                }
                            } else {
                                return Response::json(['status' => 'error', 'result' => 'product should not be empty']);
                            }
                        }
                    } else {
                        return Response::json(['status'=>'error','result' => 'product_library information should not be empty']);
                    }
                } else {
                    return Response::json(['status' => 'error', 'result' => 'product_library information is invalid format, JSON is required']);
                }

                $currencyArray = [
                'AED', 'AFN', 'ALL', 'AMD', 'AOA', 'ARS', 'AWG', 'AZN', 'BAM', 'BBD', 'BDT', 'BGN', 'BHD', 'BIF', 'BMD', 'BND', 'BOB', 'BRL',
                'BWP', 'BYN', 'BZD', 'CAD', 'CDF', 'CHF', 'CLP', 'CNY', 'COP', 'CRC', 'CVE', 'CZK', 'DJF', 'DKK', 'DOP', 'DZD', 'EGP', 'ERN',
                'ETB', 'FJD', 'GEL', 'GHS', 'GNF', 'GTQ', 'GYD', 'HKD', 'HNL', 'HRK', 'HUF', 'IDR', 'ILS', 'INR', 'IQD', 'IRR', 'ISK', 'JMD',
                'JOD', 'JPY', 'KES', 'KHR', 'KMF', 'KRW', 'KWD', 'KZT', 'LBP', 'LKR', 'LRD', 'LTL', 'LVL', 'LYD', 'MAD', 'MDL', 'MGA', 'MKD',
                'MMK', 'MOP', 'MUR', 'MXN', 'MYR', 'MZN', 'NAD', 'NGN', 'NIO', 'NOK', 'NPR', 'NZD', 'OMR', 'PAB', 'PEN', 'PGK', 'PHP', 'PKR',
                'PLN', 'PYG', 'QAR', 'RON', 'RSD', 'RUB', 'RWF', 'SAR', 'SDG', 'SEK', 'SGD', 'SOS', 'STD', 'SYP', 'THB', 'TND', 'TOP', 'TRY',
                'TTD', 'TWD', 'TZS', 'UAH', 'UF', 'UGX', 'UYU', 'UZS', 'VEF', 'VND', 'XAF', 'XOF', 'YER', 'ZAR', 'ZMK', 'CUC', 'AUD', 'EUR',
                'GBP', 'USD'];

                $productLibraryModal = new ProductLibrary();
                $getProductLibrary = $productLibraryModal->where('user_id', $parent_id)->select('product_list')->first();
                $productDataArray = [];
                //if($getProductLibrary['product_list'] != '' && $getProductLibrary['product_list'] != '[]') {
                if($getProductLibrary['product_list'] != '') {
                    $productListJsonDecode = json_decode($getProductLibrary['product_list'], true);
                    //addupdateiteminproductlibrary line no 5049 settings.js
                    foreach($productLibraryJsonDecode as $productLibraryJsonDecodeKey => $productLibraryJsonDecodeValue) {
                        if(isset($productLibraryJsonDecodeValue['product']['currency']) && $productLibraryJsonDecodeValue['product']['currency'] != '' && !in_array($productLibraryJsonDecodeValue['product']['currency'], $currencyArray)) {
                            return Response::json(['status' => 'error', 'result' => 'currency error']);
                        }
                        //added this [] array bracket condition only below search code was previously added
                        if($getProductLibrary['product_list'] != '[]') {
                            $arraySearchKey = array_search($productLibraryJsonDecodeValue['product']['sku'], array_column($productListJsonDecode, 'product_sku'));
                            if(isset($productLibraryJsonDecodeValue['product']['sku']) && $productLibraryJsonDecodeValue['product']['sku'] != '' && $productListJsonDecode[$arraySearchKey]['product_sku'] == $productLibraryJsonDecodeValue['product']['sku']) {
                                return Response::json(['status' => 'error', 'result' => 'item with same sku already exist']);
                            }
                        }
                        $productDataArray['product_sku'] = (isset($productLibraryJsonDecodeValue['product']['sku']) && $productLibraryJsonDecodeValue['product']['sku'] != '' ? $productLibraryJsonDecodeValue['product']['sku'] : rand(10000, 99999));
                        $productDataArray['product_name'] = $productLibraryJsonDecodeValue['product']['product_name'];
                        $productDataArray['product_price'] = (isset($productLibraryJsonDecodeValue['product']['price']) && $productLibraryJsonDecodeValue['product']['price'] != '' ? number_format($productLibraryJsonDecodeValue['product']['price'], 2, '.', '') : '0.00');
                        $productDataArray['product_currency'] = (isset($productLibraryJsonDecodeValue['product']['currency']) && $productLibraryJsonDecodeValue['product']['currency'] != '' ? strtoupper($productLibraryJsonDecodeValue['product']['currency']) : 'USD');
                        $productDataArray['product_cost'] = (isset($productLibraryJsonDecodeValue['product']['cost']) && $productLibraryJsonDecodeValue['product']['cost'] != '' ? number_format($productLibraryJsonDecodeValue['product']['cost'], 2, '.', '') : '0.00');
                        $productDataArray['product_description'] = (isset($productLibraryJsonDecodeValue['product']['description']) && $productLibraryJsonDecodeValue['product']['description'] != '' ? $productLibraryJsonDecodeValue['product']['description'] : '');
                        $productDataArray['permission_forname'] = (isset($productLibraryJsonDecodeValue['product']['product_name_editable']) && strtolower($productLibraryJsonDecodeValue['product']['product_name_editable']) == 'yes' ? 1 : (isset($productLibraryJsonDecodeValue['product']['product_name_editable']) && strtolower($productLibraryJsonDecodeValue['product']['product_name_editable']) == 'no' ? 0 : 0));
                        $productDataArray['permission_forprice'] = (isset($productLibraryJsonDecodeValue['product']['product_price_editable']) && strtolower($productLibraryJsonDecodeValue['product']['product_price_editable']) == 'yes' ? 1 : (isset($productLibraryJsonDecodeValue['product']['product_price_editable']) && strtolower($productLibraryJsonDecodeValue['product']['product_price_editable']) == 'no' ? 0 : 0));
                        $productDataArray['permission_fordescription'] = (isset($productLibraryJsonDecodeValue['product']['product_description_editable']) && strtolower($productLibraryJsonDecodeValue['product']['product_description_editable']) == 'yes' ? 1 : (isset($productLibraryJsonDecodeValue['product']['product_description_editable']) && strtolower($productLibraryJsonDecodeValue['product']['product_description_editable']) == 'no' ? 0 : 0));
                        if(isset($productLibraryJsonDecodeValue['item_categories']) && !empty($productLibraryJsonDecodeValue['item_categories'])) {
                            if(!is_array($productLibraryJsonDecodeValue['item_categories'])) {
                                return Response::json(['status' => 'error', 'result' => 'item_categories should be an array']);
                            } else {
                                $productDataArray['item_categories'] = $productLibraryJsonDecodeValue['item_categories'];
                            }
                        }
                        if(isset($productLibraryJsonDecodeValue['custom_columns']) && !empty($productLibraryJsonDecodeValue['custom_columns'])) {
                            if(!is_array($productLibraryJsonDecodeValue['custom_columns'])) {
                                return Response::json(['status' => 'error', 'result' => 'custom_columns should be an array']);
                            } else {
                                $customColumns = $productLibraryJsonDecodeValue['custom_columns'];
                                $keyValueArrayPush = [];
                                foreach($customColumns as $customColumnsKey => $customColumnsValue) {
                                    if(isset($customColumnsKey) && $customColumnsKey != '' && isset($customColumnsValue) && $customColumnsValue != '') {
                                        $keyValueArray = [];
                                        $keyValueArray[$customColumnsKey] = $customColumnsValue;
                                        array_push($keyValueArrayPush, $keyValueArray);
                                    }
                                }
                                if(!empty($keyValueArrayPush)) {
                                    $productDataArray['custom_fields'] = $keyValueArrayPush;
                                }
                            }
                        }
                        array_push($productListJsonDecode, $productDataArray);
                        //unset these variables because in loop if second array doesn't have values it was adding it again
                        unset($productDataArray['custom_fields']);
                        unset($productDataArray['item_categories']);
                    }
                    $productLibraryModal->where('user_id', $parent_id)->update(['product_list' => json_encode($productListJsonDecode)]);
                } else {
                    $productListJsonDecode = [];
                    foreach($productLibraryJsonDecode as $productLibraryJsonDecodeKey => $productLibraryJsonDecodeValue) {
                        if(isset($productLibraryJsonDecodeValue['product']['currency']) && $productLibraryJsonDecodeValue['product']['currency'] != '' && !in_array($productLibraryJsonDecodeValue['product']['currency'], $currencyArray)) {
                            return Response::json(['status' => 'error', 'result' => 'currency error']);
                        }
                        /* $arraySearchKey = array_search($productLibraryJsonDecodeValue['product']['sku'], array_column($productListJsonDecode, 'product_sku'));
                        if(isset($productLibraryJsonDecodeValue['product']['sku']) && $productLibraryJsonDecodeValue['product']['sku'] != '' && $productListJsonDecode[$arraySearchKey]['product_sku'] == $productLibraryJsonDecodeValue['product']['sku']) {
                            return Response::json(['status' => 'error', 'result' => 'item with same sku already exist']);
                        } */
                        $productDataArray['product_sku'] = (isset($productLibraryJsonDecodeValue['product']['sku']) && $productLibraryJsonDecodeValue['product']['sku'] != '' ? $productLibraryJsonDecodeValue['product']['sku'] : rand(10000, 99999));
                        $productDataArray['product_name'] = $productLibraryJsonDecodeValue['product']['product_name'];
                        $productDataArray['product_price'] = (isset($productLibraryJsonDecodeValue['product']['price']) && $productLibraryJsonDecodeValue['product']['price'] != '' ? number_format($productLibraryJsonDecodeValue['product']['price'], 2, '.', '') : '0.00');
                        $productDataArray['product_currency'] = (isset($productLibraryJsonDecodeValue['product']['currency']) && $productLibraryJsonDecodeValue['product']['currency'] != '' ? strtoupper($productLibraryJsonDecodeValue['product']['currency']) : 'USD');
                        $productDataArray['product_cost'] = (isset($productLibraryJsonDecodeValue['product']['cost']) && $productLibraryJsonDecodeValue['product']['cost'] != '' ? number_format($productLibraryJsonDecodeValue['product']['cost'], 2, '.', '') : '0.00');
                        $productDataArray['product_description'] = (isset($productLibraryJsonDecodeValue['product']['description']) && $productLibraryJsonDecodeValue['product']['description'] != '' ? $productLibraryJsonDecodeValue['product']['description'] : '');
                        $productDataArray['permission_forname'] = (isset($productLibraryJsonDecodeValue['product']['product_name_editable']) && strtolower($productLibraryJsonDecodeValue['product']['product_name_editable']) == 'yes' ? 1 : (isset($productLibraryJsonDecodeValue['product']['product_name_editable']) && strtolower($productLibraryJsonDecodeValue['product']['product_name_editable']) == 'no' ? 0 : 0));
                        $productDataArray['permission_forprice'] = (isset($productLibraryJsonDecodeValue['product']['product_price_editable']) && strtolower($productLibraryJsonDecodeValue['product']['product_price_editable']) == 'yes' ? 1 : (isset($productLibraryJsonDecodeValue['product']['product_price_editable']) && strtolower($productLibraryJsonDecodeValue['product']['product_price_editable']) == 'no' ? 0 : 0));
                        $productDataArray['permission_fordescription'] = (isset($productLibraryJsonDecodeValue['product']['product_description_editable']) && strtolower($productLibraryJsonDecodeValue['product']['product_description_editable']) == 'yes' ? 1 : (isset($productLibraryJsonDecodeValue['product']['product_description_editable']) && strtolower($productLibraryJsonDecodeValue['product']['product_description_editable']) == 'no' ? 0 : 0));
                        if(isset($productLibraryJsonDecodeValue['item_categories']) && !empty($productLibraryJsonDecodeValue['item_categories'])) {
                            if(!is_array($productLibraryJsonDecodeValue['item_categories'])) {
                                return Response::json(['status' => 'error', 'result' => 'item_categories should be an array']);
                            } else {
                                $productDataArray['item_categories'] = $productLibraryJsonDecodeValue['item_categories'];
                            }
                        }
                        if(isset($productLibraryJsonDecodeValue['custom_columns']) && !empty($productLibraryJsonDecodeValue['custom_columns'])) {
                            if(!is_array($productLibraryJsonDecodeValue['custom_columns'])) {
                                return Response::json(['status' => 'error', 'result' => 'custom_columns should be an array']);
                            } else {
                                $customColumns = $productLibraryJsonDecodeValue['custom_columns'];
                                $keyValueArrayPush = [];
                                foreach($customColumns as $customColumnsKey => $customColumnsValue) {
                                    if(isset($customColumnsKey) && $customColumnsKey != '' && isset($customColumnsValue) && $customColumnsValue != '') {
                                        $keyValueArray = [];
                                        $keyValueArray[$customColumnsKey] = $customColumnsValue;
                                        array_push($keyValueArrayPush, $keyValueArray);
                                    }
                                }
                                if(!empty($keyValueArrayPush)) {
                                    $productDataArray['custom_fields'] = $keyValueArrayPush;
                                }
                            }
                        }
                        array_push($productListJsonDecode, $productDataArray);
                        unset($productDataArray['custom_fields']);
                        unset($productDataArray['item_categories']);
                    }
                    $productLibraryModal->insertGetId(['user_id' => $parent_id, 'product_list' => json_encode($productListJsonDecode)]);
                }
                return Response::json(['status' => 'success', 'result' => 'record(s) added successfully']);
            } else {
                return Response::json(['status' => 'error', 'result' => 'product_name is missing']);
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }

    public function getProductlibrary() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');

        //access token validation starting
        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        }
        //access token validation ending

        //getting user id, parent id and user settings from user_setting table starting
        $user_id = $utility->getUserIdByAuthToken($access_token);
        if($user_id > 0) {
            $parent_id = $utility->getParent($user_id);
            $addupdateapiaccesslogs = $utility->addupdateapiaccesslogs($user_id, 'getProductlibrary v3', $data, -1);
            $userSettings = $utility->getUserSettings($parent_id);
            $newAddonObj = (isset($userSettings['new_addon_obj']) && !empty($userSettings['new_addon_obj']) ? json_decode($userSettings['new_addon_obj'], true) : []);
            $viewerPartyAddonPermission = (!empty($newAddonObj) && isset($newAddonObj['product_table_addon_permission']) && $newAddonObj['product_table_addon_permission'] == 1 ? $newAddonObj['product_table_addon_permission'] : 0);
            
            if($viewerPartyAddonPermission != 1) {
                return Response::json(['status' => 'error', 'result' => 'Product library feature is not enabled in your account, Contact Simplesign support for product library activation']);
            }
            
            $getProductLibrary = ProductLibrary::where('user_id', $parent_id)->select('product_list')->first();
            if(isset($getProductLibrary['product_list']) && $getProductLibrary['product_list'] != '[]') {
                $productListJsonDecode = json_decode($getProductLibrary['product_list'], true);
                $dataArray = $responseArray = [];
                foreach($productListJsonDecode as $productListJsonDecodeKey => $productListJsonDecodeValue) {
                    $dataArray['sku'] = $productListJsonDecodeValue['product_sku'];
                    $dataArray['product_name'] = $productListJsonDecodeValue['product_name'];
                    $dataArray['price'] = $productListJsonDecodeValue['product_price'];
                    $dataArray['currency'] = $productListJsonDecodeValue['product_currency'];
                    $dataArray['cost'] = $productListJsonDecodeValue['product_cost'];
                    $dataArray['description'] = $productListJsonDecodeValue['product_description'];
                    $dataArray['product_name_editable'] = (isset($productListJsonDecodeValue['permission_forname']) && $productListJsonDecodeValue['permission_forname'] == 1 ? 'Yes' : 'No');
                    $dataArray['product_price_editable'] = (isset($productListJsonDecodeValue['permission_forprice']) && $productListJsonDecodeValue['permission_forprice'] == 1 ? 'Yes' : 'No');
                    $dataArray['product_description_editable'] = (isset($productListJsonDecodeValue['permission_fordescription']) && $productListJsonDecodeValue['permission_fordescription'] == 1 ? 'Yes' : 'No');
                    if(isset($productListJsonDecodeValue['item_categories']) && !empty($productListJsonDecodeValue['item_categories'])) {
                        $dataArray['item_categories'] = $productListJsonDecodeValue['item_categories'];
                    }
                    if(isset($productListJsonDecodeValue['custom_fields']) && !empty($productListJsonDecodeValue['custom_fields'])) {
                        $customFieldsData = [];
                        foreach($productListJsonDecodeValue['custom_fields'] as $customFieldsKey => $customFieldsValue) {
                            if(isset($productListJsonDecodeValue['custom_fields'][$customFieldsKey]) && !empty($productListJsonDecodeValue['custom_fields'][$customFieldsKey])) {
                                array_push($customFieldsData, $productListJsonDecodeValue['custom_fields'][$customFieldsKey]);
                            }
                        }
                        $dataArray['custom_fields'] = $customFieldsData;
                    }
                    array_push($responseArray, $dataArray);
                }
                return Response::json(['status' => 'success', 'result' => $responseArray]);
            } else {
                return Response::json(['status' => 'error', 'result' => 'No record(s) found']);
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }

    public function postUpdateproductlibrary() {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');

        //access token validation starting
        if(isset($data['access_token']) && $data['access_token'] != '') {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        }
        //access token validation ending

        //getting user id, parent id and user settings from user_setting table starting
        $user_id = $utility->getUserIdByAuthToken($access_token);
        if($user_id > 0) {
            $parent_id = $utility->getParent($user_id);
            $addupdateapiaccesslogs = $utility->addupdateapiaccesslogs($user_id, 'postUpdateproductlibrary v3', $data, -1);
            $userSettings = $utility->getUserSettings($parent_id);
            $newAddonObj = (isset($userSettings['new_addon_obj']) && !empty($userSettings['new_addon_obj']) ? json_decode($userSettings['new_addon_obj'], true) : []);
            $viewerPartyAddonPermission = (!empty($newAddonObj) && isset($newAddonObj['product_table_addon_permission']) && $newAddonObj['product_table_addon_permission'] == 1 ? $newAddonObj['product_table_addon_permission'] : 0);
            
            if($viewerPartyAddonPermission != 1) {
                return Response::json(['status' => 'error', 'result' => 'Product library feature is not enabled in your account, Contact Simplesign support for product library activation']);
            }

            $currencyArray = [
            'AED', 'AFN', 'ALL', 'AMD', 'AOA', 'ARS', 'AWG', 'AZN', 'BAM', 'BBD', 'BDT', 'BGN', 'BHD', 'BIF', 'BMD', 'BND', 'BOB', 'BRL',
            'BWP', 'BYN', 'BZD', 'CAD', 'CDF', 'CHF', 'CLP', 'CNY', 'COP', 'CRC', 'CVE', 'CZK', 'DJF', 'DKK', 'DOP', 'DZD', 'EGP', 'ERN',
            'ETB', 'FJD', 'GEL', 'GHS', 'GNF', 'GTQ', 'GYD', 'HKD', 'HNL', 'HRK', 'HUF', 'IDR', 'ILS', 'INR', 'IQD', 'IRR', 'ISK', 'JMD',
            'JOD', 'JPY', 'KES', 'KHR', 'KMF', 'KRW', 'KWD', 'KZT', 'LBP', 'LKR', 'LRD', 'LTL', 'LVL', 'LYD', 'MAD', 'MDL', 'MGA', 'MKD',
            'MMK', 'MOP', 'MUR', 'MXN', 'MYR', 'MZN', 'NAD', 'NGN', 'NIO', 'NOK', 'NPR', 'NZD', 'OMR', 'PAB', 'PEN', 'PGK', 'PHP', 'PKR',
            'PLN', 'PYG', 'QAR', 'RON', 'RSD', 'RUB', 'RWF', 'SAR', 'SDG', 'SEK', 'SGD', 'SOS', 'STD', 'SYP', 'THB', 'TND', 'TOP', 'TRY',
            'TTD', 'TWD', 'TZS', 'UAH', 'UF', 'UGX', 'UYU', 'UZS', 'VEF', 'VND', 'XAF', 'XOF', 'YER', 'ZAR', 'ZMK', 'CUC', 'AUD', 'EUR',
            'GBP', 'USD'];

            $productLibraryModal = new ProductLibrary();
            $getProductLibrary = $productLibraryModal->where('user_id', $parent_id)->select('product_list')->first();
            if($getProductLibrary['product_list'] != '' && $getProductLibrary['product_list'] != '[]') {
                if(isset($data['product_library']) && $data['product_library'] != '') {
                    if($this->is_JSON($data['product_library'])) {
                        $productLibraryJsonDecode = json_decode($data['product_library'], true);
                        if(!empty($productLibraryJsonDecode)) {
                            $databaseProductListJsonDecode = (isset($getProductLibrary['product_list']) && $getProductLibrary['product_list'] != '' ? json_decode($getProductLibrary['product_list'], true) : []);
                            foreach($productLibraryJsonDecode as $productLibraryJsonDecodeKey => $productLibraryJsonDecodeValue) {
                                if(!empty($productLibraryJsonDecodeValue['product'])) {
                                    if(!is_array($productLibraryJsonDecodeValue['product'])) {
                                        return Response::json(['status' => 'error', 'result' => 'product should be array']);
                                    } elseif(isset($productLibraryJsonDecodeValue['product']) && !empty($productLibraryJsonDecodeValue['product'])) {
                                        $product = $productLibraryJsonDecodeValue['product'];
                                        if(!empty($product)) {
                                            //sku and currency validation starting
                                            if(!isset($product['sku']) || $product['sku'] == '') {
                                                return Response::json(['status' => 'error', 'result' => 'Invalid or missing sku']);
                                            } if(isset($product['currency']) && $product['currency'] != '' && !in_array($product['currency'], $currencyArray)) {
                                                return Response::json(['status' => 'error', 'result' => 'currency error']);
                                            }
                                            //sku and currency validation ending
                                            if(!empty($databaseProductListJsonDecode)) {
                                                $arraySearchKey = array_search($product['sku'], array_column($databaseProductListJsonDecode, 'product_sku'));
                                                if(isset($databaseProductListJsonDecode[$arraySearchKey]['product_sku']) && $databaseProductListJsonDecode[$arraySearchKey]['product_sku'] == $product['sku']) {
                                                    $databaseProductListJsonDecode[$arraySearchKey]['product_sku'] = (isset($product['sku']) && $product['sku'] != '' ? $product['sku'] : $databaseProductListJsonDecode[$arraySearchKey]['product_sku']);
                                                    $databaseProductListJsonDecode[$arraySearchKey]['product_name'] = (isset($product['product_name']) && $product['product_name'] != '' ? $product['product_name'] : $databaseProductListJsonDecode[$arraySearchKey]['product_name']);
                                                    $databaseProductListJsonDecode[$arraySearchKey]['product_price'] = (isset($product['price']) && $product['price'] != '' ? number_format($product['price'], 2, '.', '') : $databaseProductListJsonDecode[$arraySearchKey]['product_price']);
                                                    $databaseProductListJsonDecode[$arraySearchKey]['product_currency'] = (isset($product['currency']) && $product['currency'] != '' ? strtoupper($product['currency']) : $databaseProductListJsonDecode[$arraySearchKey]['product_currency']);
                                                    $databaseProductListJsonDecode[$arraySearchKey]['product_cost'] = (isset($product['cost']) && $product['cost'] != '' ? number_format($product['cost'], 2, '.', '') : $databaseProductListJsonDecode[$arraySearchKey]['product_cost']);
                                                    $databaseProductListJsonDecode[$arraySearchKey]['product_description'] = (isset($product['description']) && $product['description'] != '' ? $product['description'] : $databaseProductListJsonDecode[$arraySearchKey]['product_description']);
                                                    $databaseProductListJsonDecode[$arraySearchKey]['permission_forname'] = (isset($product['product_name_editable']) && strtolower($product['product_name_editable']) == 'yes' ? 1 : (isset($product['product_name_editable']) && strtolower($product['product_name_editable']) == 'no' ? 0 : $databaseProductListJsonDecode[$arraySearchKey]['permission_forname']));
                                                    $databaseProductListJsonDecode[$arraySearchKey]['permission_forprice'] = (isset($product['product_price_editable']) && strtolower($product['product_price_editable']) == 'yes' ? 1 : (isset($product['product_price_editable']) && strtolower($product['product_price_editable']) == 'no' ? 0 : $databaseProductListJsonDecode[$arraySearchKey]['permission_forprice']));
                                                    $databaseProductListJsonDecode[$arraySearchKey]['permission_fordescription'] = (isset($product['product_description_editable']) && strtolower($product['product_description_editable']) == 'yes' ? 1 : (isset($product['product_description_editable']) && strtolower($product['product_description_editable']) == 'no' ? 0 : $databaseProductListJsonDecode[$arraySearchKey]['permission_fordescription']));
                                                    if(isset($productLibraryJsonDecodeValue['item_categories']) && !empty($productLibraryJsonDecodeValue['item_categories'])) {
                                                        if(!is_array($productLibraryJsonDecodeValue['item_categories'])) {
                                                            return Response::json(['status' => 'error', 'result' => 'item_categories should be an array']);
                                                        } else {
                                                            if(isset($databaseProductListJsonDecode[$arraySearchKey]['item_categories']) && !empty($databaseProductListJsonDecode[$arraySearchKey]['item_categories'])) {
                                                                $databaseProductListJsonDecode[$arraySearchKey]['item_categories'] = array_merge($databaseProductListJsonDecode[$arraySearchKey]['item_categories'], $productLibraryJsonDecodeValue['item_categories']);
                                                            } else {
                                                                $databaseProductListJsonDecode[$arraySearchKey]['item_categories'] = $productLibraryJsonDecodeValue['item_categories'];
                                                            }
                                                        }
                                                    }
                                                    if(isset($productLibraryJsonDecodeValue['custom_columns']) && !empty($productLibraryJsonDecodeValue['custom_columns'])) {
                                                        if(!is_array($productLibraryJsonDecodeValue['custom_columns'])) {
                                                            return Response::json(['status' => 'error', 'result' => 'custom_columns should be an array']);
                                                        } else {
                                                            $customColumns = $productLibraryJsonDecodeValue['custom_columns'];
                                                            foreach($customColumns as $customColumnsKey => $customColumnsValue) {
                                                                if(isset($customColumnsKey) && $customColumnsKey != '' && isset($customColumnsValue) && $customColumnsValue != '') {
                                                                    if(isset($databaseProductListJsonDecode[$arraySearchKey]['custom_fields']) && !empty($databaseProductListJsonDecode[$arraySearchKey]['custom_fields'])) {
                                                                        foreach($databaseProductListJsonDecode[$arraySearchKey]['custom_fields'] as $customFieldsKey => $customFieldsValue) {
                                                                            if(isset($customFieldsValue[$customColumnsKey]) && $customFieldsValue[$customColumnsKey] != '') {
                                                                                $databaseProductListJsonDecode[$arraySearchKey]['custom_fields'][$customFieldsKey][$customColumnsKey] = $customColumnsValue;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    return Response::json(['status' => 'error', 'result' => 'product should not be empty']);
                                }
                            }   //foreach loop ending
                            if(!empty($databaseProductListJsonDecode)) {
                                $productLibraryModal->where('user_id', $parent_id)->update(['product_list' => json_encode($databaseProductListJsonDecode)]);
                                return Response::json(['status' => 'success', 'result' => 'record(s) updated successfully']);
                            }
                        } else {
                            return Response::json(['status' => 'error', 'result' => 'product_library information should not be empty']);
                        }
                    } else {
                        return Response::json(['status' => 'error', 'result' => 'product_library information is invalid format, JSON is required']);
                    }
                }
            } else {
                return Response::json(['status' => 'error', 'result' => 'No record(s) found']);
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'Invalid access_token']);
        }
    }
    
    public function getMergemultiplefiles() {
        $pdf = new PDFMerger();
        $pdf->addPDF(public_path().'/uploads/4SignaturesTag.pdf', 'all');
        $pdf->addPDF(public_path().'/uploads/mytestfile.pdf', 'all');
        $pdf->merge('file', 'testing.pdf');
    }

    public function checkUserTemplates($user_id, $templateId) {
        $utility = new Utility();
        $parent_id = $utility->getParent($user_id);
        if($utility->isParent($user_id) == 1) {
            $coloumns = array('offer_docs.id','offer_docs.whos_updated','offer_docs.updated_at','offer_docs.name','offer_docs.user_group','users_login.parent_id','users_info.user_id','users_info.full_name','offer_docs.is_shareable','offer_docs.user_extended_shareable','offer_docs.is_published','offer_docs.created_date','offer_docs.contract_type_id');
            $template = DB::table('offer_docs')
            ->join('users_login', 'offer_docs.user_id', '=', 'users_login.id')
            ->join('users_info', 'offer_docs.user_id', '=', 'users_info.user_id')
            ->where('offer_docs.user_id', '=', $user_id)
            ->where('offer_docs.is_saved', '=', 1)
            ->where('offer_docs.id', $templateId)
            //->orWhere('offer_docs.invite_user_temp_id', $templateId)
            ->orWhere(function ($query) use ($parent_id, $user_id, $templateId) {
                $query->where('users_login.parent_id', '=', $parent_id)
                ->where('is_shareable', '=', '1')
                ->where('offer_docs.id', $templateId)
                //->orWhere('offer_docs.invite_user_temp_id', $templateId)
                ->where("user_extended_shareable","LIKE", "%".$user_id.",%")
                ->join('users_login', 'offer_docs.user_id', '=', 'users_login.parent_id')
                ->join('users_info', 'users_login.parent_id', '=', 'users_info.user_id');
            })->orWhere(function ($query) use ($parent_id, $user_id, $templateId) {
                $query->where('users_login.parent_id', '=', $parent_id)
                ->where('is_shareable', '=', '1')
                ->where('offer_docs.id', $templateId)
                //->orWhere('offer_docs.invite_user_temp_id', $templateId)
                ->where("user_group","LIKE", '%"'.$user_id.'"%')
                ->join('users_login', 'offer_docs.user_id', '=', 'users_login.parent_id')
                ->join('users_info', 'users_login.parent_id', '=', 'users_info.user_id');
            })->select($coloumns);
        } else {
            $coloumns = array('offer_docs.id','offer_docs.name','offer_docs.whos_updated','offer_docs.updated_at','offer_docs.user_group','users_login.parent_id','users_info.user_id','users_info.full_name','offer_docs.is_shareable','offer_docs.user_extended_shareable','offer_docs.is_published','offer_docs.created_date','offer_docs.contract_type_id');
            $template = DB::table('offer_docs')
            ->join('users_login', 'offer_docs.user_id', '=', 'users_login.id')
            ->join('users_info', 'offer_docs.user_id', '=', 'users_info.user_id')
            ->where('offer_docs.user_id', $user_id)
            ->where('offer_docs.is_saved', '=', 1)
            ->where('offer_docs.id', $templateId)
            //->orWhere('offer_docs.invite_user_temp_id', $templateId)
            ->orWhere(function ($query) use ($parent_id, $user_id, $templateId) {
                $query->where('offer_docs.user_id', '=', $parent_id)
                ->where('is_shareable', '=', '1')
                ->where('offer_docs.id', $templateId)
                //->orWhere('offer_docs.invite_user_temp_id', $templateId)
                ->where("offer_docs.user_extended_shareable","LIKE", "%".$user_id.",%")
                ->join('users_login', 'offer_docs.user_id', '=', 'users_login.parent_id')
                ->join('users_info', 'users_login.parent_id', '=', 'users_info.user_id');
            })->orWhere(function ($query) use ($parent_id, $user_id, $templateId) {
                $query->where('users_login.parent_id', '=', $parent_id)
                ->where('is_shareable', '=', '1')
                ->where('offer_docs.id', $templateId)
                //->orWhere('offer_docs.invite_user_temp_id', $templateId)
                ->where("offer_docs.user_extended_shareable","LIKE", "%".$user_id.",%")
                ->join('users_login', 'offer_docs.user_id', '=', 'users_login.parent_id')
                ->join('users_info', 'users_login.parent_id', '=', 'users_info.user_id');
            })->orWhere(function ($query) use ($parent_id, $user_id, $templateId) {
                $query->where('offer_docs.user_id', '=', $parent_id)
                ->where('is_shareable', '=', '1')
                ->where('offer_docs.id', $templateId)
                //->orWhere('offer_docs.invite_user_temp_id', $templateId)
                ->where("offer_docs.user_group","LIKE", '%"'.$user_id.'"%')
                ->join('users_login', 'offer_docs.user_id', '=', 'users_login.parent_id')
                ->join('users_info', 'users_login.parent_id', '=', 'users_info.user_id');
            })->orWhere(function ($query) use ($parent_id, $user_id, $templateId) {
                $query->where('users_login.parent_id', '=', $parent_id)
                ->where('is_shareable', '=', '1')
                ->where('offer_docs.id', $templateId)
                //->orWhere('offer_docs.invite_user_temp_id', $templateId)
                ->where("offer_docs.user_group","LIKE", '%"'.$user_id.'"%')
                ->join('users_login', 'offer_docs.user_id', '=', 'users_login.parent_id')
                ->join('users_info', 'users_login.parent_id', '=', 'users_info.user_id');
            })->select($coloumns);
        }
        
        $total_templates = $template->count();
        //$template = $template->groupBy('offer_docs.id')->orderBy('updated_at', 'desc')->skip($skipRecords)->take($pageLimit);
        //$template = $template->get();

        if($total_templates) {
            return true;
        } else {
            return false;
        }
    }
    
    
    public function checkTemplateAccess($user_id, $parent_id) {
        $utility = new Utility();
        $userData = User::where('id', $user_id)->select('user_premission_group')->first();
        $userPremissionGroup = $utility->getUserGroupsRole($userData['user_premission_group'], $parent_id);
        if(isset($userPremissionGroup) && $userPremissionGroup != '' && $utility->isParent($user_id) != 1) {
            $checkAcces = 0;
            foreach($userPremissionGroup as $userPremissionGroupKey => $userPremissionGroupValue) {
                if($userPremissionGroupValue['role_permission'] != '') {
                    $rolePermission = json_decode($userPremissionGroupValue['role_permission'], true);
                    if(isset($rolePermission['templates_shared']) && $rolePermission['templates_shared'] != '') {
                        $templatesShared = $rolePermission['templates_shared'];
                        if((isset($templatesShared['can_send']) && $templatesShared['can_send'] == 1) || (isset($templatesShared['can_edit']) && $templatesShared['can_edit'] == 1) || (isset($templatesShared['full_access']) && $templatesShared['full_access'] == 1)) {
                            $checkAcces = 1;
                            break;
                        }
                    }
                }
            }
            return $checkAcces;
        }
    }



    /* Get the table data from database */
    public function templateTables($document_id)
    {
        $data = Offersent::with("producttables.tableitems")->where('id', $document_id)->select('id')->get();
        return $data->toArray()[0];
    }

    public function getSmsstats($userId) {
        if($userId != '') {
            $utility = new Utility();
            $parentId = $utility->getParent($userId);
            if($utility->isParent($userId) == 1) {
                $allUserIds = $utility->getSubusers($parentId);
            } else {
                $allUserIds = [$userId];
            }
            $getSMSLogs = Smslogs::whereIn('user_id', $allUserIds)->select('section_name', DB::raw('MONTH(send_datetime) AS months, DATE_FORMAT(send_datetime, "%M %Y") AS usage_date'))->get()->toArray();
            if($getSMSLogs) {
                $checkDataArray = [];
                foreach($getSMSLogs as $getSMSLogsKeys => $getSMSLogsValues) {
                    //Inviation SMS starting
                    if(!isset($checkDataArray[$getSMSLogsValues['usage_date']]['Invitation SMS'])){
                        $checkDataArray[$getSMSLogsValues['usage_date']]['Invitation SMS'] = 0;
                    } if($getSMSLogsValues['section_name'] == 'Invitation SMS' || $getSMSLogsValues['section_name'] == 'Invitation SMS from order by' || $getSMSLogsValues['section_name'] == 'Invitation SMS through API') {
                        $checkDataArray[$getSMSLogsValues['usage_date']]['Invitation SMS'] += 1;
                    }
                    //Inviation SMS ending

                    //Confirmation SMS starting
                    if(!isset($checkDataArray[$getSMSLogsValues['usage_date']]['Confirmation SMS'])){
                        $checkDataArray[$getSMSLogsValues['usage_date']]['Confirmation SMS'] = 0;
                    } if($getSMSLogsValues['section_name'] == 'Sent verification email') {
                        $checkDataArray[$getSMSLogsValues['usage_date']]['Confirmation SMS'] += 1;
                    }
                    //Confirmation SMS ending
                    
                    //Reminder SMS starting
                    if(!isset($checkDataArray[$getSMSLogsValues['usage_date']]['Reminder SMS'])){
                        $checkDataArray[$getSMSLogsValues['usage_date']]['Reminder SMS'] = 0;
                    } if($getSMSLogsValues['section_name'] == 'Reminder Overview' || $getSMSLogsValues['section_name'] == 'Cronjob check reminder') {
                        $checkDataArray[$getSMSLogsValues['usage_date']]['Reminder SMS'] += 1;
                    }
                    //Reminder SMS ending

                    //Viewing And Downloading starting
                    if(!isset($checkDataArray[$getSMSLogsValues['usage_date']]['Document Key Send Password Via SMS'])){
                        $checkDataArray[$getSMSLogsValues['usage_date']]['Document Key Send Password Via SMS'] = 0;
                    } if($getSMSLogsValues['section_name'] == 'Viewing And Downloading') {
                        $checkDataArray[$getSMSLogsValues['usage_date']]['Document Key Send Password Via SMS'] += 1;
                    }
                    //Viewing And Downloading ending

                    //Contract Pin via SMS starting
                    if(!isset($checkDataArray[$getSMSLogsValues['usage_date']]['Sign Document By SMS Pin'])){
                        $checkDataArray[$getSMSLogsValues['usage_date']]['Sign Document By SMS Pin'] = 0;
                    } if($getSMSLogsValues['section_name'] == 'Contract Pin via SMS') {
                        $checkDataArray[$getSMSLogsValues['usage_date']]['Sign Document By SMS Pin'] += 1;
                    }
                    //Contract Pin via SMS ending

                    //Online viewing and downloading pin via sms starting
                    if(!isset($checkDataArray[$getSMSLogsValues['usage_date']]['Document Key Pin Via SMS Open Document'])){
                        $checkDataArray[$getSMSLogsValues['usage_date']]['Document Key Pin Via SMS Open Document'] = 0;
                    } if($getSMSLogsValues['section_name'] == 'Online viewing and downloading pin via sms') {
                        $checkDataArray[$getSMSLogsValues['usage_date']]['Document Key Pin Via SMS Open Document'] += 1;
                    }
                    //Online viewing and downloading pin via sms ending

                    //Online contract pin via SMS starting
                    if(!isset($checkDataArray[$getSMSLogsValues['usage_date']]['Sign Web Document By SMS Pin'])){
                        $checkDataArray[$getSMSLogsValues['usage_date']]['Sign Web Document By SMS Pin'] = 0;
                    } if($getSMSLogsValues['section_name'] == 'Online contract pin via SMS') {
                        $checkDataArray[$getSMSLogsValues['usage_date']]['Sign Web Document By SMS Pin'] += 1;
                    }
                    //Online contract pin via SMS ending

                    //Online viewing and downloading pin via sms after signing starting
                    if(!isset($checkDataArray[$getSMSLogsValues['usage_date']]['After Sign Web Document By SMS Pin'])){
                        $checkDataArray[$getSMSLogsValues['usage_date']]['After Sign Web Document By SMS Pin'] = 0;
                    } if($getSMSLogsValues['section_name'] == 'Online viewing and downloading pin via sms after signing') {
                        $checkDataArray[$getSMSLogsValues['usage_date']]['After Sign Web Document By SMS Pin'] += 1;
                    }
                    //Online viewing and downloading pin via sms after signing ending

                    //send SMS for order of next recipient starting
                    if(!isset($checkDataArray[$getSMSLogsValues['usage_date']]['Sent SMS In Order Of Next Recipient'])){
                        $checkDataArray[$getSMSLogsValues['usage_date']]['Sent SMS In Order Of Next Recipient'] = 0;
                    } if($getSMSLogsValues['section_name'] == 'send SMS for order of next recipient') {
                        $checkDataArray[$getSMSLogsValues['usage_date']]['Sent SMS In Order Of Next Recipient'] += 1;
                    }
                    //send SMS for order of next recipient ending

                    //Resend Document starting
                    if(!isset($checkDataArray[$getSMSLogsValues['usage_date']]['Resend Document'])){
                        $checkDataArray[$getSMSLogsValues['usage_date']]['Resend Document'] = 0;
                    } if($getSMSLogsValues['section_name'] == 'Resend Document') {
                        $checkDataArray[$getSMSLogsValues['usage_date']]['Resend Document'] += 1;
                    }
                    //Resend Document ending

                    //Send pending confirmation SMS starting
                    if(!isset($checkDataArray[$getSMSLogsValues['usage_date']]['Sent Pending Confirmation SMS'])){
                        $checkDataArray[$getSMSLogsValues['usage_date']]['Sent Pending Confirmation SMS'] = 0;
                    } if($getSMSLogsValues['section_name'] == 'Send pending confirmation SMS') {
                        $checkDataArray[$getSMSLogsValues['usage_date']]['Sent Pending Confirmation SMS'] += 1;
                    }
                    //Send pending confirmation SMS ending
                }
            }
            return Response::json(['sms_usage' => $checkDataArray]);
        } else {
            return Response::json(['error' => 'provide user id']);
        }
    }

    public function getChecksmsusage($userId) {
        $utility = new Utility();
        $parentId = $utility->getParent($userId);
        if($utility->isParent($userId) == 1) {
            $allUserIds = $utility->getSubusers($parentId);
        } else {
            $allUserIds = [$userId];
        }

        $getSMSLogs = Smslogs::whereIn('user_id', $allUserIds)->select('section_name')->get()->toArray();
        if($getSMSLogs) {
            $invitationSMS = $verificationEmail = $documentKeySendPasswordViaSMS = $esignAndSMSPin = $onlineDocumentKeyPinViaSMSOpenDocument =
            $signOnlineDocumentPinViaSMS = $reminderOverview = $invitationSMSFromOrderBy = $InvitationSMSThroughAPI = $OnlineViewingAndDownloadingPinViaSMSAfterSigning = 
            $sendSMSForOrderOfNextRecipient = $resendDocument = $sentPendingConfirmationSMS = 0;
            foreach($getSMSLogs as $getSMSLogsKey => $getSMSLogsValue) {
                if($getSMSLogsValue['section_name'] == 'Invitation SMS') {
                    $invitationSMS = ($invitationSMS+1);
                } if($getSMSLogsValue['section_name'] == 'Sent verification email') {
                    $verificationEmail = ($verificationEmail+1);
                } if($getSMSLogsValue['section_name'] == 'Viewing And Downloading') {
                    $documentKeySendPasswordViaSMS = ($documentKeySendPasswordViaSMS+1);
                } if($getSMSLogsValue['section_name'] == 'Contract Pin via SMS') {
                    $esignAndSMSPin = ($esignAndSMSPin+1);
                } if($getSMSLogsValue['section_name'] == 'Online viewing and downloading pin via sms') {
                    $onlineDocumentKeyPinViaSMSOpenDocument = ($onlineDocumentKeyPinViaSMSOpenDocument+1);
                } if($getSMSLogsValue['section_name'] == 'Online contract pin via SMS') {
                    $signOnlineDocumentPinViaSMS = ($signOnlineDocumentPinViaSMS+1);
                } if($getSMSLogsValue['section_name'] == 'Reminder Overview') {
                    $reminderOverview = ($reminderOverview+1);
                } if($getSMSLogsValue['section_name'] == 'Invitation SMS from order by') {
                    $invitationSMSFromOrderBy = ($invitationSMSFromOrderBy+1);
                } if($getSMSLogsValue['section_name'] == 'Invitation SMS through API') {
                    $InvitationSMSThroughAPI = ($InvitationSMSThroughAPI+1);
                } if($getSMSLogsValue['section_name'] == 'Cronjob check reminder') {
                    $reminderOverview = ($reminderOverview+1);
                } if($getSMSLogsValue['section_name'] == 'Online viewing and downloading pin via sms after signing') {
                    $OnlineViewingAndDownloadingPinViaSMSAfterSigning = ($OnlineViewingAndDownloadingPinViaSMSAfterSigning+1);
                } if($getSMSLogsValue['section_name'] == 'send SMS for order of next recipient') {
                    $sendSMSForOrderOfNextRecipient = ($sendSMSForOrderOfNextRecipient+1);
                } if($getSMSLogsValue['section_name'] == 'Resend Document') {
                    $resendDocument = ($resendDocument+1);
                } if($getSMSLogsValue['section_name'] == 'Send pending confirmation SMS') {
                    $sentPendingConfirmationSMS = ($sentPendingConfirmationSMS+1);
                }
            }
            return Response::json([
                'Invitation SMS' => $invitationSMS,
                'Confirmation SMS' => $verificationEmail,
                'Document Key Send Password Via SMS' => $documentKeySendPasswordViaSMS,
                'Sign Document By SMS Pin' => $esignAndSMSPin,
                'Document Key Pin Via SMS Open Document' => $onlineDocumentKeyPinViaSMSOpenDocument,
                'Sign Web Document By SMS Pin' => $signOnlineDocumentPinViaSMS,
                'Sent Reminder' => $reminderOverview,
                'Invitation SMS From Order By' => $invitationSMSFromOrderBy,
                'Invitation SMS through API' => $InvitationSMSThroughAPI,
                'After Sign Web Document By SMS Pin' => $OnlineViewingAndDownloadingPinViaSMSAfterSigning,
                'Sent SMS In Order Of Next Recipient' => $sendSMSForOrderOfNextRecipient,
                'Resend Document' => $resendDocument,
                'Sent Pending Confirmation SMS' => $sentPendingConfirmationSMS
            ]);
        }
    }

    public function getSpecificdocumentdetailawaisold($custom_data=[]) {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');
        $storeFieldsObjDB = false;
        //setMajorDB();
        //print_rj($data, 1);

        //added by me (MS) 01 June 2020 starting
        if(isset($custom_data['access_token']) && $custom_data['access_token'] != '') {
            $data['access_token'] = $custom_data['access_token'];
        }
        if(isset($custom_data['document_id']) && $custom_data['document_id'] != '') {
            $data['document_id'] = $custom_data['document_id'];
        }
        //added by me (MS) 01 June 2020 ending

        //access_token validation starting
        if(isset($data['access_token']) && $data['access_token'] != '' && !isset($custom_data['user_id']) ) {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
        //access_token validation ending

        if(isset($custom_data['user_id'])) {
            $user_id = $custom_data['user_id'];
            $storeFieldsObjDB = true;
        } else {
            $user_id = $utility->getUserIdByAuthToken($access_token);
        }
        $parent_id = $utility->getParent($user_id);
        if($utility->isParent($user_id) == 1) {
            $allUserIds = $utility->getSubusers($parent_id);
        } else {
            $allUserIds = [$user_id];
        }

        //contract_id validation starting
        if(isset($data['document_id']) && $data['document_id'] != '') {
            $document_id = $data['document_id'];
        } elseif(isset($custom_data['sent_id']) && $custom_data['sent_id'] != '') {
            $document_id = $custom_data['sent_id'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'document_id is missing']);
        }

        $userTimeZone = $utility->getUsertimezone($parent_id);
        $getDocumentIdFromExternalDocumentId = $utility->documentExternalId($document_id, $allUserIds);
        if(!empty($getDocumentIdFromExternalDocumentId)) {
            $document_id = $getDocumentIdFromExternalDocumentId;
            $data['document_id'] = $document_id;
        }

        $checkingDraft = Offersent::where('id', $document_id)->where('offer_status', 7)->where('is_draft', 1)->count();
        if($checkingDraft) {
            return Response::json(['status' => 'error', 'result' => 'document is not sent']);
        }

        $userSettings = $utility->getUserSettings($parent_id);
        $getApiHitCount = Userinfo::where('user_id', $parent_id)->select('hit_count')->first();
        $addupdateapiaccesslogs = $utility->addupdateapiaccesslogs($user_id, 'getSpecificdocumentdetail v3', $data, $getApiHitCount['hit_count']);
        if($addupdateapiaccesslogs == 'exceed') {
            $this->apiCallLimitExceedMessage = str_replace('#hitCuntNo', $getApiHitCount['hit_count'], $this->apiCallLimitExceedMessage);
            return Response::json(['status' => 'error', 'result' => $this->apiCallLimitExceedMessage]);
        }

        if($utility->checkAdminStripe($user_id) && !isset($custom_data['user_id']) ) {
            return Response::json(['status' => 'error', 'result' => 'Account is locked make payment in order to continue Simplesign']);
        }

        $contractData = Offersentdetails::where('offer_send_details.offer_sent_id', $document_id)->join('offer_sent', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')->select('offer_sent.language_id', 'offer_send_details.id AS detail_id', 'offer_send_details.offer_sent_id', 'offer_send_details.user_details', 'offer_send_details.offer_status', 'offer_send_details.req_attached', 'offer_send_details.document_read_date', 'offer_send_details.signed_date', 'offer_send_details.authentication_method', 'offer_send_details.role', 'offer_send_details.invitation_type', 'offer_send_details.invitation_order', 'offer_send_details.offer_confirmation', 'offer_send_details.id_attachments', 'offer_sent.content', 'offer_send_details.forward_status', 'offer_send_details.forward_user_details', 'offer_send_details.forward_signed')->where('offer_send_details.is_sender', 0)->whereIn('offer_sent.sender_id', $allUserIds)->get()->toArray();
        //print_rj($contractData, 1);
        if($contractData) {
            $responseArray = $senderInfo = $contractDetails =  [];
            $offerSentContent = Offersent::where('id', $document_id)->whereIn('sender_id', $allUserIds)->select('content', 'visible_name', 'name', 'language_id', 'id', 'offer_id', 'created_date', 'offer_status', 'signed_date', 'due_date', 'external_doc_id')->first();
            foreach($contractData as $contractDataKey => $contractDataValue) {
                $languageId = $contractDataValue['language_id'];

                $peopleFields = $organizationFields = $details = $inviteAndForwardDetails = [];
                $nameExplode = '';
                
                $recipientUserDetails = Tcrypt::decrypter($contractDataValue['user_details']);
                $recipientUserDetailsJsonDecode = json_decode($recipientUserDetails, true);

                //$peopleFields['detail_id'] = $contractDataValue['detail_id'];
                //$peopleFields['offer_sent_id'] = $contractDataValue['offer_sent_id'];
                //$contractDataValue['forward_status'];
                $userRole = (isset($recipientUserDetailsJsonDecode['recrolename']) && $recipientUserDetailsJsonDecode['recrolename'] != '' ? $recipientUserDetailsJsonDecode['recrolename'] : (isset($recipientUserDetailsJsonDecode['partyname']) && $recipientUserDetailsJsonDecode['partyname'] != '' ? $recipientUserDetailsJsonDecode['partyname'] : ''));

                //basic information of recipient starting

                $recipientFieldsRolesTabFields = (isset($recipientUserDetailsJsonDecode['Recipient_fields_roles_tab_fields']) && !empty($recipientUserDetailsJsonDecode['Recipient_fields_roles_tab_fields']) ? json_decode($recipientUserDetailsJsonDecode['Recipient_fields_roles_tab_fields'], true) : '');
                $recinfoFields = ($recipientFieldsRolesTabFields != '' ? $recipientFieldsRolesTabFields['recinfo_fields'] : '');

                //print_rj($recipientUserDetailsJsonDecode, 1);
                if(isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '') {
                    //for regular contract recipient use full_name key
                    if((isset($recinfoFields['last_name']) && $recinfoFields['last_name'] == 1) || (isset($recipientUserDetailsJsonDecode['last_name']) && $recipientUserDetailsJsonDecode['last_name'] != '')) {
                        $nameExplode = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($recipientUserDetailsJsonDecode['full_name'])) : '');
                        if(isset($recipientUserDetailsJsonDecode['last_name']) && $recipientUserDetailsJsonDecode['last_name'] != '' && isset($nameExplode[1]) && $nameExplode[1] != '' && $nameExplode[1] != $recipientUserDetailsJsonDecode['last_name']) {
                            $peopleFields['first_name'] = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? $recipientUserDetailsJsonDecode['full_name'] : '');
                            $peopleFields['last_name'] = (isset($recipientUserDetailsJsonDecode['last_name']) && $recipientUserDetailsJsonDecode['last_name'] != '' ? $recipientUserDetailsJsonDecode['last_name'] : '');
                        } else {
                            $peopleFields['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                            $peopleFields['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                        }
                    } else {
                        $nameExplode = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($recipientUserDetailsJsonDecode['full_name'])) : '');
                        $peopleFields['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                        $peopleFields['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                    }
                } elseif(isset($recipientUserDetailsJsonDecode['name']) && $recipientUserDetailsJsonDecode['name'] != '') {
                    //for online contract recipient use name key
                    $nameExplode = (isset($recipientUserDetailsJsonDecode['name']) && $recipientUserDetailsJsonDecode['name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($recipientUserDetailsJsonDecode['name'])) : '');
                    $peopleFields['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                    $peopleFields['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                }
                $peopleFields['email'] = (isset($recipientUserDetailsJsonDecode['email']) && $recipientUserDetailsJsonDecode['email'] != '' ? trim(preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $recipientUserDetailsJsonDecode['email'])) : '');
                //$peopleFields['personal_no'] = (isset($recipientUserDetailsJsonDecode['personnr']) && $recipientUserDetailsJsonDecode['personnr'] != '' ? trim($recipientUserDetailsJsonDecode['personnr']) : '');
                $peopleFields['personal_no'] = (isset($recipientUserDetailsJsonDecode['personnr']) && $recipientUserDetailsJsonDecode['personnr'] != '' ? (strlen(trim($recipientUserDetailsJsonDecode['personnr'])) == 12 || strlen(trim($recipientUserDetailsJsonDecode['personnr'])) == 13 ? substr(trim($recipientUserDetailsJsonDecode['personnr']), 2) : trim($recipientUserDetailsJsonDecode['personnr'])) : '');
                $peopleFields['mobile'] = (isset($recipientUserDetailsJsonDecode['mobile']) && $recipientUserDetailsJsonDecode['mobile'] != '' ? trim($recipientUserDetailsJsonDecode['mobile']) : '');
                $peopleFields['address'] = (isset($recipientUserDetailsJsonDecode['address']) && $recipientUserDetailsJsonDecode['address'] != '' ? trim($recipientUserDetailsJsonDecode['address']) : '');
                $peopleFields['city'] = (isset($recipientUserDetailsJsonDecode['city']) && $recipientUserDetailsJsonDecode['city'] != '' ? trim($recipientUserDetailsJsonDecode['city']) : '');
                $peopleFields['zipcode'] = (isset($recipientUserDetailsJsonDecode['zipcode']) && $recipientUserDetailsJsonDecode['zipcode'] != '' ? trim($recipientUserDetailsJsonDecode['zipcode']) : (isset($recipientUserDetailsJsonDecode['zip']) && $recipientUserDetailsJsonDecode['zip'] != '' ? trim($recipientUserDetailsJsonDecode['zip']) : ''));
                //basic information of recipient ending

                //organization information of recipient starting
                if(isset($recipientUserDetailsJsonDecode['organization_fields'])) {
                    $orgFields = json_decode($recipientUserDetailsJsonDecode['organization_fields'], true);
                    foreach($orgFields as $orgFldsKey => $orgFldsValue) {
                        $orgFldsValue['orgFieldName'] = str_replace('name', 'organization_name', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('org_no', 'organization_no', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('phone', 'organization_phone', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('address', 'organization_address', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('city', 'organization_city', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('zipcode', 'organization_zipcode', $orgFldsValue['orgFieldName']);
                        $organizationFields[$orgFldsValue['orgFieldName']] = $orgFldsValue['orgFieldValue'];
                    }
                } else {
                    if(isset($recipientUserDetailsJsonDecode['org_name']) && $recipientUserDetailsJsonDecode['org_name'] != '') {
                        $organizationFields['organization_name'] = $recipientUserDetailsJsonDecode['org_name'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_reg_no']) && $recipientUserDetailsJsonDecode['org_reg_no'] != '') {
                        $organizationFields['organization_no'] = $recipientUserDetailsJsonDecode['org_reg_no'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_mobile']) && $recipientUserDetailsJsonDecode['org_mobile'] != '') {
                        $organizationFields['organization_phone'] = $recipientUserDetailsJsonDecode['org_mobile'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_address']) && $recipientUserDetailsJsonDecode['org_address'] != '') {
                        $organizationFields['organization_address'] = $recipientUserDetailsJsonDecode['org_address'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_city']) && $recipientUserDetailsJsonDecode['org_city'] != '') {
                        $organizationFields['organization_city'] = $recipientUserDetailsJsonDecode['org_city'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_zip']) && $recipientUserDetailsJsonDecode['org_zip'] != '') {
                        $organizationFields['organization_zipcode'] = $recipientUserDetailsJsonDecode['org_zip'];
                    }
                }
                //organization information of recipient ending

                //people information of new fields starting
                if(isset($recipientUserDetailsJsonDecode['extra_fields']) && !empty($recipientUserDetailsJsonDecode['extra_fields'])) {
                    $recipientFieldsWithoutValue = (isset($recipientUserDetailsJsonDecode['recipientfields']) && !empty($recipientUserDetailsJsonDecode['recipientfields']) ? json_decode($recipientUserDetailsJsonDecode['recipientfields'], true) : []);

                    $extraFields = (isset($recipientUserDetailsJsonDecode['extra_fields']) && !empty($recipientUserDetailsJsonDecode['extra_fields']) ? json_decode($recipientUserDetailsJsonDecode['extra_fields'], true) : []);
                    if($extraFields) {
                        $intersect = array_uintersect($extraFields, $recipientFieldsWithoutValue, function($val1, $val2) {
                            return strcmp($val1['fieldName'], $val2['fieldName']);
                        });
                        $intersect = array_values($intersect);
                    } else {
                        $intersect = [];
                    }

                    if(!empty($intersect)) {
                        foreach($intersect as $extraFldKey => $extraFldValue) {
                            $peopleFields[$extraFldValue['fieldName']] = $extraFldValue['fieldValue'];
                        }
                    }
                }
                //people information of new fields ending

                //organization information of new fields starting
                if(isset($recipientUserDetailsJsonDecode['org_extra_fields']) && !empty($recipientUserDetailsJsonDecode['org_extra_fields'])) {
                    $organizationFieldsWithoutValue = (isset($recipientUserDetailsJsonDecode['organizationfields']) && !empty($recipientUserDetailsJsonDecode['organizationfields']) ? json_decode($recipientUserDetailsJsonDecode['organizationfields'], true) : []);

                    $orgExtraFields = (isset($recipientUserDetailsJsonDecode['org_extra_fields']) && !empty($recipientUserDetailsJsonDecode['org_extra_fields']) ? json_decode($recipientUserDetailsJsonDecode['org_extra_fields'], true) : []);
                    if($orgExtraFields) {
                        $intersectOrg = array_uintersect($orgExtraFields, $organizationFieldsWithoutValue, function($val1, $val2) {
                            return strcmp($val1['fieldName'], $val2['fieldName']);
                        });
                        $intersectOrg = array_values($intersectOrg);
                    } else {
                        $intersectOrg = [];
                    }

                    if(!empty($intersectOrg)) {
                        foreach($intersectOrg as $orgExtraFldKey => $orgExtraFldValue) {
                            $organizationFields[$orgExtraFldValue['fieldName']] = $orgExtraFldValue['fieldValue'];
                        }
                    }
                }
                //organization information of new fields ending
                
                //organization information of fields which are placed at document starting
                $content = Tcrypt::decrypter($contractDataValue['content']);
                if($content != '') {
                    $html = new \Htmldom($content);
                    foreach($html->find('.text') as $findKey => $findValue) {
                        //codition for regular contract starting
                        if(isset($recipientUserDetailsJsonDecode['id']) && $recipientUserDetailsJsonDecode['id'] == $findValue->recipientselectedid) {
                            if(strpos($findValue->getAttribute('class'), 'peopleNewField') !== false) {
                                if($findValue->find('h4', 0)) {
                                    $peopleFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                } else {
                                    if($findValue->find('p', 0)) {
                                        $peopleFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                    }
                                }
                            } if(strpos($findValue->getAttribute('class'), 'organizationNewField') !== false) {
                                if($findValue->find('h4', 0)) {
                                    $organizationFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                } else {
                                    if($findValue->find('p', 0)) {
                                        $organizationFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                    }
                                }
                            }
                            //codition for regular contract ending
                        } else {
                            //codition for online contract starting
                            if($userRole == $findValue->parent()->parent()->whowillfill) {
                                if(strpos($findValue->getAttribute('class'), 'peopleNewField') !== false) {
                                    if($findValue->find('h4', 0)) {
                                        $peopleFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                    } else {
                                        //right now paragraph tag is showing and will be replaced by h4 near future starting
                                        if($findValue->find('p', 0)) {
                                            $peopleFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                        }
                                        //right now paragraph tag is showing and will be replaced by h4 near future ending
                                    }
                                } if(strpos($findValue->getAttribute('class'), 'organizationNewField') !== false) {
                                    if($findValue->find('h4', 0)) {
                                        $organizationFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                    } else {
                                        //right now paragraph tag is showing and will be replaced by h4 near future starting
                                        if($findValue->find('p', 0)) {
                                            $organizationFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                        }
                                        //right now paragraph tag is showing and will be replaced by h4 near future ending
                                    }
                                }
                            }
                            //codition for online contract ending
                        }
                    }
                }
                //organization information of fields which are placed at document ending

                //basic information of document settings starting
                if(isset($recipientUserDetailsJsonDecode['details_fields'])) {
                    $detailsFields = json_decode($recipientUserDetailsJsonDecode['details_fields'], true);
                    foreach($detailsFields as $orgFldsKey => $orgFldsValue) {
                        $details[$orgFldsValue['detailsFieldName']] = $orgFldsValue['detailsFieldValue'];
                    }
                } else {
                    //print_rj($recipientUserDetailsJsonDecode);
                    $details['recipient_role'] = (isset($recipientUserDetailsJsonDecode['recrolename']) && $recipientUserDetailsJsonDecode['recrolename'] != '' ? $recipientUserDetailsJsonDecode['recrolename'] : (isset($recipientUserDetailsJsonDecode['partyname']) && $recipientUserDetailsJsonDecode['partyname'] != '' ? $recipientUserDetailsJsonDecode['partyname'] : ''));

                    if($contractDataValue['role'] == 2) {
                        $contractDataValue['authentication_method'] = 8;
                    }

                    $details['authentication'] = $utility->authenticationMethodName($contractDataValue['authentication_method']);
                    if(isset($contractDataValue['invitation_type']) && $contractDataValue['invitation_type'] != '') {
                        $details['invitation_type'] = $utility->invitationTypeName($contractDataValue['invitation_type']);
                    }
                    if($contractDataValue['invitation_order'] != 0) {
                        $details['invitation_order'] = $contractDataValue['invitation_order'];
                    }
                    if(isset($contractDataValue['offer_confirmation']) && $contractDataValue['offer_confirmation'] != '') {
                        $details['confirmation'] = $utility->offerConfirmationName($contractDataValue['offer_confirmation']);
                    }
                    $details['id_attachment'] = $utility->idAttachmentName($contractDataValue['id_attachments']);
                }
                $details['request_attachment'] = ($contractDataValue['req_attached'] != '' ? 'yes' : 'no');
                if($contractDataValue['document_read_date'] != '' && $contractDataValue['document_read_date'] != '0000-00-00 00:00:00') {
                    $details['last_viewing_date'] = ($contractDataValue['document_read_date'] != '' ? $contractDataValue['document_read_date'] : '');
                }
                //$details['signed_date'] = ($contractDataValue['signed_date'] != '' && $contractDataValue['signed_date'] != '0000-00-00 00:00:00' ? $contractDataValue['signed_date'] : '');
                $details['signed_date'] = '';
                if($contractDataValue['signed_date'] != '' && $contractDataValue['signed_date'] != '0000-00-00 00:00:00' && $contractDataValue['offer_status'] == 4 && $contractDataValue['role'] == 1) {
                    $details['signed_date'] = $contractDataValue['signed_date'];
                } elseif($contractDataValue['signed_date'] != '' && $contractDataValue['signed_date'] != '0000-00-00 00:00:00' && $contractDataValue['offer_status'] == 3 && $contractDataValue['role'] == 2) {
                    $details['signed_date'] = $contractDataValue['signed_date'];
                }
                //https://acceptance.simplesign.io/admin/checkuserdetail/541998
                //https://acceptance.simplesign.io/v3/specificdocumentdetail?access_token=WvJ2kroPU3cmzsINnEFe70lKobdBtt3SId3owcU1&document_id=542361
                //https://acceptance.simplesign.io/v3/specificdocumentdetail?access_token=WvJ2kroPU3cmzsINnEFe70lKobdBtt3SId3owcU1&document_id=542371
                //https://acceptance.simplesign.io/admin/checkuserdetail/542371
                //https://docs.google.com/document/d/1U3iHzT9kXupLmeFnpamlAwUK1CZoChog1ZvDSEManaY/edit
                //https://acceptance.simplesign.io/v3/specificdocumentdetail?access_token=WvJ2kroPU3cmzsINnEFe70lKobdBtt3SId3owcU1&document_id=543068
                //https://acceptance.simplesign.io/v3/specificdocumentdetail?access_token=WvJ2kroPU3cmzsINnEFe70lKobdBtt3SId3owcU1&document_id=543218
                //https://acceptance.simplesign.io/v3/specificdocumentdetail?access_token=KyQE4Vp9Tok1VZZDoZ2Zy1GkdKnUi9xroK59D2EP&document_id=538121 client
                //forward status without transfer signature role
                /* Forward status is always == 1 for the recipient who is sending invitation (sigingrole/viewonly ) */
                /* Forward signed is always == 1 for the recipient who is only sending signature role to another person */
                if($contractDataValue['offer_status'] == 4 && $contractDataValue['forward_status'] == 1 && $contractDataValue['forward_signed'] == 1) {
                    $details['status'] = 'Forwarded to sign';
                } elseif($contractDataValue['offer_status'] < 4 && $contractDataValue['forward_status'] == 1 && $contractDataValue['forward_signed'] == 0) {
                    $details['status'] = 'Invited to view';
                } else {
                    $details['status'] = (isset($contractDataValue['offer_status']) != '' ? $utility->offerStatusName($contractDataValue['offer_status']) : '');
                }
                //$details['status'] = (isset($contractDataValue['offer_status']) != '' ? $utility->offerStatusName($contractDataValue['offer_status']) : '');

                if($contractDataValue['forward_user_details'] != '') {
                    $forwardUserDetails = Tcrypt::decrypter($contractDataValue['forward_user_details']);
                    if($forwardUserDetails != '') {
                        $forwardUserDetailsJsonDecode = json_decode($forwardUserDetails, true);
                        $forwaredFullName = (isset($forwardUserDetailsJsonDecode['full_name']) && $forwardUserDetailsJsonDecode['full_name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($forwardUserDetailsJsonDecode['full_name'])) : '');
                        $inviteAndForwardDetails['first_name'] = (isset($forwaredFullName[0]) && $forwaredFullName[0] != '' ? trim($forwaredFullName[0]) : '');
                        $inviteAndForwardDetails['last_name'] = (isset($forwaredFullName[1]) && $forwaredFullName[1] != '' ? trim($forwaredFullName[1]) : '');
                        //$inviteAndForwardDetails['email'] = (isset($forwardUserDetailsJsonDecode['email']) && $forwardUserDetailsJsonDecode['email'] != '' ? trim($forwardUserDetailsJsonDecode['email']) : '');
                        //$inviteAndForwardDetails['mobile'] = (isset($forwardUserDetailsJsonDecode['mobile']) && $forwardUserDetailsJsonDecode['mobile'] != '' ? trim($forwardUserDetailsJsonDecode['mobile']) : '');

                        /* test condition as per zain suggestion when signing role is forwarded */
                        /* Setting keys in the object for signature role sender and reciever */
                        if($contractDataValue['offer_status'] == 4 && $contractDataValue['forward_status'] == 1 && $contractDataValue['forward_signed'] == 1) {
                            $details['forwarded_signing_role_to'] = $inviteAndForwardDetails['first_name'].' '.$inviteAndForwardDetails['last_name'];
                        } elseif((($contractDataValue['offer_status'] <= 4 && $contractDataValue['role'] == 1) || ($contractDataValue['offer_status'] == 3 && $contractDataValue['role'] == 2)) && $contractDataValue['forward_status'] == 2 && isset($recipientUserDetailsJsonDecode['forward_to_sign']) && $recipientUserDetailsJsonDecode['forward_to_sign'] == 1) {
                            $details['invited_to_sign_by'] = $inviteAndForwardDetails['first_name'].' '.$inviteAndForwardDetails['last_name'];
                        }
                        //echo ($contractDataValue['forward_status']. ' ' .$recipientUserDetailsJsonDecode['email'].' '.$contractDataValue['forward_signed'].' '.(isset($forwardUserDetailsJsonDecode['invited_to_view']) ? $forwardUserDetailsJsonDecode['invited_to_view'] : "") );echo'<br>';
                        /* test condition as per zain suggestion when only invited to view */
                        /* Setting keys in the object for sender and reciever of invitation to view only*/
                        if($contractDataValue['forward_status'] == 1 && $contractDataValue['forward_signed'] == 0) {
                            $details['invited_to_view_only'] = $inviteAndForwardDetails['first_name'].' '.$inviteAndForwardDetails['last_name'];
                        } elseif($contractDataValue['forward_status'] == 2 && isset($recipientUserDetailsJsonDecode['invited_to_view']) && $recipientUserDetailsJsonDecode['invited_to_view'] == 1) {
                            $details['invited_to_view_only_by'] = $inviteAndForwardDetails['first_name'].' '.$inviteAndForwardDetails['last_name'];
                        }
                    }
                }

                //this is for rejected to show in sender status
                if($contractDataValue['offer_status'] == 5) {
                    $offerSentContent['offer_status'] = 5;
                } if($contractDataValue['offer_status'] == 6) {
                    $offerSentContent['offer_status'] = 6;
                }

                if(!empty($organizationFields)) {
                    $peopleAndDetailsArray = ['people_fields' => $peopleFields, 'organization_fields' => $organizationFields, 'details' => $details];
                } else {
                    $peopleAndDetailsArray = ['people_fields' => $peopleFields, 'details' => $details];
                }
                array_push($responseArray, $peopleAndDetailsArray);
                //basic information of document settings ending
            }
            
            $content = Tcrypt::decrypter($offerSentContent['content']);
            if($content != '') {
                //getGetdocumentinfoxml function of garda template response
                $html = new \Htmldom($content);
                $dynamicElements = [];
                foreach($html->find('.template_container') as $temConKey => $temConValue) {
                    $arrayPush = [];
                    foreach($temConValue->find('.formElement') as $findKey => $findValue) {
                                        
                        $elementStyle = $findValue->getAttribute('style');
                        $arrCSS = $utility->parse_css($elementStyle);
                        $parentDiv = $findValue->parent()->parent();

                        //Fixing Position when field is inside the borderbox or textbox START
                        $addtop = 0;
                        $addleft = 0;
                        if(strpos($parentDiv->getAttribute('class'), 'dynamic_border') !== false && strpos($parentDiv->getAttribute('class'), 'insert_box_div') === false) {
                            $parentCSS = $utility->parse_css($parentDiv->getAttribute('style'));
                            $addtop = (isset($parentCSS['top']) && $parentCSS['top'] != '' ? round($parentCSS['top']) : 0);
                            $addleft = (isset($parentCSS['left']) && $parentCSS['left'] != '' ? round($parentCSS['left']) : 0);
                        } elseif(strpos($parentDiv->getAttribute('class'), 'insert_box_div') !== false && strpos($parentDiv->getAttribute('class'), 'dynamic_border') === false) {
                            $parentCSS = $utility->parse_css($parentDiv->getAttribute('style'));
                            $addtop = (isset($parentCSS['top']) && $parentCSS['top'] != '' ? round($parentCSS['top']) : 0);
                            $addleft = (isset($parentCSS['left']) && $parentCSS['left'] != '' ? round($parentCSS['left']) : 0);
                        } elseif(strpos($parentDiv->getAttribute('class'), 'insert_box_div') !== false  && strpos($parentDiv->getAttribute('class'), 'dynamic_border') !== false) {
                            $parentCSS = $utility->parse_css($parentDiv->getAttribute('style'));
                            $addtop = (isset($parentCSS['top']) && $parentCSS['top'] != '' ? round($parentCSS['top']) : 0);
                            $addleft = (isset($parentCSS['left']) && $parentCSS['left'] != '' ? round($parentCSS['left']) : 0);
                        }
                        //Fixing Position when field is inside the borderbox or textbox END

                        $topPosition = (isset($arrCSS['top']) && $arrCSS['top'] != '' ? round($arrCSS['top'])+$addtop : 0);
                        $leftPosition = (isset($arrCSS['left']) && $arrCSS['left'] != '' ? round($arrCSS['left'])+$addleft : 0);
                        array_push($arrayPush, ['top' => $topPosition, 'left' => $leftPosition, 'dynamic_id' => $findValue->dynamic_id]);
                    }
                    if(!empty($arrayPush)) {
                        sort($arrayPush);
                        array_push($dynamicElements, $arrayPush);
                    }
                }

                $docFields = [];
                foreach($dynamicElements as $eachPageKey => $eachPageValue) {
                    foreach($eachPageValue as $eachElementKey => $eachElementValue) {
                        $eachDynamic_id = $eachElementValue['dynamic_id'];
                        $mainDiv = $html->find('[dynamic_id="'.$eachDynamic_id.'"]', 0);
                        if(!$mainDiv->find('.text', 0)) {
                            continue;
                        }

                        $findValue = $mainDiv->find('.text', 0);
                        //getting document text fields
                        if(strpos($findValue->getAttribute('class'), 'documentField') !== false) {
                            if($findValue->selectedtype != '0') {
                                $apiAttributeOrSelectedType = $findValue->selectedtype;//(isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->selectedtype);
                                if($parent_id == 10719) {
                                    //$apiAttributeOrSelectedType = str_replace(' ', '_', $apiAttributeOrSelectedType);
                                }
                                if($findValue->find('h4', 0) && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                    $plainTextValue = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                    //$docFields[$apiAttributeOrSelectedType] = ['selectedtype' => $findValue->selectedtype, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $plainTextValue, 'dynamic_id' => $findValue->parent()->parent()->dynamic_id];
                                    $docFields[$apiAttributeOrSelectedType] = $plainTextValue;
                                } elseif($findValue->find('p', 0) && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                    $plainTextValue = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('p', 0)->plaintext)));
                                    //$docFields[$apiAttributeOrSelectedType] = ['selectedtype' => $findValue->selectedtype, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $plainTextValue, 'dynamic_id' => $findValue->parent()->parent()->dynamic_id];
                                    $docFields[$apiAttributeOrSelectedType] = $plainTextValue;
                                } elseif(strpos($mainDiv->getAttribute('class'), 'relationDisable') === false && (!isset($docFields[$findValue->selectedtype]))) {
                                    //comments below line of code and add this condition with elseif and === false 
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrSelectedType] = '';
                                } /* elseif(!isset($docFields[$findValue->selectedtype])) {
                                    $docFields[$apiAttributeOrSelectedType] = '';
                                }
                                
                                if(strpos($mainDiv->getAttribute('class'), 'relationDisable') !== false && (!isset($docFields[$findValue->selectedtype]))) {
                                    $docFields[$apiAttributeOrSelectedType] = '';
                                } */
                            }   //not equal condition ends here
                        }   //getting document text fields ends here
                        //getting custom text fields
                        try {
                            //if(strpos($findValue->getAttribute('class'), 'field_box_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && !strpos($findValue->getAttribute('class'), 'datepickerfields_new')) {
                            if(strpos($findValue->getAttribute('class'), 'field_box_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'datepickerfields_new') === false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                $apiAttributeOrSelectedType = $findValue->selectedtype;//(isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->selectedtype);
                                if($parent_id == 10719) {
                                    //$apiAttributeOrSelectedType = str_replace(' ', '_', $apiAttributeOrSelectedType);
                                }
                                //comment below line on 4 August 2020 for not show the key if value is empty
                                //$docFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                if($findValue->find('h4', 0)->plaintext) {
                                    $plainTextValue = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                    //$docFields[$apiAttributeOrSelectedType] = ['selectedtype' => $findValue->selectedtype, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $plainTextValue, 'dynamic_id' => $findValue->parent()->parent()->dynamic_id];
                                    $docFields[$apiAttributeOrSelectedType] = $plainTextValue;
                                }
                            }
                        } catch(\Exception $e) {}

                        //getting datepicker fields
                        try {
                            if(strpos($findValue->getAttribute('class'), 'field_box_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'datepickerfields_new') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                $apiAttributeOrSelectedType = $findValue->selectedtype;//(isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->selectedtype);
                                if($parent_id == 10719) {
                                    //$apiAttributeOrSelectedType = str_replace(' ', '_', $apiAttributeOrSelectedType);
                                }
                                //comment below line on 4 August 2020 for not show the key if value is empty
                                //$docFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                if($findValue->find('h4', 0)->plaintext) {
                                    $plainTextValue = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                    $docFields[$apiAttributeOrSelectedType] = $plainTextValue;
                                }
                            }
                        } catch(\Exception $e) {}

                        //getting document checkbox elements
                        if(strpos($findValue->getAttribute('class'), 'documentFieldCheckbox') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            //all values of checkboxes are showing
                            $apiAttributeOrFieldLabelName = $findValue->fieldlabelname;//(isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->fieldlabelname);
                            if($parent_id == 10719) {
                                //$apiAttributeOrFieldLabelName = str_replace(' ', '_', $apiAttributeOrFieldLabelName);
                            }
                            if(strpos($findValue->find('.check_icon', 0)->getAttribute('style'), 'visible') !== false || strpos($findValue->getAttribute('class'), 'isChecked') !== false) {
                                //$docFields[$apiAttributeOrFieldLabelName] = ['fieldlabelname' => $findValue->fieldlabelname, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => 'Yes', 'dynamic_id' => $findValue->parent()->parent()->dynamic_id];
                                $docFields[$apiAttributeOrFieldLabelName] = 'Yes';
                            } else {
                                //$docFields[$apiAttributeOrFieldLabelName] = ['fieldlabelname' => $findValue->fieldlabelname, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => 'No', 'dynamic_id' => $findValue->parent()->parent()->dynamic_id];
                                $docFields[$apiAttributeOrFieldLabelName] = 'No';
                            }
                        }   //getting document checkbox elements ends here
                        //getting custom checkbox elements
                        if(strpos($findValue->getAttribute('class'), 'check_box_popupcontainer') !== false && strpos($mainDiv->getAttribute('class'), 'chechBoxCustom') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrFieldLabelName = $findValue->fieldlabelname;//(isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->fieldlabelname);
                            if($parent_id == 10719) {
                                //$apiAttributeOrFieldLabelName = str_replace(' ', '_', $apiAttributeOrFieldLabelName);
                            }
                            if(strpos($findValue->find('.check_icon', 0)->getAttribute('style'), 'visible')) {
                                //$docFields[$apiAttributeOrFieldLabelName] = ['fieldlabelname' => $findValue->fieldlabelname, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => 'Yes', 'dynamic_id' => $findValue->parent()->parent()->dynamic_id];
                                $docFields[$apiAttributeOrFieldLabelName] = 'Yes';
                            } else {
                                //$docFields[$apiAttributeOrFieldLabelName] = ['fieldlabelname' => $findValue->fieldlabelname, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => 'No', 'dynamic_id' => $findValue->parent()->parent()->dynamic_id];
                                $docFields[$apiAttributeOrFieldLabelName] = 'No';
                            }
                        }

                        //getting document droplist elements
                        $jsonDecodeDropDownValues = (isset($findValue->dropdownvalues) && !empty($findValue->dropdownvalues) ? json_decode(html_entity_decode($findValue->dropdownvalues), true) : []);
                        $jsonDecodeDropDownAlternativeValues = (isset($findValue->dropdownvalues_alternate) && !empty($findValue->dropdownvalues_alternate) ? json_decode(html_entity_decode($findValue->dropdownvalues_alternate), true) : []);
                        if(strpos($findValue->getAttribute('class'), 'documentFieldDroplist') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = $findValue->dropdownlabel;//(isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            if($parent_id == 10719) {
                                //$apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                            }
                            //forsearching starting
                            //['fieldlabelname' => $findValue->fieldlabelname, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => 'Yes', 'dynamic_id' => $findValue->parent()->parent()->dynamic_id];
                            if($findValue->find('span.texthere', 0)) {
                                if(!empty($jsonDecodeDropDownValues) && $findValue->dropdownlabel != trim($findValue->find('span.texthere', 0)->plaintext)) {
                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && !empty($jsonDecodeDropDownAlternativeValues[$getArrayKey]) ? $jsonDecodeDropDownAlternativeValues[$getArrayKey] : trim($findValue->find('span.texthere', 0)->plaintext));
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('span.texthere', 0)->plaintext)));
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? $findValue->selected_altvalue : trim($findValue->find('span.texthere', 0)->plaintext))));
                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $findValue->find('span.texthere', 0)->selected_altvalue, 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = $findValue->find('span.texthere', 0)->selected_altvalue;
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $findValue->selected_altvalue, 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = $findValue->selected_altvalue;
                                    } elseif(isset($findValue->find('span.texthere', 0)->plaintext) && $findValue->find('span.texthere', 0)->plaintext != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->plaintext), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                    }
                                } elseif(array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? $findValue->selected_altvalue : trim($findValue->find('span.texthere', 0)->plaintext))));
                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $findValue->selected_altvalue, 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = $findValue->selected_altvalue;
                                    } elseif(isset($findValue->find('span.texthere', 0)->plaintext) && $findValue->find('span.texthere', 0)->plaintext != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->plaintext), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                    }
                                } else {
                                    //$docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? $findValue->selected_altvalue : ''));
                                    if(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $findValue->selected_altvalue, 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = $findValue->selected_altvalue;
                                    }
                                }
                            } else {
                                if(!empty($jsonDecodeDropDownValues) && $findValue->dropdownlabel != trim($findValue->find('p', 0)->plaintext)) {
                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? $findValue->selected_altvalue : trim($findValue->find('p', 0)->plaintext))));
                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $findValue->selected_altvalue, 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = $findValue->selected_altvalue;
                                    } elseif(isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('p', 0)->plaintext), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('p', 0)->plaintext);
                                    }
                                } elseif(array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? $findValue->selected_altvalue : trim($findValue->find('p', 0)->plaintext))));
                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $findValue->selected_altvalue, 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = $findValue->selected_altvalue;
                                    } elseif(isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('p', 0)->plaintext), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('p', 0)->plaintext);
                                    }
                                } else {
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? $findValue->selected_altvalue : ''));
                                    if(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $findValue->selected_altvalue, 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = $findValue->selected_altvalue;
                                    }
                                }
                            }
                            //forsearching ending
                            //remove commented code from here on 4 August 2020
                        }   //getting document droplist elements ends here
                        //getting custom droplist elements
                        if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = $findValue->dropdownlabel;//(isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            if($parent_id == 10719) {
                               // $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                            }
                            //forsearching starting
                            if($findValue->find('span.texthere', 0)) {
                                if(!empty($jsonDecodeDropDownValues) && $findValue->dropdownlabel != trim($findValue->find('span.texthere', 0)->plaintext)) {
                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('span.texthere', 0)->plaintext))));
                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                    } elseif(isset($findValue->find('span.texthere', 0)->plaintext) && $findValue->find('span.texthere', 0)->plaintext != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->plaintext), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                    }
                                } elseif(isset($findValue->find('span.texther', 0)->plaintext) && array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('span.texthere', 0)->plaintext))));
                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                    } elseif(isset($findValue->find('span.texthere', 0)->plaintext) && $findValue->find('span.texthere', 0)->plaintext != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->plaintext), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                    }
                                } else {
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : ''));
                                    if(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                    }
                                }
                            } else {
                                if(!empty($jsonDecodeDropDownValues) && $findValue->dropdownlabel != trim($findValue->find('span.texthere', 0)->plaintext)) {
                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('p', 0)->plaintext))));
                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                    } elseif(isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('p', 0)->plaintext), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('p', 0)->plaintext);
                                    }
                                } elseif(isset($findValue->find('span.texther', 0)->plaintext) && array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('p', 0)->plaintext))));
                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                    } elseif(isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('p', 0)->plaintext), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('p', 0)->plaintext);
                                    }
                                } else {
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : ''));
                                    if(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                    }
                                }
                            }
                            //forsearching ending
                            //remove commented code from here on 4 August 2020
                        }

                        //document field droplist with multiple radio button
                        if(strpos($findValue->getAttribute('class'), 'documentFieldDroplist') !== false && strpos($findValue->getAttribute('class'), 'dropdown_radioList_api') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = $findValue->dropdownlabel;//(isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            if($parent_id == 10719) {
                                //$apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                            }
                            if($findValue->find('.fa-dot-circle-o', 0)) {
                                //$docFields[$apiAttributeOrDropDownLabel] = $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext;
                                //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && !empty($jsonDecodeDropDownAlternativeValues[$getArrayKey]) ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '' ? trim($findValue->selected_altvalue) : trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext)));
                                $getArrayKey = array_search(trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext), $jsonDecodeDropDownValues);
                                //comment below line on 4 August 2020 for not show the key if value is empty
                                //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? $jsonDecodeDropDownAlternativeValues[$getArrayKey] : $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext);
                                if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                    //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $jsonDecodeDropDownAlternativeValues[$getArrayKey], 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                    $docFields[$apiAttributeOrDropDownLabel] = $jsonDecodeDropDownAlternativeValues[$getArrayKey];
                                } elseif(isset($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext) && $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext != '') {
                                    //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext, 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                    $docFields[$apiAttributeOrDropDownLabel] = $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext;
                                }
                            } else {
                                //comment below line on 4 August 2020 for not show the key if value is empty
                                //$docFields[$apiAttributeOrDropDownLabel] = '';
                            }
                        }
                        //document field droplist with multiple radio button of custom and me
                        if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'dropdown_radioList_api') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = $findValue->dropdownlabel;//(isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            if($parent_id == 10719) {
                                //$apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                            }
                            if($findValue->find('.fa-dot-circle-o', 0)) {
                                //$docFields[$apiAttributeOrDropDownLabel] = $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext;
                                $getArrayKey = array_search(trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext), $jsonDecodeDropDownValues);
                                //comment below line on 4 August 2020 for not show the key if value is empty
                                //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? $jsonDecodeDropDownAlternativeValues[$getArrayKey] : $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext);
                                if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                    //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $jsonDecodeDropDownAlternativeValues[$getArrayKey], 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                    $docFields[$apiAttributeOrDropDownLabel] = $jsonDecodeDropDownAlternativeValues[$getArrayKey];
                                } elseif(isset($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext) && $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext != '') {
                                    //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                    $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext);
                                }
                            } else {
                                //comment below line on 4 August 2020 for not show the key if value is empty
                                //$docFields[$apiAttributeOrDropDownLabel] = '';
                            }
                        }
                        //document field droplist with multiple checkboxes
                        if(strpos($findValue->getAttribute('class'), 'documentFieldDroplist') !== false && strpos($findValue->getAttribute('class'), 'multi_choice_option') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = $findValue->dropdownlabel;//(isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            if($parent_id == 10719) {
                                //$apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                            }
                            if($findValue->find('.fa-check', 0)) {
                                $faCheckValues = [];
                                //foreach($findValue->find('.fa-check') as $checkBoxKey => $checkBoxValue) {
                                foreach($findValue->find('.ionIconsCheck') as $checkBoxKey => $checkBoxValue) {
                                    if(strpos($checkBoxValue->getAttribute('class'), 'fa-check') !== false) {
                                        $faCheckValues[] = (isset($jsonDecodeDropDownAlternativeValues[$checkBoxKey]) && $jsonDecodeDropDownAlternativeValues[$checkBoxKey] != '' ? $jsonDecodeDropDownAlternativeValues[$checkBoxKey] : $checkBoxValue->parent()->parent()->find('label', 0)->innertext);
                                    }
                                }
                                if(!empty($faCheckValues)) {
                                    $totalFaCheckValues = count($faCheckValues);
                                    if($totalFaCheckValues > 1) {
                                        $faCheckValues = implode(', ' , array_slice($faCheckValues,0,$totalFaCheckValues-1)) . ' and ' . end($faCheckValues);
                                    } else {
                                        $faCheckValues = implode(', ' , $faCheckValues);
                                    }
                                    //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $faCheckValues, 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                    $docFields[$apiAttributeOrDropDownLabel] = $faCheckValues;
                                }
                                //$docFields[$apiAttributeOrDropDownLabel] = $findValue->find('.fa-check', 0)->parent()->parent()->find('label', 0)->innertext;
                            } else {
                                //comment below line on 4 August 2020 for not show the key if value is empty
                                //$docFields[$apiAttributeOrDropDownLabel] = '';
                            }
                        }
                        //document field droplist with multiple checkboxes of custom and me
                        if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'multi_choice_option') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = $findValue->dropdownlabel;//(isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            if($parent_id == 10719) {
                                //$apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                            }
                            if($findValue->find('.fa-check', 0)) {
                                //$comma = (count($data["requesttypes"]) > 0 ? ($key+1 == count($data["requesttypes"])-1 ? ' and ' : ($key+1 < count($data["requesttypes"]) ? ', ' : '')) : '');
                                $faCheckValues = [];
                                foreach($findValue->find('.ionIconsCheck') as $checkBoxKey => $checkBoxValue) {
                                    if(strpos($checkBoxValue->getAttribute('class'), 'fa-check') !== false) {
                                        $faCheckValues[] = (isset($jsonDecodeDropDownAlternativeValues[$checkBoxKey]) && $jsonDecodeDropDownAlternativeValues[$checkBoxKey] != '' ? $jsonDecodeDropDownAlternativeValues[$checkBoxKey] : $checkBoxValue->parent()->parent()->find('label', 0)->innertext);
                                    }
                                }
                                if(!empty($faCheckValues)) {
                                    $totalFaCheckValues = count($faCheckValues);
                                    if($totalFaCheckValues > 1) {
                                        $faCheckValues = implode(', ' , array_slice($faCheckValues,0,$totalFaCheckValues-1)) . ' and ' . end($faCheckValues);
                                    } else {
                                        $faCheckValues = implode(', ' , $faCheckValues);
                                    }
                                    //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $faCheckValues, 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                    $docFields[$apiAttributeOrDropDownLabel] = $faCheckValues;
                                }
                            } else {
                                //comment below line on 4 August 2020 for not show the key if value is empty
                                //$docFields[$apiAttributeOrDropDownLabel] = '';
                            }
                        } //selectcolor_popupcontainer condition ends here
                    }   //second foreach loop ends here
                }   //first foreach loop ends here

                //document tags names showing and its loop starting
                foreach($html->find('.dynamicTag') as $findTagKey => $findTagValue) {
                    if(strpos($findTagValue->getAttribute('class'), 'documenttagName') !== false) {
                        $apiAttributeOrTagName = $findTagValue->tagname;//(isset($findTagValue->apitagattribute) && $findTagValue->apitagattribute != '' ? $findTagValue->apitagattribute : $findTagValue->tagname);
                        if($parent_id == 10719) {
                            //$apiAttributeOrTagName = str_replace(' ', '_', $apiAttributeOrTagName);
                        }
                        $jsonDecodeDropDownValues = (isset($findTagValue->dropdownvalues) && !empty($findTagValue->dropdownvalues) ? json_decode(html_entity_decode($findTagValue->dropdownvalues), true) : []);
                        $jsonDecodeDropDownAlternativeValues = (isset($findTagValue->dropdownvalues_alternate) && !empty($findTagValue->dropdownvalues_alternate) ? json_decode(html_entity_decode($findTagValue->dropdownvalues_alternate), true) : []);

                        if(strpos($findTagValue->getAttribute('class'), 'documentdroplisttagname') !== false) {
                            if(isset($findTagValue->dropdownapi) && $findTagValue->dropdownapi != '') {
                                $docFields[$apiAttributeOrTagName] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                            } else {
                                $tagValuesArray = [];
                                foreach($jsonDecodeDropDownValues as $dropDownKey => $dropDownValues) {
                                    if(isset($findTagValue->plaintext) && !empty($findTagValue->plaintext) && isset($dropDownValues) && !empty($dropDownValues)) {
                                        if(strpos($findTagValue->plaintext, $dropDownValues) > -1) {
                                            $getArrayKey = array_search(trim($dropDownValues), $jsonDecodeDropDownValues);
                                            $tagValuesArray[] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && !empty($jsonDecodeDropDownAlternativeValues[$getArrayKey]) ? $jsonDecodeDropDownAlternativeValues[$getArrayKey] : $utility->convertDateMonthNameToInteger($languageId, trim($dropDownValues)));
                                        } else {
                                            $docFields[$apiAttributeOrTagName] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                                        }
                                    }
                                }
                                $totalTagValuesArray = count($tagValuesArray);
                                if($totalTagValuesArray > 1) {
                                    $tagValuesArray = implode(', ' , array_slice($tagValuesArray,0,$totalTagValuesArray-1)) . ' and ' . end($tagValuesArray);
                                } else {
                                    $tagValuesArray = implode(', ' , $tagValuesArray);
                                }
                                $docFields[$apiAttributeOrTagName] = $tagValuesArray;
                            }
                        } else {
                            $docFields[$apiAttributeOrTagName] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                        }
                    }
                }

                if($html->find('.billecta_GetBankInfo_h5')) {
                    foreach($html->find('.billecta_GetBankInfo_h5') as $findBillectaKey => $findBillectaValue) {
                        if(isset($findBillectaValue->billecta_row)) {
                            if($html->find('.billecta_row_'.$findBillectaValue->billecta_row)) {
                                if($findBillectaValue->innertext != '&nbsp;' && $findBillectaValue->innertext != '<br>') {
                                    //$docFields[$findBillectaValue->innertext] = $html->find('.billecta_row_'.$findBillectaValue->billecta_row, 0)->innertext;
                                    $docFields[$findBillectaValue->innertext] = str_replace(',', ' ', $html->find('.billecta_row_'.$findBillectaValue->billecta_row, 0)->innertext);
                                }
                            }
                        }
                    }
                }
                //document tags names showing and its loop ending

                if(!empty($docFields)) {
                    //showing alphbats order to show document fields data
                    /* If there area multiple case keys as name of document fields then below line will be needed to sort the array */
                    // $docFields = array_change_key_case($docFields, CASE_LOWER);
                    ksort($docFields);
                    $responseArray['document_fields'] = $docFields;
                }
            }

            //basic information of sender and account details starting
            //$senderData = Offersentdetails::where('offer_send_details.offer_sent_id', $document_id)->join('offer_sent', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')->select('offer_send_details.user_details')->where('offer_send_details.is_sender', 1)->where('offer_sent.sender_id', $user_id)->first();
            $senderData = Offersentdetails::where('offer_send_details.offer_sent_id', $document_id)->join('offer_sent', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')->select('offer_send_details.user_details')->where('offer_send_details.is_sender', 1)->whereIn('offer_sent.sender_id', $allUserIds)->first();

            if($senderData) {
                $senderDetails = $accountDetails = [];
                $senderUserDetails = Tcrypt::decrypter($senderData['user_details']);
                $senderUserDetailsJsonDecode = json_decode($senderUserDetails, true);

                //sender details information starting
                //for regular contract sender use full_name key and for online contract sender use first_name key
                $senderDetails['name'] = (isset($senderUserDetailsJsonDecode['full_name']) && $senderUserDetailsJsonDecode['full_name'] != '' ? trim($senderUserDetailsJsonDecode['full_name']) : (isset($senderUserDetailsJsonDecode['first_name']) && $senderUserDetailsJsonDecode['first_name'] != '' ? trim($senderUserDetailsJsonDecode['first_name']) : ''));
                $senderDetails['email'] = (isset($senderUserDetailsJsonDecode['email']) && $senderUserDetailsJsonDecode['email'] != '' ? trim(preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $senderUserDetailsJsonDecode['email'])) : '');

                $userCustomFields = (isset($senderUserDetailsJsonDecode['user_customfields']) && $senderUserDetailsJsonDecode['user_customfields'] != '' ? json_decode($senderUserDetailsJsonDecode['user_customfields'], true) : []);
                if(!empty($userCustomFields)) {
                    foreach($userCustomFields as $userCustomFldkey => $userCustomFldValue) {
                        $senderDetails[trim($userCustomFldkey)] = (isset($userCustomFldValue) && $userCustomFldValue != '' ? trim($userCustomFldValue) : '');
                        //$senderDetails[trim($userCustomFldkey)] = (isset($userCustomFldValue) && $userCustomFldValue != '' ? $utility->convertDateMonthNameToInteger($languageId, trim($userCustomFldValue)) : '');
                    }
                }
                $responseArray['sender_details'] = $senderDetails;
                //sender details information ending

                //account details information starting
                $accountDetails['company'] = (isset($senderUserDetailsJsonDecode['company']) && $senderUserDetailsJsonDecode['company'] != '' ? trim($senderUserDetailsJsonDecode['company']) : '');
                $accountDetails['reg_no'] = (isset($senderUserDetailsJsonDecode['reg_no']) && $senderUserDetailsJsonDecode['reg_no'] != '' ? trim($senderUserDetailsJsonDecode['reg_no']) : '');
                $accountDetails['address'] = (isset($senderUserDetailsJsonDecode['address']) && $senderUserDetailsJsonDecode['address'] != '' ? trim($senderUserDetailsJsonDecode['address']) : '');
                $accountDetails['phone_no'] = (isset($senderUserDetailsJsonDecode['mobile']) && $senderUserDetailsJsonDecode['mobile'] != '' ? trim($senderUserDetailsJsonDecode['mobile']) : (isset($senderUserDetailsJsonDecode['telephone']) && $senderUserDetailsJsonDecode['telephone'] != '' ? trim($senderUserDetailsJsonDecode['telephone']) : ''));
                $accountDetails['zipcode'] = (isset($senderUserDetailsJsonDecode['zipcode']) && $senderUserDetailsJsonDecode['zipcode'] != '' ? trim($senderUserDetailsJsonDecode['zipcode']) : (isset($senderUserDetailsJsonDecode['post_code']) && $senderUserDetailsJsonDecode['post_code'] != '' ? trim($senderUserDetailsJsonDecode['post_code']) : ''));
                $accountDetails['city'] = (isset($senderUserDetailsJsonDecode['city']) && $senderUserDetailsJsonDecode['city'] != '' ? trim($senderUserDetailsJsonDecode['city']) : '');

                $responseArray['account_details'] = $accountDetails;
                //account details information ending
            }
            //basic information of sender and account details ending

            //specificdocumentdetail API
            /* Get product table details against the template Zain*/
            if( $_SERVER['HTTP_HOST'] == 'acceptance.simplesign.io' || $_SERVER['HTTP_HOST'] == 'esign.simplesign.io' ) {
                $templatetabledata = $this->templateTables($document_id);
                foreach ($templatetabledata['producttables'] as $tablekey => $tabledata) {
                    $tablename = $tabledata['table_name'];
                    $tablecurrency = $tabledata['table_currency'];
                    $itemcollection = array();
                    foreach ($tabledata['tableitems'] as $itemkey => $itemdata) {
                        $itemdetails = array();
                        $itemdetails['product name'] = $itemdata['item_name'];
                        if ( isset($data['fromoverview']) && $data['fromoverview'] == 1 ) {
                            $itemdetails[$itemdata['item_name'].' (description)'] = ($itemdata['item_description'] != 'NULL' ? $itemdata['item_description'] : '');
                            $itemdetails[$itemdata['item_name'].' (quantity)'] = $itemdata['item_qty'];
                            $itemdetails[$itemdata['item_name'].' (price)'] = $itemdata['item_price'].' '.$tablecurrency;
                            if ($itemdata['item_discount'] != 0) {
                                $itemdetails[$itemdata['item_name'].' (discount)'] = $itemdata['item_discount'].' %';
                            }
                            $itemdetails[$itemdata['item_name'].' (cost)'] = $itemdata['item_cost'].' '.$tablecurrency;
                            $itemdetails[$itemdata['item_name'].' (margin)'] = $itemdata['item_margin'].' '.$tablecurrency;
                        } else {
                            $itemdetails['description'] = ($itemdata['item_description'] != 'NULL' ? $itemdata['item_description'] : '');
                            $itemdetails['quantity'] = $itemdata['item_qty'];
                            if ($itemdata['item_discount'] != 0) {
                                $itemdetails['item_discount'] = $itemdata['item_discount'].'%';
                            }
                            $itemdetails['price'] = $itemdata['item_price'].' '.$tablecurrency;
                            $itemdetails['cost'] = $itemdata['item_cost'].' '.$tablecurrency;
                            $itemdetails['margin'] = $itemdata['item_margin'].' '.$tablecurrency;
                        }
                        array_push($itemcollection, $itemdetails);
                        $responseArray[$tablename] = $itemcollection;
                    }
                }
            }

            //basic information of document details starting
            if($offerSentContent) {
                $uniqueId = Offersentdetails::where('offer_send_details.offer_sent_id', $document_id)->join('offer_sent', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')->select('offer_send_details.unique_id')->where('offer_send_details.is_sender', 0)->whereIn('offer_sent.sender_id', $allUserIds)->first();
                //DB::enableQueryLog();
                //print_rj(DB::getQueryLog());
                $documentLink = Offersentdetails::where('offer_send_details.offer_sent_id', $document_id)->join('offer_sent', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')->whereIn('offer_sent.sender_id', $allUserIds)->where('offer_send_details.is_sender', 1)->select('offer_send_details.id', 'offer_send_details.unique_id')->first();
                $documentDetails = [];
                $documentDetails['template_name'] = ($offerSentContent['visible_name'] != '' ? trim(Tcrypt::decrypter($offerSentContent['visible_name'])) : trim(Tcrypt::decrypter($offerSentContent['name'])));
                $documentDetails['document_id'] = (!empty($offerSentContent['external_doc_id']) ? $offerSentContent['external_doc_id'] : $offerSentContent['id']);
                $documentDetails['template_id'] = $offerSentContent['offer_id'];
                $documentDetails['language'] = (isset($offerSentContent['language_id']) && $offerSentContent['language_id'] != '' ? $utility->languageName($offerSentContent['language_id']) : 'English');
                $documentDetails['sent_date'] = (isset($offerSentContent['created_date']) && $offerSentContent['created_date'] != '' && $offerSentContent['created_date'] != '0000-00-00 00:00:00' ? trim($offerSentContent['created_date']) : '');
                $documentDetails['signed_date'] = (isset($offerSentContent['signed_date']) && $offerSentContent['signed_date'] != '' && $offerSentContent['signed_date'] != '0000-00-00 00:00:00' ? trim($offerSentContent['signed_date']) : '');
                $documentDetails['due_date'] = (isset($offerSentContent['due_date']) && $offerSentContent['due_date'] != '' && $offerSentContent['due_date'] != '0000-00-00 00:00:00' ? trim(date('Y-m-d', strtotime($offerSentContent['due_date']))) : '');
                $documentDetails['status'] = (isset($offerSentContent['offer_status']) ? $utility->offerStatusName($offerSentContent['offer_status']) : '');

                $getAddOnObjectData = settings::where('user_id', $parent_id)->select('new_addon_obj')->first();
                $markCompleted = Offersent_data::where('sent_id', $offerSentContent['id'])->pluck('mark_completed');
                $multiCaseManagement = Offersent_data::where('sent_id', $offerSentContent['id'])->pluck('multi_case_management');
                $contractTypeId = Offersent_data::where('sent_id', $offerSentContent['id'])->pluck('contract_type_id');
                $markCompletedDate = Offersent_data::where('sent_id', $offerSentContent['id'])->pluck('mark_completed_date');

                /* Adding gross margin and total cost in Api response */
                $costmargin = "";
                $costmargin = Offersent_data::where('sent_id', '=', $offerSentContent['id'])->whereNotNull('document_cost')->whereNotNull('document_margin')->whereNotNull('document_price')->select('document_price', 'document_cost', 'document_margin')->first();

                
                if(!empty($getAddOnObjectData['new_addon_obj'])) {
                    $newAddonObjJesonDecode = json_decode($getAddOnObjectData['new_addon_obj'], true);
                    if(isset($newAddonObjJesonDecode['mark_as_completed_addon']) && $newAddonObjJesonDecode['mark_as_completed_addon'] == 1) {
                        if(isset($newAddonObjJesonDecode['mark_as_completed_addon_setting']) && !empty($newAddonObjJesonDecode['mark_as_completed_addon_setting'])) {
                            $markAsCompletedAddonSettingJsonDecode = json_decode($newAddonObjJesonDecode['mark_as_completed_addon_setting'], true);

                            $multiCaseManagementJsonDecode = (isset($multiCaseManagement) && !empty($multiCaseManagement) ? json_decode($multiCaseManagement, true) : []);
                            

                            //if(!empty($multiCaseManagementJsonDecode) || 1==1) {
                            if(!empty($multiCaseManagementJsonDecode)) {
                                if(isset($markAsCompletedAddonSettingJsonDecode['mark_tasks_array']) && !empty($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'])) {
                                    $numbetIncrement = 0;
                                    $flagForCompletedKey = false;
                                    $completeStatus = 'Not completed';
                                    foreach($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'] as $markAsCompletedAddonSettingJsonDecodeKey => $markAsCompletedAddonSettingJsonDecodeValue) {
                                        
                                        if(in_array($contractTypeId, $markAsCompletedAddonSettingJsonDecodeValue['contract_type_selected']) && (in_array($offerSentContent['offer_status'], $markAsCompletedAddonSettingJsonDecodeValue['marked_addon_status']) || in_array("", $markAsCompletedAddonSettingJsonDecodeValue['marked_addon_status']))) {
                                            $numbetIncrement++;
                                            $conditionalText = '';
                                            if(isset($multiCaseManagementJsonDecode[$numbetIncrement]) && !empty($multiCaseManagementJsonDecode[$numbetIncrement])) {
                                                if(isset($multiCaseManagementJsonDecode[$numbetIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numbetIncrement]['status_text'] == 'done') {
                                                    $conditionalText = 'Yes';
                                                } elseif(isset($multiCaseManagementJsonDecode[$numbetIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numbetIncrement]['status_text'] == 'in_process') {
                                                    $conditionalText = 'In process';
                                                } elseif(isset($multiCaseManagementJsonDecode[$numbetIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numbetIncrement]['status_text'] == 'no') {
                                                    $conditionalText = 'No';
                                                }
                                                if(isset($multiCaseManagementJsonDecode[$numbetIncrement]['task_no']) && isset($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'][$multiCaseManagementJsonDecode[$numbetIncrement]['task_no']])) {
                                                    $documentDetails[$markAsCompletedAddonSettingJsonDecode['mark_tasks_array'][$multiCaseManagementJsonDecode[$numbetIncrement]['task_no']]['tasknames']] = $conditionalText;
                                                    $flagForCompletedKey = true;
                                                } else {
                                                    if(isset($multiCaseManagementJsonDecode[$numbetIncrement]['task_no']) && $multiCaseManagementJsonDecode[$numbetIncrement]['task_no'] != '') {
                                                        $documentDetails[$markAsCompletedAddonSettingJsonDecodeValue['tasknames']] = 'No';
                                                        $flagForCompletedKey = true;
                                                    }
                                                }
                                            } else {
                                                if($markCompleted != 1) {
                                                    $documentDetails[$markAsCompletedAddonSettingJsonDecodeValue['tasknames']] = 'No';
                                                }
                                                $flagForCompletedKey = true;
                                            }
                                            if(isset($multiCaseManagementJsonDecode[$numbetIncrement]) && !empty($multiCaseManagementJsonDecode[$numbetIncrement]) && isset($multiCaseManagementJsonDecode[$numbetIncrement]['status_activity']) && !empty($multiCaseManagementJsonDecode[$numbetIncrement]['status_activity'])) {
                                                $flagForCompletedKey = true;
                                                //if(count($multiCaseManagementJsonDecode) == $isCompleted && $markAsCompletedAddonSettingJsonDecodeKey == count($markAsCompletedAddonSettingJsonDecode['mark_tasks_array']) -1) {
                                                if($markCompleted == 1) {
                                                    $completeStatus = $utility->changeTimeZone($markCompletedDate, 'Y-m-d H:i:s', 'UTC', $userTimeZone);
                                                }
                                            }   //status_activity
                                        }
                                    }
                                    //if(!empty($multiCaseManagementJsonDecode)) {
                                    if(!empty($flagForCompletedKey)) {
                                        $documentDetails['completed'] = $completeStatus;
                                    }
                                }
                            }
                        }
                    }
                }
                $documentDetails['pdf'] = $domain_name.'avtal/downloadpdf/'.$document_id.'/'.$uniqueId['unique_id'];
                $documentDetails['document_url'] = $domain_name.'document/view/'.$documentLink['id'].'/'.$documentLink['unique_id'];

                if ($costmargin != "") {
                    if ($costmargin['document_cost'] != "NULL") {
                        $documentDetails['document_cost'] =  $costmargin['document_cost'];
                    }

                    if ($costmargin['document_margin'] != "NULL") {
                        $documentDetails['document_margin'] =  $costmargin['document_margin'];
                    }

                    if ($costmargin['document_price'] != "NULL") {
                        $documentDetails['document_price'] =  $costmargin['document_price'];
                    }
                }
                //basic information of document details ending
                $responseArray['document_details'] = $documentDetails;
            }
            if(!isset($data['fromoverview'])) {
                $updatedIndexData = DB::table('document_indexdata')->where('document_id', $document_id)->get();
                if(!empty($updatedIndexData)) {
                    foreach($responseArray as $responseArrayKey => $responseArrayValue) { //loop on main array
                        if(is_numeric($responseArrayKey)) {
                            $recRole = $responseArray[$responseArrayKey]['details']['recipient_role'];
                            foreach($responseArrayValue as $responseArrayValueKey => $recValue) { //loop on numeric array
                                foreach($updatedIndexData as $updatedIndexDataKey => $updatedIndexDataValue) { // loop on array from database
                                    if($updatedIndexDataValue->rec_role == $recRole) {
                                        if($updatedIndexDataValue->object_type == $responseArrayValueKey) { //checking role condition
                                            $orginalFields = json_decode($updatedIndexDataValue->old_field, true);
                                            $newFields = json_decode($updatedIndexDataValue->new_field, true);
                                            $fieldName = array_keys($orginalFields)[0]; // getting field name orginal as it can't be changed from UI
                                            $updatedFieldValue = array_values($newFields)[0]; // getting updated values of that particular field
                                            $responseArray[$responseArrayKey][$responseArrayValueKey][$fieldName] = $updatedFieldValue; //assining values to the main object
                                        }
                                    }
                                }
                            }
                        } else {
                            foreach($updatedIndexData as $updatedIndexDataKey => $updatedIndexDataValue) { // loop on array from database
                                if($updatedIndexDataValue->object_type == $responseArrayKey) { //checking role condition
                                    $orginalFields = json_decode($updatedIndexDataValue->old_field, true);
                                    $newFields = json_decode($updatedIndexDataValue->new_field, true);
                                    $fieldName = array_keys($orginalFields)[0]; // getting field name orginal as it can't be changed from UI
                                    $updatedFieldValue = array_values($newFields)[0]; // getting updated values of that particular field
                                    $responseArray[$responseArrayKey][$fieldName] = $updatedFieldValue; //assining values to the main object
                                }
                            }
                        }
                    }
                }
            }
            
            return response()->json(['status' => 'success', 'result' => $responseArray], 200, ['Content-Type' => 'application/json; charset=UTF-8'], JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
        } else {
            return Response::json(['status' => 'error', 'result' => 'No record(s) found']);
        }
    }

    public function getSpecificdocumentdetailawais($custom_data=[]) {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');
        $storeFieldsObjDB = false;
        //setMajorDB();
       // print_rj($data, 1);

        //added by me (MS) 01 June 2020 starting
        if(isset($custom_data['access_token']) && $custom_data['access_token'] != '') {
            $data['access_token'] = $custom_data['access_token'];
        }
        if(isset($custom_data['document_id']) && $custom_data['document_id'] != '') {
            $data['document_id'] = $custom_data['document_id'];
        }
        //added by me (MS) 01 June 2020 ending

        //access_token validation starting
        if(isset($data['access_token']) && $data['access_token'] != '' && !isset($custom_data['user_id']) ) {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
        //access_token validation ending

        if(isset($custom_data['user_id'])) {
            $user_id = $custom_data['user_id'];
            $storeFieldsObjDB = true;
        } else {
            $user_id = $utility->getUserIdByAuthToken($access_token);
        }
        $parent_id = $utility->getParent($user_id);
        if($utility->isParent($user_id) == 1) {
            $allUserIds = $utility->getSubusers($parent_id);
        } else {
            $allUserIds = [$user_id];
        }

        //contract_id validation starting
        if(isset($data['document_id']) && $data['document_id'] != '') {
            $document_id = $data['document_id'];
        } elseif(isset($custom_data['sent_id']) && $custom_data['sent_id'] != '') {
            $document_id = $custom_data['sent_id'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'document_id is missing']);
        }

        $userTimeZone = $utility->getUsertimezone($parent_id);
        $getDocumentIdFromExternalDocumentId = $utility->documentExternalId($document_id, $allUserIds);
        if(!empty($getDocumentIdFromExternalDocumentId)) {
            $document_id = $getDocumentIdFromExternalDocumentId;
            $data['document_id'] = $document_id;
        }

        $checkingDraft = Offersent::where('id', $document_id)->where('offer_status', 7)->where('is_draft', 1)->count();
        if($checkingDraft) {
            return Response::json(['status' => 'error', 'result' => 'document is not sent']);
        }

        $userSettings = $utility->getUserSettings($parent_id);
        $getApiHitCount = Userinfo::where('user_id', $parent_id)->select('hit_count')->first();
        $addupdateapiaccesslogs = $utility->addupdateapiaccesslogs($user_id, 'getSpecificdocumentdetail v3', $data, $getApiHitCount['hit_count']);
        if($addupdateapiaccesslogs == 'exceed') {
            $this->apiCallLimitExceedMessage = str_replace('#hitCuntNo', $getApiHitCount['hit_count'], $this->apiCallLimitExceedMessage);
            return Response::json(['status' => 'error', 'result' => $this->apiCallLimitExceedMessage]);
        }

        if($utility->checkAdminStripe($user_id) && !isset($custom_data['user_id']) ) {
            return Response::json(['status' => 'error', 'result' => 'Account is locked make payment in order to continue Simplesign']);
        }

        $contractData = Offersentdetails::where('offer_send_details.offer_sent_id', $document_id)->join('offer_sent', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')->select('offer_sent.language_id', 'offer_send_details.id AS detail_id', 'offer_send_details.offer_sent_id', 'offer_send_details.user_details', 'offer_send_details.offer_status', 'offer_send_details.req_attached', 'offer_send_details.document_read_date', 'offer_send_details.signed_date', 'offer_send_details.authentication_method', 'offer_send_details.role', 'offer_send_details.invitation_type', 'offer_send_details.invitation_order', 'offer_send_details.offer_confirmation', 'offer_send_details.id_attachments', 'offer_sent.content', 'offer_send_details.forward_status', 'offer_send_details.forward_user_details', 'offer_send_details.forward_signed')->where('offer_send_details.is_sender', 0)->whereIn('offer_sent.sender_id', $allUserIds)->get()->toArray();
        
        if($contractData) {
            $responseArray = $senderInfo = $contractDetails =  [];
            $offerSentContent = Offersent::where('id', $document_id)->whereIn('sender_id', $allUserIds)->select('content', 'visible_name', 'name', 'language_id', 'id', 'offer_id', 'created_date', 'offer_status', 'signed_date', 'due_date', 'external_doc_id')->first();
            foreach($contractData as $contractDataKey => $contractDataValue) {
                $languageId = $contractDataValue['language_id'];

                $peopleFields = $organizationFields = $details = $inviteAndForwardDetails = [];
                $nameExplode = '';
                
                $recipientUserDetails = Tcrypt::decrypter($contractDataValue['user_details']);

                $recipientUserDetailsJsonDecode = json_decode($recipientUserDetails, true);
                 print_r($recipientUserDetails);
                 exit();

                //$peopleFields['detail_id'] = $contractDataValue['detail_id'];
                //$peopleFields['offer_sent_id'] = $contractDataValue['offer_sent_id'];
                //$contractDataValue['forward_status'];
                $userRole = (isset($recipientUserDetailsJsonDecode['recrolename']) && $recipientUserDetailsJsonDecode['recrolename'] != '' ? $recipientUserDetailsJsonDecode['recrolename'] : (isset($recipientUserDetailsJsonDecode['partyname']) && $recipientUserDetailsJsonDecode['partyname'] != '' ? $recipientUserDetailsJsonDecode['partyname'] : ''));

                //basic information of recipient starting

                $recipientFieldsRolesTabFields = (isset($recipientUserDetailsJsonDecode['Recipient_fields_roles_tab_fields']) && !empty($recipientUserDetailsJsonDecode['Recipient_fields_roles_tab_fields']) ? json_decode($recipientUserDetailsJsonDecode['Recipient_fields_roles_tab_fields'], true) : '');
                $recinfoFields = ($recipientFieldsRolesTabFields != '' ? $recipientFieldsRolesTabFields['recinfo_fields'] : '');

                //print_rj($recipientUserDetailsJsonDecode, 1);
                if(isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '') {
                    //for regular contract recipient use full_name key
                    if((isset($recinfoFields['last_name']) && $recinfoFields['last_name'] == 1) || (isset($recipientUserDetailsJsonDecode['last_name']) && $recipientUserDetailsJsonDecode['last_name'] != '')) {
                        $nameExplode = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($recipientUserDetailsJsonDecode['full_name'])) : '');
                        if(isset($recipientUserDetailsJsonDecode['last_name']) && $recipientUserDetailsJsonDecode['last_name'] != '' && isset($nameExplode[1]) && $nameExplode[1] != '' && $nameExplode[1] != $recipientUserDetailsJsonDecode['last_name']) {
                            $peopleFields['first_name'] = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? $recipientUserDetailsJsonDecode['full_name'] : '');
                            $peopleFields['last_name'] = (isset($recipientUserDetailsJsonDecode['last_name']) && $recipientUserDetailsJsonDecode['last_name'] != '' ? $recipientUserDetailsJsonDecode['last_name'] : '');
                        } else {
                            $peopleFields['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                            $peopleFields['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                        }
                    } else {
                        $nameExplode = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($recipientUserDetailsJsonDecode['full_name'])) : '');
                        $peopleFields['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                        $peopleFields['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                    }
                } elseif(isset($recipientUserDetailsJsonDecode['name']) && $recipientUserDetailsJsonDecode['name'] != '') {
                    //for online contract recipient use name key
                    $nameExplode = (isset($recipientUserDetailsJsonDecode['name']) && $recipientUserDetailsJsonDecode['name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($recipientUserDetailsJsonDecode['name'])) : '');
                    $peopleFields['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                    $peopleFields['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                }
                $peopleFields['email'] = (isset($recipientUserDetailsJsonDecode['email']) && $recipientUserDetailsJsonDecode['email'] != '' ? trim(preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $recipientUserDetailsJsonDecode['email'])) : '');
                //$peopleFields['personal_no'] = (isset($recipientUserDetailsJsonDecode['personnr']) && $recipientUserDetailsJsonDecode['personnr'] != '' ? trim($recipientUserDetailsJsonDecode['personnr']) : '');
                $peopleFields['personal_no'] = (isset($recipientUserDetailsJsonDecode['personnr']) && $recipientUserDetailsJsonDecode['personnr'] != '' ? (strlen(trim($recipientUserDetailsJsonDecode['personnr'])) == 12 || strlen(trim($recipientUserDetailsJsonDecode['personnr'])) == 13 ? substr(trim($recipientUserDetailsJsonDecode['personnr']), 2) : trim($recipientUserDetailsJsonDecode['personnr'])) : '');
                $peopleFields['mobile'] = (isset($recipientUserDetailsJsonDecode['mobile']) && $recipientUserDetailsJsonDecode['mobile'] != '' ? trim($recipientUserDetailsJsonDecode['mobile']) : '');
                $peopleFields['address'] = (isset($recipientUserDetailsJsonDecode['address']) && $recipientUserDetailsJsonDecode['address'] != '' ? trim($recipientUserDetailsJsonDecode['address']) : '');
                $peopleFields['city'] = (isset($recipientUserDetailsJsonDecode['city']) && $recipientUserDetailsJsonDecode['city'] != '' ? trim($recipientUserDetailsJsonDecode['city']) : '');
                $peopleFields['zipcode'] = (isset($recipientUserDetailsJsonDecode['zipcode']) && $recipientUserDetailsJsonDecode['zipcode'] != '' ? trim($recipientUserDetailsJsonDecode['zipcode']) : (isset($recipientUserDetailsJsonDecode['zip']) && $recipientUserDetailsJsonDecode['zip'] != '' ? trim($recipientUserDetailsJsonDecode['zip']) : ''));
                //basic information of recipient ending

                //organization information of recipient starting
                if(isset($recipientUserDetailsJsonDecode['organization_fields'])) {
                    $orgFields = json_decode($recipientUserDetailsJsonDecode['organization_fields'], true);
                    foreach($orgFields as $orgFldsKey => $orgFldsValue) {
                        $orgFldsValue['orgFieldName'] = str_replace('name', 'organization_name', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('org_no', 'organization_no', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('phone', 'organization_phone', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('address', 'organization_address', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('city', 'organization_city', $orgFldsValue['orgFieldName']);
                        $orgFldsValue['orgFieldName'] = str_replace('zipcode', 'organization_zipcode', $orgFldsValue['orgFieldName']);
                        $organizationFields[$orgFldsValue['orgFieldName']] = $orgFldsValue['orgFieldValue'];
                    }
                } else {
                    if(isset($recipientUserDetailsJsonDecode['org_name']) && $recipientUserDetailsJsonDecode['org_name'] != '') {
                        $organizationFields['organization_name'] = $recipientUserDetailsJsonDecode['org_name'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_reg_no']) && $recipientUserDetailsJsonDecode['org_reg_no'] != '') {
                        $organizationFields['organization_no'] = $recipientUserDetailsJsonDecode['org_reg_no'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_mobile']) && $recipientUserDetailsJsonDecode['org_mobile'] != '') {
                        $organizationFields['organization_phone'] = $recipientUserDetailsJsonDecode['org_mobile'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_address']) && $recipientUserDetailsJsonDecode['org_address'] != '') {
                        $organizationFields['organization_address'] = $recipientUserDetailsJsonDecode['org_address'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_city']) && $recipientUserDetailsJsonDecode['org_city'] != '') {
                        $organizationFields['organization_city'] = $recipientUserDetailsJsonDecode['org_city'];
                    }
                    if(isset($recipientUserDetailsJsonDecode['org_zip']) && $recipientUserDetailsJsonDecode['org_zip'] != '') {
                        $organizationFields['organization_zipcode'] = $recipientUserDetailsJsonDecode['org_zip'];
                    }
                }
                //organization information of recipient ending

                //people information of new fields starting
                if(isset($recipientUserDetailsJsonDecode['extra_fields']) && !empty($recipientUserDetailsJsonDecode['extra_fields'])) {
                    $recipientFieldsWithoutValue = (isset($recipientUserDetailsJsonDecode['recipientfields']) && !empty($recipientUserDetailsJsonDecode['recipientfields']) ? json_decode($recipientUserDetailsJsonDecode['recipientfields'], true) : []);

                    $extraFields = (isset($recipientUserDetailsJsonDecode['extra_fields']) && !empty($recipientUserDetailsJsonDecode['extra_fields']) ? json_decode($recipientUserDetailsJsonDecode['extra_fields'], true) : []);
                    if($extraFields) {
                        $intersect = array_uintersect($extraFields, $recipientFieldsWithoutValue, function($val1, $val2) {
                            return strcmp($val1['fieldName'], $val2['fieldName']);
                        });
                        $intersect = array_values($intersect);
                    } else {
                        $intersect = [];
                    }

                    if(!empty($intersect)) {
                        foreach($intersect as $extraFldKey => $extraFldValue) {
                            $peopleFields[$extraFldValue['fieldName']] = $extraFldValue['fieldValue'];
                        }
                    }
                }
                //people information of new fields ending

                //organization information of new fields starting
                if(isset($recipientUserDetailsJsonDecode['org_extra_fields']) && !empty($recipientUserDetailsJsonDecode['org_extra_fields'])) {
                    $organizationFieldsWithoutValue = (isset($recipientUserDetailsJsonDecode['organizationfields']) && !empty($recipientUserDetailsJsonDecode['organizationfields']) ? json_decode($recipientUserDetailsJsonDecode['organizationfields'], true) : []);

                    $orgExtraFields = (isset($recipientUserDetailsJsonDecode['org_extra_fields']) && !empty($recipientUserDetailsJsonDecode['org_extra_fields']) ? json_decode($recipientUserDetailsJsonDecode['org_extra_fields'], true) : []);
                    if($orgExtraFields) {
                        $intersectOrg = array_uintersect($orgExtraFields, $organizationFieldsWithoutValue, function($val1, $val2) {
                            return strcmp($val1['fieldName'], $val2['fieldName']);
                        });
                        $intersectOrg = array_values($intersectOrg);
                    } else {
                        $intersectOrg = [];
                    }

                    if(!empty($intersectOrg)) {
                        foreach($intersectOrg as $orgExtraFldKey => $orgExtraFldValue) {
                            $organizationFields[$orgExtraFldValue['fieldName']] = $orgExtraFldValue['fieldValue'];
                        }
                    }
                }
                //organization information of new fields ending
                
                //organization information of fields which are placed at document starting
                $content = Tcrypt::decrypter($contractDataValue['content']);
                if($content != '') {
                    $html = new \Htmldom($content);
                    foreach($html->find('.text') as $findKey => $findValue) {
                        //codition for regular contract starting
                        if(isset($recipientUserDetailsJsonDecode['id']) && $recipientUserDetailsJsonDecode['id'] == $findValue->recipientselectedid) {
                            if(strpos($findValue->getAttribute('class'), 'peopleNewField') !== false) {
                                if($findValue->find('h4', 0)) {
                                    $peopleFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                } else {
                                    if($findValue->find('p', 0)) {
                                        $peopleFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                    }
                                }
                            } if(strpos($findValue->getAttribute('class'), 'organizationNewField') !== false) {
                                if($findValue->find('h4', 0)) {
                                    $organizationFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                } else {
                                    if($findValue->find('p', 0)) {
                                        $organizationFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                    }
                                }
                            }
                            //codition for regular contract ending
                        } else {
                            //codition for online contract starting
                            if($userRole == $findValue->parent()->parent()->whowillfill) {
                                if(strpos($findValue->getAttribute('class'), 'peopleNewField') !== false) {
                                    if($findValue->find('h4', 0)) {
                                        $peopleFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                    } else {
                                        //right now paragraph tag is showing and will be replaced by h4 near future starting
                                        if($findValue->find('p', 0)) {
                                            $peopleFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                        }
                                        //right now paragraph tag is showing and will be replaced by h4 near future ending
                                    }
                                } if(strpos($findValue->getAttribute('class'), 'organizationNewField') !== false) {
                                    if($findValue->find('h4', 0)) {
                                        $organizationFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                    } else {
                                        //right now paragraph tag is showing and will be replaced by h4 near future starting
                                        if($findValue->find('p', 0)) {
                                            $organizationFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                        }
                                        //right now paragraph tag is showing and will be replaced by h4 near future ending
                                    }
                                }
                            }
                            //codition for online contract ending
                        }
                    }
                }
                //organization information of fields which are placed at document ending

                //basic information of document settings starting
                if(isset($recipientUserDetailsJsonDecode['details_fields'])) {
                    $detailsFields = json_decode($recipientUserDetailsJsonDecode['details_fields'], true);
                    foreach($detailsFields as $orgFldsKey => $orgFldsValue) {
                        $details[$orgFldsValue['detailsFieldName']] = $orgFldsValue['detailsFieldValue'];
                    }
                } else {
                    //print_rj($recipientUserDetailsJsonDecode);
                    $details['recipient_role'] = (isset($recipientUserDetailsJsonDecode['recrolename']) && $recipientUserDetailsJsonDecode['recrolename'] != '' ? $recipientUserDetailsJsonDecode['recrolename'] : (isset($recipientUserDetailsJsonDecode['partyname']) && $recipientUserDetailsJsonDecode['partyname'] != '' ? $recipientUserDetailsJsonDecode['partyname'] : ''));

                    if($contractDataValue['role'] == 2) {
                        $contractDataValue['authentication_method'] = 8;
                    }

                    $details['authentication'] = $utility->authenticationMethodName($contractDataValue['authentication_method']);
                    if(isset($contractDataValue['invitation_type']) && $contractDataValue['invitation_type'] != '') {
                        $details['invitation_type'] = $utility->invitationTypeName($contractDataValue['invitation_type']);
                    }
                    if($contractDataValue['invitation_order'] != 0) {
                        $details['invitation_order'] = $contractDataValue['invitation_order'];
                    }
                    if(isset($contractDataValue['offer_confirmation']) && $contractDataValue['offer_confirmation'] != '') {
                        $details['confirmation'] = $utility->offerConfirmationName($contractDataValue['offer_confirmation']);
                    }
                    $details['id_attachment'] = $utility->idAttachmentName($contractDataValue['id_attachments']);
                }
                $details['request_attachment'] = ($contractDataValue['req_attached'] != '' ? 'yes' : 'no');
                if($contractDataValue['document_read_date'] != '' && $contractDataValue['document_read_date'] != '0000-00-00 00:00:00') {
                    $details['last_viewing_date'] = ($contractDataValue['document_read_date'] != '' ? $contractDataValue['document_read_date'] : '');
                }
                //$details['signed_date'] = ($contractDataValue['signed_date'] != '' && $contractDataValue['signed_date'] != '0000-00-00 00:00:00' ? $contractDataValue['signed_date'] : '');
                $details['signed_date'] = '';
                if($contractDataValue['signed_date'] != '' && $contractDataValue['signed_date'] != '0000-00-00 00:00:00' && $contractDataValue['offer_status'] == 4 && $contractDataValue['role'] == 1) {
                    $details['signed_date'] = $contractDataValue['signed_date'];
                } elseif($contractDataValue['signed_date'] != '' && $contractDataValue['signed_date'] != '0000-00-00 00:00:00' && $contractDataValue['offer_status'] == 3 && $contractDataValue['role'] == 2) {
                    $details['signed_date'] = $contractDataValue['signed_date'];
                }
                //https://acceptance.simplesign.io/admin/checkuserdetail/541998
                //https://acceptance.simplesign.io/v3/specificdocumentdetail?access_token=WvJ2kroPU3cmzsINnEFe70lKobdBtt3SId3owcU1&document_id=542361
                //https://acceptance.simplesign.io/v3/specificdocumentdetail?access_token=WvJ2kroPU3cmzsINnEFe70lKobdBtt3SId3owcU1&document_id=542371
                //https://acceptance.simplesign.io/admin/checkuserdetail/542371
                //https://docs.google.com/document/d/1U3iHzT9kXupLmeFnpamlAwUK1CZoChog1ZvDSEManaY/edit
                //https://acceptance.simplesign.io/v3/specificdocumentdetail?access_token=WvJ2kroPU3cmzsINnEFe70lKobdBtt3SId3owcU1&document_id=543068
                //https://acceptance.simplesign.io/v3/specificdocumentdetail?access_token=WvJ2kroPU3cmzsINnEFe70lKobdBtt3SId3owcU1&document_id=543218
                //https://acceptance.simplesign.io/v3/specificdocumentdetail?access_token=KyQE4Vp9Tok1VZZDoZ2Zy1GkdKnUi9xroK59D2EP&document_id=538121 client
                //forward status without transfer signature role
                /* Forward status is always == 1 for the recipient who is sending invitation (sigingrole/viewonly ) */
                /* Forward signed is always == 1 for the recipient who is only sending signature role to another person */
                if($contractDataValue['offer_status'] == 4 && $contractDataValue['forward_status'] == 1 && $contractDataValue['forward_signed'] == 1) {
                    $details['status'] = 'Forwarded to sign';
                } elseif($contractDataValue['offer_status'] < 4 && $contractDataValue['forward_status'] == 1 && $contractDataValue['forward_signed'] == 0) {
                    $details['status'] = 'Invited to view';
                } else {
                    $details['status'] = (isset($contractDataValue['offer_status']) != '' ? $utility->offerStatusName($contractDataValue['offer_status']) : '');
                }
                //$details['status'] = (isset($contractDataValue['offer_status']) != '' ? $utility->offerStatusName($contractDataValue['offer_status']) : '');

                if($contractDataValue['forward_user_details'] != '') {
                    $forwardUserDetails = Tcrypt::decrypter($contractDataValue['forward_user_details']);
                    if($forwardUserDetails != '') {
                        $forwardUserDetailsJsonDecode = json_decode($forwardUserDetails, true);
                        $forwaredFullName = (isset($forwardUserDetailsJsonDecode['full_name']) && $forwardUserDetailsJsonDecode['full_name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($forwardUserDetailsJsonDecode['full_name'])) : '');
                        $inviteAndForwardDetails['first_name'] = (isset($forwaredFullName[0]) && $forwaredFullName[0] != '' ? trim($forwaredFullName[0]) : '');
                        $inviteAndForwardDetails['last_name'] = (isset($forwaredFullName[1]) && $forwaredFullName[1] != '' ? trim($forwaredFullName[1]) : '');
                        //$inviteAndForwardDetails['email'] = (isset($forwardUserDetailsJsonDecode['email']) && $forwardUserDetailsJsonDecode['email'] != '' ? trim($forwardUserDetailsJsonDecode['email']) : '');
                        //$inviteAndForwardDetails['mobile'] = (isset($forwardUserDetailsJsonDecode['mobile']) && $forwardUserDetailsJsonDecode['mobile'] != '' ? trim($forwardUserDetailsJsonDecode['mobile']) : '');

                        /* test condition as per zain suggestion when signing role is forwarded */
                        /* Setting keys in the object for signature role sender and reciever */
                        if($contractDataValue['offer_status'] == 4 && $contractDataValue['forward_status'] == 1 && $contractDataValue['forward_signed'] == 1) {
                            $details['forwarded_signing_role_to'] = $inviteAndForwardDetails['first_name'].' '.$inviteAndForwardDetails['last_name'];
                        } elseif((($contractDataValue['offer_status'] <= 4 && $contractDataValue['role'] == 1) || ($contractDataValue['offer_status'] == 3 && $contractDataValue['role'] == 2)) && $contractDataValue['forward_status'] == 2 && isset($recipientUserDetailsJsonDecode['forward_to_sign']) && $recipientUserDetailsJsonDecode['forward_to_sign'] == 1) {
                            $details['invited_to_sign_by'] = $inviteAndForwardDetails['first_name'].' '.$inviteAndForwardDetails['last_name'];
                        }
                        //echo ($contractDataValue['forward_status']. ' ' .$recipientUserDetailsJsonDecode['email'].' '.$contractDataValue['forward_signed'].' '.(isset($forwardUserDetailsJsonDecode['invited_to_view']) ? $forwardUserDetailsJsonDecode['invited_to_view'] : "") );echo'<br>';
                        /* test condition as per zain suggestion when only invited to view */
                        /* Setting keys in the object for sender and reciever of invitation to view only*/
                        if($contractDataValue['forward_status'] == 1 && $contractDataValue['forward_signed'] == 0) {
                            $details['invited_to_view_only'] = $inviteAndForwardDetails['first_name'].' '.$inviteAndForwardDetails['last_name'];
                        } elseif($contractDataValue['forward_status'] == 2 && isset($recipientUserDetailsJsonDecode['invited_to_view']) && $recipientUserDetailsJsonDecode['invited_to_view'] == 1) {
                            $details['invited_to_view_only_by'] = $inviteAndForwardDetails['first_name'].' '.$inviteAndForwardDetails['last_name'];
                        }
                    }
                }

                //this is for rejected to show in sender status
                if($contractDataValue['offer_status'] == 5) {
                    $offerSentContent['offer_status'] = 5;
                } if($contractDataValue['offer_status'] == 6) {
                    $offerSentContent['offer_status'] = 6;
                }

                if(!empty($organizationFields)) {
                    $peopleAndDetailsArray = ['people_fields' => $peopleFields, 'organization_fields' => $organizationFields, 'details' => $details];
                } else {
                    $peopleAndDetailsArray = ['people_fields' => $peopleFields, 'details' => $details];
                }
                array_push($responseArray, $peopleAndDetailsArray);
                //basic information of document settings ending
              }
                $peopleAndDetailsArrayseco = [];
                $detailsec = [];
                $recsec = [];
                $orgsec = [];
                if($_SERVER["HTTP_HOST"] == "acceptance.simplesign.io" || 1==1){
                $emailrec = "";
                $full_namerec = "";
                $mobilerec    = "";
                $addressrec    = "";
                $zipcoderec   = "";
                $cityerec     = "";
                $companyrec   = "";
                $detailsec['authentication'] = 1;
                $detailsec['id_attachment'] = 'no';
                $detailsec['request_attachment'] = 'no';
                $recipient_role = "";
                foreach($html->find('.field_box_popupcontainer[getrecsettings=2]') as $findTagKey => $findTagValue) {
                $recipient_role = $findTagValue->recipientselected;   
                if($findTagValue->selectedtype == "org_name"){
                $orgsec["organization_name"] =  (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                }else{
                $recsec[$findTagValue->selectedtype] =  (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                    
                }
                }
                $detailsec['recipient_role'] = $recipient_role ;
                $peopleAndDetailsArrayseco['people_fields'] = $recsec;
                //$peopleAndDetailsArrayseco['organization_fields'] = $orgsec;
                
                $peopleAndDetailsArrayseco['details'] = $detailsec;
                 

                if(!empty($peopleAndDetailsArray))
                array_push($responseArray, $peopleAndDetailsArrayseco);

            //print_rj($responseArray, 1);

                 /*   if((isset($full_namerec) && $full_namerec != "") && (isset($emailrec) && $emailrec != "")){
                    Recipient::where('registerby', $parent_id)->where('from_user_api', 101)->delete();    
                    $full_namerec = Tcrypt::encrypter($full_namerec);
                    $emailrec     = Tcrypt::encrypter($emailrec);
                    $customerId = Recipient::insertGetId([
                    'full_name' => $full_namerec,
                    // 'last_name' => $lastname,
                    'company' => $companyrec,
                    'mobile' => $mobilerec,
                    'email' => $emailrec,
                    //'reg_no' => $regno,
                    'address' => $addressrec,
                    //'personnr' => $personnr,
                    'zip' => $zipcoderec,
                    'city' => $cityerec,
                    // 'extra_fields' =>$extra_fields,
                    'from_user_api' => 101,
                    'registerby' => $parent_id]
                    );
                    }*/
                } 
            
            $content = Tcrypt::decrypter($offerSentContent['content']);
            if($content != '') {
                //getGetdocumentinfoxml function of garda template response
                $html = new \Htmldom($content);
                $dynamicElements = [];
                foreach($html->find('.template_container') as $temConKey => $temConValue) {
                    $arrayPush = [];
                    foreach($temConValue->find('.formElement') as $findKey => $findValue) {
                                        
                        $elementStyle = $findValue->getAttribute('style');
                        $arrCSS = $utility->parse_css($elementStyle);
                        $parentDiv = $findValue->parent()->parent();

                        //Fixing Position when field is inside the borderbox or textbox START
                        $addtop = 0;
                        $addleft = 0;
                        if(strpos($parentDiv->getAttribute('class'), 'dynamic_border') !== false && strpos($parentDiv->getAttribute('class'), 'insert_box_div') === false) {
                            $parentCSS = $utility->parse_css($parentDiv->getAttribute('style'));
                            $addtop = (isset($parentCSS['top']) && $parentCSS['top'] != '' ? round($parentCSS['top']) : 0);
                            $addleft = (isset($parentCSS['left']) && $parentCSS['left'] != '' ? round($parentCSS['left']) : 0);
                        } elseif(strpos($parentDiv->getAttribute('class'), 'insert_box_div') !== false && strpos($parentDiv->getAttribute('class'), 'dynamic_border') === false) {
                            $parentCSS = $utility->parse_css($parentDiv->getAttribute('style'));
                            $addtop = (isset($parentCSS['top']) && $parentCSS['top'] != '' ? round($parentCSS['top']) : 0);
                            $addleft = (isset($parentCSS['left']) && $parentCSS['left'] != '' ? round($parentCSS['left']) : 0);
                        } elseif(strpos($parentDiv->getAttribute('class'), 'insert_box_div') !== false  && strpos($parentDiv->getAttribute('class'), 'dynamic_border') !== false) {
                            $parentCSS = $utility->parse_css($parentDiv->getAttribute('style'));
                            $addtop = (isset($parentCSS['top']) && $parentCSS['top'] != '' ? round($parentCSS['top']) : 0);
                            $addleft = (isset($parentCSS['left']) && $parentCSS['left'] != '' ? round($parentCSS['left']) : 0);
                        }
                        //Fixing Position when field is inside the borderbox or textbox END

                        $topPosition = (isset($arrCSS['top']) && $arrCSS['top'] != '' ? round($arrCSS['top'])+$addtop : 0);
                        $leftPosition = (isset($arrCSS['left']) && $arrCSS['left'] != '' ? round($arrCSS['left'])+$addleft : 0);
                        array_push($arrayPush, ['top' => $topPosition, 'left' => $leftPosition, 'dynamic_id' => $findValue->dynamic_id]);
                    }
                    if(!empty($arrayPush)) {
                        sort($arrayPush);
                        array_push($dynamicElements, $arrayPush);
                    }
                }

                $docFields = [];
                foreach($dynamicElements as $eachPageKey => $eachPageValue) {
                    foreach($eachPageValue as $eachElementKey => $eachElementValue) {
                        $eachDynamic_id = $eachElementValue['dynamic_id'];
                        $mainDiv = $html->find('[dynamic_id="'.$eachDynamic_id.'"]', 0);
                        if(!$mainDiv->find('.text', 0)) {
                            continue;
                        }

                        $findValue = $mainDiv->find('.text', 0);
                        //getting document text fields
                        if(strpos($findValue->getAttribute('class'), 'documentField') !== false) {
                            if($findValue->selectedtype != '0') {
                                $apiAttributeOrSelectedType = $findValue->selectedtype;//(isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->selectedtype);
                                if($parent_id == 10719) {
                                    //$apiAttributeOrSelectedType = str_replace(' ', '_', $apiAttributeOrSelectedType);
                                }
                                if($findValue->find('h4', 0) && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                    $plainTextValue = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                    //$docFields[$apiAttributeOrSelectedType] = ['selectedtype' => $findValue->selectedtype, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $plainTextValue, 'dynamic_id' => $findValue->parent()->parent()->dynamic_id];
                                    $docFields[$apiAttributeOrSelectedType] = $plainTextValue;
                                } elseif($findValue->find('p', 0) && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                    $plainTextValue = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('p', 0)->plaintext)));
                                    //$docFields[$apiAttributeOrSelectedType] = ['selectedtype' => $findValue->selectedtype, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $plainTextValue, 'dynamic_id' => $findValue->parent()->parent()->dynamic_id];
                                    $docFields[$apiAttributeOrSelectedType] = $plainTextValue;
                                } elseif(strpos($mainDiv->getAttribute('class'), 'relationDisable') === false && (!isset($docFields[$findValue->selectedtype]))) {
                                    //comments below line of code and add this condition with elseif and === false 
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrSelectedType] = '';
                                } /* elseif(!isset($docFields[$findValue->selectedtype])) {
                                    $docFields[$apiAttributeOrSelectedType] = '';
                                }
                                
                                if(strpos($mainDiv->getAttribute('class'), 'relationDisable') !== false && (!isset($docFields[$findValue->selectedtype]))) {
                                    $docFields[$apiAttributeOrSelectedType] = '';
                                } */
                            }   //not equal condition ends here
                        }   //getting document text fields ends here
                        //getting custom text fields
                        try {
                            //if(strpos($findValue->getAttribute('class'), 'field_box_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && !strpos($findValue->getAttribute('class'), 'datepickerfields_new')) {
                            if(strpos($findValue->getAttribute('class'), 'field_box_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'datepickerfields_new') === false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                $apiAttributeOrSelectedType = $findValue->selectedtype;//(isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->selectedtype);
                                if($parent_id == 10719) {
                                    //$apiAttributeOrSelectedType = str_replace(' ', '_', $apiAttributeOrSelectedType);
                                }
                                //comment below line on 4 August 2020 for not show the key if value is empty
                                //$docFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                if($findValue->find('h4', 0) && $findValue->find('h4', 0)->plaintext) {
                                    $plainTextValue = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                    //$docFields[$apiAttributeOrSelectedType] = ['selectedtype' => $findValue->selectedtype, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $plainTextValue, 'dynamic_id' => $findValue->parent()->parent()->dynamic_id];
                                    $docFields[$apiAttributeOrSelectedType] = $plainTextValue;
                                }
                                if($findValue->find('p', 0) && $findValue->find('p', 0)->plaintext) {
                                    $plainTextValue = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('p', 0)->plaintext)));
                                    //$docFields[$apiAttributeOrSelectedType] = ['selectedtype' => $findValue->selectedtype, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $plainTextValue, 'dynamic_id' => $findValue->parent()->parent()->dynamic_id];
                                    $docFields[$apiAttributeOrSelectedType] = $plainTextValue;
                                }
                            }
                        } catch(\Exception $e) {}

                        //getting datepicker fields
                        try {
                            if(strpos($findValue->getAttribute('class'), 'field_box_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'datepickerfields_new') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                $apiAttributeOrSelectedType = $findValue->selectedtype;//(isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->selectedtype);
                                if($parent_id == 10719) {
                                    //$apiAttributeOrSelectedType = str_replace(' ', '_', $apiAttributeOrSelectedType);
                                }
                                //comment below line on 4 August 2020 for not show the key if value is empty
                                //$docFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                if($findValue->find('h4', 0) && $findValue->find('h4', 0)->plaintext) {
                                    $plainTextValue = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                    $docFields[$apiAttributeOrSelectedType] = $plainTextValue;
                                }
                                if($findValue->find('p', 0) && $findValue->find('p', 0)->plaintext) {
                                    $plainTextValue = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('p', 0)->plaintext)));
                                    $docFields[$apiAttributeOrSelectedType] = $plainTextValue;
                                }
                            }
                        } catch(\Exception $e) {}

                        //getting document checkbox elements
                        if(strpos($findValue->getAttribute('class'), 'documentFieldCheckbox') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            //all values of checkboxes are showing
                            $apiAttributeOrFieldLabelName = $findValue->fieldlabelname;//(isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->fieldlabelname);
                            if($parent_id == 10719) {
                                //$apiAttributeOrFieldLabelName = str_replace(' ', '_', $apiAttributeOrFieldLabelName);
                            }
                            if(strpos($findValue->find('.check_icon', 0)->getAttribute('style'), 'visible') !== false || strpos($findValue->getAttribute('class'), 'isChecked') !== false) {
                                //$docFields[$apiAttributeOrFieldLabelName] = ['fieldlabelname' => $findValue->fieldlabelname, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => 'Yes', 'dynamic_id' => $findValue->parent()->parent()->dynamic_id];
                                $docFields[$apiAttributeOrFieldLabelName] = 'Yes';
                            } else {
                                //$docFields[$apiAttributeOrFieldLabelName] = ['fieldlabelname' => $findValue->fieldlabelname, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => 'No', 'dynamic_id' => $findValue->parent()->parent()->dynamic_id];
                                $docFields[$apiAttributeOrFieldLabelName] = 'No';
                            }
                        }   //getting document checkbox elements ends here
                        //getting custom checkbox elements
                        if(strpos($findValue->getAttribute('class'), 'check_box_popupcontainer') !== false && strpos($mainDiv->getAttribute('class'), 'chechBoxCustom') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrFieldLabelName = $findValue->fieldlabelname;//(isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->fieldlabelname);
                            if($parent_id == 10719) {
                                //$apiAttributeOrFieldLabelName = str_replace(' ', '_', $apiAttributeOrFieldLabelName);
                            }
                            if(strpos($findValue->find('.check_icon', 0)->getAttribute('style'), 'visible')) {
                                //$docFields[$apiAttributeOrFieldLabelName] = ['fieldlabelname' => $findValue->fieldlabelname, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => 'Yes', 'dynamic_id' => $findValue->parent()->parent()->dynamic_id];
                                $docFields[$apiAttributeOrFieldLabelName] = 'Yes';
                            } else {
                                //$docFields[$apiAttributeOrFieldLabelName] = ['fieldlabelname' => $findValue->fieldlabelname, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => 'No', 'dynamic_id' => $findValue->parent()->parent()->dynamic_id];
                                $docFields[$apiAttributeOrFieldLabelName] = 'No';
                            }
                        }

                        //getting document droplist elements
                        $jsonDecodeDropDownValues = (isset($findValue->dropdownvalues) && !empty($findValue->dropdownvalues) ? json_decode(html_entity_decode($findValue->dropdownvalues), true) : []);
                        $jsonDecodeDropDownAlternativeValues = (isset($findValue->dropdownvalues_alternate) && !empty($findValue->dropdownvalues_alternate) ? json_decode(html_entity_decode($findValue->dropdownvalues_alternate), true) : []);
                        if(strpos($findValue->getAttribute('class'), 'documentFieldDroplist') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = $findValue->dropdownlabel;//(isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            if($parent_id == 10719) {
                                //$apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                            }
                            //forsearching starting
                            //['fieldlabelname' => $findValue->fieldlabelname, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => 'Yes', 'dynamic_id' => $findValue->parent()->parent()->dynamic_id];
                            if($findValue->find('span.texthere', 0)) {
                                if(!empty($jsonDecodeDropDownValues) && $findValue->dropdownlabel != trim($findValue->find('span.texthere', 0)->plaintext)) {
                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && !empty($jsonDecodeDropDownAlternativeValues[$getArrayKey]) ? $jsonDecodeDropDownAlternativeValues[$getArrayKey] : trim($findValue->find('span.texthere', 0)->plaintext));
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('span.texthere', 0)->plaintext)));
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? $findValue->selected_altvalue : trim($findValue->find('span.texthere', 0)->plaintext))));
                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $findValue->find('span.texthere', 0)->selected_altvalue, 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = $findValue->find('span.texthere', 0)->selected_altvalue;
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $findValue->selected_altvalue, 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = $findValue->selected_altvalue;
                                    } elseif(isset($findValue->find('span.texthere', 0)->plaintext) && $findValue->find('span.texthere', 0)->plaintext != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->plaintext), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                    }
                                } elseif(array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? $findValue->selected_altvalue : trim($findValue->find('span.texthere', 0)->plaintext))));
                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $findValue->selected_altvalue, 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = $findValue->selected_altvalue;
                                    } elseif(isset($findValue->find('span.texthere', 0)->plaintext) && $findValue->find('span.texthere', 0)->plaintext != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->plaintext), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                    }
                                } else {
                                    //$docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? $findValue->selected_altvalue : ''));
                                    if(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $findValue->selected_altvalue, 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = $findValue->selected_altvalue;
                                    }
                                }
                            } else {
                                if(!empty($jsonDecodeDropDownValues) && $findValue->dropdownlabel != trim($findValue->find('p', 0)->plaintext)) {
                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? $findValue->selected_altvalue : trim($findValue->find('p', 0)->plaintext))));
                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $findValue->selected_altvalue, 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = $findValue->selected_altvalue;
                                    } elseif(isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('p', 0)->plaintext), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('p', 0)->plaintext);
                                    }
                                } elseif(array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? $findValue->selected_altvalue : trim($findValue->find('p', 0)->plaintext))));
                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $findValue->selected_altvalue, 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = $findValue->selected_altvalue;
                                    } elseif(isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('p', 0)->plaintext), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('p', 0)->plaintext);
                                    }
                                } else {
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? $findValue->selected_altvalue : ''));
                                    if(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $findValue->selected_altvalue, 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = $findValue->selected_altvalue;
                                    }
                                }
                            }
                            //forsearching ending
                            //remove commented code from here on 4 August 2020
                        }   //getting document droplist elements ends here
                        //getting custom droplist elements
                        if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = $findValue->dropdownlabel;//(isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            if($parent_id == 10719) {
                               // $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                            }
                            //forsearching starting
                            if($findValue->find('span.texthere', 0)) {
                                if(!empty($jsonDecodeDropDownValues) && $findValue->dropdownlabel != trim($findValue->find('span.texthere', 0)->plaintext)) {
                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('span.texthere', 0)->plaintext))));
                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                    } elseif(isset($findValue->find('span.texthere', 0)->plaintext) && $findValue->find('span.texthere', 0)->plaintext != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->plaintext), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                    }
                                } elseif(isset($findValue->find('span.texther', 0)->plaintext) && array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('span.texthere', 0)->plaintext))));
                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                    } elseif(isset($findValue->find('span.texthere', 0)->plaintext) && $findValue->find('span.texthere', 0)->plaintext != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->plaintext), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                    }
                                } else {
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : ''));
                                    if(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                    }
                                }
                            } else {
                                if(!empty($jsonDecodeDropDownValues) && $findValue->dropdownlabel != trim($findValue->find('span.texthere', 0)->plaintext)) {
                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('p', 0)->plaintext))));
                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                    } elseif(isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('p', 0)->plaintext), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('p', 0)->plaintext);
                                    }
                                } elseif(isset($findValue->find('span.texther', 0)->plaintext) && array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('p', 0)->plaintext))));
                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                    } elseif(isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('p', 0)->plaintext), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('p', 0)->plaintext);
                                    }
                                } else {
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : ''));
                                    if(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                    }
                                }
                            }
                            //forsearching ending
                            //remove commented code from here on 4 August 2020
                        }

                        //document field droplist with multiple radio button
                        if(strpos($findValue->getAttribute('class'), 'documentFieldDroplist') !== false && strpos($findValue->getAttribute('class'), 'dropdown_radioList_api') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = $findValue->dropdownlabel;//(isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            if($parent_id == 10719) {
                                //$apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                            }
                            if($findValue->find('.fa-dot-circle-o', 0)) {
                                //$docFields[$apiAttributeOrDropDownLabel] = $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext;
                                //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && !empty($jsonDecodeDropDownAlternativeValues[$getArrayKey]) ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '' ? trim($findValue->selected_altvalue) : trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext)));
                                $getArrayKey = array_search(trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext), $jsonDecodeDropDownValues);
                                //comment below line on 4 August 2020 for not show the key if value is empty
                                //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? $jsonDecodeDropDownAlternativeValues[$getArrayKey] : $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext);
                                if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                    //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $jsonDecodeDropDownAlternativeValues[$getArrayKey], 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                    $docFields[$apiAttributeOrDropDownLabel] = $jsonDecodeDropDownAlternativeValues[$getArrayKey];
                                } elseif(isset($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext) && $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext != '') {
                                    //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext, 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                    $docFields[$apiAttributeOrDropDownLabel] = $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext;
                                }
                            } else {
                                //comment below line on 4 August 2020 for not show the key if value is empty
                                //$docFields[$apiAttributeOrDropDownLabel] = '';
                            }
                        }
                        //document field droplist with multiple radio button of custom and me
                        if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'dropdown_radioList_api') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = $findValue->dropdownlabel;//(isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            if($parent_id == 10719) {
                                //$apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                            }
                            if($findValue->find('.fa-dot-circle-o', 0)) {
                                //$docFields[$apiAttributeOrDropDownLabel] = $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext;
                                $getArrayKey = array_search(trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext), $jsonDecodeDropDownValues);
                                //comment below line on 4 August 2020 for not show the key if value is empty
                                //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? $jsonDecodeDropDownAlternativeValues[$getArrayKey] : $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext);
                                if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                    //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $jsonDecodeDropDownAlternativeValues[$getArrayKey], 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                    $docFields[$apiAttributeOrDropDownLabel] = $jsonDecodeDropDownAlternativeValues[$getArrayKey];
                                } elseif(isset($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext) && $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext != '') {
                                    //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                    $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext);
                                }
                            } else {
                                //comment below line on 4 August 2020 for not show the key if value is empty
                                //$docFields[$apiAttributeOrDropDownLabel] = '';
                            }
                        }
                        //document field droplist with multiple checkboxes
                        if(strpos($findValue->getAttribute('class'), 'documentFieldDroplist') !== false && strpos($findValue->getAttribute('class'), 'multi_choice_option') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = $findValue->dropdownlabel;//(isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            if($parent_id == 10719) {
                                //$apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                            }
                            if($findValue->find('.fa-check', 0)) {
                                $faCheckValues = [];
                                //foreach($findValue->find('.fa-check') as $checkBoxKey => $checkBoxValue) {
                                foreach($findValue->find('.ionIconsCheck') as $checkBoxKey => $checkBoxValue) {
                                    if(strpos($checkBoxValue->getAttribute('class'), 'fa-check') !== false) {
                                        $faCheckValues[] = (isset($jsonDecodeDropDownAlternativeValues[$checkBoxKey]) && $jsonDecodeDropDownAlternativeValues[$checkBoxKey] != '' ? $jsonDecodeDropDownAlternativeValues[$checkBoxKey] : $checkBoxValue->parent()->parent()->find('label', 0)->innertext);
                                    }
                                }
                                if(!empty($faCheckValues)) {
                                    $totalFaCheckValues = count($faCheckValues);
                                    if($totalFaCheckValues > 1) {
                                        $faCheckValues = implode(', ' , array_slice($faCheckValues,0,$totalFaCheckValues-1)) . ' and ' . end($faCheckValues);
                                    } else {
                                        $faCheckValues = implode(', ' , $faCheckValues);
                                    }
                                    //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $faCheckValues, 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                    $docFields[$apiAttributeOrDropDownLabel] = $faCheckValues;
                                }
                                //$docFields[$apiAttributeOrDropDownLabel] = $findValue->find('.fa-check', 0)->parent()->parent()->find('label', 0)->innertext;
                            } else {
                                //comment below line on 4 August 2020 for not show the key if value is empty
                                //$docFields[$apiAttributeOrDropDownLabel] = '';
                            }
                        }
                        //document field droplist with multiple checkboxes of custom and me
                        if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'multi_choice_option') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = $findValue->dropdownlabel;//(isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            if($parent_id == 10719) {
                                //$apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                            }
                            if($findValue->find('.fa-check', 0)) {
                                //$comma = (count($data["requesttypes"]) > 0 ? ($key+1 == count($data["requesttypes"])-1 ? ' and ' : ($key+1 < count($data["requesttypes"]) ? ', ' : '')) : '');
                                $faCheckValues = [];
                                foreach($findValue->find('.ionIconsCheck') as $checkBoxKey => $checkBoxValue) {
                                    if(strpos($checkBoxValue->getAttribute('class'), 'fa-check') !== false) {
                                        $faCheckValues[] = (isset($jsonDecodeDropDownAlternativeValues[$checkBoxKey]) && $jsonDecodeDropDownAlternativeValues[$checkBoxKey] != '' ? $jsonDecodeDropDownAlternativeValues[$checkBoxKey] : $checkBoxValue->parent()->parent()->find('label', 0)->innertext);
                                    }
                                }
                                if(!empty($faCheckValues)) {
                                    $totalFaCheckValues = count($faCheckValues);
                                    if($totalFaCheckValues > 1) {
                                        $faCheckValues = implode(', ' , array_slice($faCheckValues,0,$totalFaCheckValues-1)) . ' and ' . end($faCheckValues);
                                    } else {
                                        $faCheckValues = implode(', ' , $faCheckValues);
                                    }
                                    //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $faCheckValues, 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                    $docFields[$apiAttributeOrDropDownLabel] = $faCheckValues;
                                }
                            } else {
                                //comment below line on 4 August 2020 for not show the key if value is empty
                                //$docFields[$apiAttributeOrDropDownLabel] = '';
                            }
                        } //selectcolor_popupcontainer condition ends here
                    }   //second foreach loop ends here
                }   //first foreach loop ends here

                //document tags names showing and its loop starting
                foreach($html->find('.dynamicTag') as $findTagKey => $findTagValue) {
                    if(strpos($findTagValue->getAttribute('class'), 'documenttagName') !== false) {
                        $apiAttributeOrTagName = $findTagValue->tagname;//(isset($findTagValue->apitagattribute) && $findTagValue->apitagattribute != '' ? $findTagValue->apitagattribute : $findTagValue->tagname);
                        if($parent_id == 10719) {
                            //$apiAttributeOrTagName = str_replace(' ', '_', $apiAttributeOrTagName);
                        }
                        $jsonDecodeDropDownValues = (isset($findTagValue->dropdownvalues) && !empty($findTagValue->dropdownvalues) ? json_decode(html_entity_decode($findTagValue->dropdownvalues), true) : []);
                        $jsonDecodeDropDownAlternativeValues = (isset($findTagValue->dropdownvalues_alternate) && !empty($findTagValue->dropdownvalues_alternate) ? json_decode(html_entity_decode($findTagValue->dropdownvalues_alternate), true) : []);

                        if(strpos($findTagValue->getAttribute('class'), 'documentdroplisttagname') !== false) {
                            if(isset($findTagValue->dropdownapi) && $findTagValue->dropdownapi != '') {
                                $docFields[$apiAttributeOrTagName] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                            } else {
                                $tagValuesArray = [];
                                foreach($jsonDecodeDropDownValues as $dropDownKey => $dropDownValues) {
                                    if(isset($findTagValue->plaintext) && !empty($findTagValue->plaintext) && isset($dropDownValues) && !empty($dropDownValues)) {
                                        if(strpos($findTagValue->plaintext, $dropDownValues) > -1) {
                                            $getArrayKey = array_search(trim($dropDownValues), $jsonDecodeDropDownValues);
                                            $tagValuesArray[] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && !empty($jsonDecodeDropDownAlternativeValues[$getArrayKey]) ? $jsonDecodeDropDownAlternativeValues[$getArrayKey] : $utility->convertDateMonthNameToInteger($languageId, trim($dropDownValues)));
                                        } else {
                                            $docFields[$apiAttributeOrTagName] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                                        }
                                    }
                                }
                                $totalTagValuesArray = count($tagValuesArray);
                                if($totalTagValuesArray > 1) {
                                    $tagValuesArray = implode(', ' , array_slice($tagValuesArray,0,$totalTagValuesArray-1)) . ' and ' . end($tagValuesArray);
                                } else {
                                    $tagValuesArray = implode(', ' , $tagValuesArray);
                                }
                                $docFields[$apiAttributeOrTagName] = $tagValuesArray;
                            }
                        } else {
                            $docFields[$apiAttributeOrTagName] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                        }
                    }
                }

                if($html->find('.billecta_GetBankInfo_h5')) {
                    foreach($html->find('.billecta_GetBankInfo_h5') as $findBillectaKey => $findBillectaValue) {
                        if(isset($findBillectaValue->billecta_row)) {
                            if($html->find('.billecta_row_'.$findBillectaValue->billecta_row)) {
                                if($findBillectaValue->innertext != '&nbsp;' && $findBillectaValue->innertext != '<br>') {
                                    //$docFields[$findBillectaValue->innertext] = $html->find('.billecta_row_'.$findBillectaValue->billecta_row, 0)->innertext;
                                    $docFields[$findBillectaValue->innertext] = str_replace(',', ' ', $html->find('.billecta_row_'.$findBillectaValue->billecta_row, 0)->innertext);
                                }
                            }
                        }
                    }
                }

              
               
                
                //document tags names showing and its loop ending

                if(!empty($docFields)) {
                    //showing alphbats order to show document fields data
                    /* If there area multiple case keys as name of document fields then below line will be needed to sort the array */
                    // $docFields = array_change_key_case($docFields, CASE_LOWER);
                    ksort($docFields);
                    $responseArray['document_fields'] = $docFields;
                }
            }


            //basic information of sender and account details starting
            //$senderData = Offersentdetails::where('offer_send_details.offer_sent_id', $document_id)->join('offer_sent', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')->select('offer_send_details.user_details')->where('offer_send_details.is_sender', 1)->where('offer_sent.sender_id', $user_id)->first();
            $senderData = Offersentdetails::where('offer_send_details.offer_sent_id', $document_id)->join('offer_sent', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')->select('offer_send_details.user_details')->where('offer_send_details.is_sender', 1)->whereIn('offer_sent.sender_id', $allUserIds)->first();
            $customerId = 0;
            if($_SERVER["HTTP_HOST"] == "acceptance.simplesign.io" && 1==2){
                $emailrec = "";
                $full_namerec = "";
                $mobilerec    = "";
                $addressrec    = "";
                $zipcoderec   = "";
                $cityerec     = "";
                $companyrec   = "";
                foreach($html->find('.field_box_popupcontainer[getrecsettings=2]') as $findTagKey => $findTagValue) {  
                 
                    if(isset($findTagValue->selectedtype) && $findTagValue->selectedtype == "email"){
                    $emailrec =  (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                    }
                    if(isset($findTagValue->selectedtype) && $findTagValue->selectedtype == "full_name"){
                        /*echo 1;
                        exit();*/
                    $full_namerec =  (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                  
                    }
                    if(isset($findTagValue->selectedtype) && $findTagValue->selectedtype == "name"){
                    $full_namerec =  (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                  
                    }
                    if(isset($findTagValue->selectedtype) && $findTagValue->selectedtype == "mobile"){
                    $mobilerec =  (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                   /* if($findTagValue->find('p', 0)) {
                    $addressrec  = trim($findTagValue->find('p', 0)->plaintext);
                    }*/
                    }
                    if(isset($findTagValue->selectedtype) && $findTagValue->selectedtype == "address"){
                    $addressrec = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                    }
                    if(isset($findTagValue->selectedtype) && $findTagValue->selectedtype == "zipcode"){
                    $zipcoderec = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                 
                    }
                    if(isset($findTagValue->selectedtype) && $findTagValue->selectedtype == "city"){
                    $cityerec = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                 
                    }
                    if(isset($findTagValue->selectedtype) && $findTagValue->selectedtype == "org_name"){
                    $companyrec = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                    }
                    /*echo $full_namerec;
                    exit();*/
               
                    //$fieldsforroletowindexdata[$findTagValue->selectedtype] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                   }

                    if((isset($full_namerec) && $full_namerec != "") && (isset($emailrec) && $emailrec != "")){
                    Recipient::where('registerby', $parent_id)->where('from_user_api', 101)->delete();    
                    $full_namerec = Tcrypt::encrypter($full_namerec);
                    $emailrec     = Tcrypt::encrypter($emailrec);
                    $customerId = Recipient::insertGetId([
                    'full_name' => $full_namerec,
                    // 'last_name' => $lastname,
                    'company' => $companyrec,
                    'mobile' => $mobilerec,
                    'email' => $emailrec,
                    //'reg_no' => $regno,
                    'address' => $addressrec,
                    //'personnr' => $personnr,
                    'zip' => $zipcoderec,
                    'city' => $cityerec,
                    // 'extra_fields' =>$extra_fields,
                    'from_user_api' => 101,
                    'registerby' => $parent_id]
                    );
                    }
                } 
            if($senderData) {
                $senderDetails = $accountDetails = [];
                $senderUserDetails = Tcrypt::decrypter($senderData['user_details']);
                $senderUserDetailsJsonDecode = json_decode($senderUserDetails, true);
               // print_rj($senderUserDetailsJsonDecode,1);

                //sender details information starting
                //for regular contract sender use full_name key and for online contract sender use first_name key
                $senderDetails['name'] = (isset($senderUserDetailsJsonDecode['full_name']) && $senderUserDetailsJsonDecode['full_name'] != '' ? trim($senderUserDetailsJsonDecode['full_name']) : (isset($senderUserDetailsJsonDecode['first_name']) && $senderUserDetailsJsonDecode['first_name'] != '' ? trim($senderUserDetailsJsonDecode['first_name']) : ''));
                $senderDetails['email'] = (isset($senderUserDetailsJsonDecode['email']) && $senderUserDetailsJsonDecode['email'] != '' ? trim(preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $senderUserDetailsJsonDecode['email'])) : '');

                $userCustomFields = (isset($senderUserDetailsJsonDecode['user_customfields']) && $senderUserDetailsJsonDecode['user_customfields'] != '' ? json_decode($senderUserDetailsJsonDecode['user_customfields'], true) : []);
                if(!empty($userCustomFields)) {
                    foreach($userCustomFields as $userCustomFldkey => $userCustomFldValue) {
                        $senderDetails[trim($userCustomFldkey)] = (isset($userCustomFldValue) && $userCustomFldValue != '' ? trim($userCustomFldValue) : '');
                        //$senderDetails[trim($userCustomFldkey)] = (isset($userCustomFldValue) && $userCustomFldValue != '' ? $utility->convertDateMonthNameToInteger($languageId, trim($userCustomFldValue)) : '');
                    }
                }
                $responseArray['sender_details'] = $senderDetails;
                //sender details information ending

                //account details information starting
                $accountDetails['company'] = (isset($senderUserDetailsJsonDecode['company']) && $senderUserDetailsJsonDecode['company'] != '' ? trim($senderUserDetailsJsonDecode['company']) : '');
                $accountDetails['reg_no'] = (isset($senderUserDetailsJsonDecode['reg_no']) && $senderUserDetailsJsonDecode['reg_no'] != '' ? trim($senderUserDetailsJsonDecode['reg_no']) : '');
                $accountDetails['address'] = (isset($senderUserDetailsJsonDecode['address']) && $senderUserDetailsJsonDecode['address'] != '' ? trim($senderUserDetailsJsonDecode['address']) : '');
                $accountDetails['phone_no'] = (isset($senderUserDetailsJsonDecode['mobile']) && $senderUserDetailsJsonDecode['mobile'] != '' ? trim($senderUserDetailsJsonDecode['mobile']) : (isset($senderUserDetailsJsonDecode['telephone']) && $senderUserDetailsJsonDecode['telephone'] != '' ? trim($senderUserDetailsJsonDecode['telephone']) : ''));
                $accountDetails['zipcode'] = (isset($senderUserDetailsJsonDecode['zipcode']) && $senderUserDetailsJsonDecode['zipcode'] != '' ? trim($senderUserDetailsJsonDecode['zipcode']) : (isset($senderUserDetailsJsonDecode['post_code']) && $senderUserDetailsJsonDecode['post_code'] != '' ? trim($senderUserDetailsJsonDecode['post_code']) : ''));
                $accountDetails['city'] = (isset($senderUserDetailsJsonDecode['city']) && $senderUserDetailsJsonDecode['city'] != '' ? trim($senderUserDetailsJsonDecode['city']) : '');

                $responseArray['account_details'] = $accountDetails;
                //account details information ending
            }
            //basic information of sender and account details ending

            //specificdocumentdetail API
            /* Get product table details against the template Zain*/
            if( $_SERVER['HTTP_HOST'] == 'acceptance.simplesign.io' || $_SERVER['HTTP_HOST'] == 'esign.simplesign.io' ) {
                $templatetabledata = $this->templateTables($document_id);
                foreach ($templatetabledata['producttables'] as $tablekey => $tabledata) {
                    $tablename = $tabledata['table_name'];
                    $tablecurrency = $tabledata['table_currency'];
                    $itemcollection = array();
                    foreach ($tabledata['tableitems'] as $itemkey => $itemdata) {
                        $itemdetails = array();
                        $itemdetails['product name'] = $itemdata['item_name'];
                        if ( isset($data['fromoverview']) && $data['fromoverview'] == 1 ) {
                            $itemdetails[$itemdata['item_name'].' (description)'] = ($itemdata['item_description'] != 'NULL' ? $itemdata['item_description'] : '');
                            $itemdetails[$itemdata['item_name'].' (quantity)'] = $itemdata['item_qty'];
                            $itemdetails[$itemdata['item_name'].' (price)'] = $itemdata['item_price'].' '.$tablecurrency;
                            if ($itemdata['item_discount'] != 0) {
                                $itemdetails[$itemdata['item_name'].' (discount)'] = $itemdata['item_discount'].' %';
                            }
                            $itemdetails[$itemdata['item_name'].' (cost)'] = $itemdata['item_cost'].' '.$tablecurrency;
                            $itemdetails[$itemdata['item_name'].' (margin)'] = $itemdata['item_margin'].' '.$tablecurrency;
                        } else {
                            $itemdetails['description'] = ($itemdata['item_description'] != 'NULL' ? $itemdata['item_description'] : '');
                            $itemdetails['quantity'] = $itemdata['item_qty'];
                            if ($itemdata['item_discount'] != 0) {
                                $itemdetails['item_discount'] = $itemdata['item_discount'].'%';
                            }
                            $itemdetails['price'] = $itemdata['item_price'].' '.$tablecurrency;
                            $itemdetails['cost'] = $itemdata['item_cost'].' '.$tablecurrency;
                            $itemdetails['margin'] = $itemdata['item_margin'].' '.$tablecurrency;
                        }
                        array_push($itemcollection, $itemdetails);
                        $responseArray[$tablename] = $itemcollection;
                    }
                }
            }

            //basic session_key information of document details starting external_Views
            if($offerSentContent) {
                $uniqueId = Offersentdetails::where('offer_send_details.offer_sent_id', $document_id)->join('offer_sent', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')->select('offer_send_details.unique_id')->where('offer_send_details.is_sender', 0)->whereIn('offer_sent.sender_id', $allUserIds)->first();
                //DB::enableQueryLog();
                //print_rj(DB::getQueryLog());
                $documentLink = Offersentdetails::where('offer_send_details.offer_sent_id', $document_id)->join('offer_sent', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')->whereIn('offer_sent.sender_id', $allUserIds)->where('offer_send_details.is_sender', 1)->select('offer_send_details.id', 'offer_send_details.unique_id')->first();
                $documentDetails = [];
                $documentDetails['template_name'] = ($offerSentContent['visible_name'] != '' ? trim(Tcrypt::decrypter($offerSentContent['visible_name'])) : trim(Tcrypt::decrypter($offerSentContent['name'])));
                $documentDetails['document_id'] = (!empty($offerSentContent['external_doc_id']) ? $offerSentContent['external_doc_id'] : $offerSentContent['id']);
                $documentDetails['template_id'] = $offerSentContent['offer_id'];
                $documentDetails['language'] = (isset($offerSentContent['language_id']) && $offerSentContent['language_id'] != '' ? $utility->languageName($offerSentContent['language_id']) : 'English');
                $documentDetails['sent_date'] = (isset($offerSentContent['created_date']) && $offerSentContent['created_date'] != '' && $offerSentContent['created_date'] != '0000-00-00 00:00:00' ? trim($offerSentContent['created_date']) : '');
                $documentDetails['signed_date'] = (isset($offerSentContent['signed_date']) && $offerSentContent['signed_date'] != '' && $offerSentContent['signed_date'] != '0000-00-00 00:00:00' ? trim($offerSentContent['signed_date']) : '');
                $documentDetails['due_date'] = (isset($offerSentContent['due_date']) && $offerSentContent['due_date'] != '' && $offerSentContent['due_date'] != '0000-00-00 00:00:00' ? trim(date('Y-m-d', strtotime($offerSentContent['due_date']))) : '');
                $documentDetails['status'] = (isset($offerSentContent['offer_status']) ? $utility->offerStatusName($offerSentContent['offer_status']) : '');

                $getAddOnObjectData = settings::where('user_id', $parent_id)->select('new_addon_obj')->first();
                $markCompleted = Offersent_data::where('sent_id', $offerSentContent['id'])->pluck('mark_completed');
                $multiCaseManagement = Offersent_data::where('sent_id', $offerSentContent['id'])->pluck('multi_case_management');
                $contractTypeId = Offersent_data::where('sent_id', $offerSentContent['id'])->pluck('contract_type_id');
                $markCompletedDate = Offersent_data::where('sent_id', $offerSentContent['id'])->pluck('mark_completed_date');

                /* Adding gross margin and total cost in Api response */
                $costmargin = "";
                $costmargin = Offersent_data::where('sent_id', '=', $offerSentContent['id'])->whereNotNull('document_cost')->whereNotNull('document_margin')->whereNotNull('document_price')->select('document_price', 'document_cost', 'document_margin')->first();

                
                if(!empty($getAddOnObjectData['new_addon_obj'])) {
                    $newAddonObjJesonDecode = json_decode($getAddOnObjectData['new_addon_obj'], true);
                    if(isset($newAddonObjJesonDecode['mark_as_completed_addon']) && $newAddonObjJesonDecode['mark_as_completed_addon'] == 1) {
                        if(isset($newAddonObjJesonDecode['mark_as_completed_addon_setting']) && !empty($newAddonObjJesonDecode['mark_as_completed_addon_setting'])) {
                            $markAsCompletedAddonSettingJsonDecode = json_decode($newAddonObjJesonDecode['mark_as_completed_addon_setting'], true);

                            $multiCaseManagementJsonDecode = (isset($multiCaseManagement) && !empty($multiCaseManagement) ? json_decode($multiCaseManagement, true) : []);
                            

                            //if(!empty($multiCaseManagementJsonDecode) || 1==1) {
                            if(!empty($multiCaseManagementJsonDecode)) {
                                if(isset($markAsCompletedAddonSettingJsonDecode['mark_tasks_array']) && !empty($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'])) {
                                    $numbetIncrement = 0;
                                    $flagForCompletedKey = false;
                                    $completeStatus = 'Not completed';
                                    foreach($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'] as $markAsCompletedAddonSettingJsonDecodeKey => $markAsCompletedAddonSettingJsonDecodeValue) {
                                        
                                        if(in_array($contractTypeId, $markAsCompletedAddonSettingJsonDecodeValue['contract_type_selected']) && (in_array($offerSentContent['offer_status'], $markAsCompletedAddonSettingJsonDecodeValue['marked_addon_status']) || in_array("", $markAsCompletedAddonSettingJsonDecodeValue['marked_addon_status']))) {
                                            $numbetIncrement++;
                                            $conditionalText = '';
                                            if(isset($multiCaseManagementJsonDecode[$numbetIncrement]) && !empty($multiCaseManagementJsonDecode[$numbetIncrement])) {
                                                if(isset($multiCaseManagementJsonDecode[$numbetIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numbetIncrement]['status_text'] == 'done') {
                                                    $conditionalText = 'Yes';
                                                } elseif(isset($multiCaseManagementJsonDecode[$numbetIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numbetIncrement]['status_text'] == 'in_process') {
                                                    $conditionalText = 'In process';
                                                } elseif(isset($multiCaseManagementJsonDecode[$numbetIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numbetIncrement]['status_text'] == 'no') {
                                                    $conditionalText = 'No';
                                                }
                                                if(isset($multiCaseManagementJsonDecode[$numbetIncrement]['task_no']) && isset($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'][$multiCaseManagementJsonDecode[$numbetIncrement]['task_no']])) {
                                                    $documentDetails[$markAsCompletedAddonSettingJsonDecode['mark_tasks_array'][$multiCaseManagementJsonDecode[$numbetIncrement]['task_no']]['tasknames']] = $conditionalText;
                                                    $flagForCompletedKey = true;
                                                } else {
                                                    if(isset($multiCaseManagementJsonDecode[$numbetIncrement]['task_no']) && $multiCaseManagementJsonDecode[$numbetIncrement]['task_no'] != '') {
                                                        $documentDetails[$markAsCompletedAddonSettingJsonDecodeValue['tasknames']] = 'No';
                                                        $flagForCompletedKey = true;
                                                    }
                                                }
                                            } else {
                                                if($markCompleted != 1) {
                                                    $documentDetails[$markAsCompletedAddonSettingJsonDecodeValue['tasknames']] = 'No';
                                                }
                                                $flagForCompletedKey = true;
                                            }
                                            if(isset($multiCaseManagementJsonDecode[$numbetIncrement]) && !empty($multiCaseManagementJsonDecode[$numbetIncrement]) && isset($multiCaseManagementJsonDecode[$numbetIncrement]['status_activity']) && !empty($multiCaseManagementJsonDecode[$numbetIncrement]['status_activity'])) {
                                                $flagForCompletedKey = true;
                                                //if(count($multiCaseManagementJsonDecode) == $isCompleted && $markAsCompletedAddonSettingJsonDecodeKey == count($markAsCompletedAddonSettingJsonDecode['mark_tasks_array']) -1) {
                                                if($markCompleted == 1) {
                                                    $completeStatus = $utility->changeTimeZone($markCompletedDate, 'Y-m-d H:i:s', 'UTC', $userTimeZone);
                                                }
                                            }   //status_activity
                                        }
                                    }
                                    //if(!empty($multiCaseManagementJsonDecode)) {
                                    if(!empty($flagForCompletedKey)) {
                                        $documentDetails['completed'] = $completeStatus;
                                    }
                                }
                            }
                        }
                    }
                }
                $documentDetails['pdf'] = $domain_name.'avtal/downloadpdf/'.$document_id.'/'.$uniqueId['unique_id'];
                $documentDetails['document_url'] = $domain_name.'document/view/'.$documentLink['id'].'/'.$documentLink['unique_id'];

                if ($costmargin != "") {
                    if ($costmargin['document_cost'] != "NULL") {
                        $documentDetails['document_cost'] =  $costmargin['document_cost'];
                    }

                    if ($costmargin['document_margin'] != "NULL") {
                        $documentDetails['document_margin'] =  $costmargin['document_margin'];
                    }

                    if ($costmargin['document_price'] != "NULL") {
                        $documentDetails['document_price'] =  $costmargin['document_price'];
                    }
                }
                //basic information of document details ending
                $responseArray['document_details'] = $documentDetails;
            }
            if(!isset($data['fromoverview'])) {
                $updatedIndexData = DB::table('document_indexdata')->where('document_id', $document_id)->get();
                if(!empty($updatedIndexData)) {
                    foreach($responseArray as $responseArrayKey => $responseArrayValue) { //loop on main array
                        if(is_numeric($responseArrayKey)) {
                            $recRole = $responseArray[$responseArrayKey]['details']['recipient_role'];
                            foreach($responseArrayValue as $responseArrayValueKey => $recValue) { //loop on numeric array
                                foreach($updatedIndexData as $updatedIndexDataKey => $updatedIndexDataValue) { // loop on array from database
                                    if($updatedIndexDataValue->rec_role == $recRole) {
                                        if($updatedIndexDataValue->object_type == $responseArrayValueKey) { //checking role condition
                                            $orginalFields = json_decode($updatedIndexDataValue->old_field, true);
                                            $newFields = json_decode($updatedIndexDataValue->new_field, true);
                                            $fieldName = array_keys($orginalFields)[0]; // getting field name orginal as it can't be changed from UI
                                            $updatedFieldValue = array_values($newFields)[0]; // getting updated values of that particular field
                                            $responseArray[$responseArrayKey][$responseArrayValueKey][$fieldName] = $updatedFieldValue; //assining values to the main object
                                        }
                                    }
                                }
                            }
                        } else {
                            foreach($updatedIndexData as $updatedIndexDataKey => $updatedIndexDataValue) { // loop on array from database
                                if($updatedIndexDataValue->object_type == $responseArrayKey) { //checking role condition
                                    $orginalFields = json_decode($updatedIndexDataValue->old_field, true);
                                    $newFields = json_decode($updatedIndexDataValue->new_field, true);
                                    $fieldName = array_keys($orginalFields)[0]; // getting field name orginal as it can't be changed from UI
                                    $updatedFieldValue = array_values($newFields)[0]; // getting updated values of that particular field
                                    $responseArray[$responseArrayKey][$fieldName] = $updatedFieldValue; //assining values to the main object
                                }
                            }
                        }
                    }
                }
            }
            $responseArray['customerId'] = $customerId;
            return response()->json(['status' => 'success', 'result' => $responseArray], 200, ['Content-Type' => 'application/json; charset=UTF-8'], JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
        } else {
            return Response::json(['status' => 'error', 'result' => 'No record(s) found']);
        }
    }

    public function getSpecificdocumentdetailawaistwo($custom_data=[]) {
        $data = Input::all();
        $utility = new Utility();
        $domain_name = asset('/');
        $storeFieldsObjDB = false;
        //setMajorDB();
       // print_rj($data, 1);

        //added by me (MS) 01 June 2020 starting
        if(isset($custom_data['access_token']) && $custom_data['access_token'] != '') {
            $data['access_token'] = $custom_data['access_token'];
        }
        if(isset($custom_data['document_id']) && $custom_data['document_id'] != '') {
            $data['document_id'] = $custom_data['document_id'];
        }
        //added by me (MS) 01 June 2020 ending

        //access_token validation starting
        if(isset($data['access_token']) && $data['access_token'] != '' && !isset($custom_data['user_id']) ) {
            $access_token = $data['access_token'];
        } else {
            return Response::json(['status'=>'error','result' => 'access_token is missing']);
        }
        //access_token validation ending

        if(isset($custom_data['user_id'])) {
            $user_id = $custom_data['user_id'];
            $storeFieldsObjDB = true;
        } else {
            $user_id = $utility->getUserIdByAuthToken($access_token);
        }
        $parent_id = $utility->getParent($user_id);
        if($utility->isParent($user_id) == 1) {
            $allUserIds = $utility->getSubusers($parent_id);
        } else {
            $allUserIds = [$user_id];
        }

        //contract_id validation starting
        if(isset($data['document_id']) && $data['document_id'] != '') {
            $document_id = $data['document_id'];
        } elseif(isset($custom_data['sent_id']) && $custom_data['sent_id'] != '') {
            $document_id = $custom_data['sent_id'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'document_id is missing']);
        }

        $userTimeZone = $utility->getUsertimezone($parent_id);
        $getDocumentIdFromExternalDocumentId = $utility->documentExternalId($document_id, $allUserIds);
        if(!empty($getDocumentIdFromExternalDocumentId)) {
            $document_id = $getDocumentIdFromExternalDocumentId;
            $data['document_id'] = $document_id;
        }

        $checkingDraft = Offersent::where('id', $document_id)->where('offer_status', 7)->where('is_draft', 1)->count();
        if($checkingDraft) {
            return Response::json(['status' => 'error', 'result' => 'document is not sent']);
        }

        $userSettings = $utility->getUserSettings($parent_id);
        $getApiHitCount = Userinfo::where('user_id', $parent_id)->select('hit_count')->first();
        $addupdateapiaccesslogs = $utility->addupdateapiaccesslogs($user_id, 'getSpecificdocumentdetail v3', $data, $getApiHitCount['hit_count']);
        if($addupdateapiaccesslogs == 'exceed') {
            $this->apiCallLimitExceedMessage = str_replace('#hitCuntNo', $getApiHitCount['hit_count'], $this->apiCallLimitExceedMessage);
            return Response::json(['status' => 'error', 'result' => $this->apiCallLimitExceedMessage]);
        }

        if($utility->checkAdminStripe($user_id) && !isset($custom_data['user_id']) ) {
            return Response::json(['status' => 'error', 'result' => 'Account is locked make payment in order to continue Simplesign']);
        }

        $contractData = Offersentdetails::where('offer_send_details.offer_sent_id', $document_id)->join('offer_sent', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')->select('offer_sent.language_id', 'offer_send_details.id AS detail_id', 'offer_send_details.offer_sent_id', 'offer_send_details.user_details', 'offer_send_details.offer_status', 'offer_send_details.req_attached', 'offer_send_details.document_read_date', 'offer_send_details.signed_date', 'offer_send_details.authentication_method', 'offer_send_details.role', 'offer_send_details.invitation_type', 'offer_send_details.invitation_order', 'offer_send_details.offer_confirmation', 'offer_send_details.id_attachments', 'offer_sent.content', 'offer_send_details.forward_status', 'offer_send_details.forward_user_details', 'offer_send_details.forward_signed')->where('offer_send_details.is_sender', 0)->whereIn('offer_sent.sender_id', $allUserIds)->get()->toArray();
        
        if($contractData) {
            $responseArray = $senderInfo = $contractDetails =  [];
            $offerSentContent = Offersent::where('id', $document_id)->whereIn('sender_id', $allUserIds)->select('content', 'visible_name', 'name', 'language_id', 'id', 'offer_id', 'created_date', 'offer_status', 'signed_date', 'due_date', 'external_doc_id', 'offer_type')->first();
            foreach($contractData as $contractDataKey => $contractDataValue) {
                $languageId = $contractDataValue['language_id'];

                $peopleFields = $organizationFields = $details = $inviteAndForwardDetails = [];
                $nameExplode = '';
                
                $recipientUserDetails = Tcrypt::decrypter($contractDataValue['user_details']);
                $recipientUserDetailsJsonDecode = json_decode($recipientUserDetails, true);
                $userRole = (isset($recipientUserDetailsJsonDecode['recrolename']) && $recipientUserDetailsJsonDecode['recrolename'] != '' ? $recipientUserDetailsJsonDecode['recrolename'] : (isset($recipientUserDetailsJsonDecode['partyname']) && $recipientUserDetailsJsonDecode['partyname'] != '' ? $recipientUserDetailsJsonDecode['partyname'] : ''));
                //$peopleFields['detail_id'] = $contractDataValue['detail_id'];
                //$peopleFields['offer_sent_id'] = $contractDataValue['offer_sent_id'];
                //$contractDataValue['forward_status'];

                $content = Tcrypt::decrypter($contractDataValue['content']);
                if($offerSentContent['offer_id'] == 44422 && $offerSentContent['offer_type'] == 5) {
                    //organization information of fields which are placed at document starting
                    if($content != '') {
                        $html = new \Htmldom($content);
                        foreach($html->find('.text') as $findKey => $findValue) {
                            //codition for regular contract starting
                            if(isset($recipientUserDetailsJsonDecode['id']) && $recipientUserDetailsJsonDecode['id'] == $findValue->recipientselectedid) {
                                if(strpos($findValue->getAttribute('class'), 'peopleNewField') !== false) {
                                    if($findValue->find('h4', 0)) {
                                        $peopleFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                    } else {
                                        if($findValue->find('p', 0)) {
                                            $peopleFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                        }
                                    }
                                } if(strpos($findValue->getAttribute('class'), 'organizationNewField') !== false) {
                                    if($findValue->find('h4', 0)) {
                                        $organizationFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                    } else {
                                        if($findValue->find('p', 0)) {
                                            $organizationFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                        }
                                    }
                                }
                                //codition for regular contract ending
                            } else {
                                //codition for online contract starting
                                if($userRole == $findValue->parent()->parent()->whowillfill) {
                                    if(strpos($findValue->getAttribute('class'), 'peopleNewField') !== false) {
                                        if($findValue->find('h4', 0)) {
                                            $peopleFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                        } else {
                                            //right now paragraph tag is showing and will be replaced by h4 near future starting
                                            if($findValue->find('p', 0)) {
                                                $peopleFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                            }
                                            //right now paragraph tag is showing and will be replaced by h4 near future ending
                                        }
                                    } if(strpos($findValue->getAttribute('class'), 'organizationNewField') !== false) {
                                        if($findValue->find('h4', 0)) {
                                            $organizationFields[$findValue->selectedtype] = trim($findValue->find('h4', 0)->plaintext);
                                        } else {
                                            //right now paragraph tag is showing and will be replaced by h4 near future starting
                                            if($findValue->find('p', 0)) {
                                                $organizationFields[$findValue->selectedtype] = trim($findValue->find('p', 0)->plaintext);
                                            }
                                            //right now paragraph tag is showing and will be replaced by h4 near future ending
                                        }
                                    }
                                }
                                //codition for online contract ending
                            }
                        }
                    }
                    //organization information of fields which are placed at document ending
                } else {
                    //basic information of recipient starting
                    $recipientFieldsRolesTabFields = (isset($recipientUserDetailsJsonDecode['Recipient_fields_roles_tab_fields']) && !empty($recipientUserDetailsJsonDecode['Recipient_fields_roles_tab_fields']) ? json_decode($recipientUserDetailsJsonDecode['Recipient_fields_roles_tab_fields'], true) : '');
                    $recinfoFields = ($recipientFieldsRolesTabFields != '' ? $recipientFieldsRolesTabFields['recinfo_fields'] : '');

                    //print_rj($recipientUserDetailsJsonDecode, 1);
                    if(isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '') {
                        //for regular contract recipient use full_name key
                        if((isset($recinfoFields['last_name']) && $recinfoFields['last_name'] == 1) || (isset($recipientUserDetailsJsonDecode['last_name']) && $recipientUserDetailsJsonDecode['last_name'] != '')) {
                            $nameExplode = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($recipientUserDetailsJsonDecode['full_name'])) : '');
                            if(isset($recipientUserDetailsJsonDecode['last_name']) && $recipientUserDetailsJsonDecode['last_name'] != '' && isset($nameExplode[1]) && $nameExplode[1] != '' && $nameExplode[1] != $recipientUserDetailsJsonDecode['last_name']) {
                                $peopleFields['first_name'] = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? $recipientUserDetailsJsonDecode['full_name'] : '');
                                $peopleFields['last_name'] = (isset($recipientUserDetailsJsonDecode['last_name']) && $recipientUserDetailsJsonDecode['last_name'] != '' ? $recipientUserDetailsJsonDecode['last_name'] : '');
                            } else {
                                $peopleFields['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                                $peopleFields['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                            }
                        } else {
                            $nameExplode = (isset($recipientUserDetailsJsonDecode['full_name']) && $recipientUserDetailsJsonDecode['full_name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($recipientUserDetailsJsonDecode['full_name'])) : '');
                            $peopleFields['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                            $peopleFields['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                        }
                    } elseif(isset($recipientUserDetailsJsonDecode['name']) && $recipientUserDetailsJsonDecode['name'] != '') {
                        //for online contract recipient use name key
                        $nameExplode = (isset($recipientUserDetailsJsonDecode['name']) && $recipientUserDetailsJsonDecode['name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($recipientUserDetailsJsonDecode['name'])) : '');
                        $peopleFields['first_name'] = (isset($nameExplode[0]) && $nameExplode[0] != '' ? trim($nameExplode[0]) : '');
                        $peopleFields['last_name'] = (isset($nameExplode[1]) && $nameExplode[1] != '' ? trim($nameExplode[1]) : '');
                    }
                    $peopleFields['email'] = (isset($recipientUserDetailsJsonDecode['email']) && $recipientUserDetailsJsonDecode['email'] != '' ? trim(preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $recipientUserDetailsJsonDecode['email'])) : '');
                    //$peopleFields['personal_no'] = (isset($recipientUserDetailsJsonDecode['personnr']) && $recipientUserDetailsJsonDecode['personnr'] != '' ? trim($recipientUserDetailsJsonDecode['personnr']) : '');
                    $peopleFields['personal_no'] = (isset($recipientUserDetailsJsonDecode['personnr']) && $recipientUserDetailsJsonDecode['personnr'] != '' ? (strlen(trim($recipientUserDetailsJsonDecode['personnr'])) == 12 || strlen(trim($recipientUserDetailsJsonDecode['personnr'])) == 13 ? substr(trim($recipientUserDetailsJsonDecode['personnr']), 2) : trim($recipientUserDetailsJsonDecode['personnr'])) : '');
                    $peopleFields['mobile'] = (isset($recipientUserDetailsJsonDecode['mobile']) && $recipientUserDetailsJsonDecode['mobile'] != '' ? trim($recipientUserDetailsJsonDecode['mobile']) : '');
                    $peopleFields['address'] = (isset($recipientUserDetailsJsonDecode['address']) && $recipientUserDetailsJsonDecode['address'] != '' ? trim($recipientUserDetailsJsonDecode['address']) : '');
                    $peopleFields['city'] = (isset($recipientUserDetailsJsonDecode['city']) && $recipientUserDetailsJsonDecode['city'] != '' ? trim($recipientUserDetailsJsonDecode['city']) : '');
                    $peopleFields['zipcode'] = (isset($recipientUserDetailsJsonDecode['zipcode']) && $recipientUserDetailsJsonDecode['zipcode'] != '' ? trim($recipientUserDetailsJsonDecode['zipcode']) : (isset($recipientUserDetailsJsonDecode['zip']) && $recipientUserDetailsJsonDecode['zip'] != '' ? trim($recipientUserDetailsJsonDecode['zip']) : ''));
                    //basic information of recipient ending

                    //organization information of recipient starting
                    if(isset($recipientUserDetailsJsonDecode['organization_fields'])) {
                        $orgFields = json_decode($recipientUserDetailsJsonDecode['organization_fields'], true);
                        foreach($orgFields as $orgFldsKey => $orgFldsValue) {
                            $orgFldsValue['orgFieldName'] = str_replace('name', 'organization_name', $orgFldsValue['orgFieldName']);
                            $orgFldsValue['orgFieldName'] = str_replace('org_no', 'organization_no', $orgFldsValue['orgFieldName']);
                            $orgFldsValue['orgFieldName'] = str_replace('phone', 'organization_phone', $orgFldsValue['orgFieldName']);
                            $orgFldsValue['orgFieldName'] = str_replace('address', 'organization_address', $orgFldsValue['orgFieldName']);
                            $orgFldsValue['orgFieldName'] = str_replace('city', 'organization_city', $orgFldsValue['orgFieldName']);
                            $orgFldsValue['orgFieldName'] = str_replace('zipcode', 'organization_zipcode', $orgFldsValue['orgFieldName']);
                            $organizationFields[$orgFldsValue['orgFieldName']] = $orgFldsValue['orgFieldValue'];
                        }
                    } else {
                        if(isset($recipientUserDetailsJsonDecode['org_name']) && $recipientUserDetailsJsonDecode['org_name'] != '') {
                            $organizationFields['organization_name'] = $recipientUserDetailsJsonDecode['org_name'];
                        }
                        if(isset($recipientUserDetailsJsonDecode['org_reg_no']) && $recipientUserDetailsJsonDecode['org_reg_no'] != '') {
                            $organizationFields['organization_no'] = $recipientUserDetailsJsonDecode['org_reg_no'];
                        }
                        if(isset($recipientUserDetailsJsonDecode['org_mobile']) && $recipientUserDetailsJsonDecode['org_mobile'] != '') {
                            $organizationFields['organization_phone'] = $recipientUserDetailsJsonDecode['org_mobile'];
                        }
                        if(isset($recipientUserDetailsJsonDecode['org_address']) && $recipientUserDetailsJsonDecode['org_address'] != '') {
                            $organizationFields['organization_address'] = $recipientUserDetailsJsonDecode['org_address'];
                        }
                        if(isset($recipientUserDetailsJsonDecode['org_city']) && $recipientUserDetailsJsonDecode['org_city'] != '') {
                            $organizationFields['organization_city'] = $recipientUserDetailsJsonDecode['org_city'];
                        }
                        if(isset($recipientUserDetailsJsonDecode['org_zip']) && $recipientUserDetailsJsonDecode['org_zip'] != '') {
                            $organizationFields['organization_zipcode'] = $recipientUserDetailsJsonDecode['org_zip'];
                        }
                    }
                    //organization information of recipient ending

                    //people information of new fields starting
                    if(isset($recipientUserDetailsJsonDecode['extra_fields']) && !empty($recipientUserDetailsJsonDecode['extra_fields'])) {
                        $recipientFieldsWithoutValue = (isset($recipientUserDetailsJsonDecode['recipientfields']) && !empty($recipientUserDetailsJsonDecode['recipientfields']) ? json_decode($recipientUserDetailsJsonDecode['recipientfields'], true) : []);

                        $extraFields = (isset($recipientUserDetailsJsonDecode['extra_fields']) && !empty($recipientUserDetailsJsonDecode['extra_fields']) ? json_decode($recipientUserDetailsJsonDecode['extra_fields'], true) : []);
                        if($extraFields) {
                            $intersect = array_uintersect($extraFields, $recipientFieldsWithoutValue, function($val1, $val2) {
                                return strcmp($val1['fieldName'], $val2['fieldName']);
                            });
                            $intersect = array_values($intersect);
                        } else {
                            $intersect = [];
                        }

                        if(!empty($intersect)) {
                            foreach($intersect as $extraFldKey => $extraFldValue) {
                                $peopleFields[$extraFldValue['fieldName']] = $extraFldValue['fieldValue'];
                            }
                        }
                    }
                    //people information of new fields ending

                    //organization information of new fields starting
                    if(isset($recipientUserDetailsJsonDecode['org_extra_fields']) && !empty($recipientUserDetailsJsonDecode['org_extra_fields'])) {
                        $organizationFieldsWithoutValue = (isset($recipientUserDetailsJsonDecode['organizationfields']) && !empty($recipientUserDetailsJsonDecode['organizationfields']) ? json_decode($recipientUserDetailsJsonDecode['organizationfields'], true) : []);

                        $orgExtraFields = (isset($recipientUserDetailsJsonDecode['org_extra_fields']) && !empty($recipientUserDetailsJsonDecode['org_extra_fields']) ? json_decode($recipientUserDetailsJsonDecode['org_extra_fields'], true) : []);
                        if($orgExtraFields) {
                            $intersectOrg = array_uintersect($orgExtraFields, $organizationFieldsWithoutValue, function($val1, $val2) {
                                return strcmp($val1['fieldName'], $val2['fieldName']);
                            });
                            $intersectOrg = array_values($intersectOrg);
                        } else {
                            $intersectOrg = [];
                        }

                        if(!empty($intersectOrg)) {
                            foreach($intersectOrg as $orgExtraFldKey => $orgExtraFldValue) {
                                $organizationFields[$orgExtraFldValue['fieldName']] = $orgExtraFldValue['fieldValue'];
                            }
                        }
                    }
                    //organization information of new fields ending
                }
                

                //basic information of document settings starting
                if(isset($recipientUserDetailsJsonDecode['details_fields'])) {
                    $detailsFields = json_decode($recipientUserDetailsJsonDecode['details_fields'], true);
                    foreach($detailsFields as $orgFldsKey => $orgFldsValue) {
                        $details[$orgFldsValue['detailsFieldName']] = $orgFldsValue['detailsFieldValue'];
                    }
                } else {
                    //print_rj($recipientUserDetailsJsonDecode);
                    $details['recipient_role'] = (isset($recipientUserDetailsJsonDecode['recrolename']) && $recipientUserDetailsJsonDecode['recrolename'] != '' ? $recipientUserDetailsJsonDecode['recrolename'] : (isset($recipientUserDetailsJsonDecode['partyname']) && $recipientUserDetailsJsonDecode['partyname'] != '' ? $recipientUserDetailsJsonDecode['partyname'] : ''));

                    if($contractDataValue['role'] == 2) {
                        $contractDataValue['authentication_method'] = 8;
                    }

                    $details['authentication'] = $utility->authenticationMethodName($contractDataValue['authentication_method']);
                    if(isset($contractDataValue['invitation_type']) && $contractDataValue['invitation_type'] != '') {
                        $details['invitation_type'] = $utility->invitationTypeName($contractDataValue['invitation_type']);
                    }
                    if($contractDataValue['invitation_order'] != 0) {
                        $details['invitation_order'] = $contractDataValue['invitation_order'];
                    }
                    if(isset($contractDataValue['offer_confirmation']) && $contractDataValue['offer_confirmation'] != '') {
                        $details['confirmation'] = $utility->offerConfirmationName($contractDataValue['offer_confirmation']);
                    }
                    $details['id_attachment'] = $utility->idAttachmentName($contractDataValue['id_attachments']);
                }
                $details['request_attachment'] = ($contractDataValue['req_attached'] != '' ? 'yes' : 'no');
                if($contractDataValue['document_read_date'] != '' && $contractDataValue['document_read_date'] != '0000-00-00 00:00:00') {
                    $details['last_viewing_date'] = ($contractDataValue['document_read_date'] != '' ? $contractDataValue['document_read_date'] : '');
                }
                //$details['signed_date'] = ($contractDataValue['signed_date'] != '' && $contractDataValue['signed_date'] != '0000-00-00 00:00:00' ? $contractDataValue['signed_date'] : '');
                $details['signed_date'] = '';
                if($contractDataValue['signed_date'] != '' && $contractDataValue['signed_date'] != '0000-00-00 00:00:00' && $contractDataValue['offer_status'] == 4 && $contractDataValue['role'] == 1) {
                    $details['signed_date'] = $contractDataValue['signed_date'];
                } elseif($contractDataValue['signed_date'] != '' && $contractDataValue['signed_date'] != '0000-00-00 00:00:00' && $contractDataValue['offer_status'] == 3 && $contractDataValue['role'] == 2) {
                    $details['signed_date'] = $contractDataValue['signed_date'];
                }
                //https://acceptance.simplesign.io/admin/checkuserdetail/541998
                //https://acceptance.simplesign.io/v3/specificdocumentdetail?access_token=WvJ2kroPU3cmzsINnEFe70lKobdBtt3SId3owcU1&document_id=542361
                //https://acceptance.simplesign.io/v3/specificdocumentdetail?access_token=WvJ2kroPU3cmzsINnEFe70lKobdBtt3SId3owcU1&document_id=542371
                //https://acceptance.simplesign.io/admin/checkuserdetail/542371
                //https://docs.google.com/document/d/1U3iHzT9kXupLmeFnpamlAwUK1CZoChog1ZvDSEManaY/edit
                //https://acceptance.simplesign.io/v3/specificdocumentdetail?access_token=WvJ2kroPU3cmzsINnEFe70lKobdBtt3SId3owcU1&document_id=543068
                //https://acceptance.simplesign.io/v3/specificdocumentdetail?access_token=WvJ2kroPU3cmzsINnEFe70lKobdBtt3SId3owcU1&document_id=543218
                //https://acceptance.simplesign.io/v3/specificdocumentdetail?access_token=KyQE4Vp9Tok1VZZDoZ2Zy1GkdKnUi9xroK59D2EP&document_id=538121 client
                //forward status without transfer signature role
                /* Forward status is always == 1 for the recipient who is sending invitation (sigingrole/viewonly ) */
                /* Forward signed is always == 1 for the recipient who is only sending signature role to another person */
                if($contractDataValue['offer_status'] == 4 && $contractDataValue['forward_status'] == 1 && $contractDataValue['forward_signed'] == 1) {
                    $details['status'] = 'Forwarded to sign';
                } elseif($contractDataValue['offer_status'] < 4 && $contractDataValue['forward_status'] == 1 && $contractDataValue['forward_signed'] == 0) {
                    $details['status'] = 'Invited to view';
                } else {
                    $details['status'] = (isset($contractDataValue['offer_status']) != '' ? $utility->offerStatusName($contractDataValue['offer_status']) : '');
                }
                //$details['status'] = (isset($contractDataValue['offer_status']) != '' ? $utility->offerStatusName($contractDataValue['offer_status']) : '');

                if($contractDataValue['forward_user_details'] != '') {
                    $forwardUserDetails = Tcrypt::decrypter($contractDataValue['forward_user_details']);
                    if($forwardUserDetails != '') {
                        $forwardUserDetailsJsonDecode = json_decode($forwardUserDetails, true);
                        $forwaredFullName = (isset($forwardUserDetailsJsonDecode['full_name']) && $forwardUserDetailsJsonDecode['full_name'] != '' ? preg_split("/\s+(?=\S*+$)/", trim($forwardUserDetailsJsonDecode['full_name'])) : '');
                        $inviteAndForwardDetails['first_name'] = (isset($forwaredFullName[0]) && $forwaredFullName[0] != '' ? trim($forwaredFullName[0]) : '');
                        $inviteAndForwardDetails['last_name'] = (isset($forwaredFullName[1]) && $forwaredFullName[1] != '' ? trim($forwaredFullName[1]) : '');
                        //$inviteAndForwardDetails['email'] = (isset($forwardUserDetailsJsonDecode['email']) && $forwardUserDetailsJsonDecode['email'] != '' ? trim($forwardUserDetailsJsonDecode['email']) : '');
                        //$inviteAndForwardDetails['mobile'] = (isset($forwardUserDetailsJsonDecode['mobile']) && $forwardUserDetailsJsonDecode['mobile'] != '' ? trim($forwardUserDetailsJsonDecode['mobile']) : '');

                        /* test condition as per zain suggestion when signing role is forwarded */
                        /* Setting keys in the object for signature role sender and reciever */
                        if($contractDataValue['offer_status'] == 4 && $contractDataValue['forward_status'] == 1 && $contractDataValue['forward_signed'] == 1) {
                            $details['forwarded_signing_role_to'] = $inviteAndForwardDetails['first_name'].' '.$inviteAndForwardDetails['last_name'];
                        } elseif((($contractDataValue['offer_status'] <= 4 && $contractDataValue['role'] == 1) || ($contractDataValue['offer_status'] == 3 && $contractDataValue['role'] == 2)) && $contractDataValue['forward_status'] == 2 && isset($recipientUserDetailsJsonDecode['forward_to_sign']) && $recipientUserDetailsJsonDecode['forward_to_sign'] == 1) {
                            $details['invited_to_sign_by'] = $inviteAndForwardDetails['first_name'].' '.$inviteAndForwardDetails['last_name'];
                        }
                        //echo ($contractDataValue['forward_status']. ' ' .$recipientUserDetailsJsonDecode['email'].' '.$contractDataValue['forward_signed'].' '.(isset($forwardUserDetailsJsonDecode['invited_to_view']) ? $forwardUserDetailsJsonDecode['invited_to_view'] : "") );echo'<br>';
                        /* test condition as per zain suggestion when only invited to view */
                        /* Setting keys in the object for sender and reciever of invitation to view only*/
                        if($contractDataValue['forward_status'] == 1 && $contractDataValue['forward_signed'] == 0) {
                            $details['invited_to_view_only'] = $inviteAndForwardDetails['first_name'].' '.$inviteAndForwardDetails['last_name'];
                        } elseif($contractDataValue['forward_status'] == 2 && isset($recipientUserDetailsJsonDecode['invited_to_view']) && $recipientUserDetailsJsonDecode['invited_to_view'] == 1) {
                            $details['invited_to_view_only_by'] = $inviteAndForwardDetails['first_name'].' '.$inviteAndForwardDetails['last_name'];
                        }
                    }
                }

                //this is for rejected to show in sender status
                if($contractDataValue['offer_status'] == 5) {
                    $offerSentContent['offer_status'] = 5;
                } if($contractDataValue['offer_status'] == 6) {
                    $offerSentContent['offer_status'] = 6;
                }

                if(!empty($organizationFields)) {
                    $peopleAndDetailsArray = ['people_fields' => $peopleFields, 'organization_fields' => $organizationFields, 'details' => $details];
                } else {
                    $peopleAndDetailsArray = ['people_fields' => $peopleFields, 'details' => $details];
                }
                array_push($responseArray, $peopleAndDetailsArray);
                //basic information of document settings ending
              }
                $peopleAndDetailsArrayseco = [];
                $detailsec = [];
                $recsec = [];
                $orgsec = [];
                if($_SERVER["HTTP_HOST"] == "acceptance.simplesign.io"){
                $emailrec = "";
                $full_namerec = "";
                $mobilerec    = "";
                $addressrec    = "";
                $zipcoderec   = "";
                $cityerec     = "";
                $companyrec   = "";
                $detailsec['authentication'] = 1;
                $detailsec['id_attachment'] = 'no';
                $detailsec['request_attachment'] = 'no';
                $recipient_role = "";
                foreach($html->find('.field_box_popupcontainer[getrecsettings=2]') as $findTagKey => $findTagValue) {
                $recipient_role = $findTagValue->recipientselected;   
                if($findTagValue->selectedtype == "org_name"){
                $orgsec["organization_name"] =  (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                }else{
                $recsec[$findTagValue->selectedtype] =  (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                    
                }
                }
                $detailsec['recipient_role'] = $recipient_role ;
                $peopleAndDetailsArrayseco['people_fields'] = $recsec;
                //$peopleAndDetailsArrayseco['organization_fields'] = $orgsec;
                
                $peopleAndDetailsArrayseco['details'] = $detailsec;
                 

                if(!empty($peopleAndDetailsArray))
                array_push($responseArray, $peopleAndDetailsArrayseco);

            //print_rj($responseArray, 1);

                 /*   if((isset($full_namerec) && $full_namerec != "") && (isset($emailrec) && $emailrec != "")){
                    Recipient::where('registerby', $parent_id)->where('from_user_api', 101)->delete();    
                    $full_namerec = Tcrypt::encrypter($full_namerec);
                    $emailrec     = Tcrypt::encrypter($emailrec);
                    $customerId = Recipient::insertGetId([
                    'full_name' => $full_namerec,
                    // 'last_name' => $lastname,
                    'company' => $companyrec,
                    'mobile' => $mobilerec,
                    'email' => $emailrec,
                    //'reg_no' => $regno,
                    'address' => $addressrec,
                    //'personnr' => $personnr,
                    'zip' => $zipcoderec,
                    'city' => $cityerec,
                    // 'extra_fields' =>$extra_fields,
                    'from_user_api' => 101,
                    'registerby' => $parent_id]
                    );
                    }*/
                } 
            
            $content = Tcrypt::decrypter($offerSentContent['content']);
            if($content != '') {
                //getGetdocumentinfoxml function of garda template response
                $html = new \Htmldom($content);
                $dynamicElements = [];
                foreach($html->find('.template_container') as $temConKey => $temConValue) {
                    $arrayPush = [];
                    foreach($temConValue->find('.formElement') as $findKey => $findValue) {
                                        
                        $elementStyle = $findValue->getAttribute('style');
                        $arrCSS = $utility->parse_css($elementStyle);
                        $parentDiv = $findValue->parent()->parent();

                        //Fixing Position when field is inside the borderbox or textbox START
                        $addtop = 0;
                        $addleft = 0;
                        if(strpos($parentDiv->getAttribute('class'), 'dynamic_border') !== false && strpos($parentDiv->getAttribute('class'), 'insert_box_div') === false) {
                            $parentCSS = $utility->parse_css($parentDiv->getAttribute('style'));
                            $addtop = (isset($parentCSS['top']) && $parentCSS['top'] != '' ? round($parentCSS['top']) : 0);
                            $addleft = (isset($parentCSS['left']) && $parentCSS['left'] != '' ? round($parentCSS['left']) : 0);
                        } elseif(strpos($parentDiv->getAttribute('class'), 'insert_box_div') !== false && strpos($parentDiv->getAttribute('class'), 'dynamic_border') === false) {
                            $parentCSS = $utility->parse_css($parentDiv->getAttribute('style'));
                            $addtop = (isset($parentCSS['top']) && $parentCSS['top'] != '' ? round($parentCSS['top']) : 0);
                            $addleft = (isset($parentCSS['left']) && $parentCSS['left'] != '' ? round($parentCSS['left']) : 0);
                        } elseif(strpos($parentDiv->getAttribute('class'), 'insert_box_div') !== false  && strpos($parentDiv->getAttribute('class'), 'dynamic_border') !== false) {
                            $parentCSS = $utility->parse_css($parentDiv->getAttribute('style'));
                            $addtop = (isset($parentCSS['top']) && $parentCSS['top'] != '' ? round($parentCSS['top']) : 0);
                            $addleft = (isset($parentCSS['left']) && $parentCSS['left'] != '' ? round($parentCSS['left']) : 0);
                        }
                        //Fixing Position when field is inside the borderbox or textbox END

                        $topPosition = (isset($arrCSS['top']) && $arrCSS['top'] != '' ? round($arrCSS['top'])+$addtop : 0);
                        $leftPosition = (isset($arrCSS['left']) && $arrCSS['left'] != '' ? round($arrCSS['left'])+$addleft : 0);
                        array_push($arrayPush, ['top' => $topPosition, 'left' => $leftPosition, 'dynamic_id' => $findValue->dynamic_id]);
                    }
                    if(!empty($arrayPush)) {
                        sort($arrayPush);
                        array_push($dynamicElements, $arrayPush);
                    }
                }

                $docFields = [];
                foreach($dynamicElements as $eachPageKey => $eachPageValue) {
                    foreach($eachPageValue as $eachElementKey => $eachElementValue) {
                        $eachDynamic_id = $eachElementValue['dynamic_id'];
                        $mainDiv = $html->find('[dynamic_id="'.$eachDynamic_id.'"]', 0);
                        if(!$mainDiv->find('.text', 0)) {
                            continue;
                        }

                        $findValue = $mainDiv->find('.text', 0);
                        //getting document text fields
                        if(strpos($findValue->getAttribute('class'), 'documentField') !== false) {
                            if($findValue->selectedtype != '0') {
                                $apiAttributeOrSelectedType = $findValue->selectedtype;//(isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->selectedtype);
                                if($parent_id == 10719) {
                                    //$apiAttributeOrSelectedType = str_replace(' ', '_', $apiAttributeOrSelectedType);
                                }
                                if($findValue->find('h4', 0) && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                    $plainTextValue = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                    //$docFields[$apiAttributeOrSelectedType] = ['selectedtype' => $findValue->selectedtype, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $plainTextValue, 'dynamic_id' => $findValue->parent()->parent()->dynamic_id];
                                    $docFields[$apiAttributeOrSelectedType] = $plainTextValue;
                                } elseif($findValue->find('p', 0) && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                    $plainTextValue = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('p', 0)->plaintext)));
                                    //$docFields[$apiAttributeOrSelectedType] = ['selectedtype' => $findValue->selectedtype, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $plainTextValue, 'dynamic_id' => $findValue->parent()->parent()->dynamic_id];
                                    $docFields[$apiAttributeOrSelectedType] = $plainTextValue;
                                } elseif(strpos($mainDiv->getAttribute('class'), 'relationDisable') === false && (!isset($docFields[$findValue->selectedtype]))) {
                                    //comments below line of code and add this condition with elseif and === false 
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrSelectedType] = '';
                                } /* elseif(!isset($docFields[$findValue->selectedtype])) {
                                    $docFields[$apiAttributeOrSelectedType] = '';
                                }
                                
                                if(strpos($mainDiv->getAttribute('class'), 'relationDisable') !== false && (!isset($docFields[$findValue->selectedtype]))) {
                                    $docFields[$apiAttributeOrSelectedType] = '';
                                } */
                            }   //not equal condition ends here
                        }   //getting document text fields ends here
                        //getting custom text fields
                        try {
                            //if(strpos($findValue->getAttribute('class'), 'field_box_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && !strpos($findValue->getAttribute('class'), 'datepickerfields_new')) {
                            if(strpos($findValue->getAttribute('class'), 'field_box_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'datepickerfields_new') === false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                $apiAttributeOrSelectedType = $findValue->selectedtype;//(isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->selectedtype);
                                if($parent_id == 10719) {
                                    //$apiAttributeOrSelectedType = str_replace(' ', '_', $apiAttributeOrSelectedType);
                                }
                                //comment below line on 4 August 2020 for not show the key if value is empty
                                //$docFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                if($findValue->find('h4', 0) && $findValue->find('h4', 0)->plaintext) {
                                    $plainTextValue = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                    //$docFields[$apiAttributeOrSelectedType] = ['selectedtype' => $findValue->selectedtype, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $plainTextValue, 'dynamic_id' => $findValue->parent()->parent()->dynamic_id];
                                    $docFields[$apiAttributeOrSelectedType] = $plainTextValue;
                                }
                                if($findValue->find('p', 0) && $findValue->find('p', 0)->plaintext) {
                                    $plainTextValue = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('p', 0)->plaintext)));
                                    //$docFields[$apiAttributeOrSelectedType] = ['selectedtype' => $findValue->selectedtype, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $plainTextValue, 'dynamic_id' => $findValue->parent()->parent()->dynamic_id];
                                    $docFields[$apiAttributeOrSelectedType] = $plainTextValue;
                                }
                            }
                        } catch(\Exception $e) {}

                        //getting datepicker fields
                        try {
                            if(strpos($findValue->getAttribute('class'), 'field_box_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'datepickerfields_new') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                                $apiAttributeOrSelectedType = $findValue->selectedtype;//(isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->selectedtype);
                                if($parent_id == 10719) {
                                    //$apiAttributeOrSelectedType = str_replace(' ', '_', $apiAttributeOrSelectedType);
                                }
                                //comment below line on 4 August 2020 for not show the key if value is empty
                                //$docFields[$apiAttributeOrSelectedType] = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                if($findValue->find('h4', 0) && $findValue->find('h4', 0)->plaintext) {
                                    $plainTextValue = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('h4', 0)->plaintext)));
                                    $docFields[$apiAttributeOrSelectedType] = $plainTextValue;
                                }
                                if($findValue->find('p', 0) && $findValue->find('p', 0)->plaintext) {
                                    $plainTextValue = $utility->convertDateMonthNameToInteger($languageId, trim(html_entity_decode($findValue->find('p', 0)->plaintext)));
                                    $docFields[$apiAttributeOrSelectedType] = $plainTextValue;
                                }
                            }
                        } catch(\Exception $e) {}

                        //getting document checkbox elements
                        if(strpos($findValue->getAttribute('class'), 'documentFieldCheckbox') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            //all values of checkboxes are showing
                            $apiAttributeOrFieldLabelName = $findValue->fieldlabelname;//(isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->fieldlabelname);
                            if($parent_id == 10719) {
                                //$apiAttributeOrFieldLabelName = str_replace(' ', '_', $apiAttributeOrFieldLabelName);
                            }
                            if(strpos($findValue->find('.check_icon', 0)->getAttribute('style'), 'visible') !== false || strpos($findValue->getAttribute('class'), 'isChecked') !== false) {
                                //$docFields[$apiAttributeOrFieldLabelName] = ['fieldlabelname' => $findValue->fieldlabelname, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => 'Yes', 'dynamic_id' => $findValue->parent()->parent()->dynamic_id];
                                $docFields[$apiAttributeOrFieldLabelName] = 'Yes';
                            } else {
                                //$docFields[$apiAttributeOrFieldLabelName] = ['fieldlabelname' => $findValue->fieldlabelname, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => 'No', 'dynamic_id' => $findValue->parent()->parent()->dynamic_id];
                                $docFields[$apiAttributeOrFieldLabelName] = 'No';
                            }
                        }   //getting document checkbox elements ends here
                        //getting custom checkbox elements
                        if(strpos($findValue->getAttribute('class'), 'check_box_popupcontainer') !== false && strpos($mainDiv->getAttribute('class'), 'chechBoxCustom') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrFieldLabelName = $findValue->fieldlabelname;//(isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->fieldlabelname);
                            if($parent_id == 10719) {
                                //$apiAttributeOrFieldLabelName = str_replace(' ', '_', $apiAttributeOrFieldLabelName);
                            }
                            if(strpos($findValue->find('.check_icon', 0)->getAttribute('style'), 'visible')) {
                                //$docFields[$apiAttributeOrFieldLabelName] = ['fieldlabelname' => $findValue->fieldlabelname, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => 'Yes', 'dynamic_id' => $findValue->parent()->parent()->dynamic_id];
                                $docFields[$apiAttributeOrFieldLabelName] = 'Yes';
                            } else {
                                //$docFields[$apiAttributeOrFieldLabelName] = ['fieldlabelname' => $findValue->fieldlabelname, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => 'No', 'dynamic_id' => $findValue->parent()->parent()->dynamic_id];
                                $docFields[$apiAttributeOrFieldLabelName] = 'No';
                            }
                        }

                        //getting document droplist elements
                        $jsonDecodeDropDownValues = (isset($findValue->dropdownvalues) && !empty($findValue->dropdownvalues) ? json_decode(html_entity_decode($findValue->dropdownvalues), true) : []);
                        $jsonDecodeDropDownAlternativeValues = (isset($findValue->dropdownvalues_alternate) && !empty($findValue->dropdownvalues_alternate) ? json_decode(html_entity_decode($findValue->dropdownvalues_alternate), true) : []);
                        if(strpos($findValue->getAttribute('class'), 'documentFieldDroplist') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = $findValue->dropdownlabel;//(isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            if($parent_id == 10719) {
                                //$apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                            }
                            //forsearching starting
                            //['fieldlabelname' => $findValue->fieldlabelname, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => 'Yes', 'dynamic_id' => $findValue->parent()->parent()->dynamic_id];
                            if($findValue->find('span.texthere', 0)) {
                                if(!empty($jsonDecodeDropDownValues) && $findValue->dropdownlabel != trim($findValue->find('span.texthere', 0)->plaintext)) {
                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && !empty($jsonDecodeDropDownAlternativeValues[$getArrayKey]) ? $jsonDecodeDropDownAlternativeValues[$getArrayKey] : trim($findValue->find('span.texthere', 0)->plaintext));
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('span.texthere', 0)->plaintext)));
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? $findValue->selected_altvalue : trim($findValue->find('span.texthere', 0)->plaintext))));
                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $findValue->find('span.texthere', 0)->selected_altvalue, 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = $findValue->find('span.texthere', 0)->selected_altvalue;
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $findValue->selected_altvalue, 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = $findValue->selected_altvalue;
                                    } elseif(isset($findValue->find('span.texthere', 0)->plaintext) && $findValue->find('span.texthere', 0)->plaintext != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->plaintext), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                    }
                                } elseif(array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? $findValue->selected_altvalue : trim($findValue->find('span.texthere', 0)->plaintext))));
                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $findValue->selected_altvalue, 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = $findValue->selected_altvalue;
                                    } elseif(isset($findValue->find('span.texthere', 0)->plaintext) && $findValue->find('span.texthere', 0)->plaintext != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->plaintext), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                    }
                                } else {
                                    //$docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? $findValue->selected_altvalue : ''));
                                    if(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $findValue->selected_altvalue, 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = $findValue->selected_altvalue;
                                    }
                                }
                            } else {
                                if(!empty($jsonDecodeDropDownValues) && $findValue->dropdownlabel != trim($findValue->find('p', 0)->plaintext)) {
                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? $findValue->selected_altvalue : trim($findValue->find('p', 0)->plaintext))));
                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $findValue->selected_altvalue, 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = $findValue->selected_altvalue;
                                    } elseif(isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('p', 0)->plaintext), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('p', 0)->plaintext);
                                    }
                                } elseif(array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? $findValue->selected_altvalue : trim($findValue->find('p', 0)->plaintext))));
                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $findValue->selected_altvalue, 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = $findValue->selected_altvalue;
                                    } elseif(isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('p', 0)->plaintext), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('p', 0)->plaintext);
                                    }
                                } else {
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? $findValue->selected_altvalue : ''));
                                    if(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $findValue->selected_altvalue, 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = $findValue->selected_altvalue;
                                    }
                                }
                            }
                            //forsearching ending
                            //remove commented code from here on 4 August 2020
                        }   //getting document droplist elements ends here
                        //getting custom droplist elements
                        if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = $findValue->dropdownlabel;//(isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            if($parent_id == 10719) {
                               // $apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                            }
                            //forsearching starting
                            if($findValue->find('span.texthere', 0)) {
                                if(!empty($jsonDecodeDropDownValues) && $findValue->dropdownlabel != trim($findValue->find('span.texthere', 0)->plaintext)) {
                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('span.texthere', 0)->plaintext))));
                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                    } elseif(isset($findValue->find('span.texthere', 0)->plaintext) && $findValue->find('span.texthere', 0)->plaintext != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->plaintext), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                    }
                                } elseif(isset($findValue->find('span.texther', 0)->plaintext) && array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                    $getArrayKey = array_search(trim($findValue->find('span.texthere', 0)->plaintext), $jsonDecodeDropDownValues);
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('span.texthere', 0)->plaintext))));
                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                    } elseif(isset($findValue->find('span.texthere', 0)->plaintext) && $findValue->find('span.texthere', 0)->plaintext != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->plaintext), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->plaintext);
                                    }
                                } else {
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? trim($findValue->find('span.texthere', 0)->selected_altvalue) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : ''));
                                    if(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                    }
                                }
                            } else {
                                if(!empty($jsonDecodeDropDownValues) && $findValue->dropdownlabel != trim($findValue->find('span.texthere', 0)->plaintext)) {
                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('p', 0)->plaintext))));
                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                    } elseif(isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('p', 0)->plaintext), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('p', 0)->plaintext);
                                    }
                                } elseif(isset($findValue->find('span.texther', 0)->plaintext) && array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues) > -1) {
                                    $getArrayKey = array_search(trim($findValue->find('p', 0)->plaintext), $jsonDecodeDropDownValues);
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : trim($findValue->find('p', 0)->plaintext))));
                                    if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]);
                                    } elseif(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                    } elseif(isset($findValue->find('p', 0)->plaintext) && $findValue->find('p', 0)->plaintext != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('p', 0)->plaintext), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('p', 0)->plaintext);
                                    }
                                } else {
                                    //comment below line on 4 August 2020 for not show the key if value is empty
                                    //$docFields[$apiAttributeOrDropDownLabel] = (isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue !== '' ? $findValue->find('span.texthere', 0)->selected_altvalue : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue !== '' ? trim($findValue->selected_altvalue) : ''));
                                    if(isset($findValue->find('span.texthere', 0)->selected_altvalue) && $findValue->find('span.texthere', 0)->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('span.texthere', 0)->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('span.texthere', 0)->selected_altvalue);
                                    } elseif(isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '') {
                                        //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->selected_altvalue), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                        $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->selected_altvalue);
                                    }
                                }
                            }
                            //forsearching ending
                            //remove commented code from here on 4 August 2020
                        }

                        //document field droplist with multiple radio button
                        if(strpos($findValue->getAttribute('class'), 'documentFieldDroplist') !== false && strpos($findValue->getAttribute('class'), 'dropdown_radioList_api') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = $findValue->dropdownlabel;//(isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            if($parent_id == 10719) {
                                //$apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                            }
                            if($findValue->find('.fa-dot-circle-o', 0)) {
                                //$docFields[$apiAttributeOrDropDownLabel] = $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext;
                                //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && !empty($jsonDecodeDropDownAlternativeValues[$getArrayKey]) ? trim($jsonDecodeDropDownAlternativeValues[$getArrayKey]) : (isset($findValue->selected_altvalue) && $findValue->selected_altvalue != '' ? trim($findValue->selected_altvalue) : trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext)));
                                $getArrayKey = array_search(trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext), $jsonDecodeDropDownValues);
                                //comment below line on 4 August 2020 for not show the key if value is empty
                                //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? $jsonDecodeDropDownAlternativeValues[$getArrayKey] : $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext);
                                if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                    //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $jsonDecodeDropDownAlternativeValues[$getArrayKey], 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                    $docFields[$apiAttributeOrDropDownLabel] = $jsonDecodeDropDownAlternativeValues[$getArrayKey];
                                } elseif(isset($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext) && $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext != '') {
                                    //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext, 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                    $docFields[$apiAttributeOrDropDownLabel] = $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext;
                                }
                            } else {
                                //comment below line on 4 August 2020 for not show the key if value is empty
                                //$docFields[$apiAttributeOrDropDownLabel] = '';
                            }
                        }
                        //document field droplist with multiple radio button of custom and me
                        if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'dropdown_radioList_api') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = $findValue->dropdownlabel;//(isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            if($parent_id == 10719) {
                                //$apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                            }
                            if($findValue->find('.fa-dot-circle-o', 0)) {
                                //$docFields[$apiAttributeOrDropDownLabel] = $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext;
                                $getArrayKey = array_search(trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext), $jsonDecodeDropDownValues);
                                //comment below line on 4 August 2020 for not show the key if value is empty
                                //$docFields[$apiAttributeOrDropDownLabel] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] !== '' ? $jsonDecodeDropDownAlternativeValues[$getArrayKey] : $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext);
                                if(isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && $jsonDecodeDropDownAlternativeValues[$getArrayKey] != '') {
                                    //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $jsonDecodeDropDownAlternativeValues[$getArrayKey], 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                    $docFields[$apiAttributeOrDropDownLabel] = $jsonDecodeDropDownAlternativeValues[$getArrayKey];
                                } elseif(isset($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext) && $findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext != '') {
                                    //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext), 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                    $docFields[$apiAttributeOrDropDownLabel] = trim($findValue->find('.fa-dot-circle-o', 0)->parent()->find('label', 0)->innertext);
                                }
                            } else {
                                //comment below line on 4 August 2020 for not show the key if value is empty
                                //$docFields[$apiAttributeOrDropDownLabel] = '';
                            }
                        }
                        //document field droplist with multiple checkboxes
                        if(strpos($findValue->getAttribute('class'), 'documentFieldDroplist') !== false && strpos($findValue->getAttribute('class'), 'multi_choice_option') !== false && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = $findValue->dropdownlabel;//(isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            if($parent_id == 10719) {
                                //$apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                            }
                            if($findValue->find('.fa-check', 0)) {
                                $faCheckValues = [];
                                //foreach($findValue->find('.fa-check') as $checkBoxKey => $checkBoxValue) {
                                foreach($findValue->find('.ionIconsCheck') as $checkBoxKey => $checkBoxValue) {
                                    if(strpos($checkBoxValue->getAttribute('class'), 'fa-check') !== false) {
                                        $faCheckValues[] = (isset($jsonDecodeDropDownAlternativeValues[$checkBoxKey]) && $jsonDecodeDropDownAlternativeValues[$checkBoxKey] != '' ? $jsonDecodeDropDownAlternativeValues[$checkBoxKey] : $checkBoxValue->parent()->parent()->find('label', 0)->innertext);
                                    }
                                }
                                if(!empty($faCheckValues)) {
                                    $totalFaCheckValues = count($faCheckValues);
                                    if($totalFaCheckValues > 1) {
                                        $faCheckValues = implode(', ' , array_slice($faCheckValues,0,$totalFaCheckValues-1)) . ' and ' . end($faCheckValues);
                                    } else {
                                        $faCheckValues = implode(', ' , $faCheckValues);
                                    }
                                    //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $faCheckValues, 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                    $docFields[$apiAttributeOrDropDownLabel] = $faCheckValues;
                                }
                                //$docFields[$apiAttributeOrDropDownLabel] = $findValue->find('.fa-check', 0)->parent()->parent()->find('label', 0)->innertext;
                            } else {
                                //comment below line on 4 August 2020 for not show the key if value is empty
                                //$docFields[$apiAttributeOrDropDownLabel] = '';
                            }
                        }
                        //document field droplist with multiple checkboxes of custom and me
                        if(strpos($findValue->getAttribute('class'), 'selectcolor_popupcontainer') !== false && strpos($findValue->getAttribute('class'), 'customField') !== false && strpos($findValue->getAttribute('class'), 'multi_choice_option') !== false && $findValue->recipientselected == 'Me' && strpos($mainDiv->getAttribute('class'), 'relationDisable') === false) {
                            $apiAttributeOrDropDownLabel = $findValue->dropdownlabel;//(isset($findValue->apiattribute) && $findValue->apiattribute != '' ? $findValue->apiattribute : $findValue->dropdownlabel);
                            if($parent_id == 10719) {
                                //$apiAttributeOrDropDownLabel = str_replace(' ', '_', $apiAttributeOrDropDownLabel);
                            }
                            if($findValue->find('.fa-check', 0)) {
                                //$comma = (count($data["requesttypes"]) > 0 ? ($key+1 == count($data["requesttypes"])-1 ? ' and ' : ($key+1 < count($data["requesttypes"]) ? ', ' : '')) : '');
                                $faCheckValues = [];
                                foreach($findValue->find('.ionIconsCheck') as $checkBoxKey => $checkBoxValue) {
                                    if(strpos($checkBoxValue->getAttribute('class'), 'fa-check') !== false) {
                                        $faCheckValues[] = (isset($jsonDecodeDropDownAlternativeValues[$checkBoxKey]) && $jsonDecodeDropDownAlternativeValues[$checkBoxKey] != '' ? $jsonDecodeDropDownAlternativeValues[$checkBoxKey] : $checkBoxValue->parent()->parent()->find('label', 0)->innertext);
                                    }
                                }
                                if(!empty($faCheckValues)) {
                                    $totalFaCheckValues = count($faCheckValues);
                                    if($totalFaCheckValues > 1) {
                                        $faCheckValues = implode(', ' , array_slice($faCheckValues,0,$totalFaCheckValues-1)) . ' and ' . end($faCheckValues);
                                    } else {
                                        $faCheckValues = implode(', ' , $faCheckValues);
                                    }
                                    //$docFields[$apiAttributeOrDropDownLabel] = ['dropdownlabel' => $findValue->dropdownlabel, 'apiattribute' => $findValue->apiattribute, 'recipientselected' => $findValue->recipientselected, 'recipientselectedid' => $findValue->recipientselectedid, 'value' => $faCheckValues, 'dynamic_id' => $findValue->parent()->parent()->dynamic_id, 'dropdownvalues' => html_entity_decode($findValue->dropdownvalues), 'dropdownvalues_alternate' => html_entity_decode($findValue->dropdownvalues_alternate)];
                                    $docFields[$apiAttributeOrDropDownLabel] = $faCheckValues;
                                }
                            } else {
                                //comment below line on 4 August 2020 for not show the key if value is empty
                                //$docFields[$apiAttributeOrDropDownLabel] = '';
                            }
                        } //selectcolor_popupcontainer condition ends here
                    }   //second foreach loop ends here
                }   //first foreach loop ends here

                //document tags names showing and its loop starting
                foreach($html->find('.dynamicTag') as $findTagKey => $findTagValue) {
                    if(strpos($findTagValue->getAttribute('class'), 'documenttagName') !== false) {
                        $apiAttributeOrTagName = $findTagValue->tagname;//(isset($findTagValue->apitagattribute) && $findTagValue->apitagattribute != '' ? $findTagValue->apitagattribute : $findTagValue->tagname);
                        if($parent_id == 10719) {
                            //$apiAttributeOrTagName = str_replace(' ', '_', $apiAttributeOrTagName);
                        }
                        $jsonDecodeDropDownValues = (isset($findTagValue->dropdownvalues) && !empty($findTagValue->dropdownvalues) ? json_decode(html_entity_decode($findTagValue->dropdownvalues), true) : []);
                        $jsonDecodeDropDownAlternativeValues = (isset($findTagValue->dropdownvalues_alternate) && !empty($findTagValue->dropdownvalues_alternate) ? json_decode(html_entity_decode($findTagValue->dropdownvalues_alternate), true) : []);

                        if(strpos($findTagValue->getAttribute('class'), 'documentdroplisttagname') !== false) {
                            if(isset($findTagValue->dropdownapi) && $findTagValue->dropdownapi != '') {
                                $docFields[$apiAttributeOrTagName] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                            } else {
                                $tagValuesArray = [];
                                foreach($jsonDecodeDropDownValues as $dropDownKey => $dropDownValues) {
                                    if(isset($findTagValue->plaintext) && !empty($findTagValue->plaintext) && isset($dropDownValues) && !empty($dropDownValues)) {
                                        if(strpos($findTagValue->plaintext, $dropDownValues) > -1) {
                                            $getArrayKey = array_search(trim($dropDownValues), $jsonDecodeDropDownValues);
                                            $tagValuesArray[] = (isset($jsonDecodeDropDownAlternativeValues[$getArrayKey]) && !empty($jsonDecodeDropDownAlternativeValues[$getArrayKey]) ? $jsonDecodeDropDownAlternativeValues[$getArrayKey] : $utility->convertDateMonthNameToInteger($languageId, trim($dropDownValues)));
                                        } else {
                                            $docFields[$apiAttributeOrTagName] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                                        }
                                    }
                                }
                                $totalTagValuesArray = count($tagValuesArray);
                                if($totalTagValuesArray > 1) {
                                    $tagValuesArray = implode(', ' , array_slice($tagValuesArray,0,$totalTagValuesArray-1)) . ' and ' . end($tagValuesArray);
                                } else {
                                    $tagValuesArray = implode(', ' , $tagValuesArray);
                                }
                                $docFields[$apiAttributeOrTagName] = $tagValuesArray;
                            }
                        } else {
                            $docFields[$apiAttributeOrTagName] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                        }
                    }
                }

                if($html->find('.billecta_GetBankInfo_h5')) {
                    foreach($html->find('.billecta_GetBankInfo_h5') as $findBillectaKey => $findBillectaValue) {
                        if(isset($findBillectaValue->billecta_row)) {
                            if($html->find('.billecta_row_'.$findBillectaValue->billecta_row)) {
                                if($findBillectaValue->innertext != '&nbsp;' && $findBillectaValue->innertext != '<br>') {
                                    //$docFields[$findBillectaValue->innertext] = $html->find('.billecta_row_'.$findBillectaValue->billecta_row, 0)->innertext;
                                    $docFields[$findBillectaValue->innertext] = str_replace(',', ' ', $html->find('.billecta_row_'.$findBillectaValue->billecta_row, 0)->innertext);
                                }
                            }
                        }
                    }
                }

              
               
                
                //document tags names showing and its loop ending

                if(!empty($docFields)) {
                    //showing alphbats order to show document fields data
                    /* If there area multiple case keys as name of document fields then below line will be needed to sort the array */
                    // $docFields = array_change_key_case($docFields, CASE_LOWER);
                    ksort($docFields);
                    $responseArray['document_fields'] = $docFields;
                }
            }


            //basic information of sender and account details starting
            //$senderData = Offersentdetails::where('offer_send_details.offer_sent_id', $document_id)->join('offer_sent', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')->select('offer_send_details.user_details')->where('offer_send_details.is_sender', 1)->where('offer_sent.sender_id', $user_id)->first();
            $senderData = Offersentdetails::where('offer_send_details.offer_sent_id', $document_id)->join('offer_sent', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')->select('offer_send_details.user_details')->where('offer_send_details.is_sender', 1)->whereIn('offer_sent.sender_id', $allUserIds)->first();
            $customerId = 0;
            if($_SERVER["HTTP_HOST"] == "acceptance.simplesign.io" && 1==2){
                $emailrec = "";
                $full_namerec = "";
                $mobilerec    = "";
                $addressrec    = "";
                $zipcoderec   = "";
                $cityerec     = "";
                $companyrec   = "";
                foreach($html->find('.field_box_popupcontainer[getrecsettings=2]') as $findTagKey => $findTagValue) {  
                 
                    if(isset($findTagValue->selectedtype) && $findTagValue->selectedtype == "email"){
                    $emailrec =  (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                    }
                    if(isset($findTagValue->selectedtype) && $findTagValue->selectedtype == "full_name"){
                        /*echo 1;
                        exit();*/
                    $full_namerec =  (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                  
                    }
                    if(isset($findTagValue->selectedtype) && $findTagValue->selectedtype == "name"){
                    $full_namerec =  (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                  
                    }
                    if(isset($findTagValue->selectedtype) && $findTagValue->selectedtype == "mobile"){
                    $mobilerec =  (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                   /* if($findTagValue->find('p', 0)) {
                    $addressrec  = trim($findTagValue->find('p', 0)->plaintext);
                    }*/
                    }
                    if(isset($findTagValue->selectedtype) && $findTagValue->selectedtype == "address"){
                    $addressrec = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                    }
                    if(isset($findTagValue->selectedtype) && $findTagValue->selectedtype == "zipcode"){
                    $zipcoderec = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                 
                    }
                    if(isset($findTagValue->selectedtype) && $findTagValue->selectedtype == "city"){
                    $cityerec = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                 
                    }
                    if(isset($findTagValue->selectedtype) && $findTagValue->selectedtype == "org_name"){
                    $companyrec = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                    }
                    /*echo $full_namerec;
                    exit();*/
               
                    //$fieldsforroletowindexdata[$findTagValue->selectedtype] = (isset($findTagValue->plaintext) && $findTagValue->plaintext != '' ? $utility->convertDateMonthNameToInteger($languageId, html_entity_decode(trim($findTagValue->plaintext))) : '');
                   }

                    if((isset($full_namerec) && $full_namerec != "") && (isset($emailrec) && $emailrec != "")){
                    Recipient::where('registerby', $parent_id)->where('from_user_api', 101)->delete();    
                    $full_namerec = Tcrypt::encrypter($full_namerec);
                    $emailrec     = Tcrypt::encrypter($emailrec);
                    $customerId = Recipient::insertGetId([
                    'full_name' => $full_namerec,
                    // 'last_name' => $lastname,
                    'company' => $companyrec,
                    'mobile' => $mobilerec,
                    'email' => $emailrec,
                    //'reg_no' => $regno,
                    'address' => $addressrec,
                    //'personnr' => $personnr,
                    'zip' => $zipcoderec,
                    'city' => $cityerec,
                    // 'extra_fields' =>$extra_fields,
                    'from_user_api' => 101,
                    'registerby' => $parent_id]
                    );
                    }
                } 
            if($senderData) {
                $senderDetails = $accountDetails = [];
                $senderUserDetails = Tcrypt::decrypter($senderData['user_details']);
                $senderUserDetailsJsonDecode = json_decode($senderUserDetails, true);
               // print_rj($senderUserDetailsJsonDecode,1);

                //sender details information starting
                //for regular contract sender use full_name key and for online contract sender use first_name key
                $senderDetails['name'] = (isset($senderUserDetailsJsonDecode['full_name']) && $senderUserDetailsJsonDecode['full_name'] != '' ? trim($senderUserDetailsJsonDecode['full_name']) : (isset($senderUserDetailsJsonDecode['first_name']) && $senderUserDetailsJsonDecode['first_name'] != '' ? trim($senderUserDetailsJsonDecode['first_name']) : ''));
                $senderDetails['email'] = (isset($senderUserDetailsJsonDecode['email']) && $senderUserDetailsJsonDecode['email'] != '' ? trim(preg_replace('/[\x00-\x0B\x0C-\x1F\x7F]/', '', $senderUserDetailsJsonDecode['email'])) : '');

                $userCustomFields = (isset($senderUserDetailsJsonDecode['user_customfields']) && $senderUserDetailsJsonDecode['user_customfields'] != '' ? json_decode($senderUserDetailsJsonDecode['user_customfields'], true) : []);
                if(!empty($userCustomFields)) {
                    foreach($userCustomFields as $userCustomFldkey => $userCustomFldValue) {
                        $senderDetails[trim($userCustomFldkey)] = (isset($userCustomFldValue) && $userCustomFldValue != '' ? trim($userCustomFldValue) : '');
                        //$senderDetails[trim($userCustomFldkey)] = (isset($userCustomFldValue) && $userCustomFldValue != '' ? $utility->convertDateMonthNameToInteger($languageId, trim($userCustomFldValue)) : '');
                    }
                }
                $responseArray['sender_details'] = $senderDetails;
                //sender details information ending

                //account details information starting
                $accountDetails['company'] = (isset($senderUserDetailsJsonDecode['company']) && $senderUserDetailsJsonDecode['company'] != '' ? trim($senderUserDetailsJsonDecode['company']) : '');
                $accountDetails['reg_no'] = (isset($senderUserDetailsJsonDecode['reg_no']) && $senderUserDetailsJsonDecode['reg_no'] != '' ? trim($senderUserDetailsJsonDecode['reg_no']) : '');
                $accountDetails['address'] = (isset($senderUserDetailsJsonDecode['address']) && $senderUserDetailsJsonDecode['address'] != '' ? trim($senderUserDetailsJsonDecode['address']) : '');
                $accountDetails['phone_no'] = (isset($senderUserDetailsJsonDecode['mobile']) && $senderUserDetailsJsonDecode['mobile'] != '' ? trim($senderUserDetailsJsonDecode['mobile']) : (isset($senderUserDetailsJsonDecode['telephone']) && $senderUserDetailsJsonDecode['telephone'] != '' ? trim($senderUserDetailsJsonDecode['telephone']) : ''));
                $accountDetails['zipcode'] = (isset($senderUserDetailsJsonDecode['zipcode']) && $senderUserDetailsJsonDecode['zipcode'] != '' ? trim($senderUserDetailsJsonDecode['zipcode']) : (isset($senderUserDetailsJsonDecode['post_code']) && $senderUserDetailsJsonDecode['post_code'] != '' ? trim($senderUserDetailsJsonDecode['post_code']) : ''));
                $accountDetails['city'] = (isset($senderUserDetailsJsonDecode['city']) && $senderUserDetailsJsonDecode['city'] != '' ? trim($senderUserDetailsJsonDecode['city']) : '');

                $responseArray['account_details'] = $accountDetails;
                //account details information ending
            }
            //basic information of sender and account details ending

            //specificdocumentdetail API
            /* Get product table details against the template Zain*/
            if( $_SERVER['HTTP_HOST'] == 'acceptance.simplesign.io' || $_SERVER['HTTP_HOST'] == 'esign.simplesign.io' ) {
                $templatetabledata = $this->templateTables($document_id);
                foreach ($templatetabledata['producttables'] as $tablekey => $tabledata) {
                    $tablename = $tabledata['table_name'];
                    $tablecurrency = $tabledata['table_currency'];
                    $itemcollection = array();
                    foreach ($tabledata['tableitems'] as $itemkey => $itemdata) {
                        $itemdetails = array();
                        $itemdetails['product name'] = $itemdata['item_name'];
                        if ( isset($data['fromoverview']) && $data['fromoverview'] == 1 ) {
                            $itemdetails[$itemdata['item_name'].' (description)'] = ($itemdata['item_description'] != 'NULL' ? $itemdata['item_description'] : '');
                            $itemdetails[$itemdata['item_name'].' (quantity)'] = $itemdata['item_qty'];
                            $itemdetails[$itemdata['item_name'].' (price)'] = $itemdata['item_price'].' '.$tablecurrency;
                            if ($itemdata['item_discount'] != 0) {
                                $itemdetails[$itemdata['item_name'].' (discount)'] = $itemdata['item_discount'].' %';
                            }
                            $itemdetails[$itemdata['item_name'].' (cost)'] = $itemdata['item_cost'].' '.$tablecurrency;
                            $itemdetails[$itemdata['item_name'].' (margin)'] = $itemdata['item_margin'].' '.$tablecurrency;
                        } else {
                            $itemdetails['description'] = ($itemdata['item_description'] != 'NULL' ? $itemdata['item_description'] : '');
                            $itemdetails['quantity'] = $itemdata['item_qty'];
                            if ($itemdata['item_discount'] != 0) {
                                $itemdetails['item_discount'] = $itemdata['item_discount'].'%';
                            }
                            $itemdetails['price'] = $itemdata['item_price'].' '.$tablecurrency;
                            $itemdetails['cost'] = $itemdata['item_cost'].' '.$tablecurrency;
                            $itemdetails['margin'] = $itemdata['item_margin'].' '.$tablecurrency;
                        }
                        array_push($itemcollection, $itemdetails);
                        $responseArray[$tablename] = $itemcollection;
                    }
                }
            }

            //basic session_key information of document details starting external_Views
            if($offerSentContent) {
                $uniqueId = Offersentdetails::where('offer_send_details.offer_sent_id', $document_id)->join('offer_sent', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')->select('offer_send_details.unique_id')->where('offer_send_details.is_sender', 0)->whereIn('offer_sent.sender_id', $allUserIds)->first();
                //DB::enableQueryLog();
                //print_rj(DB::getQueryLog());
                $documentLink = Offersentdetails::where('offer_send_details.offer_sent_id', $document_id)->join('offer_sent', 'offer_send_details.offer_sent_id', '=', 'offer_sent.id')->whereIn('offer_sent.sender_id', $allUserIds)->where('offer_send_details.is_sender', 1)->select('offer_send_details.id', 'offer_send_details.unique_id')->first();
                $documentDetails = [];
                $documentDetails['template_name'] = ($offerSentContent['visible_name'] != '' ? trim(Tcrypt::decrypter($offerSentContent['visible_name'])) : trim(Tcrypt::decrypter($offerSentContent['name'])));
                $documentDetails['document_id'] = (!empty($offerSentContent['external_doc_id']) ? $offerSentContent['external_doc_id'] : $offerSentContent['id']);
                $documentDetails['template_id'] = $offerSentContent['offer_id'];
                $documentDetails['language'] = (isset($offerSentContent['language_id']) && $offerSentContent['language_id'] != '' ? $utility->languageName($offerSentContent['language_id']) : 'English');
                $documentDetails['sent_date'] = (isset($offerSentContent['created_date']) && $offerSentContent['created_date'] != '' && $offerSentContent['created_date'] != '0000-00-00 00:00:00' ? trim($offerSentContent['created_date']) : '');
                $documentDetails['signed_date'] = (isset($offerSentContent['signed_date']) && $offerSentContent['signed_date'] != '' && $offerSentContent['signed_date'] != '0000-00-00 00:00:00' ? trim($offerSentContent['signed_date']) : '');
                $documentDetails['due_date'] = (isset($offerSentContent['due_date']) && $offerSentContent['due_date'] != '' && $offerSentContent['due_date'] != '0000-00-00 00:00:00' ? trim(date('Y-m-d', strtotime($offerSentContent['due_date']))) : '');
                $documentDetails['status'] = (isset($offerSentContent['offer_status']) ? $utility->offerStatusName($offerSentContent['offer_status']) : '');

                $getAddOnObjectData = settings::where('user_id', $parent_id)->select('new_addon_obj')->first();
                $markCompleted = Offersent_data::where('sent_id', $offerSentContent['id'])->pluck('mark_completed');
                $multiCaseManagement = Offersent_data::where('sent_id', $offerSentContent['id'])->pluck('multi_case_management');
                $contractTypeId = Offersent_data::where('sent_id', $offerSentContent['id'])->pluck('contract_type_id');
                $markCompletedDate = Offersent_data::where('sent_id', $offerSentContent['id'])->pluck('mark_completed_date');

                /* Adding gross margin and total cost in Api response */
                $costmargin = "";
                $costmargin = Offersent_data::where('sent_id', '=', $offerSentContent['id'])->whereNotNull('document_cost')->whereNotNull('document_margin')->whereNotNull('document_price')->select('document_price', 'document_cost', 'document_margin')->first();

                
                if(!empty($getAddOnObjectData['new_addon_obj'])) {
                    $newAddonObjJesonDecode = json_decode($getAddOnObjectData['new_addon_obj'], true);
                    if(isset($newAddonObjJesonDecode['mark_as_completed_addon']) && $newAddonObjJesonDecode['mark_as_completed_addon'] == 1) {
                        if(isset($newAddonObjJesonDecode['mark_as_completed_addon_setting']) && !empty($newAddonObjJesonDecode['mark_as_completed_addon_setting'])) {
                            $markAsCompletedAddonSettingJsonDecode = json_decode($newAddonObjJesonDecode['mark_as_completed_addon_setting'], true);

                            $multiCaseManagementJsonDecode = (isset($multiCaseManagement) && !empty($multiCaseManagement) ? json_decode($multiCaseManagement, true) : []);
                            

                            //if(!empty($multiCaseManagementJsonDecode) || 1==1) {
                            if(!empty($multiCaseManagementJsonDecode)) {
                                if(isset($markAsCompletedAddonSettingJsonDecode['mark_tasks_array']) && !empty($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'])) {
                                    $numbetIncrement = 0;
                                    $flagForCompletedKey = false;
                                    $completeStatus = 'Not completed';
                                    foreach($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'] as $markAsCompletedAddonSettingJsonDecodeKey => $markAsCompletedAddonSettingJsonDecodeValue) {
                                        
                                        if(in_array($contractTypeId, $markAsCompletedAddonSettingJsonDecodeValue['contract_type_selected']) && (in_array($offerSentContent['offer_status'], $markAsCompletedAddonSettingJsonDecodeValue['marked_addon_status']) || in_array("", $markAsCompletedAddonSettingJsonDecodeValue['marked_addon_status']))) {
                                            $numbetIncrement++;
                                            $conditionalText = '';
                                            if(isset($multiCaseManagementJsonDecode[$numbetIncrement]) && !empty($multiCaseManagementJsonDecode[$numbetIncrement])) {
                                                if(isset($multiCaseManagementJsonDecode[$numbetIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numbetIncrement]['status_text'] == 'done') {
                                                    $conditionalText = 'Yes';
                                                } elseif(isset($multiCaseManagementJsonDecode[$numbetIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numbetIncrement]['status_text'] == 'in_process') {
                                                    $conditionalText = 'In process';
                                                } elseif(isset($multiCaseManagementJsonDecode[$numbetIncrement]['status_text']) && $multiCaseManagementJsonDecode[$numbetIncrement]['status_text'] == 'no') {
                                                    $conditionalText = 'No';
                                                }
                                                if(isset($multiCaseManagementJsonDecode[$numbetIncrement]['task_no']) && isset($markAsCompletedAddonSettingJsonDecode['mark_tasks_array'][$multiCaseManagementJsonDecode[$numbetIncrement]['task_no']])) {
                                                    $documentDetails[$markAsCompletedAddonSettingJsonDecode['mark_tasks_array'][$multiCaseManagementJsonDecode[$numbetIncrement]['task_no']]['tasknames']] = $conditionalText;
                                                    $flagForCompletedKey = true;
                                                } else {
                                                    if(isset($multiCaseManagementJsonDecode[$numbetIncrement]['task_no']) && $multiCaseManagementJsonDecode[$numbetIncrement]['task_no'] != '') {
                                                        $documentDetails[$markAsCompletedAddonSettingJsonDecodeValue['tasknames']] = 'No';
                                                        $flagForCompletedKey = true;
                                                    }
                                                }
                                            } else {
                                                if($markCompleted != 1) {
                                                    $documentDetails[$markAsCompletedAddonSettingJsonDecodeValue['tasknames']] = 'No';
                                                }
                                                $flagForCompletedKey = true;
                                            }
                                            if(isset($multiCaseManagementJsonDecode[$numbetIncrement]) && !empty($multiCaseManagementJsonDecode[$numbetIncrement]) && isset($multiCaseManagementJsonDecode[$numbetIncrement]['status_activity']) && !empty($multiCaseManagementJsonDecode[$numbetIncrement]['status_activity'])) {
                                                $flagForCompletedKey = true;
                                                //if(count($multiCaseManagementJsonDecode) == $isCompleted && $markAsCompletedAddonSettingJsonDecodeKey == count($markAsCompletedAddonSettingJsonDecode['mark_tasks_array']) -1) {
                                                if($markCompleted == 1) {
                                                    $completeStatus = $utility->changeTimeZone($markCompletedDate, 'Y-m-d H:i:s', 'UTC', $userTimeZone);
                                                }
                                            }   //status_activity
                                        }
                                    }
                                    //if(!empty($multiCaseManagementJsonDecode)) {
                                    if(!empty($flagForCompletedKey)) {
                                        $documentDetails['completed'] = $completeStatus;
                                    }
                                }
                            }
                        }
                    }
                }
                $documentDetails['pdf'] = $domain_name.'avtal/downloadpdf/'.$document_id.'/'.$uniqueId['unique_id'];
                $documentDetails['document_url'] = $domain_name.'document/view/'.$documentLink['id'].'/'.$documentLink['unique_id'];

                if ($costmargin != "") {
                    if ($costmargin['document_cost'] != "NULL") {
                        $documentDetails['document_cost'] =  $costmargin['document_cost'];
                    }

                    if ($costmargin['document_margin'] != "NULL") {
                        $documentDetails['document_margin'] =  $costmargin['document_margin'];
                    }

                    if ($costmargin['document_price'] != "NULL") {
                        $documentDetails['document_price'] =  $costmargin['document_price'];
                    }
                }
                //basic information of document details ending
                $responseArray['document_details'] = $documentDetails;
            }
            if(!isset($data['fromoverview'])) {
                $updatedIndexData = DB::table('document_indexdata')->where('document_id', $document_id)->get();
                if(!empty($updatedIndexData)) {
                    foreach($responseArray as $responseArrayKey => $responseArrayValue) { //loop on main array
                        if(is_numeric($responseArrayKey)) {
                            $recRole = $responseArray[$responseArrayKey]['details']['recipient_role'];
                            foreach($responseArrayValue as $responseArrayValueKey => $recValue) { //loop on numeric array
                                foreach($updatedIndexData as $updatedIndexDataKey => $updatedIndexDataValue) { // loop on array from database
                                    if($updatedIndexDataValue->rec_role == $recRole) {
                                        if($updatedIndexDataValue->object_type == $responseArrayValueKey) { //checking role condition
                                            $orginalFields = json_decode($updatedIndexDataValue->old_field, true);
                                            $newFields = json_decode($updatedIndexDataValue->new_field, true);
                                            $fieldName = array_keys($orginalFields)[0]; // getting field name orginal as it can't be changed from UI
                                            $updatedFieldValue = array_values($newFields)[0]; // getting updated values of that particular field
                                            $responseArray[$responseArrayKey][$responseArrayValueKey][$fieldName] = $updatedFieldValue; //assining values to the main object
                                        }
                                    }
                                }
                            }
                        } else {
                            foreach($updatedIndexData as $updatedIndexDataKey => $updatedIndexDataValue) { // loop on array from database
                                if($updatedIndexDataValue->object_type == $responseArrayKey) { //checking role condition
                                    $orginalFields = json_decode($updatedIndexDataValue->old_field, true);
                                    $newFields = json_decode($updatedIndexDataValue->new_field, true);
                                    $fieldName = array_keys($orginalFields)[0]; // getting field name orginal as it can't be changed from UI
                                    $updatedFieldValue = array_values($newFields)[0]; // getting updated values of that particular field
                                    $responseArray[$responseArrayKey][$fieldName] = $updatedFieldValue; //assining values to the main object
                                }
                            }
                        }
                    }
                }
            }
            $responseArray['customerId'] = $customerId;
            return response()->json(['status' => 'success', 'result' => $responseArray], 200, ['Content-Type' => 'application/json; charset=UTF-8'], JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
        } else {
            return Response::json(['status' => 'error', 'result' => 'No record(s) found']);
        }
    }
    
    public function postDologin() {
        $input = Input::all();
        $utility = new Utility;
        
        if($_SERVER['HTTP_HOST'] == 'acceptance.simplesign.io') {
            /* $headers = apache_request_headers();
            //$token = $headers['token'];
            print_rj($input);
            str_replace('Basic');
            print_rj(base64_decode($headers['Authorization']));
            print_rj(base64_decode('bXNob2FpYkB5b3BtYWlsLmNvbTp0ZXN0MTIzNA=='));
            print_rj($headers, 1); */
        }

        if(!isset($input['email']) || trim($input['email']) == "") {
            return Response::json(['status'=>'error','message'=>'email is missing']);
        } elseif(!isset($input['password']) || trim($input['password']) == "") {
            return Response::json(['status'=>'error','message'=>'password is missing']);
        } else {
            $email = trim($input['email']);
            $password = hash('sha256', trim($input['password']));
            $encrypted_email = Tcrypt::encrypter($email);

            $whereRaw = "(";
            $whereRaw .= 'CAST(AES_DECRYPT(`simplesign_users_login`.`email`,\''.env('ENCRYPT_KEY').'\', \''.env('ENCRYPT_IV').'\') AS CHAR) = ?';
            $whereRaw .= ")";
            DB::statement(' SET block_encryption_mode = \''.env('ENCRYPT_CIPHER').'\'');
            $CheckEMail = User::whereRaw($whereRaw, [$email])->select('id')->first();
            if(!$CheckEMail) {
                return Response::json(['status' => 'error', 'message' => 'Your email or password might be incorrect']);
            }
            
            $user = User::where(['password' => $password])->whereRaw($whereRaw, [$email])->select('id', 'is_active')->first();
            $getLoginAttemptData = Loginattempts::where('user_id', $CheckEMail['id'])->select('last_login_attempt', 'login_attempts')->first();
            $time = time();
            $fromDateTime = strtotime($getLoginAttemptData['last_login_attempt']);
            if($getLoginAttemptData['login_attempts'] == 6) {
                if(($time - $fromDateTime) < 1800) {
                    return Response::json(['status' => 'error', 'message' => 'Your account has been blocked for 30 minutes.']);
                } else {
                    Loginattempts::where('user_id', $CheckEMail['id'])->delete();
                }
            }
            
            if(($user && $user->is_active == 1) || ($user && $user->is_active == 2)) {
                $homeController = new homeController();
                $data = $homeController->setAuth($user->id);
                $utility->AddLastLoginLog('login', trim($input['password']));//Adding row to login logs
                
                if(isset($data->account_type) && $data->account_type == 1) {
                    $plan_type = 'Business Standard';
                } elseif(isset($data->account_type) && $data->account_type == 2) {
                    $plan_type = 'Business Flex';
                } else {
                    $plan_type = 'Free';
                }

                $is_paid = (isset($data->is_paid) && $data->is_paid == 1 ? 'Paid' : 'Free');
                $Result['id'] = $data->id;
                $Result['email'] = $email;
                $Result['created_date'] = $data->created_date;
                $Result['activation_date'] = $data->activation_date;
                $Result['is_active'] = $data->is_active;
                $Result['access_token'] = $data->super_access_token;
                if(!$utility->isSuperuser($data->id)) {
                    $Result['is_paid'] = $is_paid;
                }
                $Result['total_signatures'] = $data->extra_signature + $data->monthly_signature;
                $Result['total_sms'] = $data->total_remaing_sms;
                $Result['account_type'] = $plan_type;
                if($utility->isSuperuser($data->id)) {
                    $Result['total_signatures'] = 'Unlimited';
                    $Result['total_sms'] = 'Unlimited';
                    $Result['account_type'] = 'Super User';
                }
                $userInfoData = Userinfo::where('user_id', $user->id)->select('full_name', 'address', 'city', 'post_code')->first();
                $Result['name'] = (isset($userInfoData['full_name']) && $userInfoData['full_name'] != '' ? trim($userInfoData['full_name']) : '');
                $Result['address'] = (isset($userInfoData['address']) && $userInfoData['address'] != '' ? trim($userInfoData['address']) : '');
                $Result['city'] = (isset($userInfoData['city']) && $userInfoData['city'] != '' ? trim($userInfoData['city']) : '');
                $Result['zipcode'] = (isset($userInfoData['post_code']) && $userInfoData['post_code'] != '' ? trim($userInfoData['post_code']) : '');
                
                return Response::json(['status' => 'success', 'Result' => $Result]);
            } elseif($user && $user->is_active == 0) {
                return Response::json(['status' => 'error', 'message' => 'Your account is inactive, Contact support.', 'userid' => $user->id, 'error_code' => $user->is_active]);
            } elseif($user && $user->is_active == -1) {
                return Response::json(['status' => 'error', 'message' => 'Your Simplesign account is inactive, Contact support.', 'userid' => $user->id, 'error_code' => $user->is_active]);
            } else {
                if($getLoginAttemptData == null || ($time - $fromDateTime) < 1800) {
                    if($getLoginAttemptData) {
                        Loginattempts::where('user_id', $CheckEMail['id'])->update(['last_login_attempt' => date('Y-m-d H:i:s'), 'login_attempts' => ($getLoginAttemptData['login_attempts']+1)]);
                    } else {
                        Loginattempts::insertGetId(['user_id' => $CheckEMail['id'], 'login_attempts' => 1]);
                    }
                } else {
                    Loginattempts::where('user_id', $CheckEMail['id'])->delete();
                }
                return Response::json(['status' => 'error', 'message' => 'Your email or password might be incorrect.']);
            }
        }
    }
    
    public function copyTemplateForNewInvitedUsers($access_token) {
        $utility = new utility();
        $user_id = $utility->getUserIdByAuthToken($access_token);
        $isSu = $utility->getSu($user_id);
        // $parent_id = $utility->getParent($user_id);
        // $isParent = $utility->isParent($user_id);
        if ($isSu == 426 || $isSu == 410) {
            //32102
            if (!Offerdocs::where(['invite_user_temp_id' => 4040, 'user_id' => $user_id])->exists()) {
                $usertemplateController = new usertemplateController();
                //$templateIds = [42400,31113];
                $templateIds = [42400];
                foreach ($templateIds as $offer_id) {
                    $copyTemplateRequest = new Request();
                    $copyTemplateRequest->setMethod('POST');
                    $copyTemplateRequest->request->add(['template_id' => $offer_id]);
                    $copyTemplateRequest->request->add(['force_copy' => 1]);
                    $copyTemplateRequest->request->add(['access_token' => $access_token]);
                    $copyTemplateRequest->request->add(['static_temp_id' => 4040]);
                    $usertemplateController->postDuplicatetemplate($copyTemplateRequest);
                }
            }
            return 1;
        } else {
            return 0;
        }
    }

    public function postCreategroup() {
        $utility = new utility();
        $data = Input::all();
        $domain_name = asset('/');

        //access_token validation starting
        if(isset($data['access_token']) && $data['access_token'] != '') {
            $accessToken = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        }
        //access_token validation ending

        //group_name validation starting
        if(isset($data['group_name']) && $data['group_name'] != '') {
            $groupName = $data['group_name'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'group_name is missing']);
        }
        //group_name validation ending

        $userId = $utility->getUserIdByAuthToken($accessToken);
        if($userId > 0) {
            $parentId = $utility->getParent($userId);
            $dataInRecipientGroups['user_id'] = $userId;
            $dataInRecipientGroups['name'] = $groupName;
            $dataInRecipientGroups['created_at'] = date('Y-m-d H:i:s');

            $groupRoles = (isset($data['group_roles']) && $data['group_roles'] != '' ? json_decode($data['group_roles'], true) : []);
            if(!empty($groupRoles)) {
                $rolesName = [];
                foreach($groupRoles as $groupRolesKey => $groupRolesValue) {
                    array_push($rolesName, $groupRolesValue);
                }
                if(!empty($rolesName)) {
                    $dataInRecipientGroups['roles'] = json_encode($rolesName);
                }
            }

            if(isset($data['group_data']) && $data['group_data'] != '') {
                if($this->is_JSON($data['group_data'])) {
                    $groupDataJsonDecode = json_decode($data['group_data'], true);
                    if(!empty($groupDataJsonDecode)) {
                        $mainDataForPush = [];
                        $count = 1;
                        foreach($groupDataJsonDecode as $groupDataJsonDecodeKey => $groupDataJsonDecodeValue) {
                            if(count($groupDataJsonDecode[$count]) !== count($groupDataJsonDecodeValue) && count($groupDataJsonDecode[$count]) != 0) {
                                return Response::json(['status' => 'error', 'result' => 'key and value should be same in counting for all array']);
                            }
                            $dataArrayManipulation = [];
                            if(isset($groupDataJsonDecode[$groupDataJsonDecodeKey]) && is_array($groupDataJsonDecode[$groupDataJsonDecodeKey])) {
                                if($utility->arrayIsIndexedAssociativeOrMulti($groupDataJsonDecodeValue) == true) {
                                } else {
                                    return Response::json(['status' => 'error', 'result' => 'group_data should be associative array']);
                                }
                                foreach($groupDataJsonDecode[$groupDataJsonDecodeKey] as $anotherKey => $anotherValue) {
                                    /* if(empty($anotherKey)) {
                                        return Response::json(['status' => 'error', 'result' => "key is missing of $anotherValue value"]);
                                    } elseif(empty($anotherValue)) {
                                        return Response::json(['status' => 'error', 'result' => "value is missing of $anotherKey key"]);
                                    } elseif(!empty($anotherKey) && !empty($anotherValue)) {
                                        $dataArrayManipulation[$anotherKey] = $anotherValue;
                                    } */
                                    if(empty($anotherKey)) {
                                        return Response::json(['status' => 'error', 'result' => "key is missing"]);
                                    } elseif(!empty($anotherKey)) {
                                        $keyOrRoleNameWithKey = (!empty($groupRoles) ? $groupRoles[0].'.'.$anotherKey : $anotherKey);
                                        $dataArrayManipulation[$keyOrRoleNameWithKey] = (isset($anotherValue) && $anotherValue != '' ? $anotherValue : '');
                                    }
                                }
                            }
                            array_push($mainDataForPush, $dataArrayManipulation);
                        }
                    } else {
                        return Response::json(['status' => 'error', 'result' => 'group_data should not be empty']);
                    }
                } else {
                    return Response::json(['status' => 'error', 'result' => 'group_data is invalid format, JSON is required']);
                }
                if(!empty($mainDataForPush)) {
                    $dataInRecipientGroups['contacts'] = json_encode($mainDataForPush);
                    $dataInRecipientGroups['total_contacts'] = count($mainDataForPush);
                }
            }
            
            $groupId = RecipientsGroups::insertGetId($dataInRecipientGroups);
            return Response::json(['status' => 'success', 'result' => ['group_id' => $groupId]]);
        } else {
            return Response::json(['status' => 'error', 'result' => 'invalid access_token']);
        }
    }

    function getArrayKey($arrayData, $arrayKey, $arrayValue) {
        foreach($arrayData as $arrayDataKey => $arrayDataProduct) {
            if(isset($arrayDataProduct[$arrayKey]) && $arrayDataProduct[$arrayKey] === $arrayValue) {
                //return $arrayDataKey;
                return ['keyName' => $arrayKey, 'keyIndex' => $arrayDataKey];
            }
        }
        return false;
    }

    public function postUpdategroup() {
        $utility = new utility();
        $data = Input::all();
        $domain_name = asset('/');

        //access_token validation starting
        if(isset($data['access_token']) && $data['access_token'] != '') {
            $accessToken = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        }
        //access_token validation ending

        if(isset($data['group_data_id']) && $data['group_data_id'] != '') {
            $groupDataId = $data['group_data_id'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'group_data_id is missing']);
        }

        $updateVariable = '';
        if(isset($data['update']) && $data['update'] != '' && $data['update'] == 'updateall') {
            $updateVariable = 'updateall';
        } elseif(isset($data['update']) && $data['update'] != '' && $data['update'] == 'updaterow') {
            $updateVariable = 'updaterow';
        }

        $userId = $utility->getUserIdByAuthToken($accessToken);
        if($userId > 0) {
            $parentId = $utility->getParent($userId);
            $checkDataBelingsToUser = RecipientsGroups::where('user_id', $userId)->where('id', $groupDataId)->count();
            if($checkDataBelingsToUser) {
                if(isset($data['group_name']) && $data['group_name'] != '') {
                    $dataInRecipientGroups['name'] = $data['group_name'];
                }
                $dataInRecipientGroups['updated_at'] = date('Y-m-d H:i:s');

                $groupRoles = (isset($data['group_roles']) && $data['group_roles'] != '' ? json_decode($data['group_roles'], true) : []);
                if(!empty($groupRoles)) {
                    $rolesName = [];
                    foreach($groupRoles as $groupRolesKey => $groupRolesValue) {
                        array_push($rolesName, $groupRolesValue);
                    }
                    if(!empty($rolesName)) {
                        $dataInRecipientGroups['roles'] = json_encode($rolesName);
                    }
                }

                //group data object starting
                if(isset($data['group_data']) && $data['group_data'] != '') {
                    if($this->is_JSON($data['group_data'])) {
                        $groupDataJsonDecode = json_decode($data['group_data'], true);
                        if(!empty($groupDataJsonDecode)) {
                            $mainDataForPush = [];
                            $count = 1;
                            if($updateVariable == 'updateall' || $updateVariable == '') {
                                //update all data starting
                                foreach($groupDataJsonDecode as $groupDataJsonDecodeKey => $groupDataJsonDecodeValue) {
                                    if(count($groupDataJsonDecode[$count]) !== count($groupDataJsonDecodeValue) && count($groupDataJsonDecode[$count]) != 0) {
                                        return Response::json(['status' => 'error', 'result' => 'key and value should be same in counting for all array']);
                                    }
                                    $dataArrayManipulation = [];
                                    if(isset($groupDataJsonDecode[$groupDataJsonDecodeKey]) && is_array($groupDataJsonDecode[$groupDataJsonDecodeKey])) {
                                        if($utility->arrayIsIndexedAssociativeOrMulti($groupDataJsonDecodeValue) == true) {
                                        } else {
                                            return Response::json(['status' => 'error', 'result' => 'group_data should be associative array']);
                                        }
                                        foreach($groupDataJsonDecode[$groupDataJsonDecodeKey] as $anotherKey => $anotherValue) {
                                            if(empty($anotherKey)) {
                                                return Response::json(['status' => 'error', 'result' => "key is missing"]);
                                            } elseif(!empty($anotherKey)) {
                                                $keyOrRoleNameWithKey = (!empty($groupRoles) ? $groupRoles[0].'.'.$anotherKey : $anotherKey);
                                                $dataArrayManipulation[$keyOrRoleNameWithKey] = (isset($anotherValue) && $anotherValue != '' ? $anotherValue : '');
                                            }
                                        }
                                    }
                                    array_push($mainDataForPush, $dataArrayManipulation);
                                }
                                //update all data ending
                            } if($updateVariable != '' && $updateVariable == 'updaterow') {
                                $contactsData = RecipientsGroups::where('id', $groupDataId)->pluck('contacts');
                                if($contactsData != '') {
                                    $mainDataForPush = '';
                                    $contactsDataJsonDecode = json_decode($contactsData, true);
                                    foreach($groupDataJsonDecode as $groupDataJsonDecodeKey => $groupDataJsonDecodeValue) {
                                        if(count($groupDataJsonDecode[$count]) !== count($groupDataJsonDecodeValue) && count($groupDataJsonDecode[$count]) != 0) {
                                            return Response::json(['status' => 'error', 'result' => 'key and value should be same in counting for all array']);
                                        }
                                        foreach($groupDataJsonDecode[$groupDataJsonDecodeKey] as $innerLoopKey => $innerLoopValue) {
                                            if(!isset($groupDataJsonDecode[$groupDataJsonDecodeKey]['key_name']) || $groupDataJsonDecode[$groupDataJsonDecodeKey]['key_name'] == '') {
                                                return Response::json(['status' => 'error', 'result' => 'key_name is missing']);
                                            } if(!isset($groupDataJsonDecode[$groupDataJsonDecodeKey]['old_value']) || $groupDataJsonDecode[$groupDataJsonDecodeKey]['old_value'] == '') {
                                                return Response::json(['status' => 'error', 'result' => 'old_value is missing']);
                                            } /* if(!isset($groupDataJsonDecode[$groupDataJsonDecodeKey]['new_value']) || $groupDataJsonDecode[$groupDataJsonDecodeKey]['new_value'] == '') {
                                                return Response::json(['status' => 'error', 'result' => 'new_value is missing']);
                                            } */
                                            $getArrayNameAndIndex = $this->getArrayKey($contactsDataJsonDecode, $groupDataJsonDecode[$groupDataJsonDecodeKey]['key_name'], $groupDataJsonDecode[$groupDataJsonDecodeKey]['old_value']);
                                            if(!empty($getArrayNameAndIndex)) {
                                                $contactsDataJsonDecode[$getArrayNameAndIndex['keyIndex']][$getArrayNameAndIndex['keyName']] = (isset($groupDataJsonDecode[$groupDataJsonDecodeKey]['new_value']) && $groupDataJsonDecode[$groupDataJsonDecodeKey]['new_value'] != '' ? $groupDataJsonDecode[$groupDataJsonDecodeKey]['new_value'] : '');
                                            }
                                        }
                                    }
                                    $mainDataForPush = $contactsDataJsonDecode;
                                }
                            }
                        } else {
                            return Response::json(['status' => 'error', 'result' => 'group_data should not be empty']);
                        }
                    } else {
                        return Response::json(['status' => 'error', 'result' => 'group_data is invalid format, JSON is required']);
                    }
                    if(!empty($mainDataForPush)) {
                        $dataInRecipientGroups['contacts'] = json_encode($mainDataForPush);
                        $dataInRecipientGroups['total_contacts'] = count($mainDataForPush);
                    }
                }
                //group data object ending
                RecipientsGroups::where('id', $groupDataId)->update($dataInRecipientGroups);
                return Response::json(['status' => 'success', 'result' => 'record updated successfully']);
            } else {
                return Response::json(['status' => 'error', 'result' => 'invalid group_data_id or access_token']);
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'invalid access_token']);
        }
    }

    public function getRetrievegroup() {
        $utility = new utility();
        $data = Input::all();
        $domain_name = asset('/');

        //access_token validation starting
        if(isset($data['access_token']) && $data['access_token'] != '') {
            $accessToken = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        }
        //access_token validation ending

        $userId = $utility->getUserIdByAuthToken($accessToken);
        if($userId > 0) {
            $parentId = $utility->getParent($userId);
            if($utility->isParent($userId) == 1) {
                $allUserIds = $utility->getSubusers($parentId);
            } else {
                $allUserIds = [$userId];
            }

            $recipientGroupsModal = new RecipientsGroups();
            if(isset($data['group_contact_id']) && $data['group_contact_id'] != 0) {
                $recipientGroupsModal = $recipientGroupsModal->where('id', $data['group_contact_id']);
            }
            
            $getReipientsGroups = $recipientGroupsModal->whereIn('user_id', $allUserIds)->select('id', 'name', 'roles', 'contacts')->orderBy('id', 'DESC')->get()->toArray();
            if($getReipientsGroups) {
                foreach($getReipientsGroups as $getReipientsGroupsKey => $getReipientsGroupsValue) {
                    $getReipientsGroups[$getReipientsGroupsKey]['group_contact_id'] = $getReipientsGroupsValue['id'];
                    $getReipientsGroups[$getReipientsGroupsKey]['roles'] = (!empty($getReipientsGroupsValue['roles']) ? $getReipientsGroupsValue['roles'] : '');
                    $getReipientsGroups[$getReipientsGroupsKey]['group_contact_data'] = (!empty($getReipientsGroupsValue['contacts']) ? $getReipientsGroupsValue['contacts'] : '');
                    unset($getReipientsGroups[$getReipientsGroupsKey]['id']);   //unset the column id key cause it was showing with group_contact_id key name
                    unset($getReipientsGroups[$getReipientsGroupsKey]['contacts']);   //unset the column contacts key cause it was showing with contacts key name
                }
                return Response::json(['status' => 'success', 'result' => $getReipientsGroups]);
            } else {
                return Response::json(['status' => 'error', 'result' => 'no record found']);
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'invalid access_token']);
        }
    }

    public function postDeletegroups() {
        $utility = new utility();
        $data = Input::all();
        $domain_name = asset('/');

        //access_token validation starting
        if(isset($data['access_token']) && $data['access_token'] != '') {
            $accessToken = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        }
        //access_token validation ending

        $userId = $utility->getUserIdByAuthToken($accessToken);
        if($userId > 0) {
            $parentId = $utility->getParent($userId);
            if($utility->isParent($userId) == 1) {
                $allUserIds = $utility->getSubusers($parentId);
            } else {
                $allUserIds = [$userId];
            }

            if(isset($data['group_data_id']) && $data['group_data_id'] != '') {
                if($this->is_JSON($data['group_data_id'])) {
                    $groupDataId = json_decode($data['group_data_id'], true);
                    if(!empty($groupDataId)) {
                        if(is_array($groupDataId)) {
                            foreach($groupDataId as $groupDataIdKey => $groupDataIdValue) {
                                if(is_numeric($groupDataIdValue)) {
                                    $checkDataBelingsToUser = RecipientsGroups::where('user_id', $userId)->where('id', $groupDataIdValue)->count();
                                    if(!$checkDataBelingsToUser) {
                                        return Response::json(['status' => 'error', 'result' => 'group_data_id or access token is invalid']);
                                    }
                                } else {
                                    return Response::json(['status' => 'error', 'result' => 'group_data_id should be numeric']);
                                }
                            }
                        } else {
                            return Response::json(['status' => 'error', 'result' => 'group_data_id is not an array']);
                        }
                    } else {
                        return Response::json(['status' => 'error', 'result' => 'group_data_id should not be empty']);
                    }
                } else {
                    return Response::json(['status' => 'error', 'result' => 'group_data_id information is invalid format, JSON is required']);
                }
            } else {
                return Response::json(['status' => 'error', 'result' => 'group_data_id is missing']);
            }

            $deleteResponseArray = [];
            foreach($groupDataId as $groupDataIdKey => $groupDataIdValue) {
                $deleteRecords = RecipientsGroups::where('id', $groupDataIdValue)->where('user_id', $userId)->delete();
                if($deleteRecords) {
                    array_push($deleteResponseArray, $deleteRecords);
                }
            }
            
            if($deleteResponseArray) {
                return Response::json(['status'=>'success','result' => 'Group data deleted successfully']);
            } else {
                return Response::json(['status' => 'success', 'result' => 'Something went wrong']);
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'invalid access_token']);
        }
    }

    public function getContractcontrol(Request $request) {
        $utility = new utility();
        $data = $request->all();
        $domain_name = asset('/');

        //access_token validation starting
        if(isset($data['access_token']) && $data['access_token'] != '') {
            $accessToken = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        }
        //access_token validation ending

        $userId = $utility->getUserIdByAuthToken($accessToken);
        if($userId > 0) {
            $parentId = $utility->getParent($userId);
            $userSettings = $utility->getUserSettings($parentId);
            $archiveContractControlAddonPermission = (isset($userSettings['archive_contract_control']) && $userSettings['archive_contract_control'] == 1 ? $userSettings['archive_contract_control'] : 0);
            if($archiveContractControlAddonPermission != 1) {
                return Response::json(['status'=>'error','result' => 'contract control feature is not enabled on your account, Contact Simplesign support for contract control activation']);
            }
            if($utility->isParent($userId) == 1) {
                $allUserIds = $utility->getSubusers($parentId);
            } else {
                $allUserIds = [$userId];
            }
            $contractControl = new contractcontrolController();
            //$request['user_id'] = $userId;
            $recordLimit = (isset($data['page_limit']) && $data['page_limit'] != '' ? $data['page_limit'] : 10);
            $currentPage = 1;
            if(isset($data['current_page']) && $data['current_page'] != '') {
                $currentPage = $data['current_page'];
                $request['page'] = $currentPage;
            }
            $request->request->add(['user_id' => $userId, 'name' => '', 'pagelimit' => $recordLimit, 'current_page' => $currentPage]);
            $optimizelisting = $contractControl->postOptimizelisting($request);
            $getContractControlContent = $optimizelisting->getContent();
            if($getContractControlContent) {
                $jsonDecode = json_decode($getContractControlContent, true);
                if(!empty($jsonDecode['result'])) {
                    $indexLoop = 0;
                    $responseArray = [];
                    foreach($jsonDecode['result'] as $resultKey => $resultValue) {
                        $responseArray[$indexLoop]['contract_control_name'] = (isset($resultValue['contract_name']) && $resultValue['contract_name'] != '' ? $resultValue['contract_name'] : '');
                        $responseArray[$indexLoop]['contract_control_type'] = (isset($resultValue['type_name']) && $resultValue['type_name'] != '' ? $resultValue['type_name'] : '');
                        $responseArray[$indexLoop]['contract_control_category'] = (isset($resultValue['category_name']) && $resultValue['category_name'] != '' ? $resultValue['category_name'] : '');
                        $responseArray[$indexLoop]['contract_control_company'] = (isset($resultValue['name']) && $resultValue['name'] != '' ? $resultValue['name'] : '');
                        $responseArray[$indexLoop]['start_date'] = (isset($resultValue['start_date']) && $resultValue['start_date'] != '' ? $resultValue['start_date'] : '');
                        $responseArray[$indexLoop]['end_date'] = (isset($resultValue['end_date']) && $resultValue['end_date'] != '' ? $resultValue['end_date'] : '');
                        $indexLoop++;
                    }
                    return response()->json(['status' => 'success', 'result' => $responseArray], 200, ['Content-Type' => 'application/json; charset=UTF-8'], JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
                } else {
                    return Response::json(['status' => 'error', 'result' => 'no record(s) found']);
                }
            } else {
                return Response::json(['status' => 'error', 'result' => 'no response']);
            }
        } else {
            return Response::json(['status' => 'error', 'result' => 'invalid access_token']);
        }
    }

    public function postCreatecontractcontrol(Request $request) {
        $utility = new utility();
        $data = $request->all();
        $domain_name = asset('/');

        //access_token validation starting
        if(isset($data['access_token']) && $data['access_token'] != '') {
            $accessToken = $data['access_token'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'access_token is missing']);
        }
        //access_token validation ending

        if(isset($data['contract_control_name']) && $data['contract_control_name'] != '') {
            $contractControlName = $data['contract_control_name'];
        } else {
            return Response::json(['status' => 'error', 'result' => 'contract_control_name is missing']);
        }

        $userId = $utility->getUserIdByAuthToken($accessToken);
        if($userId > 0) {
            //$parentId = $utility->getParent($userId);
            $contractControl = new contractcontrolController();
            $request['access_token'] = $accessToken;
            $postGetContractTypes = $contractControl->postGetcontracttypes($request);
            $getData = $postGetContractTypes->getData();
            print_rj($getData);
            if(!empty($getData->result)) {
                $arrayNameSearchKey = array_search($contractControlName, array_column($getData->result, 'type_name'));
                //print_rj($arrayNameSearchKey);
                print_rj($contractControlName);
                print_rj($getData->result[$arrayNameSearchKey]->type_name);
                if(isset($getData->result[$arrayNameSearchKey]->type_name) && $getData->result[$arrayNameSearchKey]->type_name == $contractControlName) {
                    print_rj('if');
                } else {
                    print_rj('else');
                }
                print_rj($getData->result, 1);
            } else {
                print_rj('37908');
            }
            //$parent = $check = 0;
            /* $usersettings = User::where('id', $parentId)->select('user_premission_group')->first();
            $userRolePermission = $utility->getUserGroupsRole($usersettings->user_premission_group, $parentId);print_rj($usersettings);print_rj($userRolePermission);
            if($parentId == 0) {
                print_rj('37895');
                $parent = 1;
            } else {
                print_rj('37898');
                $parent = $check = $count = 0;
                $types = [];
                foreach($userRolePermission as $key => $permission) {
                    print_rj('37902');
                    if($permission['contract_types_group'] != [] && sizeof($permission['contract_types_group']) > 0) {
                        print_rj('37904');
                        foreach($permission['contract_types_group'] as $key => $contract_types_group) {
                            print_rj('37906');
                            if($contract_types_group == '0') {
                                print_rj('37908');
                                $check = 1;
                            } else {
                                print_rj('37911');
                                $types[$count] = $contract_types_group;
                                $count++;
                            }
                        }
                    }
                }
                print_rj('37918');
                $types = array_unique($types);
                print_rj($types);
            }
            
            if($parent == 1 || $check == 1) {
                print_rj('37924');
                $contractsTypes = DB::table('archive_document_types')->select('id')->where('type_name', $contractControlName)->where('user_id', $parentId)->get();
            } elseif(sizeof($types) > 0) {
                print_rj('37927');
                $contractsTypes = DB::table('archive_document_types')->select('id')->where('type_name', $contractControlName)->whereIn('id', $types)->get();
            }
            die;
            print_rj($contractsTypes, 1); */
        } else {
            return Response::json(['status' => 'error', 'result' => 'invalid access_token']);
        }
    }
}